/*
 *  GNSSPVT
 *
 *  Created on: May 20, 2022
 *  Author: Jackson-E15Gen3
 */

#include "main.h"
#include "GNSSPVT.h"
#include <stdio.h>
#include <stdbool.h>
#include <stdint.h>

#define gnssFixOKmask 0x01
#define timeFullyResolved 0x01

//Parsing stuff
const uint8_t UBX_HEADER_[2] = { 0xB5, 0x62 };
const uint8_t UBX_HEADER_LEN_ = 6;
const uint8_t UBX_PAYLOAD_OFFSET_ = 4;
const uint8_t UBX_NAV_CLASS_ = 0x01;
const uint8_t UBX_NAV_PVT = 0x07;
const uint8_t UBX_PVT_LEN_ = 92;
uint16_t parser_pos_ = 0;
uint8_t msg_len_buffer_[2];
uint16_t msg_len_;
uint8_t checksum_buffer_[2];
uint8_t rx_buffer_[96];
struct {
	uint32_t itow;
	uint16_t year;
	uint8_t month;
	uint8_t day;
	uint8_t hour;
	uint8_t min;
	uint8_t sec;
	uint8_t valid;
	uint32_t tacc;
	int32_t nano;
	uint8_t fix;
	uint8_t flags;
	uint8_t flags2;
	uint8_t numsv;
	int32_t lon_deg;
	int32_t lat_deg;
	int32_t height;
	int32_t hmsl;
	uint32_t hacc;
	uint32_t vacc;
	int32_t veln;
	int32_t vele;
	int32_t veld;
	int32_t gspeed;
	int32_t headmot;
	uint32_t sacc;
	uint32_t headacc;
	uint16_t pdop;
	uint8_t flags3;
	uint8_t reserved1[5];
	int32_t headveh;
	int16_t magdec;
	uint16_t magacc;
} ubx_nav_pvt;

//Public Functions
void GNSS_Setup(GNSS_rate newRate) {

}

//Time
uint16_t GNSS_getYear() {
	return ubx_nav_pvt.year;
}
uint8_t GNSS_getMonth() {
	return ubx_nav_pvt.month;
}
uint8_t GNSS_getDay() {
	return ubx_nav_pvt.day;
}
uint8_t GNSS_getHour() {
	return ubx_nav_pvt.hour;
}
uint8_t GNSS_getMin() {
	return ubx_nav_pvt.min;
}
uint8_t GNSS_getSec() {
	return ubx_nav_pvt.sec;
}

//Location
double getLongitude_deg() {
	return (double) ubx_nav_pvt.lon_deg / 10000000.0;
}
double getLatitude_deg() {
	return (double) ubx_nav_pvt.lat_deg / 10000000.0;
}
double getMSLHeight_m() {
	return (double) ubx_nav_pvt.hmsl / 1000.0;
}
double getHorizontalAccuracy_m() {
	return (double) ubx_nav_pvt.hacc / 1000.0;
}
double getGroundSpeed_kph() {
	return (double) ubx_nav_pvt.gspeed * ((1000.0 * 1000.0) / 3600.0);
}
double getMotionHeading_deg() {
	return (double) ubx_nav_pvt.headmot / 10000.0;
}

//Status
uint8_t getNumSatellites() {
	return ubx_nav_pvt.numsv;
}
GNSS_FixType getFixType() {
	return (GNSS_FixType) ubx_nav_pvt.fix;
}
bool isGnssFixOk() {
	return ubx_nav_pvt.flags & gnssFixOKmask;
}
bool isTimeFullyResolved() {
	return ubx_nav_pvt.flags & gnssFixOKmask;
}
