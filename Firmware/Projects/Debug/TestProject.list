
TestProject.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000013c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000701c  0800013c  0800013c  0001013c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000028c  08007158  08007158  00017158  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  080073e4  080073e4  000173e4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  080073e8  080073e8  000173e8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         00000024  20000004  080073ec  00020004  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 TIMERSERVER_CONTEXT 00000099  20000028  08007410  00020028  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 BLE_DRIVER_CONTEXT 0000003d  200000c4  080074a9  000200c4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 SYSTEM_DRIVER_CONTEXT 00000011  20000104  080074e6  00020104  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 BLE_APP_CONTEXT 00000088  20000118  080074f7  00020118  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 .bss          000001b0  200001a0  0800757f  000201a0  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20000350  0800757f  00020350  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  000201a0  2**0
                  CONTENTS, READONLY
 13 MAPPING_TABLE 00000028  20030000  20030000  00030000  2**2
                  ALLOC
 14 MB_MEM1       000001b7  20030028  20030028  00030000  2**2
                  ALLOC
 15 MB_MEM2       00000877  200301e0  200301e0  00030000  2**2
                  ALLOC
 16 .debug_info   00033d49  00000000  00000000  000201d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_abbrev 00005eb2  00000000  00000000  00053f19  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_aranges 00002218  00000000  00000000  00059dd0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_ranges 00001fb0  00000000  00000000  0005bfe8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_macro  0002ac87  00000000  00000000  0005df98  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line   000229a8  00000000  00000000  00088c1f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_str    000ef640  00000000  00000000  000ab5c7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 23 .comment      00000053  00000000  00000000  0019ac07  2**0
                  CONTENTS, READONLY
 24 .debug_frame  00008bb4  00000000  00000000  0019ac5c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800013c <__do_global_dtors_aux>:
 800013c:	b510      	push	{r4, lr}
 800013e:	4c05      	ldr	r4, [pc, #20]	; (8000154 <__do_global_dtors_aux+0x18>)
 8000140:	7823      	ldrb	r3, [r4, #0]
 8000142:	b933      	cbnz	r3, 8000152 <__do_global_dtors_aux+0x16>
 8000144:	4b04      	ldr	r3, [pc, #16]	; (8000158 <__do_global_dtors_aux+0x1c>)
 8000146:	b113      	cbz	r3, 800014e <__do_global_dtors_aux+0x12>
 8000148:	4804      	ldr	r0, [pc, #16]	; (800015c <__do_global_dtors_aux+0x20>)
 800014a:	f3af 8000 	nop.w
 800014e:	2301      	movs	r3, #1
 8000150:	7023      	strb	r3, [r4, #0]
 8000152:	bd10      	pop	{r4, pc}
 8000154:	200001a0 	.word	0x200001a0
 8000158:	00000000 	.word	0x00000000
 800015c:	08007140 	.word	0x08007140

08000160 <frame_dummy>:
 8000160:	b508      	push	{r3, lr}
 8000162:	4b03      	ldr	r3, [pc, #12]	; (8000170 <frame_dummy+0x10>)
 8000164:	b11b      	cbz	r3, 800016e <frame_dummy+0xe>
 8000166:	4903      	ldr	r1, [pc, #12]	; (8000174 <frame_dummy+0x14>)
 8000168:	4803      	ldr	r0, [pc, #12]	; (8000178 <frame_dummy+0x18>)
 800016a:	f3af 8000 	nop.w
 800016e:	bd08      	pop	{r3, pc}
 8000170:	00000000 	.word	0x00000000
 8000174:	200001a4 	.word	0x200001a4
 8000178:	08007140 	.word	0x08007140

0800017c <strlen>:
 800017c:	4603      	mov	r3, r0
 800017e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000182:	2a00      	cmp	r2, #0
 8000184:	d1fb      	bne.n	800017e <strlen+0x2>
 8000186:	1a18      	subs	r0, r3, r0
 8000188:	3801      	subs	r0, #1
 800018a:	4770      	bx	lr

0800018c <APPD_EnableCPU2>:
/* USER CODE END APPD_Init */
  return;
}

void APPD_EnableCPU2( void )
{
 800018c:	b5b0      	push	{r4, r5, r7, lr}
 800018e:	b088      	sub	sp, #32
 8000190:	af00      	add	r7, sp, #0
/* USER CODE BEGIN APPD_EnableCPU2 */
  SHCI_C2_DEBUG_Init_Cmd_Packet_t DebugCmdPacket =
 8000192:	4b0b      	ldr	r3, [pc, #44]	; (80001c0 <APPD_EnableCPU2+0x34>)
 8000194:	1d3c      	adds	r4, r7, #4
 8000196:	461d      	mov	r5, r3
 8000198:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800019a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800019c:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80001a0:	c403      	stmia	r4!, {r0, r1}
 80001a2:	8022      	strh	r2, [r4, #0]
 80001a4:	3402      	adds	r4, #2
 80001a6:	0c13      	lsrs	r3, r2, #16
 80001a8:	7023      	strb	r3, [r4, #0]
    NBR_OF_TRACES_CONFIG_PARAMETERS,
    NBR_OF_GENERAL_CONFIG_PARAMETERS}
  };

  /**< Traces channel initialization */
  TL_TRACES_Init( );
 80001aa:	f005 fed5 	bl	8005f58 <TL_TRACES_Init>

  /** GPIO DEBUG Initialization */
  SHCI_C2_DEBUG_Init( &DebugCmdPacket  );
 80001ae:	1d3b      	adds	r3, r7, #4
 80001b0:	4618      	mov	r0, r3
 80001b2:	f005 f9e2 	bl	800557a <SHCI_C2_DEBUG_Init>

/* USER CODE END APPD_EnableCPU2 */
  return;
 80001b6:	bf00      	nop
}
 80001b8:	3720      	adds	r7, #32
 80001ba:	46bd      	mov	sp, r7
 80001bc:	bdb0      	pop	{r4, r5, r7, pc}
 80001be:	bf00      	nop
 80001c0:	08007158 	.word	0x08007158

080001c4 <LL_PWR_SMPS_Enable>:
  *         @ref LL_PWR_SMPS_SetMode() should be used instead.
  * @rmtoll CR5          SMPSEN        LL_PWR_SMPS_Enable
  * @retval None
  */
__STATIC_INLINE void LL_PWR_SMPS_Enable(void)
{
 80001c4:	b480      	push	{r7}
 80001c6:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR5, PWR_CR5_SMPSEN);
 80001c8:	4b05      	ldr	r3, [pc, #20]	; (80001e0 <LL_PWR_SMPS_Enable+0x1c>)
 80001ca:	69db      	ldr	r3, [r3, #28]
 80001cc:	4a04      	ldr	r2, [pc, #16]	; (80001e0 <LL_PWR_SMPS_Enable+0x1c>)
 80001ce:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80001d2:	61d3      	str	r3, [r2, #28]
}
 80001d4:	bf00      	nop
 80001d6:	46bd      	mov	sp, r7
 80001d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80001dc:	4770      	bx	lr
 80001de:	bf00      	nop
 80001e0:	58000400 	.word	0x58000400

080001e4 <LL_PWR_SMPS_SetStartupCurrent>:
  *         @arg @ref LL_PWR_SMPS_STARTUP_CURRENT_200MA
  *         @arg @ref LL_PWR_SMPS_STARTUP_CURRENT_220MA
  * @retval None
  */
__STATIC_INLINE void LL_PWR_SMPS_SetStartupCurrent(uint32_t StartupCurrent)
{
 80001e4:	b480      	push	{r7}
 80001e6:	b083      	sub	sp, #12
 80001e8:	af00      	add	r7, sp, #0
 80001ea:	6078      	str	r0, [r7, #4]
  MODIFY_REG(PWR->CR5, PWR_CR5_SMPSSC, StartupCurrent);
 80001ec:	4b06      	ldr	r3, [pc, #24]	; (8000208 <LL_PWR_SMPS_SetStartupCurrent+0x24>)
 80001ee:	69db      	ldr	r3, [r3, #28]
 80001f0:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80001f4:	4904      	ldr	r1, [pc, #16]	; (8000208 <LL_PWR_SMPS_SetStartupCurrent+0x24>)
 80001f6:	687b      	ldr	r3, [r7, #4]
 80001f8:	4313      	orrs	r3, r2
 80001fa:	61cb      	str	r3, [r1, #28]
}
 80001fc:	bf00      	nop
 80001fe:	370c      	adds	r7, #12
 8000200:	46bd      	mov	sp, r7
 8000202:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000206:	4770      	bx	lr
 8000208:	58000400 	.word	0x58000400

0800020c <LL_PWR_SMPS_SetOutputVoltageLevel>:
  *         @arg @ref LL_PWR_SMPS_OUTPUT_VOLTAGE_1V85
  *         @arg @ref LL_PWR_SMPS_OUTPUT_VOLTAGE_1V90
  * @retval None
  */
__STATIC_INLINE void LL_PWR_SMPS_SetOutputVoltageLevel(uint32_t OutputVoltageLevel)
{
 800020c:	b480      	push	{r7}
 800020e:	b087      	sub	sp, #28
 8000210:	af00      	add	r7, sp, #0
 8000212:	6078      	str	r0, [r7, #4]
  __IO const uint32_t OutputVoltageLevel_calibration = (((*SMPS_VOLTAGE_CAL_ADDR) & SMPS_VOLTAGE_CAL) >> SMPS_VOLTAGE_CAL_POS);  /* SMPS output voltage level calibrated in production */
 8000214:	4b18      	ldr	r3, [pc, #96]	; (8000278 <LL_PWR_SMPS_SetOutputVoltageLevel+0x6c>)
 8000216:	681b      	ldr	r3, [r3, #0]
 8000218:	0a1b      	lsrs	r3, r3, #8
 800021a:	f003 030f 	and.w	r3, r3, #15
 800021e:	60fb      	str	r3, [r7, #12]
  int32_t TrimmingSteps;                               /* Trimming steps between theoretical output voltage and calibrated output voltage */
  int32_t OutputVoltageLevelTrimmed;                   /* SMPS output voltage level after calibration: trimming value added to required level */

  if(OutputVoltageLevel_calibration == 0UL)
 8000220:	68fb      	ldr	r3, [r7, #12]
 8000222:	2b00      	cmp	r3, #0
 8000224:	d108      	bne.n	8000238 <LL_PWR_SMPS_SetOutputVoltageLevel+0x2c>
  {
    /* Device with SMPS output voltage not calibrated in production: Apply output voltage value directly */
    
    /* Update register */
    MODIFY_REG(PWR->CR5, PWR_CR5_SMPSVOS, OutputVoltageLevel);
 8000226:	4b15      	ldr	r3, [pc, #84]	; (800027c <LL_PWR_SMPS_SetOutputVoltageLevel+0x70>)
 8000228:	69db      	ldr	r3, [r3, #28]
 800022a:	f023 020f 	bic.w	r2, r3, #15
 800022e:	4913      	ldr	r1, [pc, #76]	; (800027c <LL_PWR_SMPS_SetOutputVoltageLevel+0x70>)
 8000230:	687b      	ldr	r3, [r7, #4]
 8000232:	4313      	orrs	r3, r2
 8000234:	61cb      	str	r3, [r1, #28]
    }

    /* Update register */
    MODIFY_REG(PWR->CR5, PWR_CR5_SMPSVOS, (uint32_t)OutputVoltageLevelTrimmed);
  }
}
 8000236:	e019      	b.n	800026c <LL_PWR_SMPS_SetOutputVoltageLevel+0x60>
    TrimmingSteps = ((int32_t)OutputVoltageLevel_calibration - (int32_t)(LL_PWR_SMPS_OUTPUT_VOLTAGE_1V50 >> PWR_CR5_SMPSVOS_Pos));
 8000238:	68fb      	ldr	r3, [r7, #12]
 800023a:	3b06      	subs	r3, #6
 800023c:	613b      	str	r3, [r7, #16]
    OutputVoltageLevelTrimmed = ((int32_t)((uint32_t)(OutputVoltageLevel >> PWR_CR5_SMPSVOS_Pos)) + (int32_t)TrimmingSteps);
 800023e:	687b      	ldr	r3, [r7, #4]
 8000240:	693a      	ldr	r2, [r7, #16]
 8000242:	4413      	add	r3, r2
 8000244:	617b      	str	r3, [r7, #20]
    if(OutputVoltageLevelTrimmed < 0)
 8000246:	697b      	ldr	r3, [r7, #20]
 8000248:	2b00      	cmp	r3, #0
 800024a:	da02      	bge.n	8000252 <LL_PWR_SMPS_SetOutputVoltageLevel+0x46>
      OutputVoltageLevelTrimmed = 0;
 800024c:	2300      	movs	r3, #0
 800024e:	617b      	str	r3, [r7, #20]
 8000250:	e004      	b.n	800025c <LL_PWR_SMPS_SetOutputVoltageLevel+0x50>
      if(OutputVoltageLevelTrimmed > (int32_t)PWR_CR5_SMPSVOS)
 8000252:	697b      	ldr	r3, [r7, #20]
 8000254:	2b0f      	cmp	r3, #15
 8000256:	dd01      	ble.n	800025c <LL_PWR_SMPS_SetOutputVoltageLevel+0x50>
        OutputVoltageLevelTrimmed = (int32_t)PWR_CR5_SMPSVOS;
 8000258:	230f      	movs	r3, #15
 800025a:	617b      	str	r3, [r7, #20]
    MODIFY_REG(PWR->CR5, PWR_CR5_SMPSVOS, (uint32_t)OutputVoltageLevelTrimmed);
 800025c:	4b07      	ldr	r3, [pc, #28]	; (800027c <LL_PWR_SMPS_SetOutputVoltageLevel+0x70>)
 800025e:	69db      	ldr	r3, [r3, #28]
 8000260:	f023 020f 	bic.w	r2, r3, #15
 8000264:	697b      	ldr	r3, [r7, #20]
 8000266:	4905      	ldr	r1, [pc, #20]	; (800027c <LL_PWR_SMPS_SetOutputVoltageLevel+0x70>)
 8000268:	4313      	orrs	r3, r2
 800026a:	61cb      	str	r3, [r1, #28]
}
 800026c:	bf00      	nop
 800026e:	371c      	adds	r7, #28
 8000270:	46bd      	mov	sp, r7
 8000272:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000276:	4770      	bx	lr
 8000278:	1fff7558 	.word	0x1fff7558
 800027c:	58000400 	.word	0x58000400

08000280 <LL_C2_PWR_SetPowerMode>:
  *
  *         (*) Not available on devices STM32WB15xx, STM32WB10xx
  * @retval None
  */
__STATIC_INLINE void LL_C2_PWR_SetPowerMode(uint32_t LowPowerMode)
{
 8000280:	b480      	push	{r7}
 8000282:	b083      	sub	sp, #12
 8000284:	af00      	add	r7, sp, #0
 8000286:	6078      	str	r0, [r7, #4]
  MODIFY_REG(PWR->C2CR1, PWR_C2CR1_LPMS, LowPowerMode);
 8000288:	4b07      	ldr	r3, [pc, #28]	; (80002a8 <LL_C2_PWR_SetPowerMode+0x28>)
 800028a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800028e:	f023 0207 	bic.w	r2, r3, #7
 8000292:	4905      	ldr	r1, [pc, #20]	; (80002a8 <LL_C2_PWR_SetPowerMode+0x28>)
 8000294:	687b      	ldr	r3, [r7, #4]
 8000296:	4313      	orrs	r3, r2
 8000298:	f8c1 3080 	str.w	r3, [r1, #128]	; 0x80
}
 800029c:	bf00      	nop
 800029e:	370c      	adds	r7, #12
 80002a0:	46bd      	mov	sp, r7
 80002a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002a6:	4770      	bx	lr
 80002a8:	58000400 	.word	0x58000400

080002ac <LL_EXTI_EnableIT_32_63>:
  *         @arg @ref LL_EXTI_LINE_ALL_32_63
  *         (*) value not defined in all devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableIT_32_63(uint32_t ExtiLine)
{
 80002ac:	b480      	push	{r7}
 80002ae:	b083      	sub	sp, #12
 80002b0:	af00      	add	r7, sp, #0
 80002b2:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR2, ExtiLine);
 80002b4:	4b06      	ldr	r3, [pc, #24]	; (80002d0 <LL_EXTI_EnableIT_32_63+0x24>)
 80002b6:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 80002ba:	4905      	ldr	r1, [pc, #20]	; (80002d0 <LL_EXTI_EnableIT_32_63+0x24>)
 80002bc:	687b      	ldr	r3, [r7, #4]
 80002be:	4313      	orrs	r3, r2
 80002c0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
}
 80002c4:	bf00      	nop
 80002c6:	370c      	adds	r7, #12
 80002c8:	46bd      	mov	sp, r7
 80002ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002ce:	4770      	bx	lr
 80002d0:	58000800 	.word	0x58000800

080002d4 <LL_RCC_HSE_SetCapacitorTuning>:
  * @rmtoll HSECR        HSETUNE       LL_RCC_HSE_SetCapacitorTuning
  * @param  Value Between Min_Data = 0 and Max_Data = 63
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSE_SetCapacitorTuning(uint32_t Value)
{
 80002d4:	b480      	push	{r7}
 80002d6:	b083      	sub	sp, #12
 80002d8:	af00      	add	r7, sp, #0
 80002da:	6078      	str	r0, [r7, #4]
  WRITE_REG(RCC->HSECR, HSE_CONTROL_UNLOCK_KEY);
 80002dc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80002e0:	4a0a      	ldr	r2, [pc, #40]	; (800030c <LL_RCC_HSE_SetCapacitorTuning+0x38>)
 80002e2:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
  MODIFY_REG(RCC->HSECR, RCC_HSECR_HSETUNE, Value << RCC_HSECR_HSETUNE_Pos);
 80002e6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80002ea:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80002ee:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 80002f2:	687b      	ldr	r3, [r7, #4]
 80002f4:	021b      	lsls	r3, r3, #8
 80002f6:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80002fa:	4313      	orrs	r3, r2
 80002fc:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
}
 8000300:	bf00      	nop
 8000302:	370c      	adds	r7, #12
 8000304:	46bd      	mov	sp, r7
 8000306:	f85d 7b04 	ldr.w	r7, [sp], #4
 800030a:	4770      	bx	lr
 800030c:	cafecafe 	.word	0xcafecafe

08000310 <LL_RCC_SetClkAfterWakeFromStop>:
  *         @arg @ref LL_RCC_STOP_WAKEUPCLOCK_MSI
  *         @arg @ref LL_RCC_STOP_WAKEUPCLOCK_HSI
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetClkAfterWakeFromStop(uint32_t Clock)
{
 8000310:	b480      	push	{r7}
 8000312:	b083      	sub	sp, #12
 8000314:	af00      	add	r7, sp, #0
 8000316:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_STOPWUCK, Clock);
 8000318:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800031c:	689b      	ldr	r3, [r3, #8]
 800031e:	f423 4200 	bic.w	r2, r3, #32768	; 0x8000
 8000322:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8000326:	687b      	ldr	r3, [r7, #4]
 8000328:	4313      	orrs	r3, r2
 800032a:	608b      	str	r3, [r1, #8]
}
 800032c:	bf00      	nop
 800032e:	370c      	adds	r7, #12
 8000330:	46bd      	mov	sp, r7
 8000332:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000336:	4770      	bx	lr

08000338 <LL_RCC_ForceBackupDomainReset>:
  * @brief  Force the Backup domain reset
  * @rmtoll BDCR         BDRST         LL_RCC_ForceBackupDomainReset
  * @retval None
  */
__STATIC_INLINE void LL_RCC_ForceBackupDomainReset(void)
{
 8000338:	b480      	push	{r7}
 800033a:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 800033c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000340:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8000344:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8000348:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800034c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8000350:	bf00      	nop
 8000352:	46bd      	mov	sp, r7
 8000354:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000358:	4770      	bx	lr

0800035a <LL_RCC_ReleaseBackupDomainReset>:
  * @brief  Release the Backup domain reset
  * @rmtoll BDCR         BDRST         LL_RCC_ReleaseBackupDomainReset
  * @retval None
  */
__STATIC_INLINE void LL_RCC_ReleaseBackupDomainReset(void)
{
 800035a:	b480      	push	{r7}
 800035c:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 800035e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000362:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8000366:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800036a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800036e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8000372:	bf00      	nop
 8000374:	46bd      	mov	sp, r7
 8000376:	f85d 7b04 	ldr.w	r7, [sp], #4
 800037a:	4770      	bx	lr

0800037c <LL_RCC_IsActiveFlag_PINRST>:
  * @brief  Check if RCC flag Pin reset is set or not.
  * @rmtoll CSR          PINRSTF       LL_RCC_IsActiveFlag_PINRST
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PINRST(void)
{
 800037c:	b480      	push	{r7}
 800037e:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_PINRSTF) == (RCC_CSR_PINRSTF)) ? 1UL : 0UL);
 8000380:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000384:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8000388:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800038c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8000390:	d101      	bne.n	8000396 <LL_RCC_IsActiveFlag_PINRST+0x1a>
 8000392:	2301      	movs	r3, #1
 8000394:	e000      	b.n	8000398 <LL_RCC_IsActiveFlag_PINRST+0x1c>
 8000396:	2300      	movs	r3, #0
}
 8000398:	4618      	mov	r0, r3
 800039a:	46bd      	mov	sp, r7
 800039c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003a0:	4770      	bx	lr

080003a2 <LL_RCC_IsActiveFlag_SFTRST>:
  * @brief  Check if RCC flag Software reset is set or not.
  * @rmtoll CSR          SFTRSTF       LL_RCC_IsActiveFlag_SFTRST
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_SFTRST(void)
{
 80003a2:	b480      	push	{r7}
 80003a4:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_SFTRSTF) == (RCC_CSR_SFTRSTF)) ? 1UL : 0UL);
 80003a6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80003aa:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80003ae:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80003b2:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80003b6:	d101      	bne.n	80003bc <LL_RCC_IsActiveFlag_SFTRST+0x1a>
 80003b8:	2301      	movs	r3, #1
 80003ba:	e000      	b.n	80003be <LL_RCC_IsActiveFlag_SFTRST+0x1c>
 80003bc:	2300      	movs	r3, #0
}
 80003be:	4618      	mov	r0, r3
 80003c0:	46bd      	mov	sp, r7
 80003c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003c6:	4770      	bx	lr

080003c8 <LL_AHB3_GRP1_EnableClock>:
  *         @arg @ref LL_AHB3_GRP1_PERIPH_FLASH
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_AHB3_GRP1_EnableClock(uint32_t Periphs)
{
 80003c8:	b480      	push	{r7}
 80003ca:	b085      	sub	sp, #20
 80003cc:	af00      	add	r7, sp, #0
 80003ce:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB3ENR, Periphs);
 80003d0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80003d4:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80003d6:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80003da:	687b      	ldr	r3, [r7, #4]
 80003dc:	4313      	orrs	r3, r2
 80003de:	650b      	str	r3, [r1, #80]	; 0x50
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB3ENR, Periphs);
 80003e0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80003e4:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80003e6:	687b      	ldr	r3, [r7, #4]
 80003e8:	4013      	ands	r3, r2
 80003ea:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80003ec:	68fb      	ldr	r3, [r7, #12]
}
 80003ee:	bf00      	nop
 80003f0:	3714      	adds	r7, #20
 80003f2:	46bd      	mov	sp, r7
 80003f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003f8:	4770      	bx	lr
	...

080003fc <LL_DBGMCU_GetRevisionID>:
  * @note   This field indicates the revision of the device.
  * @rmtoll DBGMCU_IDCODE REV_ID        LL_DBGMCU_GetRevisionID
  * @retval Values between Min_Data=0x00 and Max_Data=0xFFFF
  */
__STATIC_INLINE uint32_t LL_DBGMCU_GetRevisionID(void)
{
 80003fc:	b480      	push	{r7}
 80003fe:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(DBGMCU->IDCODE, DBGMCU_IDCODE_REV_ID) >> DBGMCU_IDCODE_REV_ID_Pos);
 8000400:	4b04      	ldr	r3, [pc, #16]	; (8000414 <LL_DBGMCU_GetRevisionID+0x18>)
 8000402:	681b      	ldr	r3, [r3, #0]
 8000404:	0c1b      	lsrs	r3, r3, #16
 8000406:	b29b      	uxth	r3, r3
}
 8000408:	4618      	mov	r0, r3
 800040a:	46bd      	mov	sp, r7
 800040c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000410:	4770      	bx	lr
 8000412:	bf00      	nop
 8000414:	e0042000 	.word	0xe0042000

08000418 <LL_C1_IPCC_DisableTransmitChannel>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C1_IPCC_DisableTransmitChannel(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 8000418:	b480      	push	{r7}
 800041a:	b083      	sub	sp, #12
 800041c:	af00      	add	r7, sp, #0
 800041e:	6078      	str	r0, [r7, #4]
 8000420:	6039      	str	r1, [r7, #0]
  SET_BIT(IPCCx->C1MR, Channel << IPCC_C1MR_CH1FM_Pos);
 8000422:	687b      	ldr	r3, [r7, #4]
 8000424:	685a      	ldr	r2, [r3, #4]
 8000426:	683b      	ldr	r3, [r7, #0]
 8000428:	041b      	lsls	r3, r3, #16
 800042a:	431a      	orrs	r2, r3
 800042c:	687b      	ldr	r3, [r7, #4]
 800042e:	605a      	str	r2, [r3, #4]
}
 8000430:	bf00      	nop
 8000432:	370c      	adds	r7, #12
 8000434:	46bd      	mov	sp, r7
 8000436:	f85d 7b04 	ldr.w	r7, [sp], #4
 800043a:	4770      	bx	lr

0800043c <LL_C1_IPCC_DisableReceiveChannel>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C1_IPCC_DisableReceiveChannel(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 800043c:	b480      	push	{r7}
 800043e:	b083      	sub	sp, #12
 8000440:	af00      	add	r7, sp, #0
 8000442:	6078      	str	r0, [r7, #4]
 8000444:	6039      	str	r1, [r7, #0]
  SET_BIT(IPCCx->C1MR, Channel);
 8000446:	687b      	ldr	r3, [r7, #4]
 8000448:	685a      	ldr	r2, [r3, #4]
 800044a:	683b      	ldr	r3, [r7, #0]
 800044c:	431a      	orrs	r2, r3
 800044e:	687b      	ldr	r3, [r7, #4]
 8000450:	605a      	str	r2, [r3, #4]
}
 8000452:	bf00      	nop
 8000454:	370c      	adds	r7, #12
 8000456:	46bd      	mov	sp, r7
 8000458:	f85d 7b04 	ldr.w	r7, [sp], #4
 800045c:	4770      	bx	lr

0800045e <LL_C2_IPCC_DisableTransmitChannel>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C2_IPCC_DisableTransmitChannel(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 800045e:	b480      	push	{r7}
 8000460:	b083      	sub	sp, #12
 8000462:	af00      	add	r7, sp, #0
 8000464:	6078      	str	r0, [r7, #4]
 8000466:	6039      	str	r1, [r7, #0]
  SET_BIT(IPCCx->C2MR, Channel << (IPCC_C2MR_CH1FM_Pos));
 8000468:	687b      	ldr	r3, [r7, #4]
 800046a:	695a      	ldr	r2, [r3, #20]
 800046c:	683b      	ldr	r3, [r7, #0]
 800046e:	041b      	lsls	r3, r3, #16
 8000470:	431a      	orrs	r2, r3
 8000472:	687b      	ldr	r3, [r7, #4]
 8000474:	615a      	str	r2, [r3, #20]
}
 8000476:	bf00      	nop
 8000478:	370c      	adds	r7, #12
 800047a:	46bd      	mov	sp, r7
 800047c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000480:	4770      	bx	lr

08000482 <LL_C2_IPCC_DisableReceiveChannel>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C2_IPCC_DisableReceiveChannel(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 8000482:	b480      	push	{r7}
 8000484:	b083      	sub	sp, #12
 8000486:	af00      	add	r7, sp, #0
 8000488:	6078      	str	r0, [r7, #4]
 800048a:	6039      	str	r1, [r7, #0]
  SET_BIT(IPCCx->C2MR, Channel);
 800048c:	687b      	ldr	r3, [r7, #4]
 800048e:	695a      	ldr	r2, [r3, #20]
 8000490:	683b      	ldr	r3, [r7, #0]
 8000492:	431a      	orrs	r2, r3
 8000494:	687b      	ldr	r3, [r7, #4]
 8000496:	615a      	str	r2, [r3, #20]
}
 8000498:	bf00      	nop
 800049a:	370c      	adds	r7, #12
 800049c:	46bd      	mov	sp, r7
 800049e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004a2:	4770      	bx	lr

080004a4 <LL_C1_IPCC_ClearFlag_CHx>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C1_IPCC_ClearFlag_CHx(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 80004a4:	b480      	push	{r7}
 80004a6:	b083      	sub	sp, #12
 80004a8:	af00      	add	r7, sp, #0
 80004aa:	6078      	str	r0, [r7, #4]
 80004ac:	6039      	str	r1, [r7, #0]
  WRITE_REG(IPCCx->C1SCR, Channel);
 80004ae:	687b      	ldr	r3, [r7, #4]
 80004b0:	683a      	ldr	r2, [r7, #0]
 80004b2:	609a      	str	r2, [r3, #8]
}
 80004b4:	bf00      	nop
 80004b6:	370c      	adds	r7, #12
 80004b8:	46bd      	mov	sp, r7
 80004ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004be:	4770      	bx	lr

080004c0 <LL_C2_IPCC_ClearFlag_CHx>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C2_IPCC_ClearFlag_CHx(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 80004c0:	b480      	push	{r7}
 80004c2:	b083      	sub	sp, #12
 80004c4:	af00      	add	r7, sp, #0
 80004c6:	6078      	str	r0, [r7, #4]
 80004c8:	6039      	str	r1, [r7, #0]
  WRITE_REG(IPCCx->C2SCR, Channel);
 80004ca:	687b      	ldr	r3, [r7, #4]
 80004cc:	683a      	ldr	r2, [r7, #0]
 80004ce:	619a      	str	r2, [r3, #24]
}
 80004d0:	bf00      	nop
 80004d2:	370c      	adds	r7, #12
 80004d4:	46bd      	mov	sp, r7
 80004d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004da:	4770      	bx	lr

080004dc <LL_RTC_EnableWriteProtection>:
  * @rmtoll WPR          KEY           LL_RTC_EnableWriteProtection
  * @param  RTCx RTC Instance
  * @retval None
  */
__STATIC_INLINE void LL_RTC_EnableWriteProtection(RTC_TypeDef *RTCx)
{
 80004dc:	b480      	push	{r7}
 80004de:	b083      	sub	sp, #12
 80004e0:	af00      	add	r7, sp, #0
 80004e2:	6078      	str	r0, [r7, #4]
  WRITE_REG(RTCx->WPR, RTC_WRITE_PROTECTION_DISABLE);
 80004e4:	687b      	ldr	r3, [r7, #4]
 80004e6:	22ff      	movs	r2, #255	; 0xff
 80004e8:	625a      	str	r2, [r3, #36]	; 0x24
}
 80004ea:	bf00      	nop
 80004ec:	370c      	adds	r7, #12
 80004ee:	46bd      	mov	sp, r7
 80004f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004f4:	4770      	bx	lr

080004f6 <LL_RTC_DisableWriteProtection>:
  * @rmtoll WPR          KEY           LL_RTC_DisableWriteProtection
  * @param  RTCx RTC Instance
  * @retval None
  */
__STATIC_INLINE void LL_RTC_DisableWriteProtection(RTC_TypeDef *RTCx)
{
 80004f6:	b480      	push	{r7}
 80004f8:	b083      	sub	sp, #12
 80004fa:	af00      	add	r7, sp, #0
 80004fc:	6078      	str	r0, [r7, #4]
  WRITE_REG(RTCx->WPR, RTC_WRITE_PROTECTION_ENABLE_1);
 80004fe:	687b      	ldr	r3, [r7, #4]
 8000500:	22ca      	movs	r2, #202	; 0xca
 8000502:	625a      	str	r2, [r3, #36]	; 0x24
  WRITE_REG(RTCx->WPR, RTC_WRITE_PROTECTION_ENABLE_2);
 8000504:	687b      	ldr	r3, [r7, #4]
 8000506:	2253      	movs	r2, #83	; 0x53
 8000508:	625a      	str	r2, [r3, #36]	; 0x24
}
 800050a:	bf00      	nop
 800050c:	370c      	adds	r7, #12
 800050e:	46bd      	mov	sp, r7
 8000510:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000514:	4770      	bx	lr

08000516 <LL_RTC_WAKEUP_SetClock>:
  *         @arg @ref LL_RTC_WAKEUPCLOCK_CKSPRE
  *         @arg @ref LL_RTC_WAKEUPCLOCK_CKSPRE_WUT
  * @retval None
  */
__STATIC_INLINE void LL_RTC_WAKEUP_SetClock(RTC_TypeDef *RTCx, uint32_t WakeupClock)
{
 8000516:	b480      	push	{r7}
 8000518:	b083      	sub	sp, #12
 800051a:	af00      	add	r7, sp, #0
 800051c:	6078      	str	r0, [r7, #4]
 800051e:	6039      	str	r1, [r7, #0]
  MODIFY_REG(RTCx->CR, RTC_CR_WUCKSEL, WakeupClock);
 8000520:	687b      	ldr	r3, [r7, #4]
 8000522:	689b      	ldr	r3, [r3, #8]
 8000524:	f023 0207 	bic.w	r2, r3, #7
 8000528:	683b      	ldr	r3, [r7, #0]
 800052a:	431a      	orrs	r2, r3
 800052c:	687b      	ldr	r3, [r7, #4]
 800052e:	609a      	str	r2, [r3, #8]
}
 8000530:	bf00      	nop
 8000532:	370c      	adds	r7, #12
 8000534:	46bd      	mov	sp, r7
 8000536:	f85d 7b04 	ldr.w	r7, [sp], #4
 800053a:	4770      	bx	lr

0800053c <MX_APPE_Config>:

/* USER CODE END PFP */

/* Functions Definition ------------------------------------------------------*/
void MX_APPE_Config( void )
{
 800053c:	b580      	push	{r7, lr}
 800053e:	af00      	add	r7, sp, #0
  /**
   * The OPTVERR flag is wrongly set at power on
   * It shall be cleared before using any HAL_FLASH_xxx() api
   */
  __HAL_FLASH_CLEAR_FLAG( FLASH_FLAG_OPTVERR );
 8000540:	4b04      	ldr	r3, [pc, #16]	; (8000554 <MX_APPE_Config+0x18>)
 8000542:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8000546:	611a      	str	r2, [r3, #16]

  /**
   * Reset some configurations so that the system behave in the same way
   * when either out of nReset or Power On
   */
  Reset_Device( );
 8000548:	f000 f829 	bl	800059e <Reset_Device>

  /* Configure HSE Tuning */
  Config_HSE();
 800054c:	f000 f868 	bl	8000620 <Config_HSE>

  return;
 8000550:	bf00      	nop
}
 8000552:	bd80      	pop	{r7, pc}
 8000554:	58004000 	.word	0x58004000

08000558 <MX_APPE_Init>:

void MX_APPE_Init( void )
{
 8000558:	b580      	push	{r7, lr}
 800055a:	af00      	add	r7, sp, #0
  System_Init( );       /**< System initialization */
 800055c:	f000 f874 	bl	8000648 <System_Init>

  SystemPower_Config(); /**< Configure the system Power Mode */
 8000560:	f000 f88c 	bl	800067c <SystemPower_Config>

  HW_TS_Init(hw_ts_InitMode_Full, &hrtc); /**< Initialize the TimerServer */
 8000564:	4903      	ldr	r1, [pc, #12]	; (8000574 <MX_APPE_Init+0x1c>)
 8000566:	2000      	movs	r0, #0
 8000568:	f000 fcee 	bl	8000f48 <HW_TS_Init>

/* USER CODE BEGIN APPE_Init_1 */

/* USER CODE END APPE_Init_1 */
  appe_Tl_Init();	/* Initialize all transport layers */
 800056c:	f000 f894 	bl	8000698 <appe_Tl_Init>
   * This system event is received with APPE_SysUserEvtRx()
   */
/* USER CODE BEGIN APPE_Init_2 */

/* USER CODE END APPE_Init_2 */
   return;
 8000570:	bf00      	nop
}
 8000572:	bd80      	pop	{r7, pc}
 8000574:	20000324 	.word	0x20000324

08000578 <Init_Smps>:

void Init_Smps( void )
{
 8000578:	b580      	push	{r7, lr}
 800057a:	af00      	add	r7, sp, #0
   *
   *  The SMPS configuration is not yet supported by CubeMx
   *  when SMPS output voltage is set to 1.4V, the RF output power is limited to 3.7dBm
   *  the SMPS output voltage shall be increased for higher RF output power
   */
  LL_PWR_SMPS_SetStartupCurrent(LL_PWR_SMPS_STARTUP_CURRENT_80MA);
 800057c:	2000      	movs	r0, #0
 800057e:	f7ff fe31 	bl	80001e4 <LL_PWR_SMPS_SetStartupCurrent>
  LL_PWR_SMPS_SetOutputVoltageLevel(LL_PWR_SMPS_OUTPUT_VOLTAGE_1V40);
 8000582:	2004      	movs	r0, #4
 8000584:	f7ff fe42 	bl	800020c <LL_PWR_SMPS_SetOutputVoltageLevel>
  LL_PWR_SMPS_Enable();
 8000588:	f7ff fe1c 	bl	80001c4 <LL_PWR_SMPS_Enable>
#endif

  return;
 800058c:	bf00      	nop
}
 800058e:	bd80      	pop	{r7, pc}

08000590 <Init_Exti>:

void Init_Exti( void )
{
 8000590:	b580      	push	{r7, lr}
 8000592:	af00      	add	r7, sp, #0
  /* Enable IPCC(36), HSEM(38) wakeup interrupts on CPU1 */
  LL_EXTI_EnableIT_32_63( LL_EXTI_LINE_36 & LL_EXTI_LINE_38 );
 8000594:	2000      	movs	r0, #0
 8000596:	f7ff fe89 	bl	80002ac <LL_EXTI_EnableIT_32_63>

  return;
 800059a:	bf00      	nop
}
 800059c:	bd80      	pop	{r7, pc}

0800059e <Reset_Device>:
 *
 * LOCAL FUNCTIONS
 *
 *************************************************************/
static void Reset_Device( void )
{
 800059e:	b580      	push	{r7, lr}
 80005a0:	af00      	add	r7, sp, #0
#if ( CFG_HW_RESET_BY_FW == 1 )
  Reset_BackupDomain();
 80005a2:	f000 f804 	bl	80005ae <Reset_BackupDomain>

  Reset_IPCC();
 80005a6:	f000 f819 	bl	80005dc <Reset_IPCC>
#endif /* CFG_HW_RESET_BY_FW */

  return;
 80005aa:	bf00      	nop
}
 80005ac:	bd80      	pop	{r7, pc}

080005ae <Reset_BackupDomain>:

#if ( CFG_HW_RESET_BY_FW == 1 )
static void Reset_BackupDomain( void )
{
 80005ae:	b580      	push	{r7, lr}
 80005b0:	af00      	add	r7, sp, #0
  if ((LL_RCC_IsActiveFlag_PINRST() != FALSE) && (LL_RCC_IsActiveFlag_SFTRST() == FALSE))
 80005b2:	f7ff fee3 	bl	800037c <LL_RCC_IsActiveFlag_PINRST>
 80005b6:	4603      	mov	r3, r0
 80005b8:	2b00      	cmp	r3, #0
 80005ba:	d00d      	beq.n	80005d8 <Reset_BackupDomain+0x2a>
 80005bc:	f7ff fef1 	bl	80003a2 <LL_RCC_IsActiveFlag_SFTRST>
 80005c0:	4603      	mov	r3, r0
 80005c2:	2b00      	cmp	r3, #0
 80005c4:	d108      	bne.n	80005d8 <Reset_BackupDomain+0x2a>
  {
    HAL_PWR_EnableBkUpAccess(); /**< Enable access to the RTC registers */
 80005c6:	f001 ffab 	bl	8002520 <HAL_PWR_EnableBkUpAccess>

    /**
     *  Write twice the value to flush the APB-AHB bridge
     *  This bit shall be written in the register before writing the next one
     */
    HAL_PWR_EnableBkUpAccess();
 80005ca:	f001 ffa9 	bl	8002520 <HAL_PWR_EnableBkUpAccess>

    __HAL_RCC_BACKUPRESET_FORCE();
 80005ce:	f7ff feb3 	bl	8000338 <LL_RCC_ForceBackupDomainReset>
    __HAL_RCC_BACKUPRESET_RELEASE();
 80005d2:	f7ff fec2 	bl	800035a <LL_RCC_ReleaseBackupDomainReset>
  }

  return;
 80005d6:	bf00      	nop
 80005d8:	bf00      	nop
}
 80005da:	bd80      	pop	{r7, pc}

080005dc <Reset_IPCC>:

static void Reset_IPCC( void )
{
 80005dc:	b580      	push	{r7, lr}
 80005de:	af00      	add	r7, sp, #0
  LL_AHB3_GRP1_EnableClock(LL_AHB3_GRP1_PERIPH_IPCC);
 80005e0:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80005e4:	f7ff fef0 	bl	80003c8 <LL_AHB3_GRP1_EnableClock>

  LL_C1_IPCC_ClearFlag_CHx(
 80005e8:	213f      	movs	r1, #63	; 0x3f
 80005ea:	480c      	ldr	r0, [pc, #48]	; (800061c <Reset_IPCC+0x40>)
 80005ec:	f7ff ff5a 	bl	80004a4 <LL_C1_IPCC_ClearFlag_CHx>
      IPCC,
      LL_IPCC_CHANNEL_1 | LL_IPCC_CHANNEL_2 | LL_IPCC_CHANNEL_3 | LL_IPCC_CHANNEL_4
      | LL_IPCC_CHANNEL_5 | LL_IPCC_CHANNEL_6);

  LL_C2_IPCC_ClearFlag_CHx(
 80005f0:	213f      	movs	r1, #63	; 0x3f
 80005f2:	480a      	ldr	r0, [pc, #40]	; (800061c <Reset_IPCC+0x40>)
 80005f4:	f7ff ff64 	bl	80004c0 <LL_C2_IPCC_ClearFlag_CHx>
      IPCC,
      LL_IPCC_CHANNEL_1 | LL_IPCC_CHANNEL_2 | LL_IPCC_CHANNEL_3 | LL_IPCC_CHANNEL_4
      | LL_IPCC_CHANNEL_5 | LL_IPCC_CHANNEL_6);

  LL_C1_IPCC_DisableTransmitChannel(
 80005f8:	213f      	movs	r1, #63	; 0x3f
 80005fa:	4808      	ldr	r0, [pc, #32]	; (800061c <Reset_IPCC+0x40>)
 80005fc:	f7ff ff0c 	bl	8000418 <LL_C1_IPCC_DisableTransmitChannel>
      IPCC,
      LL_IPCC_CHANNEL_1 | LL_IPCC_CHANNEL_2 | LL_IPCC_CHANNEL_3 | LL_IPCC_CHANNEL_4
      | LL_IPCC_CHANNEL_5 | LL_IPCC_CHANNEL_6);

  LL_C2_IPCC_DisableTransmitChannel(
 8000600:	213f      	movs	r1, #63	; 0x3f
 8000602:	4806      	ldr	r0, [pc, #24]	; (800061c <Reset_IPCC+0x40>)
 8000604:	f7ff ff2b 	bl	800045e <LL_C2_IPCC_DisableTransmitChannel>
      IPCC,
      LL_IPCC_CHANNEL_1 | LL_IPCC_CHANNEL_2 | LL_IPCC_CHANNEL_3 | LL_IPCC_CHANNEL_4
      | LL_IPCC_CHANNEL_5 | LL_IPCC_CHANNEL_6);

  LL_C1_IPCC_DisableReceiveChannel(
 8000608:	213f      	movs	r1, #63	; 0x3f
 800060a:	4804      	ldr	r0, [pc, #16]	; (800061c <Reset_IPCC+0x40>)
 800060c:	f7ff ff16 	bl	800043c <LL_C1_IPCC_DisableReceiveChannel>
      IPCC,
      LL_IPCC_CHANNEL_1 | LL_IPCC_CHANNEL_2 | LL_IPCC_CHANNEL_3 | LL_IPCC_CHANNEL_4
      | LL_IPCC_CHANNEL_5 | LL_IPCC_CHANNEL_6);

  LL_C2_IPCC_DisableReceiveChannel(
 8000610:	213f      	movs	r1, #63	; 0x3f
 8000612:	4802      	ldr	r0, [pc, #8]	; (800061c <Reset_IPCC+0x40>)
 8000614:	f7ff ff35 	bl	8000482 <LL_C2_IPCC_DisableReceiveChannel>
      IPCC,
      LL_IPCC_CHANNEL_1 | LL_IPCC_CHANNEL_2 | LL_IPCC_CHANNEL_3 | LL_IPCC_CHANNEL_4
      | LL_IPCC_CHANNEL_5 | LL_IPCC_CHANNEL_6);

  return;
 8000618:	bf00      	nop
}
 800061a:	bd80      	pop	{r7, pc}
 800061c:	58000c00 	.word	0x58000c00

08000620 <Config_HSE>:
#endif /* CFG_HW_RESET_BY_FW */

static void Config_HSE(void)
{
 8000620:	b580      	push	{r7, lr}
 8000622:	b082      	sub	sp, #8
 8000624:	af00      	add	r7, sp, #0
    OTP_ID0_t * p_otp;

  /**
   * Read HSE_Tuning from OTP
   */
  p_otp = (OTP_ID0_t *) OTP_Read(0);
 8000626:	2000      	movs	r0, #0
 8000628:	f005 fcfe 	bl	8006028 <OTP_Read>
 800062c:	6078      	str	r0, [r7, #4]
  if (p_otp)
 800062e:	687b      	ldr	r3, [r7, #4]
 8000630:	2b00      	cmp	r3, #0
 8000632:	d005      	beq.n	8000640 <Config_HSE+0x20>
  {
    LL_RCC_HSE_SetCapacitorTuning(p_otp->hse_tuning);
 8000634:	687b      	ldr	r3, [r7, #4]
 8000636:	799b      	ldrb	r3, [r3, #6]
 8000638:	4618      	mov	r0, r3
 800063a:	f7ff fe4b 	bl	80002d4 <LL_RCC_HSE_SetCapacitorTuning>
  }

  return;
 800063e:	bf00      	nop
 8000640:	bf00      	nop
}
 8000642:	3708      	adds	r7, #8
 8000644:	46bd      	mov	sp, r7
 8000646:	bd80      	pop	{r7, pc}

08000648 <System_Init>:

static void System_Init( void )
{
 8000648:	b580      	push	{r7, lr}
 800064a:	af00      	add	r7, sp, #0
  Init_Smps( );
 800064c:	f7ff ff94 	bl	8000578 <Init_Smps>

  Init_Exti( );
 8000650:	f7ff ff9e 	bl	8000590 <Init_Exti>

  Init_Rtc( );
 8000654:	f000 f802 	bl	800065c <Init_Rtc>

  return;
 8000658:	bf00      	nop
}
 800065a:	bd80      	pop	{r7, pc}

0800065c <Init_Rtc>:

static void Init_Rtc( void )
{
 800065c:	b580      	push	{r7, lr}
 800065e:	af00      	add	r7, sp, #0
  /* Disable RTC registers write protection */
  LL_RTC_DisableWriteProtection(RTC);
 8000660:	4805      	ldr	r0, [pc, #20]	; (8000678 <Init_Rtc+0x1c>)
 8000662:	f7ff ff48 	bl	80004f6 <LL_RTC_DisableWriteProtection>

  LL_RTC_WAKEUP_SetClock(RTC, CFG_RTC_WUCKSEL_DIVIDER);
 8000666:	2100      	movs	r1, #0
 8000668:	4803      	ldr	r0, [pc, #12]	; (8000678 <Init_Rtc+0x1c>)
 800066a:	f7ff ff54 	bl	8000516 <LL_RTC_WAKEUP_SetClock>

  /* Enable RTC registers write protection */
  LL_RTC_EnableWriteProtection(RTC);
 800066e:	4802      	ldr	r0, [pc, #8]	; (8000678 <Init_Rtc+0x1c>)
 8000670:	f7ff ff34 	bl	80004dc <LL_RTC_EnableWriteProtection>

  return;
 8000674:	bf00      	nop
}
 8000676:	bd80      	pop	{r7, pc}
 8000678:	40002800 	.word	0x40002800

0800067c <SystemPower_Config>:
 *
 * @param  None
 * @retval None
 */
static void SystemPower_Config(void)
{
 800067c:	b580      	push	{r7, lr}
 800067e:	af00      	add	r7, sp, #0
  /**
   * Select HSI as system clock source after Wake Up from Stop mode
   */
  LL_RCC_SetClkAfterWakeFromStop(LL_RCC_STOP_WAKEUPCLOCK_HSI);
 8000680:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8000684:	f7ff fe44 	bl	8000310 <LL_RCC_SetClkAfterWakeFromStop>

  /* Initialize low power manager */
  UTIL_LPM_Init();
 8000688:	f006 fa7a 	bl	8006b80 <UTIL_LPM_Init>
  /* Initialize the CPU2 reset value before starting CPU2 with C2BOOT */
  LL_C2_PWR_SetPowerMode(LL_PWR_MODE_SHUTDOWN);
 800068c:	2004      	movs	r0, #4
 800068e:	f7ff fdf7 	bl	8000280 <LL_C2_PWR_SetPowerMode>
   *  Enable USB power
   */
  HAL_PWREx_EnableVddUSB();
#endif

  return;
 8000692:	bf00      	nop
}
 8000694:	bd80      	pop	{r7, pc}
	...

08000698 <appe_Tl_Init>:

static void appe_Tl_Init( void )
{
 8000698:	b580      	push	{r7, lr}
 800069a:	b088      	sub	sp, #32
 800069c:	af00      	add	r7, sp, #0
  TL_MM_Config_t tl_mm_config;
  SHCI_TL_HciInitConf_t SHci_Tl_Init_Conf;
  /**< Reference table initialization */
  TL_Init();
 800069e:	f005 fb17 	bl	8005cd0 <TL_Init>

  /**< System channel initialization */
  UTIL_SEQ_RegTask( 1<< CFG_TASK_SYSTEM_HCI_ASYNCH_EVT_ID, UTIL_SEQ_RFU, shci_user_evt_proc );
 80006a2:	4a11      	ldr	r2, [pc, #68]	; (80006e8 <appe_Tl_Init+0x50>)
 80006a4:	2100      	movs	r1, #0
 80006a6:	2004      	movs	r0, #4
 80006a8:	f006 fbcc 	bl	8006e44 <UTIL_SEQ_RegTask>
  SHci_Tl_Init_Conf.p_cmdbuffer = (uint8_t*)&SystemCmdBuffer;
 80006ac:	4b0f      	ldr	r3, [pc, #60]	; (80006ec <appe_Tl_Init+0x54>)
 80006ae:	603b      	str	r3, [r7, #0]
  SHci_Tl_Init_Conf.StatusNotCallBack = APPE_SysStatusNot;
 80006b0:	4b0f      	ldr	r3, [pc, #60]	; (80006f0 <appe_Tl_Init+0x58>)
 80006b2:	607b      	str	r3, [r7, #4]
  shci_init(APPE_SysUserEvtRx, (void*) &SHci_Tl_Init_Conf);
 80006b4:	463b      	mov	r3, r7
 80006b6:	4619      	mov	r1, r3
 80006b8:	480e      	ldr	r0, [pc, #56]	; (80006f4 <appe_Tl_Init+0x5c>)
 80006ba:	f005 f9cf 	bl	8005a5c <shci_init>

  /**< Memory Manager channel initialization */
  tl_mm_config.p_BleSpareEvtBuffer = BleSpareEvtBuffer;
 80006be:	4b0e      	ldr	r3, [pc, #56]	; (80006f8 <appe_Tl_Init+0x60>)
 80006c0:	60bb      	str	r3, [r7, #8]
  tl_mm_config.p_SystemSpareEvtBuffer = SystemSpareEvtBuffer;
 80006c2:	4b0e      	ldr	r3, [pc, #56]	; (80006fc <appe_Tl_Init+0x64>)
 80006c4:	60fb      	str	r3, [r7, #12]
  tl_mm_config.p_AsynchEvtPool = EvtPool;
 80006c6:	4b0e      	ldr	r3, [pc, #56]	; (8000700 <appe_Tl_Init+0x68>)
 80006c8:	613b      	str	r3, [r7, #16]
  tl_mm_config.AsynchEvtPoolSize = POOL_SIZE;
 80006ca:	f240 533c 	movw	r3, #1340	; 0x53c
 80006ce:	617b      	str	r3, [r7, #20]
  TL_MM_Init( &tl_mm_config );
 80006d0:	f107 0308 	add.w	r3, r7, #8
 80006d4:	4618      	mov	r0, r3
 80006d6:	f005 fbcb 	bl	8005e70 <TL_MM_Init>

  TL_Enable();
 80006da:	f005 faf3 	bl	8005cc4 <TL_Enable>

  return;
 80006de:	bf00      	nop
}
 80006e0:	3720      	adds	r7, #32
 80006e2:	46bd      	mov	sp, r7
 80006e4:	bd80      	pop	{r7, pc}
 80006e6:	bf00      	nop
 80006e8:	08005a95 	.word	0x08005a95
 80006ec:	20030724 	.word	0x20030724
 80006f0:	08000705 	.word	0x08000705
 80006f4:	0800071d 	.word	0x0800071d
 80006f8:	2003093c 	.word	0x2003093c
 80006fc:	20030830 	.word	0x20030830
 8000700:	200301e8 	.word	0x200301e8

08000704 <APPE_SysStatusNot>:

static void APPE_SysStatusNot( SHCI_TL_CmdStatus_t status )
{
 8000704:	b480      	push	{r7}
 8000706:	b083      	sub	sp, #12
 8000708:	af00      	add	r7, sp, #0
 800070a:	4603      	mov	r3, r0
 800070c:	71fb      	strb	r3, [r7, #7]
  UNUSED(status);
  return;
 800070e:	bf00      	nop
}
 8000710:	370c      	adds	r7, #12
 8000712:	46bd      	mov	sp, r7
 8000714:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000718:	4770      	bx	lr
	...

0800071c <APPE_SysUserEvtRx>:
 * The buffer shall not be released
 * ( eg ((tSHCI_UserEvtRxParam*)pPayload)->status shall be set to SHCI_TL_UserEventFlow_Disable )
 * When the status is not filled, the buffer is released by default
 */
static void APPE_SysUserEvtRx( void * pPayload )
{
 800071c:	b580      	push	{r7, lr}
 800071e:	b088      	sub	sp, #32
 8000720:	af00      	add	r7, sp, #0
 8000722:	6078      	str	r0, [r7, #4]
  TL_AsynchEvt_t *p_sys_event;
  WirelessFwInfo_t WirelessInfo;

  p_sys_event = (TL_AsynchEvt_t*)(((tSHCI_UserEvtRxParam*)pPayload)->pckt->evtserial.evt.payload);
 8000724:	687b      	ldr	r3, [r7, #4]
 8000726:	685b      	ldr	r3, [r3, #4]
 8000728:	330b      	adds	r3, #11
 800072a:	61fb      	str	r3, [r7, #28]

  /* Read the firmware version of both the wireless firmware and the FUS */
  SHCI_GetWirelessFwInfo( &WirelessInfo );
 800072c:	f107 030c 	add.w	r3, r7, #12
 8000730:	4618      	mov	r0, r3
 8000732:	f004 ff4f 	bl	80055d4 <SHCI_GetWirelessFwInfo>
  APP_DBG_MSG("Wireless Firmware version %d.%d.%d\n", WirelessInfo.VersionMajor, WirelessInfo.VersionMinor, WirelessInfo.VersionSub);
  APP_DBG_MSG("Wireless Firmware build %d\n", WirelessInfo.VersionReleaseType);
  APP_DBG_MSG("FUS version %d.%d.%d\n\n", WirelessInfo.FusVersionMajor, WirelessInfo.FusVersionMinor, WirelessInfo.FusVersionSub);

  switch(p_sys_event->subevtcode)
 8000736:	69fb      	ldr	r3, [r7, #28]
 8000738:	881b      	ldrh	r3, [r3, #0]
 800073a:	b29b      	uxth	r3, r3
 800073c:	f5a3 4312 	sub.w	r3, r3, #37376	; 0x9200
 8000740:	2b07      	cmp	r3, #7
 8000742:	d81b      	bhi.n	800077c <APPE_SysUserEvtRx+0x60>
 8000744:	a201      	add	r2, pc, #4	; (adr r2, 800074c <APPE_SysUserEvtRx+0x30>)
 8000746:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800074a:	bf00      	nop
 800074c:	0800076d 	.word	0x0800076d
 8000750:	08000775 	.word	0x08000775
 8000754:	0800077d 	.word	0x0800077d
 8000758:	0800077d 	.word	0x0800077d
 800075c:	0800077d 	.word	0x0800077d
 8000760:	0800077d 	.word	0x0800077d
 8000764:	0800077d 	.word	0x0800077d
 8000768:	0800077d 	.word	0x0800077d
  {
  case SHCI_SUB_EVT_CODE_READY:
    APPE_SysEvtReadyProcessing(pPayload);
 800076c:	6878      	ldr	r0, [r7, #4]
 800076e:	f000 f81c 	bl	80007aa <APPE_SysEvtReadyProcessing>
    break;
 8000772:	e004      	b.n	800077e <APPE_SysUserEvtRx+0x62>

  case SHCI_SUB_EVT_ERROR_NOTIF:
    APPE_SysEvtError(pPayload);
 8000774:	6878      	ldr	r0, [r7, #4]
 8000776:	f000 f807 	bl	8000788 <APPE_SysEvtError>
    break;
 800077a:	e000      	b.n	800077e <APPE_SysUserEvtRx+0x62>
  case SHCI_SUB_EVT_NVM_END_ERASE:
    APP_DBG_MSG("SHCI_SUB_EVT_NVM_END_ERASE\n");
    break;

  default:
    break;
 800077c:	bf00      	nop
  }

  return;
 800077e:	bf00      	nop
}
 8000780:	3720      	adds	r7, #32
 8000782:	46bd      	mov	sp, r7
 8000784:	bd80      	pop	{r7, pc}
 8000786:	bf00      	nop

08000788 <APPE_SysEvtError>:
 * @param  ErrorCode  : errorCode detected by the M0 firmware
 *
 * @retval None
 */
static void APPE_SysEvtError( void * pPayload)
{
 8000788:	b480      	push	{r7}
 800078a:	b085      	sub	sp, #20
 800078c:	af00      	add	r7, sp, #0
 800078e:	6078      	str	r0, [r7, #4]
  TL_AsynchEvt_t *p_sys_event;
  SCHI_SystemErrCode_t *p_sys_error_code;

  p_sys_event = (TL_AsynchEvt_t*)(((tSHCI_UserEvtRxParam*)pPayload)->pckt->evtserial.evt.payload);
 8000790:	687b      	ldr	r3, [r7, #4]
 8000792:	685b      	ldr	r3, [r3, #4]
 8000794:	330b      	adds	r3, #11
 8000796:	60fb      	str	r3, [r7, #12]
  p_sys_error_code = (SCHI_SystemErrCode_t*) p_sys_event->payload;
 8000798:	68fb      	ldr	r3, [r7, #12]
 800079a:	3302      	adds	r3, #2
 800079c:	60bb      	str	r3, [r7, #8]
  }
  else
  {
    APP_DBG_MSG("SHCI_SUB_EVT_ERROR_NOTIF WITH REASON - BLE ERROR \n");
  }
  return;
 800079e:	bf00      	nop
}
 80007a0:	3714      	adds	r7, #20
 80007a2:	46bd      	mov	sp, r7
 80007a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007a8:	4770      	bx	lr

080007aa <APPE_SysEvtReadyProcessing>:

static void APPE_SysEvtReadyProcessing( void * pPayload )
{
 80007aa:	b580      	push	{r7, lr}
 80007ac:	b08a      	sub	sp, #40	; 0x28
 80007ae:	af00      	add	r7, sp, #0
 80007b0:	6078      	str	r0, [r7, #4]
  TL_AsynchEvt_t *p_sys_event;
  SHCI_C2_Ready_Evt_t *p_sys_ready_event;

  SHCI_C2_CONFIG_Cmd_Param_t config_param = {0};
 80007b2:	f107 030c 	add.w	r3, r7, #12
 80007b6:	2200      	movs	r2, #0
 80007b8:	601a      	str	r2, [r3, #0]
 80007ba:	605a      	str	r2, [r3, #4]
 80007bc:	609a      	str	r2, [r3, #8]
 80007be:	819a      	strh	r2, [r3, #12]
  uint32_t RevisionID=0;
 80007c0:	2300      	movs	r3, #0
 80007c2:	627b      	str	r3, [r7, #36]	; 0x24

  p_sys_event = (TL_AsynchEvt_t*)(((tSHCI_UserEvtRxParam*)pPayload)->pckt->evtserial.evt.payload);
 80007c4:	687b      	ldr	r3, [r7, #4]
 80007c6:	685b      	ldr	r3, [r3, #4]
 80007c8:	330b      	adds	r3, #11
 80007ca:	623b      	str	r3, [r7, #32]
  p_sys_ready_event = (SHCI_C2_Ready_Evt_t*) p_sys_event->payload;
 80007cc:	6a3b      	ldr	r3, [r7, #32]
 80007ce:	3302      	adds	r3, #2
 80007d0:	61fb      	str	r3, [r7, #28]

  if(p_sys_ready_event->sysevt_ready_rsp == WIRELESS_FW_RUNNING)
 80007d2:	69fb      	ldr	r3, [r7, #28]
 80007d4:	781b      	ldrb	r3, [r3, #0]
 80007d6:	2b00      	cmp	r3, #0
 80007d8:	d117      	bne.n	800080a <APPE_SysEvtReadyProcessing+0x60>
    * The wireless firmware is running on the CPU2
    */
    APP_DBG_MSG("SHCI_SUB_EVT_CODE_READY - WIRELESS_FW_RUNNING \n");

    /* Traces channel initialization */
    APPD_EnableCPU2( );
 80007da:	f7ff fcd7 	bl	800018c <APPD_EnableCPU2>

    /* Enable all events Notification */
    config_param.PayloadCmdSize = SHCI_C2_CONFIG_PAYLOAD_CMD_SIZE;
 80007de:	230d      	movs	r3, #13
 80007e0:	733b      	strb	r3, [r7, #12]
    config_param.EvtMask1 = SHCI_C2_CONFIG_EVTMASK1_BIT0_ERROR_NOTIF_ENABLE
 80007e2:	237f      	movs	r3, #127	; 0x7f
 80007e4:	73bb      	strb	r3, [r7, #14]
    * @brief  Return the device revision identifier
    * @note   This field indicates the revision of the device.
    * @rmtoll DBGMCU_IDCODE REV_ID        LL_DBGMCU_GetRevisionID
    * @retval Values between Min_Data=0x00 and Max_Data=0xFFFF
    */
    RevisionID = LL_DBGMCU_GetRevisionID();
 80007e6:	f7ff fe09 	bl	80003fc <LL_DBGMCU_GetRevisionID>
 80007ea:	6278      	str	r0, [r7, #36]	; 0x24

    APP_DBG_MSG("DBGMCU_GetRevisionID= %lx \n\n", RevisionID);

    config_param.RevisionID = RevisionID;
 80007ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80007ee:	b29b      	uxth	r3, r3
 80007f0:	833b      	strh	r3, [r7, #24]
    (void)SHCI_C2_Config(&config_param);
 80007f2:	f107 030c 	add.w	r3, r7, #12
 80007f6:	4618      	mov	r0, r3
 80007f8:	f004 fed6 	bl	80055a8 <SHCI_C2_Config>

    APP_BLE_Init( );
 80007fc:	f005 fd1e 	bl	800623c <APP_BLE_Init>
    UTIL_LPM_SetOffMode(1U << CFG_LPM_APP, UTIL_LPM_ENABLE);
 8000800:	2100      	movs	r1, #0
 8000802:	2001      	movs	r0, #1
 8000804:	f006 f9ce 	bl	8006ba4 <UTIL_LPM_SetOffMode>
  else
  {
    APP_DBG_MSG("SHCI_SUB_EVT_CODE_READY - UNEXPECTED CASE \n");
  }

  return;
 8000808:	e007      	b.n	800081a <APPE_SysEvtReadyProcessing+0x70>
  else if (p_sys_ready_event->sysevt_ready_rsp == FUS_FW_RUNNING)
 800080a:	69fb      	ldr	r3, [r7, #28]
 800080c:	781b      	ldrb	r3, [r3, #0]
 800080e:	2b01      	cmp	r3, #1
 8000810:	d103      	bne.n	800081a <APPE_SysEvtReadyProcessing+0x70>
    ((tSHCI_UserEvtRxParam*)pPayload)->status = SHCI_TL_UserEventFlow_Disable;
 8000812:	687b      	ldr	r3, [r7, #4]
 8000814:	2200      	movs	r2, #0
 8000816:	701a      	strb	r2, [r3, #0]
  return;
 8000818:	bf00      	nop
 800081a:	bf00      	nop
}
 800081c:	3728      	adds	r7, #40	; 0x28
 800081e:	46bd      	mov	sp, r7
 8000820:	bd80      	pop	{r7, pc}

08000822 <MX_APPE_Process>:
    __WFI( );
  }
}

void MX_APPE_Process(void)
{
 8000822:	b580      	push	{r7, lr}
 8000824:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MX_APPE_Process_1 */

  /* USER CODE END MX_APPE_Process_1 */
  UTIL_SEQ_Run(UTIL_SEQ_DEFAULT);
 8000826:	f04f 30ff 	mov.w	r0, #4294967295
 800082a:	f006 fa21 	bl	8006c70 <UTIL_SEQ_Run>
  /* USER CODE BEGIN MX_APPE_Process_2 */

  /* USER CODE END MX_APPE_Process_2 */
}
 800082e:	bf00      	nop
 8000830:	bd80      	pop	{r7, pc}

08000832 <UTIL_SEQ_Idle>:

void UTIL_SEQ_Idle( void )
{
 8000832:	b580      	push	{r7, lr}
 8000834:	af00      	add	r7, sp, #0
#if ( CFG_LPM_SUPPORTED == 1)
  UTIL_LPM_EnterLowPower( );
 8000836:	f006 f9e5 	bl	8006c04 <UTIL_LPM_EnterLowPower>
#endif
  return;
 800083a:	bf00      	nop
}
 800083c:	bd80      	pop	{r7, pc}

0800083e <UTIL_SEQ_EvtIdle>:
  *
  * @param  evt_waited_bm : Event pending.
  * @retval None
  */
void UTIL_SEQ_EvtIdle( UTIL_SEQ_bm_t task_id_bm, UTIL_SEQ_bm_t evt_waited_bm )
{
 800083e:	b580      	push	{r7, lr}
 8000840:	b082      	sub	sp, #8
 8000842:	af00      	add	r7, sp, #0
 8000844:	6078      	str	r0, [r7, #4]
 8000846:	6039      	str	r1, [r7, #0]
  UTIL_SEQ_Run( UTIL_SEQ_DEFAULT );
 8000848:	f04f 30ff 	mov.w	r0, #4294967295
 800084c:	f006 fa10 	bl	8006c70 <UTIL_SEQ_Run>

  return;
 8000850:	bf00      	nop
}
 8000852:	3708      	adds	r7, #8
 8000854:	46bd      	mov	sp, r7
 8000856:	bd80      	pop	{r7, pc}

08000858 <shci_notify_asynch_evt>:

void shci_notify_asynch_evt(void* pdata)
{
 8000858:	b580      	push	{r7, lr}
 800085a:	b082      	sub	sp, #8
 800085c:	af00      	add	r7, sp, #0
 800085e:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_SetTask( 1<<CFG_TASK_SYSTEM_HCI_ASYNCH_EVT_ID, CFG_SCH_PRIO_0);
 8000860:	2100      	movs	r1, #0
 8000862:	2004      	movs	r0, #4
 8000864:	f006 fb10 	bl	8006e88 <UTIL_SEQ_SetTask>
  return;
 8000868:	bf00      	nop
}
 800086a:	3708      	adds	r7, #8
 800086c:	46bd      	mov	sp, r7
 800086e:	bd80      	pop	{r7, pc}

08000870 <shci_cmd_resp_release>:

void shci_cmd_resp_release(uint32_t flag)
{
 8000870:	b580      	push	{r7, lr}
 8000872:	b082      	sub	sp, #8
 8000874:	af00      	add	r7, sp, #0
 8000876:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_SetEvt( 1<< CFG_IDLEEVT_SYSTEM_HCI_CMD_EVT_RSP_ID );
 8000878:	2002      	movs	r0, #2
 800087a:	f006 fb71 	bl	8006f60 <UTIL_SEQ_SetEvt>
  return;
 800087e:	bf00      	nop
}
 8000880:	3708      	adds	r7, #8
 8000882:	46bd      	mov	sp, r7
 8000884:	bd80      	pop	{r7, pc}

08000886 <shci_cmd_resp_wait>:

void shci_cmd_resp_wait(uint32_t timeout)
{
 8000886:	b580      	push	{r7, lr}
 8000888:	b082      	sub	sp, #8
 800088a:	af00      	add	r7, sp, #0
 800088c:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_WaitEvt( 1<< CFG_IDLEEVT_SYSTEM_HCI_CMD_EVT_RSP_ID );
 800088e:	2002      	movs	r0, #2
 8000890:	f006 fb86 	bl	8006fa0 <UTIL_SEQ_WaitEvt>
  return;
 8000894:	bf00      	nop
}
 8000896:	3708      	adds	r7, #8
 8000898:	46bd      	mov	sp, r7
 800089a:	bd80      	pop	{r7, pc}

0800089c <LL_EXTI_EnableIT_0_31>:
{
 800089c:	b480      	push	{r7}
 800089e:	b083      	sub	sp, #12
 80008a0:	af00      	add	r7, sp, #0
 80008a2:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR1, ExtiLine);
 80008a4:	4b06      	ldr	r3, [pc, #24]	; (80008c0 <LL_EXTI_EnableIT_0_31+0x24>)
 80008a6:	f8d3 2080 	ldr.w	r2, [r3, #128]	; 0x80
 80008aa:	4905      	ldr	r1, [pc, #20]	; (80008c0 <LL_EXTI_EnableIT_0_31+0x24>)
 80008ac:	687b      	ldr	r3, [r7, #4]
 80008ae:	4313      	orrs	r3, r2
 80008b0:	f8c1 3080 	str.w	r3, [r1, #128]	; 0x80
}
 80008b4:	bf00      	nop
 80008b6:	370c      	adds	r7, #12
 80008b8:	46bd      	mov	sp, r7
 80008ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008be:	4770      	bx	lr
 80008c0:	58000800 	.word	0x58000800

080008c4 <LL_EXTI_EnableRisingTrig_0_31>:
  *         @arg @ref LL_EXTI_LINE_31 (*)
  *         (*) value not defined in all devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableRisingTrig_0_31(uint32_t ExtiLine)
{
 80008c4:	b480      	push	{r7}
 80008c6:	b083      	sub	sp, #12
 80008c8:	af00      	add	r7, sp, #0
 80008ca:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->RTSR1, ExtiLine);
 80008cc:	4b05      	ldr	r3, [pc, #20]	; (80008e4 <LL_EXTI_EnableRisingTrig_0_31+0x20>)
 80008ce:	681a      	ldr	r2, [r3, #0]
 80008d0:	4904      	ldr	r1, [pc, #16]	; (80008e4 <LL_EXTI_EnableRisingTrig_0_31+0x20>)
 80008d2:	687b      	ldr	r3, [r7, #4]
 80008d4:	4313      	orrs	r3, r2
 80008d6:	600b      	str	r3, [r1, #0]

}
 80008d8:	bf00      	nop
 80008da:	370c      	adds	r7, #12
 80008dc:	46bd      	mov	sp, r7
 80008de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008e2:	4770      	bx	lr
 80008e4:	58000800 	.word	0x58000800

080008e8 <ReadRtcSsrValue>:
 *         reliability of the value
 * @param  None
 * @retval SSR value read
 */
static uint32_t ReadRtcSsrValue(void)
{
 80008e8:	b480      	push	{r7}
 80008ea:	b083      	sub	sp, #12
 80008ec:	af00      	add	r7, sp, #0
  uint32_t first_read;
  uint32_t second_read;

  first_read = (uint32_t)(READ_BIT(RTC->SSR, RTC_SSR_SS));
 80008ee:	4b0d      	ldr	r3, [pc, #52]	; (8000924 <ReadRtcSsrValue+0x3c>)
 80008f0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80008f2:	b29b      	uxth	r3, r3
 80008f4:	607b      	str	r3, [r7, #4]

  second_read = (uint32_t)(READ_BIT(RTC->SSR, RTC_SSR_SS));
 80008f6:	4b0b      	ldr	r3, [pc, #44]	; (8000924 <ReadRtcSsrValue+0x3c>)
 80008f8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80008fa:	b29b      	uxth	r3, r3
 80008fc:	603b      	str	r3, [r7, #0]

  while(first_read != second_read)
 80008fe:	e005      	b.n	800090c <ReadRtcSsrValue+0x24>
  {
    first_read = second_read;
 8000900:	683b      	ldr	r3, [r7, #0]
 8000902:	607b      	str	r3, [r7, #4]

    second_read = (uint32_t)(READ_BIT(RTC->SSR, RTC_SSR_SS));
 8000904:	4b07      	ldr	r3, [pc, #28]	; (8000924 <ReadRtcSsrValue+0x3c>)
 8000906:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000908:	b29b      	uxth	r3, r3
 800090a:	603b      	str	r3, [r7, #0]
  while(first_read != second_read)
 800090c:	687a      	ldr	r2, [r7, #4]
 800090e:	683b      	ldr	r3, [r7, #0]
 8000910:	429a      	cmp	r2, r3
 8000912:	d1f5      	bne.n	8000900 <ReadRtcSsrValue+0x18>
  }

  return second_read;
 8000914:	683b      	ldr	r3, [r7, #0]
}
 8000916:	4618      	mov	r0, r3
 8000918:	370c      	adds	r7, #12
 800091a:	46bd      	mov	sp, r7
 800091c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000920:	4770      	bx	lr
 8000922:	bf00      	nop
 8000924:	40002800 	.word	0x40002800

08000928 <LinkTimerAfter>:
 * @param  TimerID:   The ID of the Timer
 * @param  RefTimerID: The ID of the Timer to be linked after
 * @retval None
 */
static void LinkTimerAfter(uint8_t TimerID, uint8_t RefTimerID)
{
 8000928:	b480      	push	{r7}
 800092a:	b085      	sub	sp, #20
 800092c:	af00      	add	r7, sp, #0
 800092e:	4603      	mov	r3, r0
 8000930:	460a      	mov	r2, r1
 8000932:	71fb      	strb	r3, [r7, #7]
 8000934:	4613      	mov	r3, r2
 8000936:	71bb      	strb	r3, [r7, #6]
  uint8_t next_id;

  next_id = aTimerContext[RefTimerID].NextID;
 8000938:	79ba      	ldrb	r2, [r7, #6]
 800093a:	491d      	ldr	r1, [pc, #116]	; (80009b0 <LinkTimerAfter+0x88>)
 800093c:	4613      	mov	r3, r2
 800093e:	005b      	lsls	r3, r3, #1
 8000940:	4413      	add	r3, r2
 8000942:	00db      	lsls	r3, r3, #3
 8000944:	440b      	add	r3, r1
 8000946:	3315      	adds	r3, #21
 8000948:	781b      	ldrb	r3, [r3, #0]
 800094a:	73fb      	strb	r3, [r7, #15]

  if(next_id != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 800094c:	7bfb      	ldrb	r3, [r7, #15]
 800094e:	2b06      	cmp	r3, #6
 8000950:	d009      	beq.n	8000966 <LinkTimerAfter+0x3e>
  {
    aTimerContext[next_id].PreviousID = TimerID;
 8000952:	7bfa      	ldrb	r2, [r7, #15]
 8000954:	4916      	ldr	r1, [pc, #88]	; (80009b0 <LinkTimerAfter+0x88>)
 8000956:	4613      	mov	r3, r2
 8000958:	005b      	lsls	r3, r3, #1
 800095a:	4413      	add	r3, r2
 800095c:	00db      	lsls	r3, r3, #3
 800095e:	440b      	add	r3, r1
 8000960:	3314      	adds	r3, #20
 8000962:	79fa      	ldrb	r2, [r7, #7]
 8000964:	701a      	strb	r2, [r3, #0]
  }
  aTimerContext[TimerID].NextID = next_id;
 8000966:	79fa      	ldrb	r2, [r7, #7]
 8000968:	4911      	ldr	r1, [pc, #68]	; (80009b0 <LinkTimerAfter+0x88>)
 800096a:	4613      	mov	r3, r2
 800096c:	005b      	lsls	r3, r3, #1
 800096e:	4413      	add	r3, r2
 8000970:	00db      	lsls	r3, r3, #3
 8000972:	440b      	add	r3, r1
 8000974:	3315      	adds	r3, #21
 8000976:	7bfa      	ldrb	r2, [r7, #15]
 8000978:	701a      	strb	r2, [r3, #0]
  aTimerContext[TimerID].PreviousID = RefTimerID ;
 800097a:	79fa      	ldrb	r2, [r7, #7]
 800097c:	490c      	ldr	r1, [pc, #48]	; (80009b0 <LinkTimerAfter+0x88>)
 800097e:	4613      	mov	r3, r2
 8000980:	005b      	lsls	r3, r3, #1
 8000982:	4413      	add	r3, r2
 8000984:	00db      	lsls	r3, r3, #3
 8000986:	440b      	add	r3, r1
 8000988:	3314      	adds	r3, #20
 800098a:	79ba      	ldrb	r2, [r7, #6]
 800098c:	701a      	strb	r2, [r3, #0]
  aTimerContext[RefTimerID].NextID = TimerID;
 800098e:	79ba      	ldrb	r2, [r7, #6]
 8000990:	4907      	ldr	r1, [pc, #28]	; (80009b0 <LinkTimerAfter+0x88>)
 8000992:	4613      	mov	r3, r2
 8000994:	005b      	lsls	r3, r3, #1
 8000996:	4413      	add	r3, r2
 8000998:	00db      	lsls	r3, r3, #3
 800099a:	440b      	add	r3, r1
 800099c:	3315      	adds	r3, #21
 800099e:	79fa      	ldrb	r2, [r7, #7]
 80009a0:	701a      	strb	r2, [r3, #0]

  return;
 80009a2:	bf00      	nop
}
 80009a4:	3714      	adds	r7, #20
 80009a6:	46bd      	mov	sp, r7
 80009a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009ac:	4770      	bx	lr
 80009ae:	bf00      	nop
 80009b0:	20000028 	.word	0x20000028

080009b4 <LinkTimerBefore>:
 * @param  TimerID:   The ID of the Timer
 * @param  RefTimerID: The ID of the Timer to be linked before
 * @retval None
 */
static void LinkTimerBefore(uint8_t TimerID, uint8_t RefTimerID)
{
 80009b4:	b480      	push	{r7}
 80009b6:	b085      	sub	sp, #20
 80009b8:	af00      	add	r7, sp, #0
 80009ba:	4603      	mov	r3, r0
 80009bc:	460a      	mov	r2, r1
 80009be:	71fb      	strb	r3, [r7, #7]
 80009c0:	4613      	mov	r3, r2
 80009c2:	71bb      	strb	r3, [r7, #6]
  uint8_t previous_id;

  if(RefTimerID != CurrentRunningTimerID)
 80009c4:	4b29      	ldr	r3, [pc, #164]	; (8000a6c <LinkTimerBefore+0xb8>)
 80009c6:	781b      	ldrb	r3, [r3, #0]
 80009c8:	b2db      	uxtb	r3, r3
 80009ca:	79ba      	ldrb	r2, [r7, #6]
 80009cc:	429a      	cmp	r2, r3
 80009ce:	d032      	beq.n	8000a36 <LinkTimerBefore+0x82>
  {
    previous_id = aTimerContext[RefTimerID].PreviousID;
 80009d0:	79ba      	ldrb	r2, [r7, #6]
 80009d2:	4927      	ldr	r1, [pc, #156]	; (8000a70 <LinkTimerBefore+0xbc>)
 80009d4:	4613      	mov	r3, r2
 80009d6:	005b      	lsls	r3, r3, #1
 80009d8:	4413      	add	r3, r2
 80009da:	00db      	lsls	r3, r3, #3
 80009dc:	440b      	add	r3, r1
 80009de:	3314      	adds	r3, #20
 80009e0:	781b      	ldrb	r3, [r3, #0]
 80009e2:	73fb      	strb	r3, [r7, #15]

    aTimerContext[previous_id].NextID = TimerID;
 80009e4:	7bfa      	ldrb	r2, [r7, #15]
 80009e6:	4922      	ldr	r1, [pc, #136]	; (8000a70 <LinkTimerBefore+0xbc>)
 80009e8:	4613      	mov	r3, r2
 80009ea:	005b      	lsls	r3, r3, #1
 80009ec:	4413      	add	r3, r2
 80009ee:	00db      	lsls	r3, r3, #3
 80009f0:	440b      	add	r3, r1
 80009f2:	3315      	adds	r3, #21
 80009f4:	79fa      	ldrb	r2, [r7, #7]
 80009f6:	701a      	strb	r2, [r3, #0]
    aTimerContext[TimerID].NextID = RefTimerID;
 80009f8:	79fa      	ldrb	r2, [r7, #7]
 80009fa:	491d      	ldr	r1, [pc, #116]	; (8000a70 <LinkTimerBefore+0xbc>)
 80009fc:	4613      	mov	r3, r2
 80009fe:	005b      	lsls	r3, r3, #1
 8000a00:	4413      	add	r3, r2
 8000a02:	00db      	lsls	r3, r3, #3
 8000a04:	440b      	add	r3, r1
 8000a06:	3315      	adds	r3, #21
 8000a08:	79ba      	ldrb	r2, [r7, #6]
 8000a0a:	701a      	strb	r2, [r3, #0]
    aTimerContext[TimerID].PreviousID = previous_id ;
 8000a0c:	79fa      	ldrb	r2, [r7, #7]
 8000a0e:	4918      	ldr	r1, [pc, #96]	; (8000a70 <LinkTimerBefore+0xbc>)
 8000a10:	4613      	mov	r3, r2
 8000a12:	005b      	lsls	r3, r3, #1
 8000a14:	4413      	add	r3, r2
 8000a16:	00db      	lsls	r3, r3, #3
 8000a18:	440b      	add	r3, r1
 8000a1a:	3314      	adds	r3, #20
 8000a1c:	7bfa      	ldrb	r2, [r7, #15]
 8000a1e:	701a      	strb	r2, [r3, #0]
    aTimerContext[RefTimerID].PreviousID = TimerID;
 8000a20:	79ba      	ldrb	r2, [r7, #6]
 8000a22:	4913      	ldr	r1, [pc, #76]	; (8000a70 <LinkTimerBefore+0xbc>)
 8000a24:	4613      	mov	r3, r2
 8000a26:	005b      	lsls	r3, r3, #1
 8000a28:	4413      	add	r3, r2
 8000a2a:	00db      	lsls	r3, r3, #3
 8000a2c:	440b      	add	r3, r1
 8000a2e:	3314      	adds	r3, #20
 8000a30:	79fa      	ldrb	r2, [r7, #7]
 8000a32:	701a      	strb	r2, [r3, #0]
  {
    aTimerContext[TimerID].NextID = RefTimerID;
    aTimerContext[RefTimerID].PreviousID = TimerID;
  }

  return;
 8000a34:	e014      	b.n	8000a60 <LinkTimerBefore+0xac>
    aTimerContext[TimerID].NextID = RefTimerID;
 8000a36:	79fa      	ldrb	r2, [r7, #7]
 8000a38:	490d      	ldr	r1, [pc, #52]	; (8000a70 <LinkTimerBefore+0xbc>)
 8000a3a:	4613      	mov	r3, r2
 8000a3c:	005b      	lsls	r3, r3, #1
 8000a3e:	4413      	add	r3, r2
 8000a40:	00db      	lsls	r3, r3, #3
 8000a42:	440b      	add	r3, r1
 8000a44:	3315      	adds	r3, #21
 8000a46:	79ba      	ldrb	r2, [r7, #6]
 8000a48:	701a      	strb	r2, [r3, #0]
    aTimerContext[RefTimerID].PreviousID = TimerID;
 8000a4a:	79ba      	ldrb	r2, [r7, #6]
 8000a4c:	4908      	ldr	r1, [pc, #32]	; (8000a70 <LinkTimerBefore+0xbc>)
 8000a4e:	4613      	mov	r3, r2
 8000a50:	005b      	lsls	r3, r3, #1
 8000a52:	4413      	add	r3, r2
 8000a54:	00db      	lsls	r3, r3, #3
 8000a56:	440b      	add	r3, r1
 8000a58:	3314      	adds	r3, #20
 8000a5a:	79fa      	ldrb	r2, [r7, #7]
 8000a5c:	701a      	strb	r2, [r3, #0]
  return;
 8000a5e:	bf00      	nop
}
 8000a60:	3714      	adds	r7, #20
 8000a62:	46bd      	mov	sp, r7
 8000a64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a68:	4770      	bx	lr
 8000a6a:	bf00      	nop
 8000a6c:	200000b8 	.word	0x200000b8
 8000a70:	20000028 	.word	0x20000028

08000a74 <linkTimer>:
 * @brief  Insert a Timer in the list
 * @param  TimerID:   The ID of the Timer
 * @retval None
 */
static uint16_t linkTimer(uint8_t TimerID)
{
 8000a74:	b580      	push	{r7, lr}
 8000a76:	b084      	sub	sp, #16
 8000a78:	af00      	add	r7, sp, #0
 8000a7a:	4603      	mov	r3, r0
 8000a7c:	71fb      	strb	r3, [r7, #7]
  uint32_t time_left;
  uint16_t time_elapsed;
  uint8_t timer_id_lookup;
  uint8_t next_id;

  if(CurrentRunningTimerID == CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 8000a7e:	4b4e      	ldr	r3, [pc, #312]	; (8000bb8 <linkTimer+0x144>)
 8000a80:	781b      	ldrb	r3, [r3, #0]
 8000a82:	b2db      	uxtb	r3, r3
 8000a84:	2b06      	cmp	r3, #6
 8000a86:	d118      	bne.n	8000aba <linkTimer+0x46>
  {
    /**
     * No timer in the list
     */
    PreviousRunningTimerID = CurrentRunningTimerID;
 8000a88:	4b4b      	ldr	r3, [pc, #300]	; (8000bb8 <linkTimer+0x144>)
 8000a8a:	781b      	ldrb	r3, [r3, #0]
 8000a8c:	b2da      	uxtb	r2, r3
 8000a8e:	4b4b      	ldr	r3, [pc, #300]	; (8000bbc <linkTimer+0x148>)
 8000a90:	701a      	strb	r2, [r3, #0]
    CurrentRunningTimerID = TimerID;
 8000a92:	4a49      	ldr	r2, [pc, #292]	; (8000bb8 <linkTimer+0x144>)
 8000a94:	79fb      	ldrb	r3, [r7, #7]
 8000a96:	7013      	strb	r3, [r2, #0]
    aTimerContext[TimerID].NextID = CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER;
 8000a98:	79fa      	ldrb	r2, [r7, #7]
 8000a9a:	4949      	ldr	r1, [pc, #292]	; (8000bc0 <linkTimer+0x14c>)
 8000a9c:	4613      	mov	r3, r2
 8000a9e:	005b      	lsls	r3, r3, #1
 8000aa0:	4413      	add	r3, r2
 8000aa2:	00db      	lsls	r3, r3, #3
 8000aa4:	440b      	add	r3, r1
 8000aa6:	3315      	adds	r3, #21
 8000aa8:	2206      	movs	r2, #6
 8000aaa:	701a      	strb	r2, [r3, #0]

    SSRValueOnLastSetup = SSR_FORBIDDEN_VALUE;
 8000aac:	4b45      	ldr	r3, [pc, #276]	; (8000bc4 <linkTimer+0x150>)
 8000aae:	f04f 32ff 	mov.w	r2, #4294967295
 8000ab2:	601a      	str	r2, [r3, #0]
    time_elapsed = 0;
 8000ab4:	2300      	movs	r3, #0
 8000ab6:	81fb      	strh	r3, [r7, #14]
 8000ab8:	e078      	b.n	8000bac <linkTimer+0x138>
  }
  else
  {
    time_elapsed = ReturnTimeElapsed();
 8000aba:	f000 f909 	bl	8000cd0 <ReturnTimeElapsed>
 8000abe:	4603      	mov	r3, r0
 8000ac0:	81fb      	strh	r3, [r7, #14]

    /**
     * update count of the timer to be linked
     */
    aTimerContext[TimerID].CountLeft += time_elapsed;
 8000ac2:	79fa      	ldrb	r2, [r7, #7]
 8000ac4:	493e      	ldr	r1, [pc, #248]	; (8000bc0 <linkTimer+0x14c>)
 8000ac6:	4613      	mov	r3, r2
 8000ac8:	005b      	lsls	r3, r3, #1
 8000aca:	4413      	add	r3, r2
 8000acc:	00db      	lsls	r3, r3, #3
 8000ace:	440b      	add	r3, r1
 8000ad0:	3308      	adds	r3, #8
 8000ad2:	6819      	ldr	r1, [r3, #0]
 8000ad4:	89fb      	ldrh	r3, [r7, #14]
 8000ad6:	79fa      	ldrb	r2, [r7, #7]
 8000ad8:	4419      	add	r1, r3
 8000ada:	4839      	ldr	r0, [pc, #228]	; (8000bc0 <linkTimer+0x14c>)
 8000adc:	4613      	mov	r3, r2
 8000ade:	005b      	lsls	r3, r3, #1
 8000ae0:	4413      	add	r3, r2
 8000ae2:	00db      	lsls	r3, r3, #3
 8000ae4:	4403      	add	r3, r0
 8000ae6:	3308      	adds	r3, #8
 8000ae8:	6019      	str	r1, [r3, #0]
    time_left = aTimerContext[TimerID].CountLeft;
 8000aea:	79fa      	ldrb	r2, [r7, #7]
 8000aec:	4934      	ldr	r1, [pc, #208]	; (8000bc0 <linkTimer+0x14c>)
 8000aee:	4613      	mov	r3, r2
 8000af0:	005b      	lsls	r3, r3, #1
 8000af2:	4413      	add	r3, r2
 8000af4:	00db      	lsls	r3, r3, #3
 8000af6:	440b      	add	r3, r1
 8000af8:	3308      	adds	r3, #8
 8000afa:	681b      	ldr	r3, [r3, #0]
 8000afc:	60bb      	str	r3, [r7, #8]

    /**
     * Search for index where the new timer shall be linked
     */
    if(aTimerContext[CurrentRunningTimerID].CountLeft <= time_left)
 8000afe:	4b2e      	ldr	r3, [pc, #184]	; (8000bb8 <linkTimer+0x144>)
 8000b00:	781b      	ldrb	r3, [r3, #0]
 8000b02:	b2db      	uxtb	r3, r3
 8000b04:	4619      	mov	r1, r3
 8000b06:	4a2e      	ldr	r2, [pc, #184]	; (8000bc0 <linkTimer+0x14c>)
 8000b08:	460b      	mov	r3, r1
 8000b0a:	005b      	lsls	r3, r3, #1
 8000b0c:	440b      	add	r3, r1
 8000b0e:	00db      	lsls	r3, r3, #3
 8000b10:	4413      	add	r3, r2
 8000b12:	3308      	adds	r3, #8
 8000b14:	681b      	ldr	r3, [r3, #0]
 8000b16:	68ba      	ldr	r2, [r7, #8]
 8000b18:	429a      	cmp	r2, r3
 8000b1a:	d337      	bcc.n	8000b8c <linkTimer+0x118>
    {
      /**
       * Search for the ID after the first one
       */
      timer_id_lookup = CurrentRunningTimerID;
 8000b1c:	4b26      	ldr	r3, [pc, #152]	; (8000bb8 <linkTimer+0x144>)
 8000b1e:	781b      	ldrb	r3, [r3, #0]
 8000b20:	737b      	strb	r3, [r7, #13]
      next_id = aTimerContext[timer_id_lookup].NextID;
 8000b22:	7b7a      	ldrb	r2, [r7, #13]
 8000b24:	4926      	ldr	r1, [pc, #152]	; (8000bc0 <linkTimer+0x14c>)
 8000b26:	4613      	mov	r3, r2
 8000b28:	005b      	lsls	r3, r3, #1
 8000b2a:	4413      	add	r3, r2
 8000b2c:	00db      	lsls	r3, r3, #3
 8000b2e:	440b      	add	r3, r1
 8000b30:	3315      	adds	r3, #21
 8000b32:	781b      	ldrb	r3, [r3, #0]
 8000b34:	733b      	strb	r3, [r7, #12]
      while((next_id != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER) && (aTimerContext[next_id].CountLeft <= time_left))
 8000b36:	e013      	b.n	8000b60 <linkTimer+0xec>
      {
        timer_id_lookup = aTimerContext[timer_id_lookup].NextID;
 8000b38:	7b7a      	ldrb	r2, [r7, #13]
 8000b3a:	4921      	ldr	r1, [pc, #132]	; (8000bc0 <linkTimer+0x14c>)
 8000b3c:	4613      	mov	r3, r2
 8000b3e:	005b      	lsls	r3, r3, #1
 8000b40:	4413      	add	r3, r2
 8000b42:	00db      	lsls	r3, r3, #3
 8000b44:	440b      	add	r3, r1
 8000b46:	3315      	adds	r3, #21
 8000b48:	781b      	ldrb	r3, [r3, #0]
 8000b4a:	737b      	strb	r3, [r7, #13]
        next_id = aTimerContext[timer_id_lookup].NextID;
 8000b4c:	7b7a      	ldrb	r2, [r7, #13]
 8000b4e:	491c      	ldr	r1, [pc, #112]	; (8000bc0 <linkTimer+0x14c>)
 8000b50:	4613      	mov	r3, r2
 8000b52:	005b      	lsls	r3, r3, #1
 8000b54:	4413      	add	r3, r2
 8000b56:	00db      	lsls	r3, r3, #3
 8000b58:	440b      	add	r3, r1
 8000b5a:	3315      	adds	r3, #21
 8000b5c:	781b      	ldrb	r3, [r3, #0]
 8000b5e:	733b      	strb	r3, [r7, #12]
      while((next_id != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER) && (aTimerContext[next_id].CountLeft <= time_left))
 8000b60:	7b3b      	ldrb	r3, [r7, #12]
 8000b62:	2b06      	cmp	r3, #6
 8000b64:	d00b      	beq.n	8000b7e <linkTimer+0x10a>
 8000b66:	7b3a      	ldrb	r2, [r7, #12]
 8000b68:	4915      	ldr	r1, [pc, #84]	; (8000bc0 <linkTimer+0x14c>)
 8000b6a:	4613      	mov	r3, r2
 8000b6c:	005b      	lsls	r3, r3, #1
 8000b6e:	4413      	add	r3, r2
 8000b70:	00db      	lsls	r3, r3, #3
 8000b72:	440b      	add	r3, r1
 8000b74:	3308      	adds	r3, #8
 8000b76:	681b      	ldr	r3, [r3, #0]
 8000b78:	68ba      	ldr	r2, [r7, #8]
 8000b7a:	429a      	cmp	r2, r3
 8000b7c:	d2dc      	bcs.n	8000b38 <linkTimer+0xc4>
      }

      /**
       * Link after the ID
       */
      LinkTimerAfter(TimerID, timer_id_lookup);
 8000b7e:	7b7a      	ldrb	r2, [r7, #13]
 8000b80:	79fb      	ldrb	r3, [r7, #7]
 8000b82:	4611      	mov	r1, r2
 8000b84:	4618      	mov	r0, r3
 8000b86:	f7ff fecf 	bl	8000928 <LinkTimerAfter>
 8000b8a:	e00f      	b.n	8000bac <linkTimer+0x138>
    else
    {
      /**
       * Link before the first ID
       */
      LinkTimerBefore(TimerID, CurrentRunningTimerID);
 8000b8c:	4b0a      	ldr	r3, [pc, #40]	; (8000bb8 <linkTimer+0x144>)
 8000b8e:	781b      	ldrb	r3, [r3, #0]
 8000b90:	b2da      	uxtb	r2, r3
 8000b92:	79fb      	ldrb	r3, [r7, #7]
 8000b94:	4611      	mov	r1, r2
 8000b96:	4618      	mov	r0, r3
 8000b98:	f7ff ff0c 	bl	80009b4 <LinkTimerBefore>
      PreviousRunningTimerID = CurrentRunningTimerID;
 8000b9c:	4b06      	ldr	r3, [pc, #24]	; (8000bb8 <linkTimer+0x144>)
 8000b9e:	781b      	ldrb	r3, [r3, #0]
 8000ba0:	b2da      	uxtb	r2, r3
 8000ba2:	4b06      	ldr	r3, [pc, #24]	; (8000bbc <linkTimer+0x148>)
 8000ba4:	701a      	strb	r2, [r3, #0]
      CurrentRunningTimerID = TimerID;
 8000ba6:	4a04      	ldr	r2, [pc, #16]	; (8000bb8 <linkTimer+0x144>)
 8000ba8:	79fb      	ldrb	r3, [r7, #7]
 8000baa:	7013      	strb	r3, [r2, #0]
    }
  }

  return time_elapsed;
 8000bac:	89fb      	ldrh	r3, [r7, #14]
}
 8000bae:	4618      	mov	r0, r3
 8000bb0:	3710      	adds	r7, #16
 8000bb2:	46bd      	mov	sp, r7
 8000bb4:	bd80      	pop	{r7, pc}
 8000bb6:	bf00      	nop
 8000bb8:	200000b8 	.word	0x200000b8
 8000bbc:	200000b9 	.word	0x200000b9
 8000bc0:	20000028 	.word	0x20000028
 8000bc4:	200000bc 	.word	0x200000bc

08000bc8 <UnlinkTimer>:
 * @param  TimerID:   The ID of the Timer
 * @param  RequestReadSSR: Request to read the SSR register or not
 * @retval None
 */
static void UnlinkTimer(uint8_t TimerID, RequestReadSSR_t RequestReadSSR)
{
 8000bc8:	b480      	push	{r7}
 8000bca:	b085      	sub	sp, #20
 8000bcc:	af00      	add	r7, sp, #0
 8000bce:	4603      	mov	r3, r0
 8000bd0:	460a      	mov	r2, r1
 8000bd2:	71fb      	strb	r3, [r7, #7]
 8000bd4:	4613      	mov	r3, r2
 8000bd6:	71bb      	strb	r3, [r7, #6]
  uint8_t previous_id;
  uint8_t next_id;

  if(TimerID == CurrentRunningTimerID)
 8000bd8:	4b39      	ldr	r3, [pc, #228]	; (8000cc0 <UnlinkTimer+0xf8>)
 8000bda:	781b      	ldrb	r3, [r3, #0]
 8000bdc:	b2db      	uxtb	r3, r3
 8000bde:	79fa      	ldrb	r2, [r7, #7]
 8000be0:	429a      	cmp	r2, r3
 8000be2:	d111      	bne.n	8000c08 <UnlinkTimer+0x40>
  {
    PreviousRunningTimerID = CurrentRunningTimerID;
 8000be4:	4b36      	ldr	r3, [pc, #216]	; (8000cc0 <UnlinkTimer+0xf8>)
 8000be6:	781b      	ldrb	r3, [r3, #0]
 8000be8:	b2da      	uxtb	r2, r3
 8000bea:	4b36      	ldr	r3, [pc, #216]	; (8000cc4 <UnlinkTimer+0xfc>)
 8000bec:	701a      	strb	r2, [r3, #0]
    CurrentRunningTimerID = aTimerContext[TimerID].NextID;
 8000bee:	79fa      	ldrb	r2, [r7, #7]
 8000bf0:	4935      	ldr	r1, [pc, #212]	; (8000cc8 <UnlinkTimer+0x100>)
 8000bf2:	4613      	mov	r3, r2
 8000bf4:	005b      	lsls	r3, r3, #1
 8000bf6:	4413      	add	r3, r2
 8000bf8:	00db      	lsls	r3, r3, #3
 8000bfa:	440b      	add	r3, r1
 8000bfc:	3315      	adds	r3, #21
 8000bfe:	781b      	ldrb	r3, [r3, #0]
 8000c00:	b2da      	uxtb	r2, r3
 8000c02:	4b2f      	ldr	r3, [pc, #188]	; (8000cc0 <UnlinkTimer+0xf8>)
 8000c04:	701a      	strb	r2, [r3, #0]
 8000c06:	e03e      	b.n	8000c86 <UnlinkTimer+0xbe>
  }
  else
  {
    previous_id = aTimerContext[TimerID].PreviousID;
 8000c08:	79fa      	ldrb	r2, [r7, #7]
 8000c0a:	492f      	ldr	r1, [pc, #188]	; (8000cc8 <UnlinkTimer+0x100>)
 8000c0c:	4613      	mov	r3, r2
 8000c0e:	005b      	lsls	r3, r3, #1
 8000c10:	4413      	add	r3, r2
 8000c12:	00db      	lsls	r3, r3, #3
 8000c14:	440b      	add	r3, r1
 8000c16:	3314      	adds	r3, #20
 8000c18:	781b      	ldrb	r3, [r3, #0]
 8000c1a:	73fb      	strb	r3, [r7, #15]
    next_id = aTimerContext[TimerID].NextID;
 8000c1c:	79fa      	ldrb	r2, [r7, #7]
 8000c1e:	492a      	ldr	r1, [pc, #168]	; (8000cc8 <UnlinkTimer+0x100>)
 8000c20:	4613      	mov	r3, r2
 8000c22:	005b      	lsls	r3, r3, #1
 8000c24:	4413      	add	r3, r2
 8000c26:	00db      	lsls	r3, r3, #3
 8000c28:	440b      	add	r3, r1
 8000c2a:	3315      	adds	r3, #21
 8000c2c:	781b      	ldrb	r3, [r3, #0]
 8000c2e:	73bb      	strb	r3, [r7, #14]

    aTimerContext[previous_id].NextID = aTimerContext[TimerID].NextID;
 8000c30:	79f9      	ldrb	r1, [r7, #7]
 8000c32:	7bfa      	ldrb	r2, [r7, #15]
 8000c34:	4824      	ldr	r0, [pc, #144]	; (8000cc8 <UnlinkTimer+0x100>)
 8000c36:	460b      	mov	r3, r1
 8000c38:	005b      	lsls	r3, r3, #1
 8000c3a:	440b      	add	r3, r1
 8000c3c:	00db      	lsls	r3, r3, #3
 8000c3e:	4403      	add	r3, r0
 8000c40:	3315      	adds	r3, #21
 8000c42:	781b      	ldrb	r3, [r3, #0]
 8000c44:	b2d8      	uxtb	r0, r3
 8000c46:	4920      	ldr	r1, [pc, #128]	; (8000cc8 <UnlinkTimer+0x100>)
 8000c48:	4613      	mov	r3, r2
 8000c4a:	005b      	lsls	r3, r3, #1
 8000c4c:	4413      	add	r3, r2
 8000c4e:	00db      	lsls	r3, r3, #3
 8000c50:	440b      	add	r3, r1
 8000c52:	3315      	adds	r3, #21
 8000c54:	4602      	mov	r2, r0
 8000c56:	701a      	strb	r2, [r3, #0]
    if(next_id != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 8000c58:	7bbb      	ldrb	r3, [r7, #14]
 8000c5a:	2b06      	cmp	r3, #6
 8000c5c:	d013      	beq.n	8000c86 <UnlinkTimer+0xbe>
    {
      aTimerContext[next_id].PreviousID = aTimerContext[TimerID].PreviousID;
 8000c5e:	79f9      	ldrb	r1, [r7, #7]
 8000c60:	7bba      	ldrb	r2, [r7, #14]
 8000c62:	4819      	ldr	r0, [pc, #100]	; (8000cc8 <UnlinkTimer+0x100>)
 8000c64:	460b      	mov	r3, r1
 8000c66:	005b      	lsls	r3, r3, #1
 8000c68:	440b      	add	r3, r1
 8000c6a:	00db      	lsls	r3, r3, #3
 8000c6c:	4403      	add	r3, r0
 8000c6e:	3314      	adds	r3, #20
 8000c70:	781b      	ldrb	r3, [r3, #0]
 8000c72:	b2d8      	uxtb	r0, r3
 8000c74:	4914      	ldr	r1, [pc, #80]	; (8000cc8 <UnlinkTimer+0x100>)
 8000c76:	4613      	mov	r3, r2
 8000c78:	005b      	lsls	r3, r3, #1
 8000c7a:	4413      	add	r3, r2
 8000c7c:	00db      	lsls	r3, r3, #3
 8000c7e:	440b      	add	r3, r1
 8000c80:	3314      	adds	r3, #20
 8000c82:	4602      	mov	r2, r0
 8000c84:	701a      	strb	r2, [r3, #0]
  }

  /**
   * Timer is out of the list
   */
  aTimerContext[TimerID].TimerIDStatus = TimerID_Created;
 8000c86:	79fa      	ldrb	r2, [r7, #7]
 8000c88:	490f      	ldr	r1, [pc, #60]	; (8000cc8 <UnlinkTimer+0x100>)
 8000c8a:	4613      	mov	r3, r2
 8000c8c:	005b      	lsls	r3, r3, #1
 8000c8e:	4413      	add	r3, r2
 8000c90:	00db      	lsls	r3, r3, #3
 8000c92:	440b      	add	r3, r1
 8000c94:	330c      	adds	r3, #12
 8000c96:	2201      	movs	r2, #1
 8000c98:	701a      	strb	r2, [r3, #0]

  if((CurrentRunningTimerID == CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER) && (RequestReadSSR == SSR_Read_Requested))
 8000c9a:	4b09      	ldr	r3, [pc, #36]	; (8000cc0 <UnlinkTimer+0xf8>)
 8000c9c:	781b      	ldrb	r3, [r3, #0]
 8000c9e:	b2db      	uxtb	r3, r3
 8000ca0:	2b06      	cmp	r3, #6
 8000ca2:	d107      	bne.n	8000cb4 <UnlinkTimer+0xec>
 8000ca4:	79bb      	ldrb	r3, [r7, #6]
 8000ca6:	2b00      	cmp	r3, #0
 8000ca8:	d104      	bne.n	8000cb4 <UnlinkTimer+0xec>
  {
    SSRValueOnLastSetup = SSR_FORBIDDEN_VALUE;
 8000caa:	4b08      	ldr	r3, [pc, #32]	; (8000ccc <UnlinkTimer+0x104>)
 8000cac:	f04f 32ff 	mov.w	r2, #4294967295
 8000cb0:	601a      	str	r2, [r3, #0]
  }

  return;
 8000cb2:	bf00      	nop
 8000cb4:	bf00      	nop
}
 8000cb6:	3714      	adds	r7, #20
 8000cb8:	46bd      	mov	sp, r7
 8000cba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cbe:	4770      	bx	lr
 8000cc0:	200000b8 	.word	0x200000b8
 8000cc4:	200000b9 	.word	0x200000b9
 8000cc8:	20000028 	.word	0x20000028
 8000ccc:	200000bc 	.word	0x200000bc

08000cd0 <ReturnTimeElapsed>:
 *        since the time the timer has been started
 * @param  None
 * @retval Time expired in Ticks
 */
static uint16_t ReturnTimeElapsed(void)
{
 8000cd0:	b580      	push	{r7, lr}
 8000cd2:	b082      	sub	sp, #8
 8000cd4:	af00      	add	r7, sp, #0
  uint32_t  return_value;
  uint32_t  wrap_counter;

  if(SSRValueOnLastSetup != SSR_FORBIDDEN_VALUE)
 8000cd6:	4b1a      	ldr	r3, [pc, #104]	; (8000d40 <ReturnTimeElapsed+0x70>)
 8000cd8:	681b      	ldr	r3, [r3, #0]
 8000cda:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000cde:	d026      	beq.n	8000d2e <ReturnTimeElapsed+0x5e>
  {
    return_value = ReadRtcSsrValue(); /**< Read SSR register first */
 8000ce0:	f7ff fe02 	bl	80008e8 <ReadRtcSsrValue>
 8000ce4:	6078      	str	r0, [r7, #4]

    if (SSRValueOnLastSetup >= return_value)
 8000ce6:	4b16      	ldr	r3, [pc, #88]	; (8000d40 <ReturnTimeElapsed+0x70>)
 8000ce8:	681b      	ldr	r3, [r3, #0]
 8000cea:	687a      	ldr	r2, [r7, #4]
 8000cec:	429a      	cmp	r2, r3
 8000cee:	d805      	bhi.n	8000cfc <ReturnTimeElapsed+0x2c>
    {
      return_value = SSRValueOnLastSetup - return_value;
 8000cf0:	4b13      	ldr	r3, [pc, #76]	; (8000d40 <ReturnTimeElapsed+0x70>)
 8000cf2:	681a      	ldr	r2, [r3, #0]
 8000cf4:	687b      	ldr	r3, [r7, #4]
 8000cf6:	1ad3      	subs	r3, r2, r3
 8000cf8:	607b      	str	r3, [r7, #4]
 8000cfa:	e00a      	b.n	8000d12 <ReturnTimeElapsed+0x42>
    }
    else
    {
      wrap_counter = SynchPrescalerUserConfig - return_value;
 8000cfc:	4b11      	ldr	r3, [pc, #68]	; (8000d44 <ReturnTimeElapsed+0x74>)
 8000cfe:	881b      	ldrh	r3, [r3, #0]
 8000d00:	461a      	mov	r2, r3
 8000d02:	687b      	ldr	r3, [r7, #4]
 8000d04:	1ad3      	subs	r3, r2, r3
 8000d06:	603b      	str	r3, [r7, #0]
      return_value = SSRValueOnLastSetup + wrap_counter;
 8000d08:	4b0d      	ldr	r3, [pc, #52]	; (8000d40 <ReturnTimeElapsed+0x70>)
 8000d0a:	681b      	ldr	r3, [r3, #0]
 8000d0c:	683a      	ldr	r2, [r7, #0]
 8000d0e:	4413      	add	r3, r2
 8000d10:	607b      	str	r3, [r7, #4]

    /**
     * At this stage, ReturnValue holds the number of ticks counted by SSR
     * Need to translate in number of ticks counted by the Wakeuptimer
     */
    return_value = return_value*AsynchPrescalerUserConfig;
 8000d12:	4b0d      	ldr	r3, [pc, #52]	; (8000d48 <ReturnTimeElapsed+0x78>)
 8000d14:	781b      	ldrb	r3, [r3, #0]
 8000d16:	461a      	mov	r2, r3
 8000d18:	687b      	ldr	r3, [r7, #4]
 8000d1a:	fb02 f303 	mul.w	r3, r2, r3
 8000d1e:	607b      	str	r3, [r7, #4]
    return_value = return_value >> WakeupTimerDivider;
 8000d20:	4b0a      	ldr	r3, [pc, #40]	; (8000d4c <ReturnTimeElapsed+0x7c>)
 8000d22:	781b      	ldrb	r3, [r3, #0]
 8000d24:	461a      	mov	r2, r3
 8000d26:	687b      	ldr	r3, [r7, #4]
 8000d28:	40d3      	lsrs	r3, r2
 8000d2a:	607b      	str	r3, [r7, #4]
 8000d2c:	e001      	b.n	8000d32 <ReturnTimeElapsed+0x62>
  }
  else
  {
    return_value = 0;
 8000d2e:	2300      	movs	r3, #0
 8000d30:	607b      	str	r3, [r7, #4]
  }

  return (uint16_t)return_value;
 8000d32:	687b      	ldr	r3, [r7, #4]
 8000d34:	b29b      	uxth	r3, r3
}
 8000d36:	4618      	mov	r0, r3
 8000d38:	3708      	adds	r7, #8
 8000d3a:	46bd      	mov	sp, r7
 8000d3c:	bd80      	pop	{r7, pc}
 8000d3e:	bf00      	nop
 8000d40:	200000bc 	.word	0x200000bc
 8000d44:	200001c2 	.word	0x200001c2
 8000d48:	200001c1 	.word	0x200001c1
 8000d4c:	200001c0 	.word	0x200001c0

08000d50 <RestartWakeupCounter>:
 *    It assumes all condition are met to be allowed to write the wakeup counter
 * @param  Value: Value to be written in the counter
 * @retval None
 */
static void RestartWakeupCounter(uint16_t Value)
{
 8000d50:	b580      	push	{r7, lr}
 8000d52:	b082      	sub	sp, #8
 8000d54:	af00      	add	r7, sp, #0
 8000d56:	4603      	mov	r3, r0
 8000d58:	80fb      	strh	r3, [r7, #6]
   * The wakeuptimer has been disabled in the calling function to reduce the time to poll the WUTWF
   * FLAG when the new value will have to be written
   *  __HAL_RTC_WAKEUPTIMER_DISABLE(phrtc);
   */

  if(Value == 0)
 8000d5a:	88fb      	ldrh	r3, [r7, #6]
 8000d5c:	2b00      	cmp	r3, #0
 8000d5e:	d108      	bne.n	8000d72 <RestartWakeupCounter+0x22>
  {
    SSRValueOnLastSetup = ReadRtcSsrValue();
 8000d60:	f7ff fdc2 	bl	80008e8 <ReadRtcSsrValue>
 8000d64:	4603      	mov	r3, r0
 8000d66:	4a24      	ldr	r2, [pc, #144]	; (8000df8 <RestartWakeupCounter+0xa8>)
 8000d68:	6013      	str	r3, [r2, #0]

    /**
     * Simulate that the Timer expired
     */
    HAL_NVIC_SetPendingIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);
 8000d6a:	2003      	movs	r0, #3
 8000d6c:	f001 f989 	bl	8002082 <HAL_NVIC_SetPendingIRQ>
    __HAL_RTC_WAKEUPTIMER_ENABLE(phrtc);    /**<  Enable the Wakeup Timer */

    HW_TS_RTC_CountUpdated_AppNot();
  }

  return ;
 8000d70:	e03e      	b.n	8000df0 <RestartWakeupCounter+0xa0>
    if((Value > 1) ||(WakeupTimerDivider != 1))
 8000d72:	88fb      	ldrh	r3, [r7, #6]
 8000d74:	2b01      	cmp	r3, #1
 8000d76:	d803      	bhi.n	8000d80 <RestartWakeupCounter+0x30>
 8000d78:	4b20      	ldr	r3, [pc, #128]	; (8000dfc <RestartWakeupCounter+0xac>)
 8000d7a:	781b      	ldrb	r3, [r3, #0]
 8000d7c:	2b01      	cmp	r3, #1
 8000d7e:	d002      	beq.n	8000d86 <RestartWakeupCounter+0x36>
      Value -= 1;
 8000d80:	88fb      	ldrh	r3, [r7, #6]
 8000d82:	3b01      	subs	r3, #1
 8000d84:	80fb      	strh	r3, [r7, #6]
    while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(phrtc, RTC_FLAG_WUTWF) == RESET);
 8000d86:	bf00      	nop
 8000d88:	4b1d      	ldr	r3, [pc, #116]	; (8000e00 <RestartWakeupCounter+0xb0>)
 8000d8a:	681b      	ldr	r3, [r3, #0]
 8000d8c:	681b      	ldr	r3, [r3, #0]
 8000d8e:	68db      	ldr	r3, [r3, #12]
 8000d90:	f003 0304 	and.w	r3, r3, #4
 8000d94:	2b00      	cmp	r3, #0
 8000d96:	d0f7      	beq.n	8000d88 <RestartWakeupCounter+0x38>
    __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(phrtc, RTC_FLAG_WUTF);   /**<  Clear flag in RTC module */
 8000d98:	4b19      	ldr	r3, [pc, #100]	; (8000e00 <RestartWakeupCounter+0xb0>)
 8000d9a:	681b      	ldr	r3, [r3, #0]
 8000d9c:	681b      	ldr	r3, [r3, #0]
 8000d9e:	68db      	ldr	r3, [r3, #12]
 8000da0:	b2da      	uxtb	r2, r3
 8000da2:	4b17      	ldr	r3, [pc, #92]	; (8000e00 <RestartWakeupCounter+0xb0>)
 8000da4:	681b      	ldr	r3, [r3, #0]
 8000da6:	681b      	ldr	r3, [r3, #0]
 8000da8:	f462 6290 	orn	r2, r2, #1152	; 0x480
 8000dac:	60da      	str	r2, [r3, #12]
    __HAL_RTC_WAKEUPTIMER_EXTI_CLEAR_FLAG(); /**<  Clear flag in EXTI module */
 8000dae:	4b15      	ldr	r3, [pc, #84]	; (8000e04 <RestartWakeupCounter+0xb4>)
 8000db0:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8000db4:	60da      	str	r2, [r3, #12]
    HAL_NVIC_ClearPendingIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);   /**<  Clear pending bit in NVIC */
 8000db6:	2003      	movs	r0, #3
 8000db8:	f001 f971 	bl	800209e <HAL_NVIC_ClearPendingIRQ>
    MODIFY_REG(RTC->WUTR, RTC_WUTR_WUT, Value);
 8000dbc:	4b12      	ldr	r3, [pc, #72]	; (8000e08 <RestartWakeupCounter+0xb8>)
 8000dbe:	695b      	ldr	r3, [r3, #20]
 8000dc0:	0c1b      	lsrs	r3, r3, #16
 8000dc2:	041b      	lsls	r3, r3, #16
 8000dc4:	88fa      	ldrh	r2, [r7, #6]
 8000dc6:	4910      	ldr	r1, [pc, #64]	; (8000e08 <RestartWakeupCounter+0xb8>)
 8000dc8:	4313      	orrs	r3, r2
 8000dca:	614b      	str	r3, [r1, #20]
    SSRValueOnLastSetup = ReadRtcSsrValue();
 8000dcc:	f7ff fd8c 	bl	80008e8 <ReadRtcSsrValue>
 8000dd0:	4603      	mov	r3, r0
 8000dd2:	4a09      	ldr	r2, [pc, #36]	; (8000df8 <RestartWakeupCounter+0xa8>)
 8000dd4:	6013      	str	r3, [r2, #0]
    __HAL_RTC_WAKEUPTIMER_ENABLE(phrtc);    /**<  Enable the Wakeup Timer */
 8000dd6:	4b0a      	ldr	r3, [pc, #40]	; (8000e00 <RestartWakeupCounter+0xb0>)
 8000dd8:	681b      	ldr	r3, [r3, #0]
 8000dda:	681b      	ldr	r3, [r3, #0]
 8000ddc:	689a      	ldr	r2, [r3, #8]
 8000dde:	4b08      	ldr	r3, [pc, #32]	; (8000e00 <RestartWakeupCounter+0xb0>)
 8000de0:	681b      	ldr	r3, [r3, #0]
 8000de2:	681b      	ldr	r3, [r3, #0]
 8000de4:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8000de8:	609a      	str	r2, [r3, #8]
    HW_TS_RTC_CountUpdated_AppNot();
 8000dea:	f3af 8000 	nop.w
  return ;
 8000dee:	bf00      	nop
}
 8000df0:	3708      	adds	r7, #8
 8000df2:	46bd      	mov	sp, r7
 8000df4:	bd80      	pop	{r7, pc}
 8000df6:	bf00      	nop
 8000df8:	200000bc 	.word	0x200000bc
 8000dfc:	200001c0 	.word	0x200001c0
 8000e00:	200001bc 	.word	0x200001bc
 8000e04:	58000800 	.word	0x58000800
 8000e08:	40002800 	.word	0x40002800

08000e0c <RescheduleTimerList>:
 *    2) Setup the wakeuptimer
 * @param  None
 * @retval None
 */
static void RescheduleTimerList(void)
{
 8000e0c:	b580      	push	{r7, lr}
 8000e0e:	b084      	sub	sp, #16
 8000e10:	af00      	add	r7, sp, #0

  /**
   * The wakeuptimer is disabled now to reduce the time to poll the WUTWF
   * FLAG when the new value will have to be written
   */
  if((READ_BIT(RTC->CR, RTC_CR_WUTE) == (RTC_CR_WUTE)) == SET)
 8000e12:	4b47      	ldr	r3, [pc, #284]	; (8000f30 <RescheduleTimerList+0x124>)
 8000e14:	689b      	ldr	r3, [r3, #8]
 8000e16:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000e1a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000e1e:	d108      	bne.n	8000e32 <RescheduleTimerList+0x26>
  {
    /**
     * Wait for the flag to be back to 0 when the wakeup timer is enabled
     */
    while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(phrtc, RTC_FLAG_WUTWF) == SET);
 8000e20:	bf00      	nop
 8000e22:	4b44      	ldr	r3, [pc, #272]	; (8000f34 <RescheduleTimerList+0x128>)
 8000e24:	681b      	ldr	r3, [r3, #0]
 8000e26:	681b      	ldr	r3, [r3, #0]
 8000e28:	68db      	ldr	r3, [r3, #12]
 8000e2a:	f003 0304 	and.w	r3, r3, #4
 8000e2e:	2b00      	cmp	r3, #0
 8000e30:	d1f7      	bne.n	8000e22 <RescheduleTimerList+0x16>
  }
  __HAL_RTC_WAKEUPTIMER_DISABLE(phrtc);   /**<  Disable the Wakeup Timer */
 8000e32:	4b40      	ldr	r3, [pc, #256]	; (8000f34 <RescheduleTimerList+0x128>)
 8000e34:	681b      	ldr	r3, [r3, #0]
 8000e36:	681b      	ldr	r3, [r3, #0]
 8000e38:	689a      	ldr	r2, [r3, #8]
 8000e3a:	4b3e      	ldr	r3, [pc, #248]	; (8000f34 <RescheduleTimerList+0x128>)
 8000e3c:	681b      	ldr	r3, [r3, #0]
 8000e3e:	681b      	ldr	r3, [r3, #0]
 8000e40:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8000e44:	609a      	str	r2, [r3, #8]

  localTimerID = CurrentRunningTimerID;
 8000e46:	4b3c      	ldr	r3, [pc, #240]	; (8000f38 <RescheduleTimerList+0x12c>)
 8000e48:	781b      	ldrb	r3, [r3, #0]
 8000e4a:	73fb      	strb	r3, [r7, #15]

  /**
   * Calculate what will be the value to write in the wakeuptimer
   */
  timecountleft = aTimerContext[localTimerID].CountLeft;
 8000e4c:	7bfa      	ldrb	r2, [r7, #15]
 8000e4e:	493b      	ldr	r1, [pc, #236]	; (8000f3c <RescheduleTimerList+0x130>)
 8000e50:	4613      	mov	r3, r2
 8000e52:	005b      	lsls	r3, r3, #1
 8000e54:	4413      	add	r3, r2
 8000e56:	00db      	lsls	r3, r3, #3
 8000e58:	440b      	add	r3, r1
 8000e5a:	3308      	adds	r3, #8
 8000e5c:	681b      	ldr	r3, [r3, #0]
 8000e5e:	60bb      	str	r3, [r7, #8]

  /**
   * Read how much has been counted
   */
  time_elapsed = ReturnTimeElapsed();
 8000e60:	f7ff ff36 	bl	8000cd0 <ReturnTimeElapsed>
 8000e64:	4603      	mov	r3, r0
 8000e66:	80fb      	strh	r3, [r7, #6]

  if(timecountleft < time_elapsed )
 8000e68:	88fb      	ldrh	r3, [r7, #6]
 8000e6a:	68ba      	ldr	r2, [r7, #8]
 8000e6c:	429a      	cmp	r2, r3
 8000e6e:	d205      	bcs.n	8000e7c <RescheduleTimerList+0x70>
  {
    /**
     * There is no tick left to count
     */
    wakeup_timer_value = 0;
 8000e70:	2300      	movs	r3, #0
 8000e72:	81bb      	strh	r3, [r7, #12]
    WakeupTimerLimitation = WakeupTimerValue_LargeEnough;
 8000e74:	4b32      	ldr	r3, [pc, #200]	; (8000f40 <RescheduleTimerList+0x134>)
 8000e76:	2201      	movs	r2, #1
 8000e78:	701a      	strb	r2, [r3, #0]
 8000e7a:	e04d      	b.n	8000f18 <RescheduleTimerList+0x10c>
  }
  else
  {
    if(timecountleft > (time_elapsed + MaxWakeupTimerSetup))
 8000e7c:	88fb      	ldrh	r3, [r7, #6]
 8000e7e:	4a31      	ldr	r2, [pc, #196]	; (8000f44 <RescheduleTimerList+0x138>)
 8000e80:	8812      	ldrh	r2, [r2, #0]
 8000e82:	b292      	uxth	r2, r2
 8000e84:	4413      	add	r3, r2
 8000e86:	461a      	mov	r2, r3
 8000e88:	68bb      	ldr	r3, [r7, #8]
 8000e8a:	4293      	cmp	r3, r2
 8000e8c:	d906      	bls.n	8000e9c <RescheduleTimerList+0x90>
    {
      /**
       * The number of tick left is greater than the Wakeuptimer maximum value
       */
      wakeup_timer_value = MaxWakeupTimerSetup;
 8000e8e:	4b2d      	ldr	r3, [pc, #180]	; (8000f44 <RescheduleTimerList+0x138>)
 8000e90:	881b      	ldrh	r3, [r3, #0]
 8000e92:	81bb      	strh	r3, [r7, #12]

      WakeupTimerLimitation = WakeupTimerValue_Overpassed;
 8000e94:	4b2a      	ldr	r3, [pc, #168]	; (8000f40 <RescheduleTimerList+0x134>)
 8000e96:	2200      	movs	r2, #0
 8000e98:	701a      	strb	r2, [r3, #0]
 8000e9a:	e03d      	b.n	8000f18 <RescheduleTimerList+0x10c>
    }
    else
    {
      wakeup_timer_value = timecountleft - time_elapsed;
 8000e9c:	68bb      	ldr	r3, [r7, #8]
 8000e9e:	b29a      	uxth	r2, r3
 8000ea0:	88fb      	ldrh	r3, [r7, #6]
 8000ea2:	1ad3      	subs	r3, r2, r3
 8000ea4:	81bb      	strh	r3, [r7, #12]
      WakeupTimerLimitation = WakeupTimerValue_LargeEnough;
 8000ea6:	4b26      	ldr	r3, [pc, #152]	; (8000f40 <RescheduleTimerList+0x134>)
 8000ea8:	2201      	movs	r2, #1
 8000eaa:	701a      	strb	r2, [r3, #0]
  }

  /**
   * update ticks left to be counted for each timer
   */
  while(localTimerID != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 8000eac:	e034      	b.n	8000f18 <RescheduleTimerList+0x10c>
  {
    if (aTimerContext[localTimerID].CountLeft < time_elapsed)
 8000eae:	7bfa      	ldrb	r2, [r7, #15]
 8000eb0:	4922      	ldr	r1, [pc, #136]	; (8000f3c <RescheduleTimerList+0x130>)
 8000eb2:	4613      	mov	r3, r2
 8000eb4:	005b      	lsls	r3, r3, #1
 8000eb6:	4413      	add	r3, r2
 8000eb8:	00db      	lsls	r3, r3, #3
 8000eba:	440b      	add	r3, r1
 8000ebc:	3308      	adds	r3, #8
 8000ebe:	681a      	ldr	r2, [r3, #0]
 8000ec0:	88fb      	ldrh	r3, [r7, #6]
 8000ec2:	429a      	cmp	r2, r3
 8000ec4:	d20a      	bcs.n	8000edc <RescheduleTimerList+0xd0>
    {
      aTimerContext[localTimerID].CountLeft = 0;
 8000ec6:	7bfa      	ldrb	r2, [r7, #15]
 8000ec8:	491c      	ldr	r1, [pc, #112]	; (8000f3c <RescheduleTimerList+0x130>)
 8000eca:	4613      	mov	r3, r2
 8000ecc:	005b      	lsls	r3, r3, #1
 8000ece:	4413      	add	r3, r2
 8000ed0:	00db      	lsls	r3, r3, #3
 8000ed2:	440b      	add	r3, r1
 8000ed4:	3308      	adds	r3, #8
 8000ed6:	2200      	movs	r2, #0
 8000ed8:	601a      	str	r2, [r3, #0]
 8000eda:	e013      	b.n	8000f04 <RescheduleTimerList+0xf8>
    }
    else
    {
      aTimerContext[localTimerID].CountLeft -= time_elapsed;
 8000edc:	7bfa      	ldrb	r2, [r7, #15]
 8000ede:	4917      	ldr	r1, [pc, #92]	; (8000f3c <RescheduleTimerList+0x130>)
 8000ee0:	4613      	mov	r3, r2
 8000ee2:	005b      	lsls	r3, r3, #1
 8000ee4:	4413      	add	r3, r2
 8000ee6:	00db      	lsls	r3, r3, #3
 8000ee8:	440b      	add	r3, r1
 8000eea:	3308      	adds	r3, #8
 8000eec:	6819      	ldr	r1, [r3, #0]
 8000eee:	88fb      	ldrh	r3, [r7, #6]
 8000ef0:	7bfa      	ldrb	r2, [r7, #15]
 8000ef2:	1ac9      	subs	r1, r1, r3
 8000ef4:	4811      	ldr	r0, [pc, #68]	; (8000f3c <RescheduleTimerList+0x130>)
 8000ef6:	4613      	mov	r3, r2
 8000ef8:	005b      	lsls	r3, r3, #1
 8000efa:	4413      	add	r3, r2
 8000efc:	00db      	lsls	r3, r3, #3
 8000efe:	4403      	add	r3, r0
 8000f00:	3308      	adds	r3, #8
 8000f02:	6019      	str	r1, [r3, #0]
    }
    localTimerID = aTimerContext[localTimerID].NextID;
 8000f04:	7bfa      	ldrb	r2, [r7, #15]
 8000f06:	490d      	ldr	r1, [pc, #52]	; (8000f3c <RescheduleTimerList+0x130>)
 8000f08:	4613      	mov	r3, r2
 8000f0a:	005b      	lsls	r3, r3, #1
 8000f0c:	4413      	add	r3, r2
 8000f0e:	00db      	lsls	r3, r3, #3
 8000f10:	440b      	add	r3, r1
 8000f12:	3315      	adds	r3, #21
 8000f14:	781b      	ldrb	r3, [r3, #0]
 8000f16:	73fb      	strb	r3, [r7, #15]
  while(localTimerID != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 8000f18:	7bfb      	ldrb	r3, [r7, #15]
 8000f1a:	2b06      	cmp	r3, #6
 8000f1c:	d1c7      	bne.n	8000eae <RescheduleTimerList+0xa2>
  }

  /**
   * Write next count
   */
  RestartWakeupCounter(wakeup_timer_value);
 8000f1e:	89bb      	ldrh	r3, [r7, #12]
 8000f20:	4618      	mov	r0, r3
 8000f22:	f7ff ff15 	bl	8000d50 <RestartWakeupCounter>

  return ;
 8000f26:	bf00      	nop
}
 8000f28:	3710      	adds	r7, #16
 8000f2a:	46bd      	mov	sp, r7
 8000f2c:	bd80      	pop	{r7, pc}
 8000f2e:	bf00      	nop
 8000f30:	40002800 	.word	0x40002800
 8000f34:	200001bc 	.word	0x200001bc
 8000f38:	200000b8 	.word	0x200000b8
 8000f3c:	20000028 	.word	0x20000028
 8000f40:	200000c0 	.word	0x200000c0
 8000f44:	200001c4 	.word	0x200001c4

08000f48 <HW_TS_Init>:

  return;
}

void HW_TS_Init(HW_TS_InitMode_t TimerInitMode, RTC_HandleTypeDef *hrtc)
{
 8000f48:	b580      	push	{r7, lr}
 8000f4a:	b088      	sub	sp, #32
 8000f4c:	af00      	add	r7, sp, #0
 8000f4e:	4603      	mov	r3, r0
 8000f50:	6039      	str	r1, [r7, #0]
 8000f52:	71fb      	strb	r3, [r7, #7]
  uint32_t localmaxwakeuptimersetup;

  /**
   * Get RTC handler
   */
  phrtc = hrtc;
 8000f54:	4a64      	ldr	r2, [pc, #400]	; (80010e8 <HW_TS_Init+0x1a0>)
 8000f56:	683b      	ldr	r3, [r7, #0]
 8000f58:	6013      	str	r3, [r2, #0]

 /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE( phrtc );
 8000f5a:	4b63      	ldr	r3, [pc, #396]	; (80010e8 <HW_TS_Init+0x1a0>)
 8000f5c:	681b      	ldr	r3, [r3, #0]
 8000f5e:	681b      	ldr	r3, [r3, #0]
 8000f60:	22ca      	movs	r2, #202	; 0xca
 8000f62:	625a      	str	r2, [r3, #36]	; 0x24
 8000f64:	4b60      	ldr	r3, [pc, #384]	; (80010e8 <HW_TS_Init+0x1a0>)
 8000f66:	681b      	ldr	r3, [r3, #0]
 8000f68:	681b      	ldr	r3, [r3, #0]
 8000f6a:	2253      	movs	r2, #83	; 0x53
 8000f6c:	625a      	str	r2, [r3, #36]	; 0x24

  SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 8000f6e:	4b5f      	ldr	r3, [pc, #380]	; (80010ec <HW_TS_Init+0x1a4>)
 8000f70:	689b      	ldr	r3, [r3, #8]
 8000f72:	4a5e      	ldr	r2, [pc, #376]	; (80010ec <HW_TS_Init+0x1a4>)
 8000f74:	f043 0320 	orr.w	r3, r3, #32
 8000f78:	6093      	str	r3, [r2, #8]

  /**
   * Readout the user config
   */
  WakeupTimerDivider = (4 - ((uint32_t)(READ_BIT(RTC->CR, RTC_CR_WUCKSEL))));
 8000f7a:	4b5c      	ldr	r3, [pc, #368]	; (80010ec <HW_TS_Init+0x1a4>)
 8000f7c:	689b      	ldr	r3, [r3, #8]
 8000f7e:	b2db      	uxtb	r3, r3
 8000f80:	f003 0307 	and.w	r3, r3, #7
 8000f84:	b2db      	uxtb	r3, r3
 8000f86:	f1c3 0304 	rsb	r3, r3, #4
 8000f8a:	b2da      	uxtb	r2, r3
 8000f8c:	4b58      	ldr	r3, [pc, #352]	; (80010f0 <HW_TS_Init+0x1a8>)
 8000f8e:	701a      	strb	r2, [r3, #0]

  AsynchPrescalerUserConfig = (uint8_t)(READ_BIT(RTC->PRER, RTC_PRER_PREDIV_A) >> (uint32_t)POSITION_VAL(RTC_PRER_PREDIV_A)) + 1;
 8000f90:	4b56      	ldr	r3, [pc, #344]	; (80010ec <HW_TS_Init+0x1a4>)
 8000f92:	691b      	ldr	r3, [r3, #16]
 8000f94:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8000f98:	f44f 02fe 	mov.w	r2, #8323072	; 0x7f0000
 8000f9c:	613a      	str	r2, [r7, #16]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000f9e:	693a      	ldr	r2, [r7, #16]
 8000fa0:	fa92 f2a2 	rbit	r2, r2
 8000fa4:	60fa      	str	r2, [r7, #12]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8000fa6:	68fa      	ldr	r2, [r7, #12]
 8000fa8:	617a      	str	r2, [r7, #20]
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8000faa:	697a      	ldr	r2, [r7, #20]
 8000fac:	2a00      	cmp	r2, #0
 8000fae:	d101      	bne.n	8000fb4 <HW_TS_Init+0x6c>
  {
    return 32U;
 8000fb0:	2220      	movs	r2, #32
 8000fb2:	e003      	b.n	8000fbc <HW_TS_Init+0x74>
  }
  return __builtin_clz(value);
 8000fb4:	697a      	ldr	r2, [r7, #20]
 8000fb6:	fab2 f282 	clz	r2, r2
 8000fba:	b2d2      	uxtb	r2, r2
 8000fbc:	40d3      	lsrs	r3, r2
 8000fbe:	b2db      	uxtb	r3, r3
 8000fc0:	3301      	adds	r3, #1
 8000fc2:	b2da      	uxtb	r2, r3
 8000fc4:	4b4b      	ldr	r3, [pc, #300]	; (80010f4 <HW_TS_Init+0x1ac>)
 8000fc6:	701a      	strb	r2, [r3, #0]

  SynchPrescalerUserConfig = (uint16_t)(READ_BIT(RTC->PRER, RTC_PRER_PREDIV_S)) + 1;
 8000fc8:	4b48      	ldr	r3, [pc, #288]	; (80010ec <HW_TS_Init+0x1a4>)
 8000fca:	691b      	ldr	r3, [r3, #16]
 8000fcc:	b29b      	uxth	r3, r3
 8000fce:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8000fd2:	b29b      	uxth	r3, r3
 8000fd4:	3301      	adds	r3, #1
 8000fd6:	b29a      	uxth	r2, r3
 8000fd8:	4b47      	ldr	r3, [pc, #284]	; (80010f8 <HW_TS_Init+0x1b0>)
 8000fda:	801a      	strh	r2, [r3, #0]

  /**
   *  Margin is taken to avoid wrong calculation when the wrap around is there and some
   *  application interrupts may have delayed the reading
   */
  localmaxwakeuptimersetup = ((((SynchPrescalerUserConfig - 1)*AsynchPrescalerUserConfig) - CFG_HW_TS_RTC_HANDLER_MAX_DELAY) >> WakeupTimerDivider);
 8000fdc:	4b46      	ldr	r3, [pc, #280]	; (80010f8 <HW_TS_Init+0x1b0>)
 8000fde:	881b      	ldrh	r3, [r3, #0]
 8000fe0:	3b01      	subs	r3, #1
 8000fe2:	4a44      	ldr	r2, [pc, #272]	; (80010f4 <HW_TS_Init+0x1ac>)
 8000fe4:	7812      	ldrb	r2, [r2, #0]
 8000fe6:	fb02 f303 	mul.w	r3, r2, r3
 8000fea:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 8000fee:	4a40      	ldr	r2, [pc, #256]	; (80010f0 <HW_TS_Init+0x1a8>)
 8000ff0:	7812      	ldrb	r2, [r2, #0]
 8000ff2:	40d3      	lsrs	r3, r2
 8000ff4:	61bb      	str	r3, [r7, #24]

  if(localmaxwakeuptimersetup >= 0xFFFF)
 8000ff6:	69bb      	ldr	r3, [r7, #24]
 8000ff8:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8000ffc:	4293      	cmp	r3, r2
 8000ffe:	d904      	bls.n	800100a <HW_TS_Init+0xc2>
  {
    MaxWakeupTimerSetup = 0xFFFF;
 8001000:	4b3e      	ldr	r3, [pc, #248]	; (80010fc <HW_TS_Init+0x1b4>)
 8001002:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001006:	801a      	strh	r2, [r3, #0]
 8001008:	e003      	b.n	8001012 <HW_TS_Init+0xca>
  }
  else
  {
    MaxWakeupTimerSetup = (uint16_t)localmaxwakeuptimersetup;
 800100a:	69bb      	ldr	r3, [r7, #24]
 800100c:	b29a      	uxth	r2, r3
 800100e:	4b3b      	ldr	r3, [pc, #236]	; (80010fc <HW_TS_Init+0x1b4>)
 8001010:	801a      	strh	r2, [r3, #0]
  }

  /**
   * Configure EXTI module
   */
  LL_EXTI_EnableRisingTrig_0_31(RTC_EXTI_LINE_WAKEUPTIMER_EVENT);
 8001012:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 8001016:	f7ff fc55 	bl	80008c4 <LL_EXTI_EnableRisingTrig_0_31>
  LL_EXTI_EnableIT_0_31(RTC_EXTI_LINE_WAKEUPTIMER_EVENT);
 800101a:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 800101e:	f7ff fc3d 	bl	800089c <LL_EXTI_EnableIT_0_31>

  if(TimerInitMode == hw_ts_InitMode_Full)
 8001022:	79fb      	ldrb	r3, [r7, #7]
 8001024:	2b00      	cmp	r3, #0
 8001026:	d143      	bne.n	80010b0 <HW_TS_Init+0x168>
  {
    WakeupTimerLimitation = WakeupTimerValue_LargeEnough;
 8001028:	4b35      	ldr	r3, [pc, #212]	; (8001100 <HW_TS_Init+0x1b8>)
 800102a:	2201      	movs	r2, #1
 800102c:	701a      	strb	r2, [r3, #0]
    SSRValueOnLastSetup = SSR_FORBIDDEN_VALUE;
 800102e:	4b35      	ldr	r3, [pc, #212]	; (8001104 <HW_TS_Init+0x1bc>)
 8001030:	f04f 32ff 	mov.w	r2, #4294967295
 8001034:	601a      	str	r2, [r3, #0]

    /**
     * Initialize the timer server
     */
    for(loop = 0; loop < CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER; loop++)
 8001036:	2300      	movs	r3, #0
 8001038:	77fb      	strb	r3, [r7, #31]
 800103a:	e00c      	b.n	8001056 <HW_TS_Init+0x10e>
    {
      aTimerContext[loop].TimerIDStatus = TimerID_Free;
 800103c:	7ffa      	ldrb	r2, [r7, #31]
 800103e:	4932      	ldr	r1, [pc, #200]	; (8001108 <HW_TS_Init+0x1c0>)
 8001040:	4613      	mov	r3, r2
 8001042:	005b      	lsls	r3, r3, #1
 8001044:	4413      	add	r3, r2
 8001046:	00db      	lsls	r3, r3, #3
 8001048:	440b      	add	r3, r1
 800104a:	330c      	adds	r3, #12
 800104c:	2200      	movs	r2, #0
 800104e:	701a      	strb	r2, [r3, #0]
    for(loop = 0; loop < CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER; loop++)
 8001050:	7ffb      	ldrb	r3, [r7, #31]
 8001052:	3301      	adds	r3, #1
 8001054:	77fb      	strb	r3, [r7, #31]
 8001056:	7ffb      	ldrb	r3, [r7, #31]
 8001058:	2b05      	cmp	r3, #5
 800105a:	d9ef      	bls.n	800103c <HW_TS_Init+0xf4>
    }

    CurrentRunningTimerID = CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER;   /**<  Set ID to non valid value */
 800105c:	4b2b      	ldr	r3, [pc, #172]	; (800110c <HW_TS_Init+0x1c4>)
 800105e:	2206      	movs	r2, #6
 8001060:	701a      	strb	r2, [r3, #0]

    __HAL_RTC_WAKEUPTIMER_DISABLE(phrtc);                       /**<  Disable the Wakeup Timer */
 8001062:	4b21      	ldr	r3, [pc, #132]	; (80010e8 <HW_TS_Init+0x1a0>)
 8001064:	681b      	ldr	r3, [r3, #0]
 8001066:	681b      	ldr	r3, [r3, #0]
 8001068:	689a      	ldr	r2, [r3, #8]
 800106a:	4b1f      	ldr	r3, [pc, #124]	; (80010e8 <HW_TS_Init+0x1a0>)
 800106c:	681b      	ldr	r3, [r3, #0]
 800106e:	681b      	ldr	r3, [r3, #0]
 8001070:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001074:	609a      	str	r2, [r3, #8]
    __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(phrtc, RTC_FLAG_WUTF);     /**<  Clear flag in RTC module */
 8001076:	4b1c      	ldr	r3, [pc, #112]	; (80010e8 <HW_TS_Init+0x1a0>)
 8001078:	681b      	ldr	r3, [r3, #0]
 800107a:	681b      	ldr	r3, [r3, #0]
 800107c:	68db      	ldr	r3, [r3, #12]
 800107e:	b2da      	uxtb	r2, r3
 8001080:	4b19      	ldr	r3, [pc, #100]	; (80010e8 <HW_TS_Init+0x1a0>)
 8001082:	681b      	ldr	r3, [r3, #0]
 8001084:	681b      	ldr	r3, [r3, #0]
 8001086:	f462 6290 	orn	r2, r2, #1152	; 0x480
 800108a:	60da      	str	r2, [r3, #12]
    __HAL_RTC_WAKEUPTIMER_EXTI_CLEAR_FLAG(); /**<  Clear flag in EXTI module  */
 800108c:	4b20      	ldr	r3, [pc, #128]	; (8001110 <HW_TS_Init+0x1c8>)
 800108e:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8001092:	60da      	str	r2, [r3, #12]
    HAL_NVIC_ClearPendingIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);       /**<  Clear pending bit in NVIC  */
 8001094:	2003      	movs	r0, #3
 8001096:	f001 f802 	bl	800209e <HAL_NVIC_ClearPendingIRQ>
    __HAL_RTC_WAKEUPTIMER_ENABLE_IT(phrtc, RTC_IT_WUT);         /**<  Enable interrupt in RTC module  */
 800109a:	4b13      	ldr	r3, [pc, #76]	; (80010e8 <HW_TS_Init+0x1a0>)
 800109c:	681b      	ldr	r3, [r3, #0]
 800109e:	681b      	ldr	r3, [r3, #0]
 80010a0:	689a      	ldr	r2, [r3, #8]
 80010a2:	4b11      	ldr	r3, [pc, #68]	; (80010e8 <HW_TS_Init+0x1a0>)
 80010a4:	681b      	ldr	r3, [r3, #0]
 80010a6:	681b      	ldr	r3, [r3, #0]
 80010a8:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80010ac:	609a      	str	r2, [r3, #8]
 80010ae:	e00a      	b.n	80010c6 <HW_TS_Init+0x17e>
  }
  else
  {
    if(__HAL_RTC_WAKEUPTIMER_GET_FLAG(phrtc, RTC_FLAG_WUTF) != RESET)
 80010b0:	4b0d      	ldr	r3, [pc, #52]	; (80010e8 <HW_TS_Init+0x1a0>)
 80010b2:	681b      	ldr	r3, [r3, #0]
 80010b4:	681b      	ldr	r3, [r3, #0]
 80010b6:	68db      	ldr	r3, [r3, #12]
 80010b8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80010bc:	2b00      	cmp	r3, #0
 80010be:	d002      	beq.n	80010c6 <HW_TS_Init+0x17e>
    {
      /**
       * Simulate that the Timer expired
       */
      HAL_NVIC_SetPendingIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);
 80010c0:	2003      	movs	r0, #3
 80010c2:	f000 ffde 	bl	8002082 <HAL_NVIC_SetPendingIRQ>
    }
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE( phrtc );
 80010c6:	4b08      	ldr	r3, [pc, #32]	; (80010e8 <HW_TS_Init+0x1a0>)
 80010c8:	681b      	ldr	r3, [r3, #0]
 80010ca:	681b      	ldr	r3, [r3, #0]
 80010cc:	22ff      	movs	r2, #255	; 0xff
 80010ce:	625a      	str	r2, [r3, #36]	; 0x24

  HAL_NVIC_SetPriority(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID, CFG_HW_TS_NVIC_RTC_WAKEUP_IT_PREEMPTPRIO, CFG_HW_TS_NVIC_RTC_WAKEUP_IT_SUBPRIO);   /**<  Set NVIC priority */
 80010d0:	2200      	movs	r2, #0
 80010d2:	2103      	movs	r1, #3
 80010d4:	2003      	movs	r0, #3
 80010d6:	f000 ff92 	bl	8001ffe <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID); /**<  Enable NVIC */
 80010da:	2003      	movs	r0, #3
 80010dc:	f000 ffa9 	bl	8002032 <HAL_NVIC_EnableIRQ>

  return;
 80010e0:	bf00      	nop
}
 80010e2:	3720      	adds	r7, #32
 80010e4:	46bd      	mov	sp, r7
 80010e6:	bd80      	pop	{r7, pc}
 80010e8:	200001bc 	.word	0x200001bc
 80010ec:	40002800 	.word	0x40002800
 80010f0:	200001c0 	.word	0x200001c0
 80010f4:	200001c1 	.word	0x200001c1
 80010f8:	200001c2 	.word	0x200001c2
 80010fc:	200001c4 	.word	0x200001c4
 8001100:	200000c0 	.word	0x200000c0
 8001104:	200000bc 	.word	0x200000bc
 8001108:	20000028 	.word	0x20000028
 800110c:	200000b8 	.word	0x200000b8
 8001110:	58000800 	.word	0x58000800

08001114 <HW_TS_Create>:

HW_TS_ReturnStatus_t HW_TS_Create(uint32_t TimerProcessID, uint8_t *pTimerId, HW_TS_Mode_t TimerMode, HW_TS_pTimerCb_t pftimeout_handler)
{
 8001114:	b480      	push	{r7}
 8001116:	b08b      	sub	sp, #44	; 0x2c
 8001118:	af00      	add	r7, sp, #0
 800111a:	60f8      	str	r0, [r7, #12]
 800111c:	60b9      	str	r1, [r7, #8]
 800111e:	603b      	str	r3, [r7, #0]
 8001120:	4613      	mov	r3, r2
 8001122:	71fb      	strb	r3, [r7, #7]
  HW_TS_ReturnStatus_t localreturnstatus;
  uint8_t loop = 0;
 8001124:	2300      	movs	r3, #0
 8001126:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800112a:	f3ef 8310 	mrs	r3, PRIMASK
 800112e:	61fb      	str	r3, [r7, #28]
  return(result);
 8001130:	69fb      	ldr	r3, [r7, #28]
#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  uint32_t primask_bit;
#endif

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 8001132:	623b      	str	r3, [r7, #32]
  __ASM volatile ("cpsid i" : : : "memory");
 8001134:	b672      	cpsid	i
}
 8001136:	bf00      	nop
  __disable_irq();          /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
#endif

  while((loop < CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER) && (aTimerContext[loop].TimerIDStatus != TimerID_Free))
 8001138:	e004      	b.n	8001144 <HW_TS_Create+0x30>
  {
    loop++;
 800113a:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800113e:	3301      	adds	r3, #1
 8001140:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  while((loop < CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER) && (aTimerContext[loop].TimerIDStatus != TimerID_Free))
 8001144:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8001148:	2b05      	cmp	r3, #5
 800114a:	d80c      	bhi.n	8001166 <HW_TS_Create+0x52>
 800114c:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 8001150:	492c      	ldr	r1, [pc, #176]	; (8001204 <HW_TS_Create+0xf0>)
 8001152:	4613      	mov	r3, r2
 8001154:	005b      	lsls	r3, r3, #1
 8001156:	4413      	add	r3, r2
 8001158:	00db      	lsls	r3, r3, #3
 800115a:	440b      	add	r3, r1
 800115c:	330c      	adds	r3, #12
 800115e:	781b      	ldrb	r3, [r3, #0]
 8001160:	b2db      	uxtb	r3, r3
 8001162:	2b00      	cmp	r3, #0
 8001164:	d1e9      	bne.n	800113a <HW_TS_Create+0x26>
  }

  if(loop != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 8001166:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800116a:	2b06      	cmp	r3, #6
 800116c:	d038      	beq.n	80011e0 <HW_TS_Create+0xcc>
  {
    aTimerContext[loop].TimerIDStatus = TimerID_Created;
 800116e:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 8001172:	4924      	ldr	r1, [pc, #144]	; (8001204 <HW_TS_Create+0xf0>)
 8001174:	4613      	mov	r3, r2
 8001176:	005b      	lsls	r3, r3, #1
 8001178:	4413      	add	r3, r2
 800117a:	00db      	lsls	r3, r3, #3
 800117c:	440b      	add	r3, r1
 800117e:	330c      	adds	r3, #12
 8001180:	2201      	movs	r2, #1
 8001182:	701a      	strb	r2, [r3, #0]
 8001184:	6a3b      	ldr	r3, [r7, #32]
 8001186:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8001188:	69bb      	ldr	r3, [r7, #24]
 800118a:	f383 8810 	msr	PRIMASK, r3
}
 800118e:	bf00      	nop

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
    __set_PRIMASK(primask_bit); /**< Restore PRIMASK bit*/
#endif

    aTimerContext[loop].TimerProcessID = TimerProcessID;
 8001190:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 8001194:	491b      	ldr	r1, [pc, #108]	; (8001204 <HW_TS_Create+0xf0>)
 8001196:	4613      	mov	r3, r2
 8001198:	005b      	lsls	r3, r3, #1
 800119a:	4413      	add	r3, r2
 800119c:	00db      	lsls	r3, r3, #3
 800119e:	440b      	add	r3, r1
 80011a0:	3310      	adds	r3, #16
 80011a2:	68fa      	ldr	r2, [r7, #12]
 80011a4:	601a      	str	r2, [r3, #0]
    aTimerContext[loop].TimerMode = TimerMode;
 80011a6:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 80011aa:	4916      	ldr	r1, [pc, #88]	; (8001204 <HW_TS_Create+0xf0>)
 80011ac:	4613      	mov	r3, r2
 80011ae:	005b      	lsls	r3, r3, #1
 80011b0:	4413      	add	r3, r2
 80011b2:	00db      	lsls	r3, r3, #3
 80011b4:	440b      	add	r3, r1
 80011b6:	330d      	adds	r3, #13
 80011b8:	79fa      	ldrb	r2, [r7, #7]
 80011ba:	701a      	strb	r2, [r3, #0]
    aTimerContext[loop].pTimerCallBack = pftimeout_handler;
 80011bc:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 80011c0:	4910      	ldr	r1, [pc, #64]	; (8001204 <HW_TS_Create+0xf0>)
 80011c2:	4613      	mov	r3, r2
 80011c4:	005b      	lsls	r3, r3, #1
 80011c6:	4413      	add	r3, r2
 80011c8:	00db      	lsls	r3, r3, #3
 80011ca:	440b      	add	r3, r1
 80011cc:	683a      	ldr	r2, [r7, #0]
 80011ce:	601a      	str	r2, [r3, #0]
    *pTimerId = loop;
 80011d0:	68bb      	ldr	r3, [r7, #8]
 80011d2:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 80011d6:	701a      	strb	r2, [r3, #0]

    localreturnstatus = hw_ts_Successful;
 80011d8:	2300      	movs	r3, #0
 80011da:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80011de:	e008      	b.n	80011f2 <HW_TS_Create+0xde>
 80011e0:	6a3b      	ldr	r3, [r7, #32]
 80011e2:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80011e4:	697b      	ldr	r3, [r7, #20]
 80011e6:	f383 8810 	msr	PRIMASK, r3
}
 80011ea:	bf00      	nop
  {
#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
    __set_PRIMASK(primask_bit); /**< Restore PRIMASK bit*/
#endif

    localreturnstatus = hw_ts_Failed;
 80011ec:	2301      	movs	r3, #1
 80011ee:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  return(localreturnstatus);
 80011f2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 80011f6:	4618      	mov	r0, r3
 80011f8:	372c      	adds	r7, #44	; 0x2c
 80011fa:	46bd      	mov	sp, r7
 80011fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001200:	4770      	bx	lr
 8001202:	bf00      	nop
 8001204:	20000028 	.word	0x20000028

08001208 <HW_TS_Stop>:

  return;
}

void HW_TS_Stop(uint8_t timer_id)
{
 8001208:	b580      	push	{r7, lr}
 800120a:	b086      	sub	sp, #24
 800120c:	af00      	add	r7, sp, #0
 800120e:	4603      	mov	r3, r0
 8001210:	71fb      	strb	r3, [r7, #7]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8001212:	f3ef 8310 	mrs	r3, PRIMASK
 8001216:	60fb      	str	r3, [r7, #12]
  return(result);
 8001218:	68fb      	ldr	r3, [r7, #12]
#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  uint32_t primask_bit;
#endif

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 800121a:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800121c:	b672      	cpsid	i
}
 800121e:	bf00      	nop
  __disable_irq();          /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
#endif

  HAL_NVIC_DisableIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);    /**<  Disable NVIC */
 8001220:	2003      	movs	r0, #3
 8001222:	f000 ff14 	bl	800204e <HAL_NVIC_DisableIRQ>

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE( phrtc );
 8001226:	4b38      	ldr	r3, [pc, #224]	; (8001308 <HW_TS_Stop+0x100>)
 8001228:	681b      	ldr	r3, [r3, #0]
 800122a:	681b      	ldr	r3, [r3, #0]
 800122c:	22ca      	movs	r2, #202	; 0xca
 800122e:	625a      	str	r2, [r3, #36]	; 0x24
 8001230:	4b35      	ldr	r3, [pc, #212]	; (8001308 <HW_TS_Stop+0x100>)
 8001232:	681b      	ldr	r3, [r3, #0]
 8001234:	681b      	ldr	r3, [r3, #0]
 8001236:	2253      	movs	r2, #83	; 0x53
 8001238:	625a      	str	r2, [r3, #36]	; 0x24

  if(aTimerContext[timer_id].TimerIDStatus == TimerID_Running)
 800123a:	79fa      	ldrb	r2, [r7, #7]
 800123c:	4933      	ldr	r1, [pc, #204]	; (800130c <HW_TS_Stop+0x104>)
 800123e:	4613      	mov	r3, r2
 8001240:	005b      	lsls	r3, r3, #1
 8001242:	4413      	add	r3, r2
 8001244:	00db      	lsls	r3, r3, #3
 8001246:	440b      	add	r3, r1
 8001248:	330c      	adds	r3, #12
 800124a:	781b      	ldrb	r3, [r3, #0]
 800124c:	b2db      	uxtb	r3, r3
 800124e:	2b02      	cmp	r3, #2
 8001250:	d148      	bne.n	80012e4 <HW_TS_Stop+0xdc>
  {
    UnlinkTimer(timer_id, SSR_Read_Requested);
 8001252:	79fb      	ldrb	r3, [r7, #7]
 8001254:	2100      	movs	r1, #0
 8001256:	4618      	mov	r0, r3
 8001258:	f7ff fcb6 	bl	8000bc8 <UnlinkTimer>
    localcurrentrunningtimerid = CurrentRunningTimerID;
 800125c:	4b2c      	ldr	r3, [pc, #176]	; (8001310 <HW_TS_Stop+0x108>)
 800125e:	781b      	ldrb	r3, [r3, #0]
 8001260:	74fb      	strb	r3, [r7, #19]

    if(localcurrentrunningtimerid == CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 8001262:	7cfb      	ldrb	r3, [r7, #19]
 8001264:	2b06      	cmp	r3, #6
 8001266:	d135      	bne.n	80012d4 <HW_TS_Stop+0xcc>
       */

      /**
       * Disable the timer
       */
      if((READ_BIT(RTC->CR, RTC_CR_WUTE) == (RTC_CR_WUTE)) == SET)
 8001268:	4b2a      	ldr	r3, [pc, #168]	; (8001314 <HW_TS_Stop+0x10c>)
 800126a:	689b      	ldr	r3, [r3, #8]
 800126c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001270:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001274:	d108      	bne.n	8001288 <HW_TS_Stop+0x80>
      {
        /**
         * Wait for the flag to be back to 0 when the wakeup timer is enabled
         */
        while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(phrtc, RTC_FLAG_WUTWF) == SET);
 8001276:	bf00      	nop
 8001278:	4b23      	ldr	r3, [pc, #140]	; (8001308 <HW_TS_Stop+0x100>)
 800127a:	681b      	ldr	r3, [r3, #0]
 800127c:	681b      	ldr	r3, [r3, #0]
 800127e:	68db      	ldr	r3, [r3, #12]
 8001280:	f003 0304 	and.w	r3, r3, #4
 8001284:	2b00      	cmp	r3, #0
 8001286:	d1f7      	bne.n	8001278 <HW_TS_Stop+0x70>
      }
      __HAL_RTC_WAKEUPTIMER_DISABLE(phrtc);   /**<  Disable the Wakeup Timer */
 8001288:	4b1f      	ldr	r3, [pc, #124]	; (8001308 <HW_TS_Stop+0x100>)
 800128a:	681b      	ldr	r3, [r3, #0]
 800128c:	681b      	ldr	r3, [r3, #0]
 800128e:	689a      	ldr	r2, [r3, #8]
 8001290:	4b1d      	ldr	r3, [pc, #116]	; (8001308 <HW_TS_Stop+0x100>)
 8001292:	681b      	ldr	r3, [r3, #0]
 8001294:	681b      	ldr	r3, [r3, #0]
 8001296:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800129a:	609a      	str	r2, [r3, #8]

      while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(phrtc, RTC_FLAG_WUTWF) == RESET);
 800129c:	bf00      	nop
 800129e:	4b1a      	ldr	r3, [pc, #104]	; (8001308 <HW_TS_Stop+0x100>)
 80012a0:	681b      	ldr	r3, [r3, #0]
 80012a2:	681b      	ldr	r3, [r3, #0]
 80012a4:	68db      	ldr	r3, [r3, #12]
 80012a6:	f003 0304 	and.w	r3, r3, #4
 80012aa:	2b00      	cmp	r3, #0
 80012ac:	d0f7      	beq.n	800129e <HW_TS_Stop+0x96>
       * It takes 2 RTCCLK between the time the WUTE bit is disabled and the
       * time the timer is disabled. The WUTWF bit somehow guarantee the system is stable
       * Otherwise, when the timer is periodic with 1 Tick, it may generate an extra interrupt in between
       * due to the autoreload feature
       */
      __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(phrtc, RTC_FLAG_WUTF);   /**<  Clear flag in RTC module */
 80012ae:	4b16      	ldr	r3, [pc, #88]	; (8001308 <HW_TS_Stop+0x100>)
 80012b0:	681b      	ldr	r3, [r3, #0]
 80012b2:	681b      	ldr	r3, [r3, #0]
 80012b4:	68db      	ldr	r3, [r3, #12]
 80012b6:	b2da      	uxtb	r2, r3
 80012b8:	4b13      	ldr	r3, [pc, #76]	; (8001308 <HW_TS_Stop+0x100>)
 80012ba:	681b      	ldr	r3, [r3, #0]
 80012bc:	681b      	ldr	r3, [r3, #0]
 80012be:	f462 6290 	orn	r2, r2, #1152	; 0x480
 80012c2:	60da      	str	r2, [r3, #12]
      __HAL_RTC_WAKEUPTIMER_EXTI_CLEAR_FLAG(); /**<  Clear flag in EXTI module */
 80012c4:	4b14      	ldr	r3, [pc, #80]	; (8001318 <HW_TS_Stop+0x110>)
 80012c6:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 80012ca:	60da      	str	r2, [r3, #12]
      HAL_NVIC_ClearPendingIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);   /**<  Clear pending bit in NVIC */
 80012cc:	2003      	movs	r0, #3
 80012ce:	f000 fee6 	bl	800209e <HAL_NVIC_ClearPendingIRQ>
 80012d2:	e007      	b.n	80012e4 <HW_TS_Stop+0xdc>
    }
    else if(PreviousRunningTimerID != localcurrentrunningtimerid)
 80012d4:	4b11      	ldr	r3, [pc, #68]	; (800131c <HW_TS_Stop+0x114>)
 80012d6:	781b      	ldrb	r3, [r3, #0]
 80012d8:	b2db      	uxtb	r3, r3
 80012da:	7cfa      	ldrb	r2, [r7, #19]
 80012dc:	429a      	cmp	r2, r3
 80012de:	d001      	beq.n	80012e4 <HW_TS_Stop+0xdc>
    {
      RescheduleTimerList();
 80012e0:	f7ff fd94 	bl	8000e0c <RescheduleTimerList>
    }
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE( phrtc );
 80012e4:	4b08      	ldr	r3, [pc, #32]	; (8001308 <HW_TS_Stop+0x100>)
 80012e6:	681b      	ldr	r3, [r3, #0]
 80012e8:	681b      	ldr	r3, [r3, #0]
 80012ea:	22ff      	movs	r2, #255	; 0xff
 80012ec:	625a      	str	r2, [r3, #36]	; 0x24

  HAL_NVIC_EnableIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID); /**<  Enable NVIC */
 80012ee:	2003      	movs	r0, #3
 80012f0:	f000 fe9f 	bl	8002032 <HAL_NVIC_EnableIRQ>
 80012f4:	697b      	ldr	r3, [r7, #20]
 80012f6:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80012f8:	68bb      	ldr	r3, [r7, #8]
 80012fa:	f383 8810 	msr	PRIMASK, r3
}
 80012fe:	bf00      	nop

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  __set_PRIMASK(primask_bit); /**< Restore PRIMASK bit*/
#endif

  return;
 8001300:	bf00      	nop
}
 8001302:	3718      	adds	r7, #24
 8001304:	46bd      	mov	sp, r7
 8001306:	bd80      	pop	{r7, pc}
 8001308:	200001bc 	.word	0x200001bc
 800130c:	20000028 	.word	0x20000028
 8001310:	200000b8 	.word	0x200000b8
 8001314:	40002800 	.word	0x40002800
 8001318:	58000800 	.word	0x58000800
 800131c:	200000b9 	.word	0x200000b9

08001320 <HW_TS_Start>:

void HW_TS_Start(uint8_t timer_id, uint32_t timeout_ticks)
{
 8001320:	b580      	push	{r7, lr}
 8001322:	b086      	sub	sp, #24
 8001324:	af00      	add	r7, sp, #0
 8001326:	4603      	mov	r3, r0
 8001328:	6039      	str	r1, [r7, #0]
 800132a:	71fb      	strb	r3, [r7, #7]

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  uint32_t primask_bit;
#endif

  if(aTimerContext[timer_id].TimerIDStatus == TimerID_Running)
 800132c:	79fa      	ldrb	r2, [r7, #7]
 800132e:	493c      	ldr	r1, [pc, #240]	; (8001420 <HW_TS_Start+0x100>)
 8001330:	4613      	mov	r3, r2
 8001332:	005b      	lsls	r3, r3, #1
 8001334:	4413      	add	r3, r2
 8001336:	00db      	lsls	r3, r3, #3
 8001338:	440b      	add	r3, r1
 800133a:	330c      	adds	r3, #12
 800133c:	781b      	ldrb	r3, [r3, #0]
 800133e:	b2db      	uxtb	r3, r3
 8001340:	2b02      	cmp	r3, #2
 8001342:	d103      	bne.n	800134c <HW_TS_Start+0x2c>
  {
    HW_TS_Stop( timer_id );
 8001344:	79fb      	ldrb	r3, [r7, #7]
 8001346:	4618      	mov	r0, r3
 8001348:	f7ff ff5e 	bl	8001208 <HW_TS_Stop>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800134c:	f3ef 8310 	mrs	r3, PRIMASK
 8001350:	60fb      	str	r3, [r7, #12]
  return(result);
 8001352:	68fb      	ldr	r3, [r7, #12]
  }

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 8001354:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8001356:	b672      	cpsid	i
}
 8001358:	bf00      	nop
  __disable_irq();          /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
#endif

  HAL_NVIC_DisableIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);    /**<  Disable NVIC */
 800135a:	2003      	movs	r0, #3
 800135c:	f000 fe77 	bl	800204e <HAL_NVIC_DisableIRQ>

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE( phrtc );
 8001360:	4b30      	ldr	r3, [pc, #192]	; (8001424 <HW_TS_Start+0x104>)
 8001362:	681b      	ldr	r3, [r3, #0]
 8001364:	681b      	ldr	r3, [r3, #0]
 8001366:	22ca      	movs	r2, #202	; 0xca
 8001368:	625a      	str	r2, [r3, #36]	; 0x24
 800136a:	4b2e      	ldr	r3, [pc, #184]	; (8001424 <HW_TS_Start+0x104>)
 800136c:	681b      	ldr	r3, [r3, #0]
 800136e:	681b      	ldr	r3, [r3, #0]
 8001370:	2253      	movs	r2, #83	; 0x53
 8001372:	625a      	str	r2, [r3, #36]	; 0x24

  aTimerContext[timer_id].TimerIDStatus = TimerID_Running;
 8001374:	79fa      	ldrb	r2, [r7, #7]
 8001376:	492a      	ldr	r1, [pc, #168]	; (8001420 <HW_TS_Start+0x100>)
 8001378:	4613      	mov	r3, r2
 800137a:	005b      	lsls	r3, r3, #1
 800137c:	4413      	add	r3, r2
 800137e:	00db      	lsls	r3, r3, #3
 8001380:	440b      	add	r3, r1
 8001382:	330c      	adds	r3, #12
 8001384:	2202      	movs	r2, #2
 8001386:	701a      	strb	r2, [r3, #0]

  aTimerContext[timer_id].CountLeft = timeout_ticks;
 8001388:	79fa      	ldrb	r2, [r7, #7]
 800138a:	4925      	ldr	r1, [pc, #148]	; (8001420 <HW_TS_Start+0x100>)
 800138c:	4613      	mov	r3, r2
 800138e:	005b      	lsls	r3, r3, #1
 8001390:	4413      	add	r3, r2
 8001392:	00db      	lsls	r3, r3, #3
 8001394:	440b      	add	r3, r1
 8001396:	3308      	adds	r3, #8
 8001398:	683a      	ldr	r2, [r7, #0]
 800139a:	601a      	str	r2, [r3, #0]
  aTimerContext[timer_id].CounterInit = timeout_ticks;
 800139c:	79fa      	ldrb	r2, [r7, #7]
 800139e:	4920      	ldr	r1, [pc, #128]	; (8001420 <HW_TS_Start+0x100>)
 80013a0:	4613      	mov	r3, r2
 80013a2:	005b      	lsls	r3, r3, #1
 80013a4:	4413      	add	r3, r2
 80013a6:	00db      	lsls	r3, r3, #3
 80013a8:	440b      	add	r3, r1
 80013aa:	3304      	adds	r3, #4
 80013ac:	683a      	ldr	r2, [r7, #0]
 80013ae:	601a      	str	r2, [r3, #0]

  time_elapsed =  linkTimer(timer_id);
 80013b0:	79fb      	ldrb	r3, [r7, #7]
 80013b2:	4618      	mov	r0, r3
 80013b4:	f7ff fb5e 	bl	8000a74 <linkTimer>
 80013b8:	4603      	mov	r3, r0
 80013ba:	827b      	strh	r3, [r7, #18]

  localcurrentrunningtimerid = CurrentRunningTimerID;
 80013bc:	4b1a      	ldr	r3, [pc, #104]	; (8001428 <HW_TS_Start+0x108>)
 80013be:	781b      	ldrb	r3, [r3, #0]
 80013c0:	747b      	strb	r3, [r7, #17]

  if(PreviousRunningTimerID != localcurrentrunningtimerid)
 80013c2:	4b1a      	ldr	r3, [pc, #104]	; (800142c <HW_TS_Start+0x10c>)
 80013c4:	781b      	ldrb	r3, [r3, #0]
 80013c6:	b2db      	uxtb	r3, r3
 80013c8:	7c7a      	ldrb	r2, [r7, #17]
 80013ca:	429a      	cmp	r2, r3
 80013cc:	d002      	beq.n	80013d4 <HW_TS_Start+0xb4>
  {
    RescheduleTimerList();
 80013ce:	f7ff fd1d 	bl	8000e0c <RescheduleTimerList>
 80013d2:	e013      	b.n	80013fc <HW_TS_Start+0xdc>
  }
  else
  {
    aTimerContext[timer_id].CountLeft -= time_elapsed;
 80013d4:	79fa      	ldrb	r2, [r7, #7]
 80013d6:	4912      	ldr	r1, [pc, #72]	; (8001420 <HW_TS_Start+0x100>)
 80013d8:	4613      	mov	r3, r2
 80013da:	005b      	lsls	r3, r3, #1
 80013dc:	4413      	add	r3, r2
 80013de:	00db      	lsls	r3, r3, #3
 80013e0:	440b      	add	r3, r1
 80013e2:	3308      	adds	r3, #8
 80013e4:	6819      	ldr	r1, [r3, #0]
 80013e6:	8a7b      	ldrh	r3, [r7, #18]
 80013e8:	79fa      	ldrb	r2, [r7, #7]
 80013ea:	1ac9      	subs	r1, r1, r3
 80013ec:	480c      	ldr	r0, [pc, #48]	; (8001420 <HW_TS_Start+0x100>)
 80013ee:	4613      	mov	r3, r2
 80013f0:	005b      	lsls	r3, r3, #1
 80013f2:	4413      	add	r3, r2
 80013f4:	00db      	lsls	r3, r3, #3
 80013f6:	4403      	add	r3, r0
 80013f8:	3308      	adds	r3, #8
 80013fa:	6019      	str	r1, [r3, #0]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE( phrtc );
 80013fc:	4b09      	ldr	r3, [pc, #36]	; (8001424 <HW_TS_Start+0x104>)
 80013fe:	681b      	ldr	r3, [r3, #0]
 8001400:	681b      	ldr	r3, [r3, #0]
 8001402:	22ff      	movs	r2, #255	; 0xff
 8001404:	625a      	str	r2, [r3, #36]	; 0x24

  HAL_NVIC_EnableIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID); /**<  Enable NVIC */
 8001406:	2003      	movs	r0, #3
 8001408:	f000 fe13 	bl	8002032 <HAL_NVIC_EnableIRQ>
 800140c:	697b      	ldr	r3, [r7, #20]
 800140e:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8001410:	68bb      	ldr	r3, [r7, #8]
 8001412:	f383 8810 	msr	PRIMASK, r3
}
 8001416:	bf00      	nop

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  __set_PRIMASK(primask_bit); /**< Restore PRIMASK bit*/
#endif

  return;
 8001418:	bf00      	nop
}
 800141a:	3718      	adds	r7, #24
 800141c:	46bd      	mov	sp, r7
 800141e:	bd80      	pop	{r7, pc}
 8001420:	20000028 	.word	0x20000028
 8001424:	200001bc 	.word	0x200001bc
 8001428:	200000b8 	.word	0x200000b8
 800142c:	200000b9 	.word	0x200000b9

08001430 <LL_RCC_LSE_SetDriveCapability>:
{
 8001430:	b480      	push	{r7}
 8001432:	b083      	sub	sp, #12
 8001434:	af00      	add	r7, sp, #0
 8001436:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_LSEDRV, LSEDrive);
 8001438:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800143c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001440:	f023 0218 	bic.w	r2, r3, #24
 8001444:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001448:	687b      	ldr	r3, [r7, #4]
 800144a:	4313      	orrs	r3, r2
 800144c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
}
 8001450:	bf00      	nop
 8001452:	370c      	adds	r7, #12
 8001454:	46bd      	mov	sp, r7
 8001456:	f85d 7b04 	ldr.w	r7, [sp], #4
 800145a:	4770      	bx	lr

0800145c <LL_AHB2_GRP1_EnableClock>:
{
 800145c:	b480      	push	{r7}
 800145e:	b085      	sub	sp, #20
 8001460:	af00      	add	r7, sp, #0
 8001462:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8001464:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001468:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800146a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800146e:	687b      	ldr	r3, [r7, #4]
 8001470:	4313      	orrs	r3, r2
 8001472:	64cb      	str	r3, [r1, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8001474:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001478:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800147a:	687b      	ldr	r3, [r7, #4]
 800147c:	4013      	ands	r3, r2
 800147e:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001480:	68fb      	ldr	r3, [r7, #12]
}
 8001482:	bf00      	nop
 8001484:	3714      	adds	r7, #20
 8001486:	46bd      	mov	sp, r7
 8001488:	f85d 7b04 	ldr.w	r7, [sp], #4
 800148c:	4770      	bx	lr

0800148e <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800148e:	b580      	push	{r7, lr}
 8001490:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001492:	f000 fbd3 	bl	8001c3c <HAL_Init>
  /* Config code for STM32_WPAN (HSE Tuning must be done before system clock configuration) */
  MX_APPE_Config();
 8001496:	f7ff f851 	bl	800053c <MX_APPE_Config>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800149a:	f000 f80f 	bl	80014bc <SystemClock_Config>

/* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 800149e:	f000 f869 	bl	8001574 <PeriphCommonClock_Config>

  /* IPCC initialisation */
   MX_IPCC_Init();
 80014a2:	f000 f887 	bl	80015b4 <MX_IPCC_Init>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80014a6:	f000 f8cb 	bl	8001640 <MX_GPIO_Init>
  MX_RTC_Init();
 80014aa:	f000 f89f 	bl	80015ec <MX_RTC_Init>
  MX_RF_Init();
 80014ae:	f000 f895 	bl	80015dc <MX_RF_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init code for STM32_WPAN */
  MX_APPE_Init();
 80014b2:	f7ff f851 	bl	8000558 <MX_APPE_Init>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
    MX_APPE_Process();
 80014b6:	f7ff f9b4 	bl	8000822 <MX_APPE_Process>
 80014ba:	e7fc      	b.n	80014b6 <main+0x28>

080014bc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80014bc:	b580      	push	{r7, lr}
 80014be:	b09a      	sub	sp, #104	; 0x68
 80014c0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80014c2:	f107 0320 	add.w	r3, r7, #32
 80014c6:	2248      	movs	r2, #72	; 0x48
 80014c8:	2100      	movs	r1, #0
 80014ca:	4618      	mov	r0, r3
 80014cc:	f005 fe30 	bl	8007130 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80014d0:	1d3b      	adds	r3, r7, #4
 80014d2:	2200      	movs	r2, #0
 80014d4:	601a      	str	r2, [r3, #0]
 80014d6:	605a      	str	r2, [r3, #4]
 80014d8:	609a      	str	r2, [r3, #8]
 80014da:	60da      	str	r2, [r3, #12]
 80014dc:	611a      	str	r2, [r3, #16]
 80014de:	615a      	str	r2, [r3, #20]
 80014e0:	619a      	str	r2, [r3, #24]

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 80014e2:	f001 f81d 	bl	8002520 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_MEDIUMLOW);
 80014e6:	2008      	movs	r0, #8
 80014e8:	f7ff ffa2 	bl	8001430 <LL_RCC_LSE_SetDriveCapability>
  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80014ec:	4b20      	ldr	r3, [pc, #128]	; (8001570 <SystemClock_Config+0xb4>)
 80014ee:	681b      	ldr	r3, [r3, #0]
 80014f0:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80014f4:	4a1e      	ldr	r2, [pc, #120]	; (8001570 <SystemClock_Config+0xb4>)
 80014f6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80014fa:	6013      	str	r3, [r2, #0]
 80014fc:	4b1c      	ldr	r3, [pc, #112]	; (8001570 <SystemClock_Config+0xb4>)
 80014fe:	681b      	ldr	r3, [r3, #0]
 8001500:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001504:	603b      	str	r3, [r7, #0]
 8001506:	683b      	ldr	r3, [r7, #0]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSE
 8001508:	2307      	movs	r3, #7
 800150a:	623b      	str	r3, [r7, #32]
                              |RCC_OSCILLATORTYPE_LSE;
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800150c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001510:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8001512:	2301      	movs	r3, #1
 8001514:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001516:	f44f 7380 	mov.w	r3, #256	; 0x100
 800151a:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800151c:	2340      	movs	r3, #64	; 0x40
 800151e:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8001520:	2300      	movs	r3, #0
 8001522:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001524:	f107 0320 	add.w	r3, r7, #32
 8001528:	4618      	mov	r0, r3
 800152a:	f001 fb75 	bl	8002c18 <HAL_RCC_OscConfig>
 800152e:	4603      	mov	r3, r0
 8001530:	2b00      	cmp	r3, #0
 8001532:	d001      	beq.n	8001538 <SystemClock_Config+0x7c>
  {
    Error_Handler();
 8001534:	f000 f8aa 	bl	800168c <Error_Handler>
  }
  /** Configure the SYSCLKSource, HCLK, PCLK1 and PCLK2 clocks dividers
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK4|RCC_CLOCKTYPE_HCLK2
 8001538:	236f      	movs	r3, #111	; 0x6f
 800153a:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSE;
 800153c:	2302      	movs	r3, #2
 800153e:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001540:	2300      	movs	r3, #0
 8001542:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001544:	2300      	movs	r3, #0
 8001546:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001548:	2300      	movs	r3, #0
 800154a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.AHBCLK2Divider = RCC_SYSCLK_DIV1;
 800154c:	2300      	movs	r3, #0
 800154e:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLK4Divider = RCC_SYSCLK_DIV1;
 8001550:	2300      	movs	r3, #0
 8001552:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8001554:	1d3b      	adds	r3, r7, #4
 8001556:	2101      	movs	r1, #1
 8001558:	4618      	mov	r0, r3
 800155a:	f001 fee9 	bl	8003330 <HAL_RCC_ClockConfig>
 800155e:	4603      	mov	r3, r0
 8001560:	2b00      	cmp	r3, #0
 8001562:	d001      	beq.n	8001568 <SystemClock_Config+0xac>
  {
    Error_Handler();
 8001564:	f000 f892 	bl	800168c <Error_Handler>
  }
}
 8001568:	bf00      	nop
 800156a:	3768      	adds	r7, #104	; 0x68
 800156c:	46bd      	mov	sp, r7
 800156e:	bd80      	pop	{r7, pc}
 8001570:	58000400 	.word	0x58000400

08001574 <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 8001574:	b580      	push	{r7, lr}
 8001576:	b094      	sub	sp, #80	; 0x50
 8001578:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800157a:	463b      	mov	r3, r7
 800157c:	2250      	movs	r2, #80	; 0x50
 800157e:	2100      	movs	r1, #0
 8001580:	4618      	mov	r0, r3
 8001582:	f005 fdd5 	bl	8007130 <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SMPS|RCC_PERIPHCLK_RFWAKEUP;
 8001586:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 800158a:	603b      	str	r3, [r7, #0]
  PeriphClkInitStruct.RFWakeUpClockSelection = RCC_RFWKPCLKSOURCE_HSE_DIV1024;
 800158c:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 8001590:	647b      	str	r3, [r7, #68]	; 0x44
  PeriphClkInitStruct.SmpsClockSelection = RCC_SMPSCLKSOURCE_HSI;
 8001592:	2300      	movs	r3, #0
 8001594:	64bb      	str	r3, [r7, #72]	; 0x48
  PeriphClkInitStruct.SmpsDivSelection = RCC_SMPSCLKDIV_RANGE1;
 8001596:	2310      	movs	r3, #16
 8001598:	64fb      	str	r3, [r7, #76]	; 0x4c

  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800159a:	463b      	mov	r3, r7
 800159c:	4618      	mov	r0, r3
 800159e:	f002 fadc 	bl	8003b5a <HAL_RCCEx_PeriphCLKConfig>
 80015a2:	4603      	mov	r3, r0
 80015a4:	2b00      	cmp	r3, #0
 80015a6:	d001      	beq.n	80015ac <PeriphCommonClock_Config+0x38>
  {
    Error_Handler();
 80015a8:	f000 f870 	bl	800168c <Error_Handler>
  }
  /* USER CODE BEGIN Smps */

  /* USER CODE END Smps */
}
 80015ac:	bf00      	nop
 80015ae:	3750      	adds	r7, #80	; 0x50
 80015b0:	46bd      	mov	sp, r7
 80015b2:	bd80      	pop	{r7, pc}

080015b4 <MX_IPCC_Init>:
  * @brief IPCC Initialization Function
  * @param None
  * @retval None
  */
static void MX_IPCC_Init(void)
{
 80015b4:	b580      	push	{r7, lr}
 80015b6:	af00      	add	r7, sp, #0
  /* USER CODE END IPCC_Init 0 */

  /* USER CODE BEGIN IPCC_Init 1 */

  /* USER CODE END IPCC_Init 1 */
  hipcc.Instance = IPCC;
 80015b8:	4b06      	ldr	r3, [pc, #24]	; (80015d4 <MX_IPCC_Init+0x20>)
 80015ba:	4a07      	ldr	r2, [pc, #28]	; (80015d8 <MX_IPCC_Init+0x24>)
 80015bc:	601a      	str	r2, [r3, #0]
  if (HAL_IPCC_Init(&hipcc) != HAL_OK)
 80015be:	4805      	ldr	r0, [pc, #20]	; (80015d4 <MX_IPCC_Init+0x20>)
 80015c0:	f000 ff28 	bl	8002414 <HAL_IPCC_Init>
 80015c4:	4603      	mov	r3, r0
 80015c6:	2b00      	cmp	r3, #0
 80015c8:	d001      	beq.n	80015ce <MX_IPCC_Init+0x1a>
  {
    Error_Handler();
 80015ca:	f000 f85f 	bl	800168c <Error_Handler>
  }
  /* USER CODE BEGIN IPCC_Init 2 */

  /* USER CODE END IPCC_Init 2 */

}
 80015ce:	bf00      	nop
 80015d0:	bd80      	pop	{r7, pc}
 80015d2:	bf00      	nop
 80015d4:	200002e8 	.word	0x200002e8
 80015d8:	58000c00 	.word	0x58000c00

080015dc <MX_RF_Init>:
  * @brief RF Initialization Function
  * @param None
  * @retval None
  */
static void MX_RF_Init(void)
{
 80015dc:	b480      	push	{r7}
 80015de:	af00      	add	r7, sp, #0
  /* USER CODE END RF_Init 1 */
  /* USER CODE BEGIN RF_Init 2 */

  /* USER CODE END RF_Init 2 */

}
 80015e0:	bf00      	nop
 80015e2:	46bd      	mov	sp, r7
 80015e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015e8:	4770      	bx	lr
	...

080015ec <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 80015ec:	b580      	push	{r7, lr}
 80015ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RTC_Init 1 */

  /* USER CODE END RTC_Init 1 */
  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 80015f0:	4b11      	ldr	r3, [pc, #68]	; (8001638 <MX_RTC_Init+0x4c>)
 80015f2:	4a12      	ldr	r2, [pc, #72]	; (800163c <MX_RTC_Init+0x50>)
 80015f4:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 80015f6:	4b10      	ldr	r3, [pc, #64]	; (8001638 <MX_RTC_Init+0x4c>)
 80015f8:	2200      	movs	r2, #0
 80015fa:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = CFG_RTC_ASYNCH_PRESCALER;
 80015fc:	4b0e      	ldr	r3, [pc, #56]	; (8001638 <MX_RTC_Init+0x4c>)
 80015fe:	220f      	movs	r2, #15
 8001600:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = CFG_RTC_SYNCH_PRESCALER;
 8001602:	4b0d      	ldr	r3, [pc, #52]	; (8001638 <MX_RTC_Init+0x4c>)
 8001604:	f647 72ff 	movw	r2, #32767	; 0x7fff
 8001608:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 800160a:	4b0b      	ldr	r3, [pc, #44]	; (8001638 <MX_RTC_Init+0x4c>)
 800160c:	2200      	movs	r2, #0
 800160e:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8001610:	4b09      	ldr	r3, [pc, #36]	; (8001638 <MX_RTC_Init+0x4c>)
 8001612:	2200      	movs	r2, #0
 8001614:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8001616:	4b08      	ldr	r3, [pc, #32]	; (8001638 <MX_RTC_Init+0x4c>)
 8001618:	2200      	movs	r2, #0
 800161a:	61da      	str	r2, [r3, #28]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 800161c:	4b06      	ldr	r3, [pc, #24]	; (8001638 <MX_RTC_Init+0x4c>)
 800161e:	2200      	movs	r2, #0
 8001620:	615a      	str	r2, [r3, #20]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8001622:	4805      	ldr	r0, [pc, #20]	; (8001638 <MX_RTC_Init+0x4c>)
 8001624:	f002 fd20 	bl	8004068 <HAL_RTC_Init>
 8001628:	4603      	mov	r3, r0
 800162a:	2b00      	cmp	r3, #0
 800162c:	d001      	beq.n	8001632 <MX_RTC_Init+0x46>
  {
    Error_Handler();
 800162e:	f000 f82d 	bl	800168c <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8001632:	bf00      	nop
 8001634:	bd80      	pop	{r7, pc}
 8001636:	bf00      	nop
 8001638:	20000324 	.word	0x20000324
 800163c:	40002800 	.word	0x40002800

08001640 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001640:	b580      	push	{r7, lr}
 8001642:	b086      	sub	sp, #24
 8001644:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001646:	1d3b      	adds	r3, r7, #4
 8001648:	2200      	movs	r2, #0
 800164a:	601a      	str	r2, [r3, #0]
 800164c:	605a      	str	r2, [r3, #4]
 800164e:	609a      	str	r2, [r3, #8]
 8001650:	60da      	str	r2, [r3, #12]
 8001652:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001654:	2004      	movs	r0, #4
 8001656:	f7ff ff01 	bl	800145c <LL_AHB2_GRP1_EnableClock>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, GPIO_PIN_RESET);
 800165a:	2200      	movs	r2, #0
 800165c:	2120      	movs	r1, #32
 800165e:	480a      	ldr	r0, [pc, #40]	; (8001688 <MX_GPIO_Init+0x48>)
 8001660:	f000 fe9c 	bl	800239c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LED1_Pin */
  GPIO_InitStruct.Pin = LED1_Pin;
 8001664:	2320      	movs	r3, #32
 8001666:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001668:	2301      	movs	r3, #1
 800166a:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800166c:	2300      	movs	r3, #0
 800166e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001670:	2300      	movs	r3, #0
 8001672:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(LED1_GPIO_Port, &GPIO_InitStruct);
 8001674:	1d3b      	adds	r3, r7, #4
 8001676:	4619      	mov	r1, r3
 8001678:	4803      	ldr	r0, [pc, #12]	; (8001688 <MX_GPIO_Init+0x48>)
 800167a:	f000 fd1f 	bl	80020bc <HAL_GPIO_Init>

}
 800167e:	bf00      	nop
 8001680:	3718      	adds	r7, #24
 8001682:	46bd      	mov	sp, r7
 8001684:	bd80      	pop	{r7, pc}
 8001686:	bf00      	nop
 8001688:	48000800 	.word	0x48000800

0800168c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800168c:	b480      	push	{r7}
 800168e:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8001690:	b672      	cpsid	i
}
 8001692:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001694:	e7fe      	b.n	8001694 <Error_Handler+0x8>
	...

08001698 <LL_PWR_SetPowerMode>:
{
 8001698:	b480      	push	{r7}
 800169a:	b083      	sub	sp, #12
 800169c:	af00      	add	r7, sp, #0
 800169e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(PWR->CR1, PWR_CR1_LPMS, LowPowerMode);
 80016a0:	4b06      	ldr	r3, [pc, #24]	; (80016bc <LL_PWR_SetPowerMode+0x24>)
 80016a2:	681b      	ldr	r3, [r3, #0]
 80016a4:	f023 0207 	bic.w	r2, r3, #7
 80016a8:	4904      	ldr	r1, [pc, #16]	; (80016bc <LL_PWR_SetPowerMode+0x24>)
 80016aa:	687b      	ldr	r3, [r7, #4]
 80016ac:	4313      	orrs	r3, r2
 80016ae:	600b      	str	r3, [r1, #0]
}
 80016b0:	bf00      	nop
 80016b2:	370c      	adds	r7, #12
 80016b4:	46bd      	mov	sp, r7
 80016b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016ba:	4770      	bx	lr
 80016bc:	58000400 	.word	0x58000400

080016c0 <LL_PWR_ClearFlag_WU>:
  * @brief  Clear Wake-up Flags
  * @rmtoll SCR          CWUF          LL_PWR_ClearFlag_WU
  * @retval None
  */
__STATIC_INLINE void LL_PWR_ClearFlag_WU(void)
{
 80016c0:	b480      	push	{r7}
 80016c2:	af00      	add	r7, sp, #0
  WRITE_REG(PWR->SCR, PWR_SCR_CWUF);
 80016c4:	4b03      	ldr	r3, [pc, #12]	; (80016d4 <LL_PWR_ClearFlag_WU+0x14>)
 80016c6:	221f      	movs	r2, #31
 80016c8:	619a      	str	r2, [r3, #24]
}
 80016ca:	bf00      	nop
 80016cc:	46bd      	mov	sp, r7
 80016ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016d2:	4770      	bx	lr
 80016d4:	58000400 	.word	0x58000400

080016d8 <LL_PWR_IsActiveFlag_C2SB>:
  * @brief  System standby flag for CPU2
  * @rmtoll EXTSCR       C2SBF         LL_PWR_IsActiveFlag_C2SB
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_PWR_IsActiveFlag_C2SB(void)
{
 80016d8:	b480      	push	{r7}
 80016da:	af00      	add	r7, sp, #0
  return ((READ_BIT(PWR->EXTSCR, PWR_EXTSCR_C2SBF) == (PWR_EXTSCR_C2SBF)) ? 1UL : 0UL);
 80016dc:	4b07      	ldr	r3, [pc, #28]	; (80016fc <LL_PWR_IsActiveFlag_C2SB+0x24>)
 80016de:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80016e2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80016e6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80016ea:	d101      	bne.n	80016f0 <LL_PWR_IsActiveFlag_C2SB+0x18>
 80016ec:	2301      	movs	r3, #1
 80016ee:	e000      	b.n	80016f2 <LL_PWR_IsActiveFlag_C2SB+0x1a>
 80016f0:	2300      	movs	r3, #0
}
 80016f2:	4618      	mov	r0, r3
 80016f4:	46bd      	mov	sp, r7
 80016f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016fa:	4770      	bx	lr
 80016fc:	58000400 	.word	0x58000400

08001700 <LL_PWR_IsActiveFlag_C2DS>:
  * @brief  Get deepsleep mode for CPU2
  * @rmtoll EXTSCR       C2DS          LL_PWR_IsActiveFlag_C2DS
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_PWR_IsActiveFlag_C2DS(void)
{
 8001700:	b480      	push	{r7}
 8001702:	af00      	add	r7, sp, #0
  return ((READ_BIT(PWR->EXTSCR, PWR_EXTSCR_C2DS) == (PWR_EXTSCR_C2DS)) ? 1UL : 0UL);
 8001704:	4b07      	ldr	r3, [pc, #28]	; (8001724 <LL_PWR_IsActiveFlag_C2DS+0x24>)
 8001706:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800170a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800170e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001712:	d101      	bne.n	8001718 <LL_PWR_IsActiveFlag_C2DS+0x18>
 8001714:	2301      	movs	r3, #1
 8001716:	e000      	b.n	800171a <LL_PWR_IsActiveFlag_C2DS+0x1a>
 8001718:	2300      	movs	r3, #0
}
 800171a:	4618      	mov	r0, r3
 800171c:	46bd      	mov	sp, r7
 800171e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001722:	4770      	bx	lr
 8001724:	58000400 	.word	0x58000400

08001728 <LL_RCC_HSI_Enable>:
{
 8001728:	b480      	push	{r7}
 800172a:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSION);
 800172c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001730:	681b      	ldr	r3, [r3, #0]
 8001732:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001736:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800173a:	6013      	str	r3, [r2, #0]
}
 800173c:	bf00      	nop
 800173e:	46bd      	mov	sp, r7
 8001740:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001744:	4770      	bx	lr

08001746 <LL_RCC_HSI_IsReady>:
{
 8001746:	b480      	push	{r7}
 8001748:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY)) ? 1UL : 0UL);
 800174a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800174e:	681b      	ldr	r3, [r3, #0]
 8001750:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001754:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001758:	d101      	bne.n	800175e <LL_RCC_HSI_IsReady+0x18>
 800175a:	2301      	movs	r3, #1
 800175c:	e000      	b.n	8001760 <LL_RCC_HSI_IsReady+0x1a>
 800175e:	2300      	movs	r3, #0
}
 8001760:	4618      	mov	r0, r3
 8001762:	46bd      	mov	sp, r7
 8001764:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001768:	4770      	bx	lr

0800176a <LL_RCC_SetSysClkSource>:
{
 800176a:	b480      	push	{r7}
 800176c:	b083      	sub	sp, #12
 800176e:	af00      	add	r7, sp, #0
 8001770:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 8001772:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001776:	689b      	ldr	r3, [r3, #8]
 8001778:	f023 0203 	bic.w	r2, r3, #3
 800177c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001780:	687b      	ldr	r3, [r7, #4]
 8001782:	4313      	orrs	r3, r2
 8001784:	608b      	str	r3, [r1, #8]
}
 8001786:	bf00      	nop
 8001788:	370c      	adds	r7, #12
 800178a:	46bd      	mov	sp, r7
 800178c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001790:	4770      	bx	lr

08001792 <LL_RCC_GetSysClkSource>:
{
 8001792:	b480      	push	{r7}
 8001794:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8001796:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800179a:	689b      	ldr	r3, [r3, #8]
 800179c:	f003 030c 	and.w	r3, r3, #12
}
 80017a0:	4618      	mov	r0, r3
 80017a2:	46bd      	mov	sp, r7
 80017a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017a8:	4770      	bx	lr

080017aa <LL_RCC_SetSMPSClockSource>:
{
 80017aa:	b480      	push	{r7}
 80017ac:	b083      	sub	sp, #12
 80017ae:	af00      	add	r7, sp, #0
 80017b0:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->SMPSCR, RCC_SMPSCR_SMPSSEL, SMPSSource);
 80017b2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80017b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80017b8:	f023 0203 	bic.w	r2, r3, #3
 80017bc:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80017c0:	687b      	ldr	r3, [r7, #4]
 80017c2:	4313      	orrs	r3, r2
 80017c4:	624b      	str	r3, [r1, #36]	; 0x24
}
 80017c6:	bf00      	nop
 80017c8:	370c      	adds	r7, #12
 80017ca:	46bd      	mov	sp, r7
 80017cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017d0:	4770      	bx	lr
	...

080017d4 <LL_LPM_EnableSleep>:
  * @brief  Processor uses sleep as its low power mode
  * @rmtoll SCB_SCR      SLEEPDEEP     LL_LPM_EnableSleep
  * @retval None
  */
__STATIC_INLINE void LL_LPM_EnableSleep(void)
{
 80017d4:	b480      	push	{r7}
 80017d6:	af00      	add	r7, sp, #0
  /* Clear SLEEPDEEP bit of Cortex System Control Register */
  CLEAR_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 80017d8:	4b05      	ldr	r3, [pc, #20]	; (80017f0 <LL_LPM_EnableSleep+0x1c>)
 80017da:	691b      	ldr	r3, [r3, #16]
 80017dc:	4a04      	ldr	r2, [pc, #16]	; (80017f0 <LL_LPM_EnableSleep+0x1c>)
 80017de:	f023 0304 	bic.w	r3, r3, #4
 80017e2:	6113      	str	r3, [r2, #16]
}
 80017e4:	bf00      	nop
 80017e6:	46bd      	mov	sp, r7
 80017e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017ec:	4770      	bx	lr
 80017ee:	bf00      	nop
 80017f0:	e000ed00 	.word	0xe000ed00

080017f4 <LL_LPM_EnableDeepSleep>:
  * @brief  Processor uses deep sleep as its low power mode
  * @rmtoll SCB_SCR      SLEEPDEEP     LL_LPM_EnableDeepSleep
  * @retval None
  */
__STATIC_INLINE void LL_LPM_EnableDeepSleep(void)
{
 80017f4:	b480      	push	{r7}
 80017f6:	af00      	add	r7, sp, #0
  /* Set SLEEPDEEP bit of Cortex System Control Register */
  SET_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 80017f8:	4b05      	ldr	r3, [pc, #20]	; (8001810 <LL_LPM_EnableDeepSleep+0x1c>)
 80017fa:	691b      	ldr	r3, [r3, #16]
 80017fc:	4a04      	ldr	r2, [pc, #16]	; (8001810 <LL_LPM_EnableDeepSleep+0x1c>)
 80017fe:	f043 0304 	orr.w	r3, r3, #4
 8001802:	6113      	str	r3, [r2, #16]
}
 8001804:	bf00      	nop
 8001806:	46bd      	mov	sp, r7
 8001808:	f85d 7b04 	ldr.w	r7, [sp], #4
 800180c:	4770      	bx	lr
 800180e:	bf00      	nop
 8001810:	e000ed00 	.word	0xe000ed00

08001814 <LL_HSEM_1StepLock>:
  * @param  HSEMx HSEM Instance.
  * @param  Semaphore Semaphore number. Value between Min_Data=0 and Max_Data=31
  * @retval 1 lock fail, 0 lock successful or already locked by same core
  */
__STATIC_INLINE uint32_t LL_HSEM_1StepLock(HSEM_TypeDef *HSEMx, uint32_t Semaphore)
{
 8001814:	b480      	push	{r7}
 8001816:	b083      	sub	sp, #12
 8001818:	af00      	add	r7, sp, #0
 800181a:	6078      	str	r0, [r7, #4]
 800181c:	6039      	str	r1, [r7, #0]
  return ((HSEMx->RLR[Semaphore] != (HSEM_R_LOCK | LL_HSEM_COREID)) ? 1UL : 0UL);
 800181e:	687b      	ldr	r3, [r7, #4]
 8001820:	683a      	ldr	r2, [r7, #0]
 8001822:	3220      	adds	r2, #32
 8001824:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001828:	4a05      	ldr	r2, [pc, #20]	; (8001840 <LL_HSEM_1StepLock+0x2c>)
 800182a:	4293      	cmp	r3, r2
 800182c:	d001      	beq.n	8001832 <LL_HSEM_1StepLock+0x1e>
 800182e:	2301      	movs	r3, #1
 8001830:	e000      	b.n	8001834 <LL_HSEM_1StepLock+0x20>
 8001832:	2300      	movs	r3, #0
}
 8001834:	4618      	mov	r0, r3
 8001836:	370c      	adds	r7, #12
 8001838:	46bd      	mov	sp, r7
 800183a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800183e:	4770      	bx	lr
 8001840:	80000400 	.word	0x80000400

08001844 <LL_HSEM_ReleaseLock>:
  * @param  Semaphore Semaphore number. Value between Min_Data=0 and Max_Data=31
  * @param  process Process number. Value between Min_Data=0 and Max_Data=255
  * @retval None
  */
__STATIC_INLINE void LL_HSEM_ReleaseLock(HSEM_TypeDef *HSEMx, uint32_t Semaphore, uint32_t process)
{
 8001844:	b480      	push	{r7}
 8001846:	b085      	sub	sp, #20
 8001848:	af00      	add	r7, sp, #0
 800184a:	60f8      	str	r0, [r7, #12]
 800184c:	60b9      	str	r1, [r7, #8]
 800184e:	607a      	str	r2, [r7, #4]
  WRITE_REG(HSEMx->R[Semaphore], (LL_HSEM_COREID | process));
 8001850:	687b      	ldr	r3, [r7, #4]
 8001852:	f443 6180 	orr.w	r1, r3, #1024	; 0x400
 8001856:	68fb      	ldr	r3, [r7, #12]
 8001858:	68ba      	ldr	r2, [r7, #8]
 800185a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
}
 800185e:	bf00      	nop
 8001860:	3714      	adds	r7, #20
 8001862:	46bd      	mov	sp, r7
 8001864:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001868:	4770      	bx	lr

0800186a <PWR_EnterOffMode>:
  * @brief Enters Low Power Off Mode
  * @param none
  * @retval none
  */
void PWR_EnterOffMode( void )
{
 800186a:	b580      	push	{r7, lr}
 800186c:	af00      	add	r7, sp, #0
/* USER CODE END PWR_EnterOffMode_1 */
  /**
   * The systick should be disabled for the same reason than when the device enters stop mode because
   * at this time, the device may enter either OffMode or StopMode.
   */
  HAL_SuspendTick();
 800186e:	f000 fa6b 	bl	8001d48 <HAL_SuspendTick>

  EnterLowPower();
 8001872:	f000 f835 	bl	80018e0 <EnterLowPower>
   * in critical section. If an interrupt occurs while in that critical section before that point,
   * the flag is set and will be cleared here but the system will not enter Off Mode
   * because an interrupt is pending in the NVIC. The ISR will be executed when moving out
   * of this critical section
   */
  LL_PWR_ClearFlag_WU( );
 8001876:	f7ff ff23 	bl	80016c0 <LL_PWR_ClearFlag_WU>

  LL_PWR_SetPowerMode( LL_PWR_MODE_STANDBY );
 800187a:	2003      	movs	r0, #3
 800187c:	f7ff ff0c 	bl	8001698 <LL_PWR_SetPowerMode>

  LL_LPM_EnableDeepSleep( ); /**< Set SLEEPDEEP bit of Cortex System Control Register */
 8001880:	f7ff ffb8 	bl	80017f4 <LL_LPM_EnableDeepSleep>
   */
#if defined ( __CC_ARM)
  __force_stores( );
#endif

  __WFI();
 8001884:	bf30      	wfi

/* USER CODE BEGIN PWR_EnterOffMode_2 */

/* USER CODE END PWR_EnterOffMode_2 */
  return;
 8001886:	bf00      	nop
}
 8001888:	bd80      	pop	{r7, pc}

0800188a <PWR_ExitOffMode>:
  * @brief Exits Low Power Off Mode
  * @param none
  * @retval none
  */
void PWR_ExitOffMode( void )
{
 800188a:	b580      	push	{r7, lr}
 800188c:	af00      	add	r7, sp, #0
/* USER CODE BEGIN PWR_ExitOffMode_1 */

/* USER CODE END PWR_ExitOffMode_1 */
  HAL_ResumeTick();
 800188e:	f000 fa6b 	bl	8001d68 <HAL_ResumeTick>
/* USER CODE BEGIN PWR_ExitOffMode_2 */

/* USER CODE END PWR_ExitOffMode_2 */
  return;
 8001892:	bf00      	nop
}
 8001894:	bd80      	pop	{r7, pc}

08001896 <PWR_EnterStopMode>:
  * @note ARM exists the function when waking up
  * @param none
  * @retval none
  */
void PWR_EnterStopMode( void )
{
 8001896:	b580      	push	{r7, lr}
 8001898:	af00      	add	r7, sp, #0
   *
   * When in production, the HAL_DBGMCU_EnableDBGStopMode() is not called so that the device can reach best power consumption
   * However, the systick should be disabled anyway to avoid the case when it is about to expire at the same time the device enters
   * stop mode ( this will abort the Stop Mode entry ).
   */
  HAL_SuspendTick();
 800189a:	f000 fa55 	bl	8001d48 <HAL_SuspendTick>

  /**
   * This function is called from CRITICAL SECTION
   */
  EnterLowPower();
 800189e:	f000 f81f 	bl	80018e0 <EnterLowPower>

  /************************************************************************************
   * ENTER STOP MODE
   ***********************************************************************************/
  LL_PWR_SetPowerMode( LL_PWR_MODE_STOP2 );
 80018a2:	2002      	movs	r0, #2
 80018a4:	f7ff fef8 	bl	8001698 <LL_PWR_SetPowerMode>

  LL_LPM_EnableDeepSleep( ); /**< Set SLEEPDEEP bit of Cortex System Control Register */
 80018a8:	f7ff ffa4 	bl	80017f4 <LL_LPM_EnableDeepSleep>
   */
#if defined ( __CC_ARM)
  __force_stores( );
#endif

  __WFI();
 80018ac:	bf30      	wfi

/* USER CODE BEGIN PWR_EnterStopMode_2 */

/* USER CODE END PWR_EnterStopMode_2 */
  return;
 80018ae:	bf00      	nop
}
 80018b0:	bd80      	pop	{r7, pc}

080018b2 <PWR_ExitStopMode>:
  * @note Enable the pll at 32MHz
  * @param none
  * @retval none
  */
void PWR_ExitStopMode( void )
{
 80018b2:	b580      	push	{r7, lr}
 80018b4:	af00      	add	r7, sp, #0

/* USER CODE END PWR_ExitStopMode_1 */
  /**
   * This function is called from CRITICAL SECTION
   */
  ExitLowPower();
 80018b6:	f000 f841 	bl	800193c <ExitLowPower>

  HAL_ResumeTick();
 80018ba:	f000 fa55 	bl	8001d68 <HAL_ResumeTick>
/* USER CODE BEGIN PWR_ExitStopMode_2 */

/* USER CODE END PWR_ExitStopMode_2 */
  return;
 80018be:	bf00      	nop
}
 80018c0:	bd80      	pop	{r7, pc}

080018c2 <PWR_EnterSleepMode>:
  * @note ARM exits the function when waking up
  * @param none
  * @retval none
  */
void PWR_EnterSleepMode( void )
{
 80018c2:	b580      	push	{r7, lr}
 80018c4:	af00      	add	r7, sp, #0
/* USER CODE BEGIN PWR_EnterSleepMode_1 */

/* USER CODE END PWR_EnterSleepMode_1 */

  HAL_SuspendTick();
 80018c6:	f000 fa3f 	bl	8001d48 <HAL_SuspendTick>

  /************************************************************************************
   * ENTER SLEEP MODE
   ***********************************************************************************/
  LL_LPM_EnableSleep( ); /**< Clear SLEEPDEEP bit of Cortex System Control Register */
 80018ca:	f7ff ff83 	bl	80017d4 <LL_LPM_EnableSleep>
   */
#if defined ( __CC_ARM)
  __force_stores();
#endif

  __WFI( );
 80018ce:	bf30      	wfi
/* USER CODE BEGIN PWR_EnterSleepMode_2 */

/* USER CODE END PWR_EnterSleepMode_2 */
  return;
 80018d0:	bf00      	nop
}
 80018d2:	bd80      	pop	{r7, pc}

080018d4 <PWR_ExitSleepMode>:
  * @note ARM exits the function when waking up
  * @param none
  * @retval none
  */
void PWR_ExitSleepMode( void )
{
 80018d4:	b580      	push	{r7, lr}
 80018d6:	af00      	add	r7, sp, #0
/* USER CODE BEGIN PWR_ExitSleepMode_1 */

/* USER CODE END PWR_ExitSleepMode_1 */
  HAL_ResumeTick();
 80018d8:	f000 fa46 	bl	8001d68 <HAL_ResumeTick>
/* USER CODE BEGIN PWR_ExitSleepMode_2 */

/* USER CODE END PWR_ExitSleepMode_2 */
  return;
 80018dc:	bf00      	nop
}
 80018de:	bd80      	pop	{r7, pc}

080018e0 <EnterLowPower>:
  * @brief Setup the system to enter either stop or off mode
  * @param none
  * @retval none
  */
static void EnterLowPower( void )
{
 80018e0:	b580      	push	{r7, lr}
 80018e2:	af00      	add	r7, sp, #0
  /**
   * This function is called from CRITICAL SECTION
   */

  while( LL_HSEM_1StepLock( HSEM, CFG_HW_RCC_SEMID ) );
 80018e4:	bf00      	nop
 80018e6:	2103      	movs	r1, #3
 80018e8:	4813      	ldr	r0, [pc, #76]	; (8001938 <EnterLowPower+0x58>)
 80018ea:	f7ff ff93 	bl	8001814 <LL_HSEM_1StepLock>
 80018ee:	4603      	mov	r3, r0
 80018f0:	2b00      	cmp	r3, #0
 80018f2:	d1f8      	bne.n	80018e6 <EnterLowPower+0x6>

  if ( ! LL_HSEM_1StepLock( HSEM, CFG_HW_ENTRY_STOP_MODE_SEMID ) )
 80018f4:	2104      	movs	r1, #4
 80018f6:	4810      	ldr	r0, [pc, #64]	; (8001938 <EnterLowPower+0x58>)
 80018f8:	f7ff ff8c 	bl	8001814 <LL_HSEM_1StepLock>
 80018fc:	4603      	mov	r3, r0
 80018fe:	2b00      	cmp	r3, #0
 8001900:	d111      	bne.n	8001926 <EnterLowPower+0x46>
  {
    if( LL_PWR_IsActiveFlag_C2DS() || LL_PWR_IsActiveFlag_C2SB() )
 8001902:	f7ff fefd 	bl	8001700 <LL_PWR_IsActiveFlag_C2DS>
 8001906:	4603      	mov	r3, r0
 8001908:	2b00      	cmp	r3, #0
 800190a:	d104      	bne.n	8001916 <EnterLowPower+0x36>
 800190c:	f7ff fee4 	bl	80016d8 <LL_PWR_IsActiveFlag_C2SB>
 8001910:	4603      	mov	r3, r0
 8001912:	2b00      	cmp	r3, #0
 8001914:	d009      	beq.n	800192a <EnterLowPower+0x4a>
    {
      /* Release ENTRY_STOP_MODE semaphore */
      LL_HSEM_ReleaseLock( HSEM, CFG_HW_ENTRY_STOP_MODE_SEMID, 0 );
 8001916:	2200      	movs	r2, #0
 8001918:	2104      	movs	r1, #4
 800191a:	4807      	ldr	r0, [pc, #28]	; (8001938 <EnterLowPower+0x58>)
 800191c:	f7ff ff92 	bl	8001844 <LL_HSEM_ReleaseLock>

      Switch_On_HSI( );
 8001920:	f000 f826 	bl	8001970 <Switch_On_HSI>
 8001924:	e001      	b.n	800192a <EnterLowPower+0x4a>
    }
  }
  else
  {
    Switch_On_HSI( );
 8001926:	f000 f823 	bl	8001970 <Switch_On_HSI>
  }

  /* Release RCC semaphore */
  LL_HSEM_ReleaseLock( HSEM, CFG_HW_RCC_SEMID, 0 );
 800192a:	2200      	movs	r2, #0
 800192c:	2103      	movs	r1, #3
 800192e:	4802      	ldr	r0, [pc, #8]	; (8001938 <EnterLowPower+0x58>)
 8001930:	f7ff ff88 	bl	8001844 <LL_HSEM_ReleaseLock>

  return;
 8001934:	bf00      	nop
}
 8001936:	bd80      	pop	{r7, pc}
 8001938:	58001400 	.word	0x58001400

0800193c <ExitLowPower>:
  * @brief Restore the system to exit stop mode
  * @param none
  * @retval none
  */
static void ExitLowPower( void )
{
 800193c:	b580      	push	{r7, lr}
 800193e:	af00      	add	r7, sp, #0
  /* Release ENTRY_STOP_MODE semaphore */
  LL_HSEM_ReleaseLock( HSEM, CFG_HW_ENTRY_STOP_MODE_SEMID, 0 );
 8001940:	2200      	movs	r2, #0
 8001942:	2104      	movs	r1, #4
 8001944:	4809      	ldr	r0, [pc, #36]	; (800196c <ExitLowPower+0x30>)
 8001946:	f7ff ff7d 	bl	8001844 <LL_HSEM_ReleaseLock>

  while( LL_HSEM_1StepLock( HSEM, CFG_HW_RCC_SEMID ) );
 800194a:	bf00      	nop
 800194c:	2103      	movs	r1, #3
 800194e:	4807      	ldr	r0, [pc, #28]	; (800196c <ExitLowPower+0x30>)
 8001950:	f7ff ff60 	bl	8001814 <LL_HSEM_1StepLock>
 8001954:	4603      	mov	r3, r0
 8001956:	2b00      	cmp	r3, #0
 8001958:	d1f8      	bne.n	800194c <ExitLowPower+0x10>

  if(LL_RCC_GetSysClkSource( ) == LL_RCC_SYS_CLKSOURCE_STATUS_HSI)
 800195a:	f7ff ff1a 	bl	8001792 <LL_RCC_GetSysClkSource>

/* USER CODE END ExitLowPower_2 */
  }

  /* Release RCC semaphore */
  LL_HSEM_ReleaseLock( HSEM, CFG_HW_RCC_SEMID, 0 );
 800195e:	2200      	movs	r2, #0
 8001960:	2103      	movs	r1, #3
 8001962:	4802      	ldr	r0, [pc, #8]	; (800196c <ExitLowPower+0x30>)
 8001964:	f7ff ff6e 	bl	8001844 <LL_HSEM_ReleaseLock>

  return;
 8001968:	bf00      	nop
}
 800196a:	bd80      	pop	{r7, pc}
 800196c:	58001400 	.word	0x58001400

08001970 <Switch_On_HSI>:
  * @brief Switch the system clock on HSI
  * @param none
  * @retval none
  */
static void Switch_On_HSI( void )
{
 8001970:	b580      	push	{r7, lr}
 8001972:	af00      	add	r7, sp, #0
  LL_RCC_HSI_Enable( );
 8001974:	f7ff fed8 	bl	8001728 <LL_RCC_HSI_Enable>
  while(!LL_RCC_HSI_IsReady( ));
 8001978:	bf00      	nop
 800197a:	f7ff fee4 	bl	8001746 <LL_RCC_HSI_IsReady>
 800197e:	4603      	mov	r3, r0
 8001980:	2b00      	cmp	r3, #0
 8001982:	d0fa      	beq.n	800197a <Switch_On_HSI+0xa>
  LL_RCC_SetSysClkSource( LL_RCC_SYS_CLKSOURCE_HSI );
 8001984:	2001      	movs	r0, #1
 8001986:	f7ff fef0 	bl	800176a <LL_RCC_SetSysClkSource>
  LL_RCC_SetSMPSClockSource(LL_RCC_SMPS_CLKSOURCE_HSI);
 800198a:	2000      	movs	r0, #0
 800198c:	f7ff ff0d 	bl	80017aa <LL_RCC_SetSMPSClockSource>
  while (LL_RCC_GetSysClkSource( ) != LL_RCC_SYS_CLKSOURCE_STATUS_HSI);
 8001990:	bf00      	nop
 8001992:	f7ff fefe 	bl	8001792 <LL_RCC_GetSysClkSource>
 8001996:	4603      	mov	r3, r0
 8001998:	2b04      	cmp	r3, #4
 800199a:	d1fa      	bne.n	8001992 <Switch_On_HSI+0x22>
  return;
 800199c:	bf00      	nop
}
 800199e:	bd80      	pop	{r7, pc}

080019a0 <LL_RCC_EnableRTC>:
{
 80019a0:	b480      	push	{r7}
 80019a2:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_RTCEN);
 80019a4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80019a8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80019ac:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80019b0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80019b4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 80019b8:	bf00      	nop
 80019ba:	46bd      	mov	sp, r7
 80019bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019c0:	4770      	bx	lr

080019c2 <LL_AHB3_GRP1_EnableClock>:
{
 80019c2:	b480      	push	{r7}
 80019c4:	b085      	sub	sp, #20
 80019c6:	af00      	add	r7, sp, #0
 80019c8:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB3ENR, Periphs);
 80019ca:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80019ce:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80019d0:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	4313      	orrs	r3, r2
 80019d8:	650b      	str	r3, [r1, #80]	; 0x50
  tmpreg = READ_BIT(RCC->AHB3ENR, Periphs);
 80019da:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80019de:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	4013      	ands	r3, r2
 80019e4:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80019e6:	68fb      	ldr	r3, [r7, #12]
}
 80019e8:	bf00      	nop
 80019ea:	3714      	adds	r7, #20
 80019ec:	46bd      	mov	sp, r7
 80019ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019f2:	4770      	bx	lr

080019f4 <LL_APB1_GRP1_EnableClock>:
  *         @arg @ref LL_APB1_GRP1_PERIPH_LPTIM1
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_APB1_GRP1_EnableClock(uint32_t Periphs)
{
 80019f4:	b480      	push	{r7}
 80019f6:	b085      	sub	sp, #20
 80019f8:	af00      	add	r7, sp, #0
 80019fa:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR1, Periphs);
 80019fc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001a00:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8001a02:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	4313      	orrs	r3, r2
 8001a0a:	658b      	str	r3, [r1, #88]	; 0x58
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 8001a0c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001a10:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	4013      	ands	r3, r2
 8001a16:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001a18:	68fb      	ldr	r3, [r7, #12]
}
 8001a1a:	bf00      	nop
 8001a1c:	3714      	adds	r7, #20
 8001a1e:	46bd      	mov	sp, r7
 8001a20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a24:	4770      	bx	lr

08001a26 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001a26:	b580      	push	{r7, lr}
 8001a28:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_HSEM_CLK_ENABLE();
 8001a2a:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 8001a2e:	f7ff ffc8 	bl	80019c2 <LL_AHB3_GRP1_EnableClock>

  /* System interrupt init*/

  /* Peripheral interrupt init */
  /* HSEM_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(HSEM_IRQn, 0, 0);
 8001a32:	2200      	movs	r2, #0
 8001a34:	2100      	movs	r1, #0
 8001a36:	202e      	movs	r0, #46	; 0x2e
 8001a38:	f000 fae1 	bl	8001ffe <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(HSEM_IRQn);
 8001a3c:	202e      	movs	r0, #46	; 0x2e
 8001a3e:	f000 faf8 	bl	8002032 <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001a42:	bf00      	nop
 8001a44:	bd80      	pop	{r7, pc}
	...

08001a48 <HAL_IPCC_MspInit>:
* This function configures the hardware resources used in this example
* @param hipcc: IPCC handle pointer
* @retval None
*/
void HAL_IPCC_MspInit(IPCC_HandleTypeDef* hipcc)
{
 8001a48:	b580      	push	{r7, lr}
 8001a4a:	b082      	sub	sp, #8
 8001a4c:	af00      	add	r7, sp, #0
 8001a4e:	6078      	str	r0, [r7, #4]
  if(hipcc->Instance==IPCC)
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	681b      	ldr	r3, [r3, #0]
 8001a54:	4a05      	ldr	r2, [pc, #20]	; (8001a6c <HAL_IPCC_MspInit+0x24>)
 8001a56:	4293      	cmp	r3, r2
 8001a58:	d103      	bne.n	8001a62 <HAL_IPCC_MspInit+0x1a>
  {
  /* USER CODE BEGIN IPCC_MspInit 0 */

  /* USER CODE END IPCC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_IPCC_CLK_ENABLE();
 8001a5a:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8001a5e:	f7ff ffb0 	bl	80019c2 <LL_AHB3_GRP1_EnableClock>
  /* USER CODE BEGIN IPCC_MspInit 1 */

  /* USER CODE END IPCC_MspInit 1 */
  }

}
 8001a62:	bf00      	nop
 8001a64:	3708      	adds	r7, #8
 8001a66:	46bd      	mov	sp, r7
 8001a68:	bd80      	pop	{r7, pc}
 8001a6a:	bf00      	nop
 8001a6c:	58000c00 	.word	0x58000c00

08001a70 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8001a70:	b580      	push	{r7, lr}
 8001a72:	b096      	sub	sp, #88	; 0x58
 8001a74:	af00      	add	r7, sp, #0
 8001a76:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001a78:	f107 0308 	add.w	r3, r7, #8
 8001a7c:	2250      	movs	r2, #80	; 0x50
 8001a7e:	2100      	movs	r1, #0
 8001a80:	4618      	mov	r0, r3
 8001a82:	f005 fb55 	bl	8007130 <memset>
  if(hrtc->Instance==RTC)
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	681b      	ldr	r3, [r3, #0]
 8001a8a:	4a0e      	ldr	r2, [pc, #56]	; (8001ac4 <HAL_RTC_MspInit+0x54>)
 8001a8c:	4293      	cmp	r3, r2
 8001a8e:	d115      	bne.n	8001abc <HAL_RTC_MspInit+0x4c>
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8001a90:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8001a94:	60bb      	str	r3, [r7, #8]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 8001a96:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001a9a:	64bb      	str	r3, [r7, #72]	; 0x48
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001a9c:	f107 0308 	add.w	r3, r7, #8
 8001aa0:	4618      	mov	r0, r3
 8001aa2:	f002 f85a 	bl	8003b5a <HAL_RCCEx_PeriphCLKConfig>
 8001aa6:	4603      	mov	r3, r0
 8001aa8:	2b00      	cmp	r3, #0
 8001aaa:	d001      	beq.n	8001ab0 <HAL_RTC_MspInit+0x40>
    {
      Error_Handler();
 8001aac:	f7ff fdee 	bl	800168c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8001ab0:	f7ff ff76 	bl	80019a0 <LL_RCC_EnableRTC>
    __HAL_RCC_RTCAPB_CLK_ENABLE();
 8001ab4:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8001ab8:	f7ff ff9c 	bl	80019f4 <LL_APB1_GRP1_EnableClock>
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 8001abc:	bf00      	nop
 8001abe:	3758      	adds	r7, #88	; 0x58
 8001ac0:	46bd      	mov	sp, r7
 8001ac2:	bd80      	pop	{r7, pc}
 8001ac4:	40002800 	.word	0x40002800

08001ac8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001ac8:	b480      	push	{r7}
 8001aca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001acc:	e7fe      	b.n	8001acc <NMI_Handler+0x4>

08001ace <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001ace:	b480      	push	{r7}
 8001ad0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001ad2:	e7fe      	b.n	8001ad2 <HardFault_Handler+0x4>

08001ad4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001ad4:	b480      	push	{r7}
 8001ad6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001ad8:	e7fe      	b.n	8001ad8 <MemManage_Handler+0x4>

08001ada <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001ada:	b480      	push	{r7}
 8001adc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001ade:	e7fe      	b.n	8001ade <BusFault_Handler+0x4>

08001ae0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001ae0:	b480      	push	{r7}
 8001ae2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001ae4:	e7fe      	b.n	8001ae4 <UsageFault_Handler+0x4>

08001ae6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001ae6:	b480      	push	{r7}
 8001ae8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001aea:	bf00      	nop
 8001aec:	46bd      	mov	sp, r7
 8001aee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001af2:	4770      	bx	lr

08001af4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001af4:	b480      	push	{r7}
 8001af6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001af8:	bf00      	nop
 8001afa:	46bd      	mov	sp, r7
 8001afc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b00:	4770      	bx	lr

08001b02 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001b02:	b480      	push	{r7}
 8001b04:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001b06:	bf00      	nop
 8001b08:	46bd      	mov	sp, r7
 8001b0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b0e:	4770      	bx	lr

08001b10 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001b10:	b580      	push	{r7, lr}
 8001b12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001b14:	f000 f8ec 	bl	8001cf0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001b18:	bf00      	nop
 8001b1a:	bd80      	pop	{r7, pc}

08001b1c <HSEM_IRQHandler>:

/**
  * @brief This function handles HSEM global interrupt.
  */
void HSEM_IRQHandler(void)
{
 8001b1c:	b580      	push	{r7, lr}
 8001b1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HSEM_IRQn 0 */

  /* USER CODE END HSEM_IRQn 0 */
  HAL_HSEM_IRQHandler();
 8001b20:	f000 fc54 	bl	80023cc <HAL_HSEM_IRQHandler>
  /* USER CODE BEGIN HSEM_IRQn 1 */

  /* USER CODE END HSEM_IRQn 1 */
}
 8001b24:	bf00      	nop
 8001b26:	bd80      	pop	{r7, pc}

08001b28 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001b28:	b480      	push	{r7}
 8001b2a:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10UL*2UL))|(3UL << (11UL*2UL)));  /* set CP10 and CP11 Full Access */
 8001b2c:	4b24      	ldr	r3, [pc, #144]	; (8001bc0 <SystemInit+0x98>)
 8001b2e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001b32:	4a23      	ldr	r2, [pc, #140]	; (8001bc0 <SystemInit+0x98>)
 8001b34:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001b38:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 8001b3c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001b40:	681b      	ldr	r3, [r3, #0]
 8001b42:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001b46:	f043 0301 	orr.w	r3, r3, #1
 8001b4a:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00070000U;
 8001b4c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001b50:	f44f 22e0 	mov.w	r2, #458752	; 0x70000
 8001b54:	609a      	str	r2, [r3, #8]

  /* Reset PLLSAI1ON, PLLON, HSECSSON, HSEON, HSION, and MSIPLLON bits */
  RCC->CR &= (uint32_t)0xFAF6FEFBU;
 8001b56:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001b5a:	681a      	ldr	r2, [r3, #0]
 8001b5c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001b60:	4b18      	ldr	r3, [pc, #96]	; (8001bc4 <SystemInit+0x9c>)
 8001b62:	4013      	ands	r3, r2
 8001b64:	600b      	str	r3, [r1, #0]

  /*!< Reset LSI1 and LSI2 bits */
  RCC->CSR &= (uint32_t)0xFFFFFFFAU;
 8001b66:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001b6a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001b6e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001b72:	f023 0305 	bic.w	r3, r3, #5
 8001b76:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
  
  /*!< Reset HSI48ON  bit */
  RCC->CRRCR &= (uint32_t)0xFFFFFFFEU;
 8001b7a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001b7e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001b82:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001b86:	f023 0301 	bic.w	r3, r3, #1
 8001b8a:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98
    
  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x22041000U;
 8001b8e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001b92:	4a0d      	ldr	r2, [pc, #52]	; (8001bc8 <SystemInit+0xa0>)
 8001b94:	60da      	str	r2, [r3, #12]

#if defined(STM32WB55xx) || defined(STM32WB5Mxx)
  /* Reset PLLSAI1CFGR register */
  RCC->PLLSAI1CFGR = 0x22041000U;
 8001b96:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001b9a:	4a0b      	ldr	r2, [pc, #44]	; (8001bc8 <SystemInit+0xa0>)
 8001b9c:	611a      	str	r2, [r3, #16]
#endif
  
  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8001b9e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001ba2:	681b      	ldr	r3, [r3, #0]
 8001ba4:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001ba8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001bac:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8001bae:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001bb2:	2200      	movs	r2, #0
 8001bb4:	619a      	str	r2, [r3, #24]
}
 8001bb6:	bf00      	nop
 8001bb8:	46bd      	mov	sp, r7
 8001bba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bbe:	4770      	bx	lr
 8001bc0:	e000ed00 	.word	0xe000ed00
 8001bc4:	faf6fefb 	.word	0xfaf6fefb
 8001bc8:	22041000 	.word	0x22041000

08001bcc <CopyDataInit>:
  bl LoopCopyDataInit
.endm

.section  .text.data_initializers
CopyDataInit:
  ldr r4, [r2, r3]
 8001bcc:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001bce:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001bd0:	3304      	adds	r3, #4

08001bd2 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001bd2:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001bd4:	428c      	cmp	r4, r1
  bcc  CopyDataInit
 8001bd6:	d3f9      	bcc.n	8001bcc <CopyDataInit>
  bx lr
 8001bd8:	4770      	bx	lr

08001bda <FillZerobss>:

FillZerobss:
  str  r3, [r0]
 8001bda:	6003      	str	r3, [r0, #0]
  adds r0, r0, #4
 8001bdc:	3004      	adds	r0, #4

08001bde <LoopFillZerobss>:

LoopFillZerobss:
  cmp r0, r1
 8001bde:	4288      	cmp	r0, r1
  bcc FillZerobss
 8001be0:	d3fb      	bcc.n	8001bda <FillZerobss>
  bx lr
 8001be2:	4770      	bx	lr

08001be4 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8001be4:	480c      	ldr	r0, [pc, #48]	; (8001c18 <LoopForever+0x4>)
  mov   sp, r0          /* set stack pointer */
 8001be6:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8001be8:	f7ff ff9e 	bl	8001b28 <SystemInit>
  
/* Copy the data segment initializers from flash to SRAM */
  INIT_DATA _sdata, _edata, _sidata
 8001bec:	480b      	ldr	r0, [pc, #44]	; (8001c1c <LoopForever+0x8>)
 8001bee:	490c      	ldr	r1, [pc, #48]	; (8001c20 <LoopForever+0xc>)
 8001bf0:	4a0c      	ldr	r2, [pc, #48]	; (8001c24 <LoopForever+0x10>)
 8001bf2:	2300      	movs	r3, #0
 8001bf4:	f7ff ffed 	bl	8001bd2 <LoopCopyDataInit>

/* Zero fill the bss segments. */
  INIT_BSS _sbss, _ebss
 8001bf8:	480b      	ldr	r0, [pc, #44]	; (8001c28 <LoopForever+0x14>)
 8001bfa:	490c      	ldr	r1, [pc, #48]	; (8001c2c <LoopForever+0x18>)
 8001bfc:	2300      	movs	r3, #0
 8001bfe:	f7ff ffee 	bl	8001bde <LoopFillZerobss>
  INIT_BSS _sMB_MEM2, _eMB_MEM2
 8001c02:	480b      	ldr	r0, [pc, #44]	; (8001c30 <LoopForever+0x1c>)
 8001c04:	490b      	ldr	r1, [pc, #44]	; (8001c34 <LoopForever+0x20>)
 8001c06:	2300      	movs	r3, #0
 8001c08:	f7ff ffe9 	bl	8001bde <LoopFillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8001c0c:	f005 fa5e 	bl	80070cc <__libc_init_array>
/* Call the application s entry point.*/
	bl	main
 8001c10:	f7ff fc3d 	bl	800148e <main>

08001c14 <LoopForever>:

LoopForever:
  b LoopForever
 8001c14:	e7fe      	b.n	8001c14 <LoopForever>
 8001c16:	0000      	.short	0x0000
  ldr   r0, =_estack
 8001c18:	20030000 	.word	0x20030000
  INIT_DATA _sdata, _edata, _sidata
 8001c1c:	20000004 	.word	0x20000004
 8001c20:	20000028 	.word	0x20000028
 8001c24:	080073ec 	.word	0x080073ec
  INIT_BSS _sbss, _ebss
 8001c28:	200001a0 	.word	0x200001a0
 8001c2c:	20000350 	.word	0x20000350
  INIT_BSS _sMB_MEM2, _eMB_MEM2
 8001c30:	200301e0 	.word	0x200301e0
 8001c34:	20030a57 	.word	0x20030a57

08001c38 <ADC1_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001c38:	e7fe      	b.n	8001c38 <ADC1_IRQHandler>
	...

08001c3c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001c3c:	b580      	push	{r7, lr}
 8001c3e:	b082      	sub	sp, #8
 8001c40:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001c42:	2300      	movs	r3, #0
 8001c44:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0U)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001c46:	4b0c      	ldr	r3, [pc, #48]	; (8001c78 <HAL_Init+0x3c>)
 8001c48:	681b      	ldr	r3, [r3, #0]
 8001c4a:	4a0b      	ldr	r2, [pc, #44]	; (8001c78 <HAL_Init+0x3c>)
 8001c4c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001c50:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001c52:	2003      	movs	r0, #3
 8001c54:	f000 f9c8 	bl	8001fe8 <HAL_NVIC_SetPriorityGrouping>
  
  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001c58:	200f      	movs	r0, #15
 8001c5a:	f000 f80f 	bl	8001c7c <HAL_InitTick>
 8001c5e:	4603      	mov	r3, r0
 8001c60:	2b00      	cmp	r3, #0
 8001c62:	d002      	beq.n	8001c6a <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 8001c64:	2301      	movs	r3, #1
 8001c66:	71fb      	strb	r3, [r7, #7]
 8001c68:	e001      	b.n	8001c6e <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001c6a:	f7ff fedc 	bl	8001a26 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001c6e:	79fb      	ldrb	r3, [r7, #7]
}
 8001c70:	4618      	mov	r0, r3
 8001c72:	3708      	adds	r7, #8
 8001c74:	46bd      	mov	sp, r7
 8001c76:	bd80      	pop	{r7, pc}
 8001c78:	58004000 	.word	0x58004000

08001c7c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001c7c:	b580      	push	{r7, lr}
 8001c7e:	b084      	sub	sp, #16
 8001c80:	af00      	add	r7, sp, #0
 8001c82:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001c84:	2300      	movs	r3, #0
 8001c86:	73fb      	strb	r3, [r7, #15]

  if ((uint32_t)uwTickFreq != 0U)
 8001c88:	4b17      	ldr	r3, [pc, #92]	; (8001ce8 <HAL_InitTick+0x6c>)
 8001c8a:	781b      	ldrb	r3, [r3, #0]
 8001c8c:	2b00      	cmp	r3, #0
 8001c8e:	d024      	beq.n	8001cda <HAL_InitTick+0x5e>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq()/ (1000U / (uint32_t)uwTickFreq)) == 0U)
 8001c90:	f001 fcfa 	bl	8003688 <HAL_RCC_GetHCLKFreq>
 8001c94:	4602      	mov	r2, r0
 8001c96:	4b14      	ldr	r3, [pc, #80]	; (8001ce8 <HAL_InitTick+0x6c>)
 8001c98:	781b      	ldrb	r3, [r3, #0]
 8001c9a:	4619      	mov	r1, r3
 8001c9c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001ca0:	fbb3 f3f1 	udiv	r3, r3, r1
 8001ca4:	fbb2 f3f3 	udiv	r3, r2, r3
 8001ca8:	4618      	mov	r0, r3
 8001caa:	f000 f9de 	bl	800206a <HAL_SYSTICK_Config>
 8001cae:	4603      	mov	r3, r0
 8001cb0:	2b00      	cmp	r3, #0
 8001cb2:	d10f      	bne.n	8001cd4 <HAL_InitTick+0x58>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	2b0f      	cmp	r3, #15
 8001cb8:	d809      	bhi.n	8001cce <HAL_InitTick+0x52>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001cba:	2200      	movs	r2, #0
 8001cbc:	6879      	ldr	r1, [r7, #4]
 8001cbe:	f04f 30ff 	mov.w	r0, #4294967295
 8001cc2:	f000 f99c 	bl	8001ffe <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001cc6:	4a09      	ldr	r2, [pc, #36]	; (8001cec <HAL_InitTick+0x70>)
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	6013      	str	r3, [r2, #0]
 8001ccc:	e007      	b.n	8001cde <HAL_InitTick+0x62>
      }
      else
      {
        status = HAL_ERROR;
 8001cce:	2301      	movs	r3, #1
 8001cd0:	73fb      	strb	r3, [r7, #15]
 8001cd2:	e004      	b.n	8001cde <HAL_InitTick+0x62>
      }
    }
    else
    {  
      status = HAL_ERROR;
 8001cd4:	2301      	movs	r3, #1
 8001cd6:	73fb      	strb	r3, [r7, #15]
 8001cd8:	e001      	b.n	8001cde <HAL_InitTick+0x62>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001cda:	2301      	movs	r3, #1
 8001cdc:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8001cde:	7bfb      	ldrb	r3, [r7, #15]
}
 8001ce0:	4618      	mov	r0, r3
 8001ce2:	3710      	adds	r7, #16
 8001ce4:	46bd      	mov	sp, r7
 8001ce6:	bd80      	pop	{r7, pc}
 8001ce8:	2000000c 	.word	0x2000000c
 8001cec:	20000008 	.word	0x20000008

08001cf0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001cf0:	b480      	push	{r7}
 8001cf2:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001cf4:	4b06      	ldr	r3, [pc, #24]	; (8001d10 <HAL_IncTick+0x20>)
 8001cf6:	781b      	ldrb	r3, [r3, #0]
 8001cf8:	461a      	mov	r2, r3
 8001cfa:	4b06      	ldr	r3, [pc, #24]	; (8001d14 <HAL_IncTick+0x24>)
 8001cfc:	681b      	ldr	r3, [r3, #0]
 8001cfe:	4413      	add	r3, r2
 8001d00:	4a04      	ldr	r2, [pc, #16]	; (8001d14 <HAL_IncTick+0x24>)
 8001d02:	6013      	str	r3, [r2, #0]
}
 8001d04:	bf00      	nop
 8001d06:	46bd      	mov	sp, r7
 8001d08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d0c:	4770      	bx	lr
 8001d0e:	bf00      	nop
 8001d10:	2000000c 	.word	0x2000000c
 8001d14:	20000348 	.word	0x20000348

08001d18 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001d18:	b480      	push	{r7}
 8001d1a:	af00      	add	r7, sp, #0
  return uwTick;
 8001d1c:	4b03      	ldr	r3, [pc, #12]	; (8001d2c <HAL_GetTick+0x14>)
 8001d1e:	681b      	ldr	r3, [r3, #0]
}
 8001d20:	4618      	mov	r0, r3
 8001d22:	46bd      	mov	sp, r7
 8001d24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d28:	4770      	bx	lr
 8001d2a:	bf00      	nop
 8001d2c:	20000348 	.word	0x20000348

08001d30 <HAL_GetTickPrio>:
/**
  * @brief This function returns a tick priority.
  * @retval tick priority
  */
uint32_t HAL_GetTickPrio(void)
{
 8001d30:	b480      	push	{r7}
 8001d32:	af00      	add	r7, sp, #0
  return uwTickPrio;
 8001d34:	4b03      	ldr	r3, [pc, #12]	; (8001d44 <HAL_GetTickPrio+0x14>)
 8001d36:	681b      	ldr	r3, [r3, #0]
}
 8001d38:	4618      	mov	r0, r3
 8001d3a:	46bd      	mov	sp, r7
 8001d3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d40:	4770      	bx	lr
 8001d42:	bf00      	nop
 8001d44:	20000008 	.word	0x20000008

08001d48 <HAL_SuspendTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_SuspendTick(void)
{
 8001d48:	b480      	push	{r7}
 8001d4a:	af00      	add	r7, sp, #0
  /* Disable SysTick Interrupt */
  CLEAR_BIT(SysTick->CTRL,SysTick_CTRL_TICKINT_Msk);
 8001d4c:	4b05      	ldr	r3, [pc, #20]	; (8001d64 <HAL_SuspendTick+0x1c>)
 8001d4e:	681b      	ldr	r3, [r3, #0]
 8001d50:	4a04      	ldr	r2, [pc, #16]	; (8001d64 <HAL_SuspendTick+0x1c>)
 8001d52:	f023 0302 	bic.w	r3, r3, #2
 8001d56:	6013      	str	r3, [r2, #0]
}
 8001d58:	bf00      	nop
 8001d5a:	46bd      	mov	sp, r7
 8001d5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d60:	4770      	bx	lr
 8001d62:	bf00      	nop
 8001d64:	e000e010 	.word	0xe000e010

08001d68 <HAL_ResumeTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_ResumeTick(void)
{
 8001d68:	b480      	push	{r7}
 8001d6a:	af00      	add	r7, sp, #0
  /* Enable SysTick Interrupt */
  SET_BIT(SysTick->CTRL,SysTick_CTRL_TICKINT_Msk);
 8001d6c:	4b05      	ldr	r3, [pc, #20]	; (8001d84 <HAL_ResumeTick+0x1c>)
 8001d6e:	681b      	ldr	r3, [r3, #0]
 8001d70:	4a04      	ldr	r2, [pc, #16]	; (8001d84 <HAL_ResumeTick+0x1c>)
 8001d72:	f043 0302 	orr.w	r3, r3, #2
 8001d76:	6013      	str	r3, [r2, #0]
}
 8001d78:	bf00      	nop
 8001d7a:	46bd      	mov	sp, r7
 8001d7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d80:	4770      	bx	lr
 8001d82:	bf00      	nop
 8001d84:	e000e010 	.word	0xe000e010

08001d88 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001d88:	b480      	push	{r7}
 8001d8a:	b085      	sub	sp, #20
 8001d8c:	af00      	add	r7, sp, #0
 8001d8e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	f003 0307 	and.w	r3, r3, #7
 8001d96:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001d98:	4b0c      	ldr	r3, [pc, #48]	; (8001dcc <__NVIC_SetPriorityGrouping+0x44>)
 8001d9a:	68db      	ldr	r3, [r3, #12]
 8001d9c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001d9e:	68ba      	ldr	r2, [r7, #8]
 8001da0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001da4:	4013      	ands	r3, r2
 8001da6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001da8:	68fb      	ldr	r3, [r7, #12]
 8001daa:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001dac:	68bb      	ldr	r3, [r7, #8]
 8001dae:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001db0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001db4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001db8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001dba:	4a04      	ldr	r2, [pc, #16]	; (8001dcc <__NVIC_SetPriorityGrouping+0x44>)
 8001dbc:	68bb      	ldr	r3, [r7, #8]
 8001dbe:	60d3      	str	r3, [r2, #12]
}
 8001dc0:	bf00      	nop
 8001dc2:	3714      	adds	r7, #20
 8001dc4:	46bd      	mov	sp, r7
 8001dc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dca:	4770      	bx	lr
 8001dcc:	e000ed00 	.word	0xe000ed00

08001dd0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001dd0:	b480      	push	{r7}
 8001dd2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001dd4:	4b04      	ldr	r3, [pc, #16]	; (8001de8 <__NVIC_GetPriorityGrouping+0x18>)
 8001dd6:	68db      	ldr	r3, [r3, #12]
 8001dd8:	0a1b      	lsrs	r3, r3, #8
 8001dda:	f003 0307 	and.w	r3, r3, #7
}
 8001dde:	4618      	mov	r0, r3
 8001de0:	46bd      	mov	sp, r7
 8001de2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001de6:	4770      	bx	lr
 8001de8:	e000ed00 	.word	0xe000ed00

08001dec <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001dec:	b480      	push	{r7}
 8001dee:	b083      	sub	sp, #12
 8001df0:	af00      	add	r7, sp, #0
 8001df2:	4603      	mov	r3, r0
 8001df4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001df6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001dfa:	2b00      	cmp	r3, #0
 8001dfc:	db0b      	blt.n	8001e16 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001dfe:	79fb      	ldrb	r3, [r7, #7]
 8001e00:	f003 021f 	and.w	r2, r3, #31
 8001e04:	4907      	ldr	r1, [pc, #28]	; (8001e24 <__NVIC_EnableIRQ+0x38>)
 8001e06:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e0a:	095b      	lsrs	r3, r3, #5
 8001e0c:	2001      	movs	r0, #1
 8001e0e:	fa00 f202 	lsl.w	r2, r0, r2
 8001e12:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001e16:	bf00      	nop
 8001e18:	370c      	adds	r7, #12
 8001e1a:	46bd      	mov	sp, r7
 8001e1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e20:	4770      	bx	lr
 8001e22:	bf00      	nop
 8001e24:	e000e100 	.word	0xe000e100

08001e28 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8001e28:	b480      	push	{r7}
 8001e2a:	b083      	sub	sp, #12
 8001e2c:	af00      	add	r7, sp, #0
 8001e2e:	4603      	mov	r3, r0
 8001e30:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001e32:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e36:	2b00      	cmp	r3, #0
 8001e38:	db12      	blt.n	8001e60 <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001e3a:	79fb      	ldrb	r3, [r7, #7]
 8001e3c:	f003 021f 	and.w	r2, r3, #31
 8001e40:	490a      	ldr	r1, [pc, #40]	; (8001e6c <__NVIC_DisableIRQ+0x44>)
 8001e42:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e46:	095b      	lsrs	r3, r3, #5
 8001e48:	2001      	movs	r0, #1
 8001e4a:	fa00 f202 	lsl.w	r2, r0, r2
 8001e4e:	3320      	adds	r3, #32
 8001e50:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
 8001e54:	f3bf 8f4f 	dsb	sy
}
 8001e58:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001e5a:	f3bf 8f6f 	isb	sy
}
 8001e5e:	bf00      	nop
    __DSB();
    __ISB();
  }
}
 8001e60:	bf00      	nop
 8001e62:	370c      	adds	r7, #12
 8001e64:	46bd      	mov	sp, r7
 8001e66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e6a:	4770      	bx	lr
 8001e6c:	e000e100 	.word	0xe000e100

08001e70 <__NVIC_SetPendingIRQ>:
  \details Sets the pending bit of a device specific interrupt in the NVIC pending register.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_SetPendingIRQ(IRQn_Type IRQn)
{
 8001e70:	b480      	push	{r7}
 8001e72:	b083      	sub	sp, #12
 8001e74:	af00      	add	r7, sp, #0
 8001e76:	4603      	mov	r3, r0
 8001e78:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001e7a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e7e:	2b00      	cmp	r3, #0
 8001e80:	db0c      	blt.n	8001e9c <__NVIC_SetPendingIRQ+0x2c>
  {
    NVIC->ISPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001e82:	79fb      	ldrb	r3, [r7, #7]
 8001e84:	f003 021f 	and.w	r2, r3, #31
 8001e88:	4907      	ldr	r1, [pc, #28]	; (8001ea8 <__NVIC_SetPendingIRQ+0x38>)
 8001e8a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e8e:	095b      	lsrs	r3, r3, #5
 8001e90:	2001      	movs	r0, #1
 8001e92:	fa00 f202 	lsl.w	r2, r0, r2
 8001e96:	3340      	adds	r3, #64	; 0x40
 8001e98:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001e9c:	bf00      	nop
 8001e9e:	370c      	adds	r7, #12
 8001ea0:	46bd      	mov	sp, r7
 8001ea2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ea6:	4770      	bx	lr
 8001ea8:	e000e100 	.word	0xe000e100

08001eac <__NVIC_ClearPendingIRQ>:
  \details Clears the pending bit of a device specific interrupt in the NVIC pending register.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
 8001eac:	b480      	push	{r7}
 8001eae:	b083      	sub	sp, #12
 8001eb0:	af00      	add	r7, sp, #0
 8001eb2:	4603      	mov	r3, r0
 8001eb4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001eb6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001eba:	2b00      	cmp	r3, #0
 8001ebc:	db0c      	blt.n	8001ed8 <__NVIC_ClearPendingIRQ+0x2c>
  {
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001ebe:	79fb      	ldrb	r3, [r7, #7]
 8001ec0:	f003 021f 	and.w	r2, r3, #31
 8001ec4:	4907      	ldr	r1, [pc, #28]	; (8001ee4 <__NVIC_ClearPendingIRQ+0x38>)
 8001ec6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001eca:	095b      	lsrs	r3, r3, #5
 8001ecc:	2001      	movs	r0, #1
 8001ece:	fa00 f202 	lsl.w	r2, r0, r2
 8001ed2:	3360      	adds	r3, #96	; 0x60
 8001ed4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001ed8:	bf00      	nop
 8001eda:	370c      	adds	r7, #12
 8001edc:	46bd      	mov	sp, r7
 8001ede:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ee2:	4770      	bx	lr
 8001ee4:	e000e100 	.word	0xe000e100

08001ee8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001ee8:	b480      	push	{r7}
 8001eea:	b083      	sub	sp, #12
 8001eec:	af00      	add	r7, sp, #0
 8001eee:	4603      	mov	r3, r0
 8001ef0:	6039      	str	r1, [r7, #0]
 8001ef2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001ef4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ef8:	2b00      	cmp	r3, #0
 8001efa:	db0a      	blt.n	8001f12 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001efc:	683b      	ldr	r3, [r7, #0]
 8001efe:	b2da      	uxtb	r2, r3
 8001f00:	490c      	ldr	r1, [pc, #48]	; (8001f34 <__NVIC_SetPriority+0x4c>)
 8001f02:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f06:	0112      	lsls	r2, r2, #4
 8001f08:	b2d2      	uxtb	r2, r2
 8001f0a:	440b      	add	r3, r1
 8001f0c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001f10:	e00a      	b.n	8001f28 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001f12:	683b      	ldr	r3, [r7, #0]
 8001f14:	b2da      	uxtb	r2, r3
 8001f16:	4908      	ldr	r1, [pc, #32]	; (8001f38 <__NVIC_SetPriority+0x50>)
 8001f18:	79fb      	ldrb	r3, [r7, #7]
 8001f1a:	f003 030f 	and.w	r3, r3, #15
 8001f1e:	3b04      	subs	r3, #4
 8001f20:	0112      	lsls	r2, r2, #4
 8001f22:	b2d2      	uxtb	r2, r2
 8001f24:	440b      	add	r3, r1
 8001f26:	761a      	strb	r2, [r3, #24]
}
 8001f28:	bf00      	nop
 8001f2a:	370c      	adds	r7, #12
 8001f2c:	46bd      	mov	sp, r7
 8001f2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f32:	4770      	bx	lr
 8001f34:	e000e100 	.word	0xe000e100
 8001f38:	e000ed00 	.word	0xe000ed00

08001f3c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001f3c:	b480      	push	{r7}
 8001f3e:	b089      	sub	sp, #36	; 0x24
 8001f40:	af00      	add	r7, sp, #0
 8001f42:	60f8      	str	r0, [r7, #12]
 8001f44:	60b9      	str	r1, [r7, #8]
 8001f46:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001f48:	68fb      	ldr	r3, [r7, #12]
 8001f4a:	f003 0307 	and.w	r3, r3, #7
 8001f4e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001f50:	69fb      	ldr	r3, [r7, #28]
 8001f52:	f1c3 0307 	rsb	r3, r3, #7
 8001f56:	2b04      	cmp	r3, #4
 8001f58:	bf28      	it	cs
 8001f5a:	2304      	movcs	r3, #4
 8001f5c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001f5e:	69fb      	ldr	r3, [r7, #28]
 8001f60:	3304      	adds	r3, #4
 8001f62:	2b06      	cmp	r3, #6
 8001f64:	d902      	bls.n	8001f6c <NVIC_EncodePriority+0x30>
 8001f66:	69fb      	ldr	r3, [r7, #28]
 8001f68:	3b03      	subs	r3, #3
 8001f6a:	e000      	b.n	8001f6e <NVIC_EncodePriority+0x32>
 8001f6c:	2300      	movs	r3, #0
 8001f6e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001f70:	f04f 32ff 	mov.w	r2, #4294967295
 8001f74:	69bb      	ldr	r3, [r7, #24]
 8001f76:	fa02 f303 	lsl.w	r3, r2, r3
 8001f7a:	43da      	mvns	r2, r3
 8001f7c:	68bb      	ldr	r3, [r7, #8]
 8001f7e:	401a      	ands	r2, r3
 8001f80:	697b      	ldr	r3, [r7, #20]
 8001f82:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001f84:	f04f 31ff 	mov.w	r1, #4294967295
 8001f88:	697b      	ldr	r3, [r7, #20]
 8001f8a:	fa01 f303 	lsl.w	r3, r1, r3
 8001f8e:	43d9      	mvns	r1, r3
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001f94:	4313      	orrs	r3, r2
         );
}
 8001f96:	4618      	mov	r0, r3
 8001f98:	3724      	adds	r7, #36	; 0x24
 8001f9a:	46bd      	mov	sp, r7
 8001f9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fa0:	4770      	bx	lr
	...

08001fa4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001fa4:	b580      	push	{r7, lr}
 8001fa6:	b082      	sub	sp, #8
 8001fa8:	af00      	add	r7, sp, #0
 8001faa:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	3b01      	subs	r3, #1
 8001fb0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001fb4:	d301      	bcc.n	8001fba <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001fb6:	2301      	movs	r3, #1
 8001fb8:	e00f      	b.n	8001fda <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001fba:	4a0a      	ldr	r2, [pc, #40]	; (8001fe4 <SysTick_Config+0x40>)
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	3b01      	subs	r3, #1
 8001fc0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001fc2:	210f      	movs	r1, #15
 8001fc4:	f04f 30ff 	mov.w	r0, #4294967295
 8001fc8:	f7ff ff8e 	bl	8001ee8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001fcc:	4b05      	ldr	r3, [pc, #20]	; (8001fe4 <SysTick_Config+0x40>)
 8001fce:	2200      	movs	r2, #0
 8001fd0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001fd2:	4b04      	ldr	r3, [pc, #16]	; (8001fe4 <SysTick_Config+0x40>)
 8001fd4:	2207      	movs	r2, #7
 8001fd6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001fd8:	2300      	movs	r3, #0
}
 8001fda:	4618      	mov	r0, r3
 8001fdc:	3708      	adds	r7, #8
 8001fde:	46bd      	mov	sp, r7
 8001fe0:	bd80      	pop	{r7, pc}
 8001fe2:	bf00      	nop
 8001fe4:	e000e010 	.word	0xe000e010

08001fe8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001fe8:	b580      	push	{r7, lr}
 8001fea:	b082      	sub	sp, #8
 8001fec:	af00      	add	r7, sp, #0
 8001fee:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001ff0:	6878      	ldr	r0, [r7, #4]
 8001ff2:	f7ff fec9 	bl	8001d88 <__NVIC_SetPriorityGrouping>
}
 8001ff6:	bf00      	nop
 8001ff8:	3708      	adds	r7, #8
 8001ffa:	46bd      	mov	sp, r7
 8001ffc:	bd80      	pop	{r7, pc}

08001ffe <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001ffe:	b580      	push	{r7, lr}
 8002000:	b086      	sub	sp, #24
 8002002:	af00      	add	r7, sp, #0
 8002004:	4603      	mov	r3, r0
 8002006:	60b9      	str	r1, [r7, #8]
 8002008:	607a      	str	r2, [r7, #4]
 800200a:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 800200c:	f7ff fee0 	bl	8001dd0 <__NVIC_GetPriorityGrouping>
 8002010:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002012:	687a      	ldr	r2, [r7, #4]
 8002014:	68b9      	ldr	r1, [r7, #8]
 8002016:	6978      	ldr	r0, [r7, #20]
 8002018:	f7ff ff90 	bl	8001f3c <NVIC_EncodePriority>
 800201c:	4602      	mov	r2, r0
 800201e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002022:	4611      	mov	r1, r2
 8002024:	4618      	mov	r0, r3
 8002026:	f7ff ff5f 	bl	8001ee8 <__NVIC_SetPriority>
}
 800202a:	bf00      	nop
 800202c:	3718      	adds	r7, #24
 800202e:	46bd      	mov	sp, r7
 8002030:	bd80      	pop	{r7, pc}

08002032 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32wbxxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002032:	b580      	push	{r7, lr}
 8002034:	b082      	sub	sp, #8
 8002036:	af00      	add	r7, sp, #0
 8002038:	4603      	mov	r3, r0
 800203a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800203c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002040:	4618      	mov	r0, r3
 8002042:	f7ff fed3 	bl	8001dec <__NVIC_EnableIRQ>
}
 8002046:	bf00      	nop
 8002048:	3708      	adds	r7, #8
 800204a:	46bd      	mov	sp, r7
 800204c:	bd80      	pop	{r7, pc}

0800204e <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32wbxxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 800204e:	b580      	push	{r7, lr}
 8002050:	b082      	sub	sp, #8
 8002052:	af00      	add	r7, sp, #0
 8002054:	4603      	mov	r3, r0
 8002056:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 8002058:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800205c:	4618      	mov	r0, r3
 800205e:	f7ff fee3 	bl	8001e28 <__NVIC_DisableIRQ>
}
 8002062:	bf00      	nop
 8002064:	3708      	adds	r7, #8
 8002066:	46bd      	mov	sp, r7
 8002068:	bd80      	pop	{r7, pc}

0800206a <HAL_SYSTICK_Config>:
  * @param TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800206a:	b580      	push	{r7, lr}
 800206c:	b082      	sub	sp, #8
 800206e:	af00      	add	r7, sp, #0
 8002070:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 8002072:	6878      	ldr	r0, [r7, #4]
 8002074:	f7ff ff96 	bl	8001fa4 <SysTick_Config>
 8002078:	4603      	mov	r3, r0
}
 800207a:	4618      	mov	r0, r3
 800207c:	3708      	adds	r7, #8
 800207e:	46bd      	mov	sp, r7
 8002080:	bd80      	pop	{r7, pc}

08002082 <HAL_NVIC_SetPendingIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32wbxxxx.h))
  * @retval None
  */
void HAL_NVIC_SetPendingIRQ(IRQn_Type IRQn)
{
 8002082:	b580      	push	{r7, lr}
 8002084:	b082      	sub	sp, #8
 8002086:	af00      	add	r7, sp, #0
 8002088:	4603      	mov	r3, r0
 800208a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Set interrupt pending */
  NVIC_SetPendingIRQ(IRQn);
 800208c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002090:	4618      	mov	r0, r3
 8002092:	f7ff feed 	bl	8001e70 <__NVIC_SetPendingIRQ>
}
 8002096:	bf00      	nop
 8002098:	3708      	adds	r7, #8
 800209a:	46bd      	mov	sp, r7
 800209c:	bd80      	pop	{r7, pc}

0800209e <HAL_NVIC_ClearPendingIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32wbxxxx.h))
  * @retval None
  */
void HAL_NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
 800209e:	b580      	push	{r7, lr}
 80020a0:	b082      	sub	sp, #8
 80020a2:	af00      	add	r7, sp, #0
 80020a4:	4603      	mov	r3, r0
 80020a6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Clear pending interrupt */
  NVIC_ClearPendingIRQ(IRQn);
 80020a8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80020ac:	4618      	mov	r0, r3
 80020ae:	f7ff fefd 	bl	8001eac <__NVIC_ClearPendingIRQ>
}
 80020b2:	bf00      	nop
 80020b4:	3708      	adds	r7, #8
 80020b6:	46bd      	mov	sp, r7
 80020b8:	bd80      	pop	{r7, pc}
	...

080020bc <HAL_GPIO_Init>:
  * @param GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80020bc:	b480      	push	{r7}
 80020be:	b087      	sub	sp, #28
 80020c0:	af00      	add	r7, sp, #0
 80020c2:	6078      	str	r0, [r7, #4]
 80020c4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80020c6:	2300      	movs	r3, #0
 80020c8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80020ca:	e14c      	b.n	8002366 <HAL_GPIO_Init+0x2aa>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80020cc:	683b      	ldr	r3, [r7, #0]
 80020ce:	681a      	ldr	r2, [r3, #0]
 80020d0:	2101      	movs	r1, #1
 80020d2:	697b      	ldr	r3, [r7, #20]
 80020d4:	fa01 f303 	lsl.w	r3, r1, r3
 80020d8:	4013      	ands	r3, r2
 80020da:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80020dc:	68fb      	ldr	r3, [r7, #12]
 80020de:	2b00      	cmp	r3, #0
 80020e0:	f000 813e 	beq.w	8002360 <HAL_GPIO_Init+0x2a4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80020e4:	683b      	ldr	r3, [r7, #0]
 80020e6:	685b      	ldr	r3, [r3, #4]
 80020e8:	f003 0303 	and.w	r3, r3, #3
 80020ec:	2b01      	cmp	r3, #1
 80020ee:	d005      	beq.n	80020fc <HAL_GPIO_Init+0x40>
 80020f0:	683b      	ldr	r3, [r7, #0]
 80020f2:	685b      	ldr	r3, [r3, #4]
 80020f4:	f003 0303 	and.w	r3, r3, #3
 80020f8:	2b02      	cmp	r3, #2
 80020fa:	d130      	bne.n	800215e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	689b      	ldr	r3, [r3, #8]
 8002100:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8002102:	697b      	ldr	r3, [r7, #20]
 8002104:	005b      	lsls	r3, r3, #1
 8002106:	2203      	movs	r2, #3
 8002108:	fa02 f303 	lsl.w	r3, r2, r3
 800210c:	43db      	mvns	r3, r3
 800210e:	693a      	ldr	r2, [r7, #16]
 8002110:	4013      	ands	r3, r2
 8002112:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8002114:	683b      	ldr	r3, [r7, #0]
 8002116:	68da      	ldr	r2, [r3, #12]
 8002118:	697b      	ldr	r3, [r7, #20]
 800211a:	005b      	lsls	r3, r3, #1
 800211c:	fa02 f303 	lsl.w	r3, r2, r3
 8002120:	693a      	ldr	r2, [r7, #16]
 8002122:	4313      	orrs	r3, r2
 8002124:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	693a      	ldr	r2, [r7, #16]
 800212a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	685b      	ldr	r3, [r3, #4]
 8002130:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8002132:	2201      	movs	r2, #1
 8002134:	697b      	ldr	r3, [r7, #20]
 8002136:	fa02 f303 	lsl.w	r3, r2, r3
 800213a:	43db      	mvns	r3, r3
 800213c:	693a      	ldr	r2, [r7, #16]
 800213e:	4013      	ands	r3, r2
 8002140:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002142:	683b      	ldr	r3, [r7, #0]
 8002144:	685b      	ldr	r3, [r3, #4]
 8002146:	091b      	lsrs	r3, r3, #4
 8002148:	f003 0201 	and.w	r2, r3, #1
 800214c:	697b      	ldr	r3, [r7, #20]
 800214e:	fa02 f303 	lsl.w	r3, r2, r3
 8002152:	693a      	ldr	r2, [r7, #16]
 8002154:	4313      	orrs	r3, r2
 8002156:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	693a      	ldr	r2, [r7, #16]
 800215c:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800215e:	683b      	ldr	r3, [r7, #0]
 8002160:	685b      	ldr	r3, [r3, #4]
 8002162:	f003 0303 	and.w	r3, r3, #3
 8002166:	2b03      	cmp	r3, #3
 8002168:	d017      	beq.n	800219a <HAL_GPIO_Init+0xde>
      {
        temp = GPIOx->PUPDR;
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	68db      	ldr	r3, [r3, #12]
 800216e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8002170:	697b      	ldr	r3, [r7, #20]
 8002172:	005b      	lsls	r3, r3, #1
 8002174:	2203      	movs	r2, #3
 8002176:	fa02 f303 	lsl.w	r3, r2, r3
 800217a:	43db      	mvns	r3, r3
 800217c:	693a      	ldr	r2, [r7, #16]
 800217e:	4013      	ands	r3, r2
 8002180:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002182:	683b      	ldr	r3, [r7, #0]
 8002184:	689a      	ldr	r2, [r3, #8]
 8002186:	697b      	ldr	r3, [r7, #20]
 8002188:	005b      	lsls	r3, r3, #1
 800218a:	fa02 f303 	lsl.w	r3, r2, r3
 800218e:	693a      	ldr	r2, [r7, #16]
 8002190:	4313      	orrs	r3, r2
 8002192:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	693a      	ldr	r2, [r7, #16]
 8002198:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800219a:	683b      	ldr	r3, [r7, #0]
 800219c:	685b      	ldr	r3, [r3, #4]
 800219e:	f003 0303 	and.w	r3, r3, #3
 80021a2:	2b02      	cmp	r3, #2
 80021a4:	d123      	bne.n	80021ee <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80021a6:	697b      	ldr	r3, [r7, #20]
 80021a8:	08da      	lsrs	r2, r3, #3
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	3208      	adds	r2, #8
 80021ae:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80021b2:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80021b4:	697b      	ldr	r3, [r7, #20]
 80021b6:	f003 0307 	and.w	r3, r3, #7
 80021ba:	009b      	lsls	r3, r3, #2
 80021bc:	220f      	movs	r2, #15
 80021be:	fa02 f303 	lsl.w	r3, r2, r3
 80021c2:	43db      	mvns	r3, r3
 80021c4:	693a      	ldr	r2, [r7, #16]
 80021c6:	4013      	ands	r3, r2
 80021c8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80021ca:	683b      	ldr	r3, [r7, #0]
 80021cc:	691a      	ldr	r2, [r3, #16]
 80021ce:	697b      	ldr	r3, [r7, #20]
 80021d0:	f003 0307 	and.w	r3, r3, #7
 80021d4:	009b      	lsls	r3, r3, #2
 80021d6:	fa02 f303 	lsl.w	r3, r2, r3
 80021da:	693a      	ldr	r2, [r7, #16]
 80021dc:	4313      	orrs	r3, r2
 80021de:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80021e0:	697b      	ldr	r3, [r7, #20]
 80021e2:	08da      	lsrs	r2, r3, #3
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	3208      	adds	r2, #8
 80021e8:	6939      	ldr	r1, [r7, #16]
 80021ea:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	681b      	ldr	r3, [r3, #0]
 80021f2:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80021f4:	697b      	ldr	r3, [r7, #20]
 80021f6:	005b      	lsls	r3, r3, #1
 80021f8:	2203      	movs	r2, #3
 80021fa:	fa02 f303 	lsl.w	r3, r2, r3
 80021fe:	43db      	mvns	r3, r3
 8002200:	693a      	ldr	r2, [r7, #16]
 8002202:	4013      	ands	r3, r2
 8002204:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8002206:	683b      	ldr	r3, [r7, #0]
 8002208:	685b      	ldr	r3, [r3, #4]
 800220a:	f003 0203 	and.w	r2, r3, #3
 800220e:	697b      	ldr	r3, [r7, #20]
 8002210:	005b      	lsls	r3, r3, #1
 8002212:	fa02 f303 	lsl.w	r3, r2, r3
 8002216:	693a      	ldr	r2, [r7, #16]
 8002218:	4313      	orrs	r3, r2
 800221a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	693a      	ldr	r2, [r7, #16]
 8002220:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002222:	683b      	ldr	r3, [r7, #0]
 8002224:	685b      	ldr	r3, [r3, #4]
 8002226:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800222a:	2b00      	cmp	r3, #0
 800222c:	f000 8098 	beq.w	8002360 <HAL_GPIO_Init+0x2a4>
      {
        temp = SYSCFG->EXTICR[position >> 2u];
 8002230:	4a54      	ldr	r2, [pc, #336]	; (8002384 <HAL_GPIO_Init+0x2c8>)
 8002232:	697b      	ldr	r3, [r7, #20]
 8002234:	089b      	lsrs	r3, r3, #2
 8002236:	3302      	adds	r3, #2
 8002238:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800223c:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800223e:	697b      	ldr	r3, [r7, #20]
 8002240:	f003 0303 	and.w	r3, r3, #3
 8002244:	009b      	lsls	r3, r3, #2
 8002246:	220f      	movs	r2, #15
 8002248:	fa02 f303 	lsl.w	r3, r2, r3
 800224c:	43db      	mvns	r3, r3
 800224e:	693a      	ldr	r2, [r7, #16]
 8002250:	4013      	ands	r3, r2
 8002252:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 800225a:	d019      	beq.n	8002290 <HAL_GPIO_Init+0x1d4>
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	4a4a      	ldr	r2, [pc, #296]	; (8002388 <HAL_GPIO_Init+0x2cc>)
 8002260:	4293      	cmp	r3, r2
 8002262:	d013      	beq.n	800228c <HAL_GPIO_Init+0x1d0>
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	4a49      	ldr	r2, [pc, #292]	; (800238c <HAL_GPIO_Init+0x2d0>)
 8002268:	4293      	cmp	r3, r2
 800226a:	d00d      	beq.n	8002288 <HAL_GPIO_Init+0x1cc>
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	4a48      	ldr	r2, [pc, #288]	; (8002390 <HAL_GPIO_Init+0x2d4>)
 8002270:	4293      	cmp	r3, r2
 8002272:	d007      	beq.n	8002284 <HAL_GPIO_Init+0x1c8>
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	4a47      	ldr	r2, [pc, #284]	; (8002394 <HAL_GPIO_Init+0x2d8>)
 8002278:	4293      	cmp	r3, r2
 800227a:	d101      	bne.n	8002280 <HAL_GPIO_Init+0x1c4>
 800227c:	2304      	movs	r3, #4
 800227e:	e008      	b.n	8002292 <HAL_GPIO_Init+0x1d6>
 8002280:	2307      	movs	r3, #7
 8002282:	e006      	b.n	8002292 <HAL_GPIO_Init+0x1d6>
 8002284:	2303      	movs	r3, #3
 8002286:	e004      	b.n	8002292 <HAL_GPIO_Init+0x1d6>
 8002288:	2302      	movs	r3, #2
 800228a:	e002      	b.n	8002292 <HAL_GPIO_Init+0x1d6>
 800228c:	2301      	movs	r3, #1
 800228e:	e000      	b.n	8002292 <HAL_GPIO_Init+0x1d6>
 8002290:	2300      	movs	r3, #0
 8002292:	697a      	ldr	r2, [r7, #20]
 8002294:	f002 0203 	and.w	r2, r2, #3
 8002298:	0092      	lsls	r2, r2, #2
 800229a:	4093      	lsls	r3, r2
 800229c:	693a      	ldr	r2, [r7, #16]
 800229e:	4313      	orrs	r3, r2
 80022a0:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80022a2:	4938      	ldr	r1, [pc, #224]	; (8002384 <HAL_GPIO_Init+0x2c8>)
 80022a4:	697b      	ldr	r3, [r7, #20]
 80022a6:	089b      	lsrs	r3, r3, #2
 80022a8:	3302      	adds	r3, #2
 80022aa:	693a      	ldr	r2, [r7, #16]
 80022ac:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80022b0:	4b39      	ldr	r3, [pc, #228]	; (8002398 <HAL_GPIO_Init+0x2dc>)
 80022b2:	681b      	ldr	r3, [r3, #0]
 80022b4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80022b6:	68fb      	ldr	r3, [r7, #12]
 80022b8:	43db      	mvns	r3, r3
 80022ba:	693a      	ldr	r2, [r7, #16]
 80022bc:	4013      	ands	r3, r2
 80022be:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80022c0:	683b      	ldr	r3, [r7, #0]
 80022c2:	685b      	ldr	r3, [r3, #4]
 80022c4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80022c8:	2b00      	cmp	r3, #0
 80022ca:	d003      	beq.n	80022d4 <HAL_GPIO_Init+0x218>
        {
          temp |= iocurrent;
 80022cc:	693a      	ldr	r2, [r7, #16]
 80022ce:	68fb      	ldr	r3, [r7, #12]
 80022d0:	4313      	orrs	r3, r2
 80022d2:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80022d4:	4a30      	ldr	r2, [pc, #192]	; (8002398 <HAL_GPIO_Init+0x2dc>)
 80022d6:	693b      	ldr	r3, [r7, #16]
 80022d8:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 80022da:	4b2f      	ldr	r3, [pc, #188]	; (8002398 <HAL_GPIO_Init+0x2dc>)
 80022dc:	685b      	ldr	r3, [r3, #4]
 80022de:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80022e0:	68fb      	ldr	r3, [r7, #12]
 80022e2:	43db      	mvns	r3, r3
 80022e4:	693a      	ldr	r2, [r7, #16]
 80022e6:	4013      	ands	r3, r2
 80022e8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80022ea:	683b      	ldr	r3, [r7, #0]
 80022ec:	685b      	ldr	r3, [r3, #4]
 80022ee:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80022f2:	2b00      	cmp	r3, #0
 80022f4:	d003      	beq.n	80022fe <HAL_GPIO_Init+0x242>
        {
          temp |= iocurrent;
 80022f6:	693a      	ldr	r2, [r7, #16]
 80022f8:	68fb      	ldr	r3, [r7, #12]
 80022fa:	4313      	orrs	r3, r2
 80022fc:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80022fe:	4a26      	ldr	r2, [pc, #152]	; (8002398 <HAL_GPIO_Init+0x2dc>)
 8002300:	693b      	ldr	r3, [r7, #16]
 8002302:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8002304:	4b24      	ldr	r3, [pc, #144]	; (8002398 <HAL_GPIO_Init+0x2dc>)
 8002306:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800230a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800230c:	68fb      	ldr	r3, [r7, #12]
 800230e:	43db      	mvns	r3, r3
 8002310:	693a      	ldr	r2, [r7, #16]
 8002312:	4013      	ands	r3, r2
 8002314:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8002316:	683b      	ldr	r3, [r7, #0]
 8002318:	685b      	ldr	r3, [r3, #4]
 800231a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800231e:	2b00      	cmp	r3, #0
 8002320:	d003      	beq.n	800232a <HAL_GPIO_Init+0x26e>
        {
          temp |= iocurrent;
 8002322:	693a      	ldr	r2, [r7, #16]
 8002324:	68fb      	ldr	r3, [r7, #12]
 8002326:	4313      	orrs	r3, r2
 8002328:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800232a:	4a1b      	ldr	r2, [pc, #108]	; (8002398 <HAL_GPIO_Init+0x2dc>)
 800232c:	693b      	ldr	r3, [r7, #16]
 800232e:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

        temp = EXTI->EMR1;
 8002332:	4b19      	ldr	r3, [pc, #100]	; (8002398 <HAL_GPIO_Init+0x2dc>)
 8002334:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002338:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800233a:	68fb      	ldr	r3, [r7, #12]
 800233c:	43db      	mvns	r3, r3
 800233e:	693a      	ldr	r2, [r7, #16]
 8002340:	4013      	ands	r3, r2
 8002342:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8002344:	683b      	ldr	r3, [r7, #0]
 8002346:	685b      	ldr	r3, [r3, #4]
 8002348:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800234c:	2b00      	cmp	r3, #0
 800234e:	d003      	beq.n	8002358 <HAL_GPIO_Init+0x29c>
        {
          temp |= iocurrent;
 8002350:	693a      	ldr	r2, [r7, #16]
 8002352:	68fb      	ldr	r3, [r7, #12]
 8002354:	4313      	orrs	r3, r2
 8002356:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8002358:	4a0f      	ldr	r2, [pc, #60]	; (8002398 <HAL_GPIO_Init+0x2dc>)
 800235a:	693b      	ldr	r3, [r7, #16]
 800235c:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
      }
    }

    position++;
 8002360:	697b      	ldr	r3, [r7, #20]
 8002362:	3301      	adds	r3, #1
 8002364:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002366:	683b      	ldr	r3, [r7, #0]
 8002368:	681a      	ldr	r2, [r3, #0]
 800236a:	697b      	ldr	r3, [r7, #20]
 800236c:	fa22 f303 	lsr.w	r3, r2, r3
 8002370:	2b00      	cmp	r3, #0
 8002372:	f47f aeab 	bne.w	80020cc <HAL_GPIO_Init+0x10>
  }
}
 8002376:	bf00      	nop
 8002378:	bf00      	nop
 800237a:	371c      	adds	r7, #28
 800237c:	46bd      	mov	sp, r7
 800237e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002382:	4770      	bx	lr
 8002384:	40010000 	.word	0x40010000
 8002388:	48000400 	.word	0x48000400
 800238c:	48000800 	.word	0x48000800
 8002390:	48000c00 	.word	0x48000c00
 8002394:	48001000 	.word	0x48001000
 8002398:	58000800 	.word	0x58000800

0800239c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800239c:	b480      	push	{r7}
 800239e:	b083      	sub	sp, #12
 80023a0:	af00      	add	r7, sp, #0
 80023a2:	6078      	str	r0, [r7, #4]
 80023a4:	460b      	mov	r3, r1
 80023a6:	807b      	strh	r3, [r7, #2]
 80023a8:	4613      	mov	r3, r2
 80023aa:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80023ac:	787b      	ldrb	r3, [r7, #1]
 80023ae:	2b00      	cmp	r3, #0
 80023b0:	d003      	beq.n	80023ba <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80023b2:	887a      	ldrh	r2, [r7, #2]
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80023b8:	e002      	b.n	80023c0 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80023ba:	887a      	ldrh	r2, [r7, #2]
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	629a      	str	r2, [r3, #40]	; 0x28
}
 80023c0:	bf00      	nop
 80023c2:	370c      	adds	r7, #12
 80023c4:	46bd      	mov	sp, r7
 80023c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023ca:	4770      	bx	lr

080023cc <HAL_HSEM_IRQHandler>:
/**
  * @brief  This function handles HSEM interrupt request
  * @retval None
  */
void HAL_HSEM_IRQHandler(void)
{
 80023cc:	b580      	push	{r7, lr}
 80023ce:	b082      	sub	sp, #8
 80023d0:	af00      	add	r7, sp, #0
  uint32_t statusreg;
  /* Get the list of masked freed semaphores*/
  statusreg = HSEM_COMMON->MISR;
 80023d2:	4b0a      	ldr	r3, [pc, #40]	; (80023fc <HAL_HSEM_IRQHandler+0x30>)
 80023d4:	68db      	ldr	r3, [r3, #12]
 80023d6:	607b      	str	r3, [r7, #4]

  /*Disable Interrupts*/
  HSEM_COMMON->IER &= ~((uint32_t)statusreg);
 80023d8:	4b08      	ldr	r3, [pc, #32]	; (80023fc <HAL_HSEM_IRQHandler+0x30>)
 80023da:	681a      	ldr	r2, [r3, #0]
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	43db      	mvns	r3, r3
 80023e0:	4906      	ldr	r1, [pc, #24]	; (80023fc <HAL_HSEM_IRQHandler+0x30>)
 80023e2:	4013      	ands	r3, r2
 80023e4:	600b      	str	r3, [r1, #0]

  /*Clear Flags*/
  HSEM_COMMON->ICR = ((uint32_t)statusreg);
 80023e6:	4a05      	ldr	r2, [pc, #20]	; (80023fc <HAL_HSEM_IRQHandler+0x30>)
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	6053      	str	r3, [r2, #4]

  /* Call FreeCallback */
  HAL_HSEM_FreeCallback(statusreg);
 80023ec:	6878      	ldr	r0, [r7, #4]
 80023ee:	f000 f807 	bl	8002400 <HAL_HSEM_FreeCallback>
}
 80023f2:	bf00      	nop
 80023f4:	3708      	adds	r7, #8
 80023f6:	46bd      	mov	sp, r7
 80023f8:	bd80      	pop	{r7, pc}
 80023fa:	bf00      	nop
 80023fc:	58001500 	.word	0x58001500

08002400 <HAL_HSEM_FreeCallback>:
  * @brief Semaphore Released Callback.
  * @param SemMask: Mask of Released semaphores
  * @retval None
  */
__weak void HAL_HSEM_FreeCallback(uint32_t SemMask)
{
 8002400:	b480      	push	{r7}
 8002402:	b083      	sub	sp, #12
 8002404:	af00      	add	r7, sp, #0
 8002406:	6078      	str	r0, [r7, #4]
  UNUSED(SemMask);

  /* NOTE : This function should not be modified, when the callback is needed,
  the HAL_HSEM_FreeCallback can be implemented in the user file
    */
}
 8002408:	bf00      	nop
 800240a:	370c      	adds	r7, #12
 800240c:	46bd      	mov	sp, r7
 800240e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002412:	4770      	bx	lr

08002414 <HAL_IPCC_Init>:
  * @brief  Initialize the IPCC peripheral.
  * @param  hipcc IPCC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_IPCC_Init(IPCC_HandleTypeDef *hipcc)
{
 8002414:	b580      	push	{r7, lr}
 8002416:	b084      	sub	sp, #16
 8002418:	af00      	add	r7, sp, #0
 800241a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef err = HAL_OK;
 800241c:	2300      	movs	r3, #0
 800241e:	73fb      	strb	r3, [r7, #15]

  /* Check the IPCC handle allocation */
  if (hipcc != NULL)
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	2b00      	cmp	r3, #0
 8002424:	d01e      	beq.n	8002464 <HAL_IPCC_Init+0x50>
  {
    /* Check the parameters */
    assert_param(IS_IPCC_ALL_INSTANCE(hipcc->Instance));

    IPCC_CommonTypeDef *currentInstance = IPCC_C1;
 8002426:	4b13      	ldr	r3, [pc, #76]	; (8002474 <HAL_IPCC_Init+0x60>)
 8002428:	60bb      	str	r3, [r7, #8]

    if (hipcc->State == HAL_IPCC_STATE_RESET)
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8002430:	b2db      	uxtb	r3, r3
 8002432:	2b00      	cmp	r3, #0
 8002434:	d102      	bne.n	800243c <HAL_IPCC_Init+0x28>
    {
      /* Init the low level hardware : CLOCK, NVIC */
      HAL_IPCC_MspInit(hipcc);
 8002436:	6878      	ldr	r0, [r7, #4]
 8002438:	f7ff fb06 	bl	8001a48 <HAL_IPCC_MspInit>
    }

    /* Reset all registers of the current cpu to default state */
    IPCC_Reset_Register(currentInstance);
 800243c:	68b8      	ldr	r0, [r7, #8]
 800243e:	f000 f85b 	bl	80024f8 <IPCC_Reset_Register>

    /* Activate the interrupts */
    currentInstance->CR |= (IPCC_CR_RXOIE | IPCC_CR_TXFIE);
 8002442:	68bb      	ldr	r3, [r7, #8]
 8002444:	681b      	ldr	r3, [r3, #0]
 8002446:	f043 1201 	orr.w	r2, r3, #65537	; 0x10001
 800244a:	68bb      	ldr	r3, [r7, #8]
 800244c:	601a      	str	r2, [r3, #0]

    /* Clear callback pointers */
    IPCC_SetDefaultCallbacks(hipcc);
 800244e:	6878      	ldr	r0, [r7, #4]
 8002450:	f000 f82c 	bl	80024ac <IPCC_SetDefaultCallbacks>

    /* Reset all callback notification request */
    hipcc->callbackRequest = 0;
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	2200      	movs	r2, #0
 8002458:	635a      	str	r2, [r3, #52]	; 0x34

    hipcc->State = HAL_IPCC_STATE_READY;
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	2201      	movs	r2, #1
 800245e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
 8002462:	e001      	b.n	8002468 <HAL_IPCC_Init+0x54>
  }
  else
  {
    err = HAL_ERROR;
 8002464:	2301      	movs	r3, #1
 8002466:	73fb      	strb	r3, [r7, #15]
  }

  return err;
 8002468:	7bfb      	ldrb	r3, [r7, #15]
}
 800246a:	4618      	mov	r0, r3
 800246c:	3710      	adds	r7, #16
 800246e:	46bd      	mov	sp, r7
 8002470:	bd80      	pop	{r7, pc}
 8002472:	bf00      	nop
 8002474:	58000c00 	.word	0x58000c00

08002478 <HAL_IPCC_RxCallback>:
  *            @arg IPCC_CHANNEL_5: IPCC Channel 5
  *            @arg IPCC_CHANNEL_6: IPCC Channel 6
  * @param ChannelDir Channel direction
  */
__weak void HAL_IPCC_RxCallback(IPCC_HandleTypeDef *hipcc, uint32_t ChannelIndex, IPCC_CHANNELDirTypeDef ChannelDir)
{
 8002478:	b480      	push	{r7}
 800247a:	b085      	sub	sp, #20
 800247c:	af00      	add	r7, sp, #0
 800247e:	60f8      	str	r0, [r7, #12]
 8002480:	60b9      	str	r1, [r7, #8]
 8002482:	4613      	mov	r3, r2
 8002484:	71fb      	strb	r3, [r7, #7]
  UNUSED(ChannelDir);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_IPCC_RxCallback can be implemented in the user file
   */
}
 8002486:	bf00      	nop
 8002488:	3714      	adds	r7, #20
 800248a:	46bd      	mov	sp, r7
 800248c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002490:	4770      	bx	lr

08002492 <HAL_IPCC_TxCallback>:
  *            @arg IPCC_CHANNEL_5: IPCC Channel 5
  *            @arg IPCC_CHANNEL_6: IPCC Channel 6
  * @param ChannelDir Channel direction
  */
__weak void HAL_IPCC_TxCallback(IPCC_HandleTypeDef *hipcc, uint32_t ChannelIndex, IPCC_CHANNELDirTypeDef ChannelDir)
{
 8002492:	b480      	push	{r7}
 8002494:	b085      	sub	sp, #20
 8002496:	af00      	add	r7, sp, #0
 8002498:	60f8      	str	r0, [r7, #12]
 800249a:	60b9      	str	r1, [r7, #8]
 800249c:	4613      	mov	r3, r2
 800249e:	71fb      	strb	r3, [r7, #7]
  UNUSED(ChannelDir);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_IPCC_TxCallback can be implemented in the user file
   */
}
 80024a0:	bf00      	nop
 80024a2:	3714      	adds	r7, #20
 80024a4:	46bd      	mov	sp, r7
 80024a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024aa:	4770      	bx	lr

080024ac <IPCC_SetDefaultCallbacks>:
/**
  * @brief Reset all callbacks of the handle to NULL.
  * @param  hipcc IPCC handle
  */
void IPCC_SetDefaultCallbacks(IPCC_HandleTypeDef *hipcc)
{
 80024ac:	b480      	push	{r7}
 80024ae:	b085      	sub	sp, #20
 80024b0:	af00      	add	r7, sp, #0
 80024b2:	6078      	str	r0, [r7, #4]
  uint32_t i;
  /* Set all callbacks to default */
  for (i = 0; i < IPCC_CHANNEL_NUMBER; i++)
 80024b4:	2300      	movs	r3, #0
 80024b6:	60fb      	str	r3, [r7, #12]
 80024b8:	e00f      	b.n	80024da <IPCC_SetDefaultCallbacks+0x2e>
  {
    hipcc->ChannelCallbackRx[i] = HAL_IPCC_RxCallback;
 80024ba:	687a      	ldr	r2, [r7, #4]
 80024bc:	68fb      	ldr	r3, [r7, #12]
 80024be:	009b      	lsls	r3, r3, #2
 80024c0:	4413      	add	r3, r2
 80024c2:	4a0b      	ldr	r2, [pc, #44]	; (80024f0 <IPCC_SetDefaultCallbacks+0x44>)
 80024c4:	605a      	str	r2, [r3, #4]
    hipcc->ChannelCallbackTx[i] = HAL_IPCC_TxCallback;
 80024c6:	687a      	ldr	r2, [r7, #4]
 80024c8:	68fb      	ldr	r3, [r7, #12]
 80024ca:	3306      	adds	r3, #6
 80024cc:	009b      	lsls	r3, r3, #2
 80024ce:	4413      	add	r3, r2
 80024d0:	4a08      	ldr	r2, [pc, #32]	; (80024f4 <IPCC_SetDefaultCallbacks+0x48>)
 80024d2:	605a      	str	r2, [r3, #4]
  for (i = 0; i < IPCC_CHANNEL_NUMBER; i++)
 80024d4:	68fb      	ldr	r3, [r7, #12]
 80024d6:	3301      	adds	r3, #1
 80024d8:	60fb      	str	r3, [r7, #12]
 80024da:	68fb      	ldr	r3, [r7, #12]
 80024dc:	2b05      	cmp	r3, #5
 80024de:	d9ec      	bls.n	80024ba <IPCC_SetDefaultCallbacks+0xe>
  }
}
 80024e0:	bf00      	nop
 80024e2:	bf00      	nop
 80024e4:	3714      	adds	r7, #20
 80024e6:	46bd      	mov	sp, r7
 80024e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024ec:	4770      	bx	lr
 80024ee:	bf00      	nop
 80024f0:	08002479 	.word	0x08002479
 80024f4:	08002493 	.word	0x08002493

080024f8 <IPCC_Reset_Register>:
/**
  * @brief Reset IPCC register to default value for the concerned instance.
  * @param  Instance pointer to register
  */
void IPCC_Reset_Register(IPCC_CommonTypeDef *Instance)
{
 80024f8:	b480      	push	{r7}
 80024fa:	b083      	sub	sp, #12
 80024fc:	af00      	add	r7, sp, #0
 80024fe:	6078      	str	r0, [r7, #4]
  /* Disable RX and TX interrupts */
  Instance->CR  = 0x00000000U;
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	2200      	movs	r2, #0
 8002504:	601a      	str	r2, [r3, #0]

  /* Mask RX and TX interrupts */
  Instance->MR  = (IPCC_ALL_TX_BUF | IPCC_ALL_RX_BUF);
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	f04f 123f 	mov.w	r2, #4128831	; 0x3f003f
 800250c:	605a      	str	r2, [r3, #4]

  /* Clear RX status */
  Instance->SCR = IPCC_ALL_RX_BUF;
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	223f      	movs	r2, #63	; 0x3f
 8002512:	609a      	str	r2, [r3, #8]
}
 8002514:	bf00      	nop
 8002516:	370c      	adds	r7, #12
 8002518:	46bd      	mov	sp, r7
 800251a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800251e:	4770      	bx	lr

08002520 <HAL_PWR_EnableBkUpAccess>:
  * @note   LSEON bit that switches on and off the LSE crystal belongs as well to the
  *         back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8002520:	b480      	push	{r7}
 8002522:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002524:	4b05      	ldr	r3, [pc, #20]	; (800253c <HAL_PWR_EnableBkUpAccess+0x1c>)
 8002526:	681b      	ldr	r3, [r3, #0]
 8002528:	4a04      	ldr	r2, [pc, #16]	; (800253c <HAL_PWR_EnableBkUpAccess+0x1c>)
 800252a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800252e:	6013      	str	r3, [r2, #0]
}
 8002530:	bf00      	nop
 8002532:	46bd      	mov	sp, r7
 8002534:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002538:	4770      	bx	lr
 800253a:	bf00      	nop
 800253c:	58000400 	.word	0x58000400

08002540 <HAL_PWREx_GetVoltageRange>:
/**
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_RANGE1 or PWR_REGULATOR_VOLTAGE_RANGE2)
  */  
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8002540:	b480      	push	{r7}
 8002542:	af00      	add	r7, sp, #0
  return  (PWR->CR1 & PWR_CR1_VOS);
 8002544:	4b04      	ldr	r3, [pc, #16]	; (8002558 <HAL_PWREx_GetVoltageRange+0x18>)
 8002546:	681b      	ldr	r3, [r3, #0]
 8002548:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
}
 800254c:	4618      	mov	r0, r3
 800254e:	46bd      	mov	sp, r7
 8002550:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002554:	4770      	bx	lr
 8002556:	bf00      	nop
 8002558:	58000400 	.word	0x58000400

0800255c <LL_RCC_HSE_IsEnabledDiv2>:
{
 800255c:	b480      	push	{r7}
 800255e:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSEPRE) == (RCC_CR_HSEPRE)) ? 1UL : 0UL);
 8002560:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002564:	681b      	ldr	r3, [r3, #0]
 8002566:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800256a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800256e:	d101      	bne.n	8002574 <LL_RCC_HSE_IsEnabledDiv2+0x18>
 8002570:	2301      	movs	r3, #1
 8002572:	e000      	b.n	8002576 <LL_RCC_HSE_IsEnabledDiv2+0x1a>
 8002574:	2300      	movs	r3, #0
}
 8002576:	4618      	mov	r0, r3
 8002578:	46bd      	mov	sp, r7
 800257a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800257e:	4770      	bx	lr

08002580 <LL_RCC_HSE_Enable>:
{
 8002580:	b480      	push	{r7}
 8002582:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSEON);
 8002584:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002588:	681b      	ldr	r3, [r3, #0]
 800258a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800258e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002592:	6013      	str	r3, [r2, #0]
}
 8002594:	bf00      	nop
 8002596:	46bd      	mov	sp, r7
 8002598:	f85d 7b04 	ldr.w	r7, [sp], #4
 800259c:	4770      	bx	lr

0800259e <LL_RCC_HSE_Disable>:
{
 800259e:	b480      	push	{r7}
 80025a0:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSEON);
 80025a2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80025a6:	681b      	ldr	r3, [r3, #0]
 80025a8:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80025ac:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80025b0:	6013      	str	r3, [r2, #0]
}
 80025b2:	bf00      	nop
 80025b4:	46bd      	mov	sp, r7
 80025b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025ba:	4770      	bx	lr

080025bc <LL_RCC_HSE_IsReady>:
{
 80025bc:	b480      	push	{r7}
 80025be:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSERDY) == (RCC_CR_HSERDY)) ? 1UL : 0UL);
 80025c0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80025c4:	681b      	ldr	r3, [r3, #0]
 80025c6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80025ca:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80025ce:	d101      	bne.n	80025d4 <LL_RCC_HSE_IsReady+0x18>
 80025d0:	2301      	movs	r3, #1
 80025d2:	e000      	b.n	80025d6 <LL_RCC_HSE_IsReady+0x1a>
 80025d4:	2300      	movs	r3, #0
}
 80025d6:	4618      	mov	r0, r3
 80025d8:	46bd      	mov	sp, r7
 80025da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025de:	4770      	bx	lr

080025e0 <LL_RCC_HSI_Enable>:
{
 80025e0:	b480      	push	{r7}
 80025e2:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSION);
 80025e4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80025e8:	681b      	ldr	r3, [r3, #0]
 80025ea:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80025ee:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80025f2:	6013      	str	r3, [r2, #0]
}
 80025f4:	bf00      	nop
 80025f6:	46bd      	mov	sp, r7
 80025f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025fc:	4770      	bx	lr

080025fe <LL_RCC_HSI_Disable>:
{
 80025fe:	b480      	push	{r7}
 8002600:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSION);
 8002602:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002606:	681b      	ldr	r3, [r3, #0]
 8002608:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800260c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002610:	6013      	str	r3, [r2, #0]
}
 8002612:	bf00      	nop
 8002614:	46bd      	mov	sp, r7
 8002616:	f85d 7b04 	ldr.w	r7, [sp], #4
 800261a:	4770      	bx	lr

0800261c <LL_RCC_HSI_IsReady>:
{
 800261c:	b480      	push	{r7}
 800261e:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY)) ? 1UL : 0UL);
 8002620:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002624:	681b      	ldr	r3, [r3, #0]
 8002626:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800262a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800262e:	d101      	bne.n	8002634 <LL_RCC_HSI_IsReady+0x18>
 8002630:	2301      	movs	r3, #1
 8002632:	e000      	b.n	8002636 <LL_RCC_HSI_IsReady+0x1a>
 8002634:	2300      	movs	r3, #0
}
 8002636:	4618      	mov	r0, r3
 8002638:	46bd      	mov	sp, r7
 800263a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800263e:	4770      	bx	lr

08002640 <LL_RCC_HSI_SetCalibTrimming>:
{
 8002640:	b480      	push	{r7}
 8002642:	b083      	sub	sp, #12
 8002644:	af00      	add	r7, sp, #0
 8002646:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_HSITRIM, Value << RCC_ICSCR_HSITRIM_Pos);
 8002648:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800264c:	685b      	ldr	r3, [r3, #4]
 800264e:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	061b      	lsls	r3, r3, #24
 8002656:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800265a:	4313      	orrs	r3, r2
 800265c:	604b      	str	r3, [r1, #4]
}
 800265e:	bf00      	nop
 8002660:	370c      	adds	r7, #12
 8002662:	46bd      	mov	sp, r7
 8002664:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002668:	4770      	bx	lr

0800266a <LL_RCC_HSI48_Enable>:
{
 800266a:	b480      	push	{r7}
 800266c:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CRRCR, RCC_CRRCR_HSI48ON);
 800266e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002672:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002676:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800267a:	f043 0301 	orr.w	r3, r3, #1
 800267e:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98
}
 8002682:	bf00      	nop
 8002684:	46bd      	mov	sp, r7
 8002686:	f85d 7b04 	ldr.w	r7, [sp], #4
 800268a:	4770      	bx	lr

0800268c <LL_RCC_HSI48_Disable>:
{
 800268c:	b480      	push	{r7}
 800268e:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CRRCR, RCC_CRRCR_HSI48ON);
 8002690:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002694:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002698:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800269c:	f023 0301 	bic.w	r3, r3, #1
 80026a0:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98
}
 80026a4:	bf00      	nop
 80026a6:	46bd      	mov	sp, r7
 80026a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026ac:	4770      	bx	lr

080026ae <LL_RCC_HSI48_IsReady>:
{
 80026ae:	b480      	push	{r7}
 80026b0:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == (RCC_CRRCR_HSI48RDY)) ? 1UL : 0UL);
 80026b2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80026b6:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80026ba:	f003 0302 	and.w	r3, r3, #2
 80026be:	2b02      	cmp	r3, #2
 80026c0:	d101      	bne.n	80026c6 <LL_RCC_HSI48_IsReady+0x18>
 80026c2:	2301      	movs	r3, #1
 80026c4:	e000      	b.n	80026c8 <LL_RCC_HSI48_IsReady+0x1a>
 80026c6:	2300      	movs	r3, #0
}
 80026c8:	4618      	mov	r0, r3
 80026ca:	46bd      	mov	sp, r7
 80026cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026d0:	4770      	bx	lr

080026d2 <LL_RCC_LSE_Enable>:
{
 80026d2:	b480      	push	{r7}
 80026d4:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 80026d6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80026da:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80026de:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80026e2:	f043 0301 	orr.w	r3, r3, #1
 80026e6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 80026ea:	bf00      	nop
 80026ec:	46bd      	mov	sp, r7
 80026ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026f2:	4770      	bx	lr

080026f4 <LL_RCC_LSE_Disable>:
{
 80026f4:	b480      	push	{r7}
 80026f6:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 80026f8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80026fc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002700:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002704:	f023 0301 	bic.w	r3, r3, #1
 8002708:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 800270c:	bf00      	nop
 800270e:	46bd      	mov	sp, r7
 8002710:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002714:	4770      	bx	lr

08002716 <LL_RCC_LSE_EnableBypass>:
{
 8002716:	b480      	push	{r7}
 8002718:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 800271a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800271e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002722:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002726:	f043 0304 	orr.w	r3, r3, #4
 800272a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 800272e:	bf00      	nop
 8002730:	46bd      	mov	sp, r7
 8002732:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002736:	4770      	bx	lr

08002738 <LL_RCC_LSE_DisableBypass>:
{
 8002738:	b480      	push	{r7}
 800273a:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 800273c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002740:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002744:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002748:	f023 0304 	bic.w	r3, r3, #4
 800274c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8002750:	bf00      	nop
 8002752:	46bd      	mov	sp, r7
 8002754:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002758:	4770      	bx	lr

0800275a <LL_RCC_LSE_IsReady>:
{
 800275a:	b480      	push	{r7}
 800275c:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 800275e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002762:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002766:	f003 0302 	and.w	r3, r3, #2
 800276a:	2b02      	cmp	r3, #2
 800276c:	d101      	bne.n	8002772 <LL_RCC_LSE_IsReady+0x18>
 800276e:	2301      	movs	r3, #1
 8002770:	e000      	b.n	8002774 <LL_RCC_LSE_IsReady+0x1a>
 8002772:	2300      	movs	r3, #0
}
 8002774:	4618      	mov	r0, r3
 8002776:	46bd      	mov	sp, r7
 8002778:	f85d 7b04 	ldr.w	r7, [sp], #4
 800277c:	4770      	bx	lr

0800277e <LL_RCC_LSI1_Enable>:
{
 800277e:	b480      	push	{r7}
 8002780:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_LSI1ON);
 8002782:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002786:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800278a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800278e:	f043 0301 	orr.w	r3, r3, #1
 8002792:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 8002796:	bf00      	nop
 8002798:	46bd      	mov	sp, r7
 800279a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800279e:	4770      	bx	lr

080027a0 <LL_RCC_LSI1_Disable>:
{
 80027a0:	b480      	push	{r7}
 80027a2:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSI1ON);
 80027a4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80027a8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80027ac:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80027b0:	f023 0301 	bic.w	r3, r3, #1
 80027b4:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 80027b8:	bf00      	nop
 80027ba:	46bd      	mov	sp, r7
 80027bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027c0:	4770      	bx	lr

080027c2 <LL_RCC_LSI1_IsReady>:
{
 80027c2:	b480      	push	{r7}
 80027c4:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSI1RDY) == (RCC_CSR_LSI1RDY)) ? 1UL : 0UL);
 80027c6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80027ca:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80027ce:	f003 0302 	and.w	r3, r3, #2
 80027d2:	2b02      	cmp	r3, #2
 80027d4:	d101      	bne.n	80027da <LL_RCC_LSI1_IsReady+0x18>
 80027d6:	2301      	movs	r3, #1
 80027d8:	e000      	b.n	80027dc <LL_RCC_LSI1_IsReady+0x1a>
 80027da:	2300      	movs	r3, #0
}
 80027dc:	4618      	mov	r0, r3
 80027de:	46bd      	mov	sp, r7
 80027e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027e4:	4770      	bx	lr

080027e6 <LL_RCC_LSI2_Enable>:
{
 80027e6:	b480      	push	{r7}
 80027e8:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_LSI2ON);
 80027ea:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80027ee:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80027f2:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80027f6:	f043 0304 	orr.w	r3, r3, #4
 80027fa:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 80027fe:	bf00      	nop
 8002800:	46bd      	mov	sp, r7
 8002802:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002806:	4770      	bx	lr

08002808 <LL_RCC_LSI2_Disable>:
{
 8002808:	b480      	push	{r7}
 800280a:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSI2ON);
 800280c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002810:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002814:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002818:	f023 0304 	bic.w	r3, r3, #4
 800281c:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 8002820:	bf00      	nop
 8002822:	46bd      	mov	sp, r7
 8002824:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002828:	4770      	bx	lr

0800282a <LL_RCC_LSI2_IsReady>:
{
 800282a:	b480      	push	{r7}
 800282c:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSI2RDY) == (RCC_CSR_LSI2RDY)) ? 1UL : 0UL);
 800282e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002832:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002836:	f003 0308 	and.w	r3, r3, #8
 800283a:	2b08      	cmp	r3, #8
 800283c:	d101      	bne.n	8002842 <LL_RCC_LSI2_IsReady+0x18>
 800283e:	2301      	movs	r3, #1
 8002840:	e000      	b.n	8002844 <LL_RCC_LSI2_IsReady+0x1a>
 8002842:	2300      	movs	r3, #0
}
 8002844:	4618      	mov	r0, r3
 8002846:	46bd      	mov	sp, r7
 8002848:	f85d 7b04 	ldr.w	r7, [sp], #4
 800284c:	4770      	bx	lr

0800284e <LL_RCC_LSI2_SetTrimming>:
{
 800284e:	b480      	push	{r7}
 8002850:	b083      	sub	sp, #12
 8002852:	af00      	add	r7, sp, #0
 8002854:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CSR, RCC_CSR_LSI2TRIM, Value << RCC_CSR_LSI2TRIM_Pos);
 8002856:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800285a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800285e:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	021b      	lsls	r3, r3, #8
 8002866:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800286a:	4313      	orrs	r3, r2
 800286c:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
}
 8002870:	bf00      	nop
 8002872:	370c      	adds	r7, #12
 8002874:	46bd      	mov	sp, r7
 8002876:	f85d 7b04 	ldr.w	r7, [sp], #4
 800287a:	4770      	bx	lr

0800287c <LL_RCC_MSI_Enable>:
{
 800287c:	b480      	push	{r7}
 800287e:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSION);
 8002880:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002884:	681b      	ldr	r3, [r3, #0]
 8002886:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800288a:	f043 0301 	orr.w	r3, r3, #1
 800288e:	6013      	str	r3, [r2, #0]
}
 8002890:	bf00      	nop
 8002892:	46bd      	mov	sp, r7
 8002894:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002898:	4770      	bx	lr

0800289a <LL_RCC_MSI_Disable>:
{
 800289a:	b480      	push	{r7}
 800289c:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_MSION);
 800289e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80028a2:	681b      	ldr	r3, [r3, #0]
 80028a4:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80028a8:	f023 0301 	bic.w	r3, r3, #1
 80028ac:	6013      	str	r3, [r2, #0]
}
 80028ae:	bf00      	nop
 80028b0:	46bd      	mov	sp, r7
 80028b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028b6:	4770      	bx	lr

080028b8 <LL_RCC_MSI_IsReady>:
{
 80028b8:	b480      	push	{r7}
 80028ba:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) == (RCC_CR_MSIRDY)) ? 1UL : 0UL);
 80028bc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80028c0:	681b      	ldr	r3, [r3, #0]
 80028c2:	f003 0302 	and.w	r3, r3, #2
 80028c6:	2b02      	cmp	r3, #2
 80028c8:	d101      	bne.n	80028ce <LL_RCC_MSI_IsReady+0x16>
 80028ca:	2301      	movs	r3, #1
 80028cc:	e000      	b.n	80028d0 <LL_RCC_MSI_IsReady+0x18>
 80028ce:	2300      	movs	r3, #0
}
 80028d0:	4618      	mov	r0, r3
 80028d2:	46bd      	mov	sp, r7
 80028d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028d8:	4770      	bx	lr

080028da <LL_RCC_MSI_SetRange>:
{
 80028da:	b480      	push	{r7}
 80028dc:	b083      	sub	sp, #12
 80028de:	af00      	add	r7, sp, #0
 80028e0:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CR, RCC_CR_MSIRANGE, Range);
 80028e2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80028e6:	681b      	ldr	r3, [r3, #0]
 80028e8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80028ec:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	4313      	orrs	r3, r2
 80028f4:	600b      	str	r3, [r1, #0]
}
 80028f6:	bf00      	nop
 80028f8:	370c      	adds	r7, #12
 80028fa:	46bd      	mov	sp, r7
 80028fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002900:	4770      	bx	lr

08002902 <LL_RCC_MSI_GetRange>:
{
 8002902:	b480      	push	{r7}
 8002904:	b083      	sub	sp, #12
 8002906:	af00      	add	r7, sp, #0
  uint32_t msiRange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE);
 8002908:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800290c:	681b      	ldr	r3, [r3, #0]
 800290e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002912:	607b      	str	r3, [r7, #4]
  if (msiRange > LL_RCC_MSIRANGE_11)
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	2bb0      	cmp	r3, #176	; 0xb0
 8002918:	d901      	bls.n	800291e <LL_RCC_MSI_GetRange+0x1c>
    msiRange = LL_RCC_MSIRANGE_11;
 800291a:	23b0      	movs	r3, #176	; 0xb0
 800291c:	607b      	str	r3, [r7, #4]
  return msiRange;
 800291e:	687b      	ldr	r3, [r7, #4]
}
 8002920:	4618      	mov	r0, r3
 8002922:	370c      	adds	r7, #12
 8002924:	46bd      	mov	sp, r7
 8002926:	f85d 7b04 	ldr.w	r7, [sp], #4
 800292a:	4770      	bx	lr

0800292c <LL_RCC_MSI_SetCalibTrimming>:
{
 800292c:	b480      	push	{r7}
 800292e:	b083      	sub	sp, #12
 8002930:	af00      	add	r7, sp, #0
 8002932:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_MSITRIM, Value << RCC_ICSCR_MSITRIM_Pos);
 8002934:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002938:	685b      	ldr	r3, [r3, #4]
 800293a:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	021b      	lsls	r3, r3, #8
 8002942:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002946:	4313      	orrs	r3, r2
 8002948:	604b      	str	r3, [r1, #4]
}
 800294a:	bf00      	nop
 800294c:	370c      	adds	r7, #12
 800294e:	46bd      	mov	sp, r7
 8002950:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002954:	4770      	bx	lr

08002956 <LL_RCC_SetSysClkSource>:
{
 8002956:	b480      	push	{r7}
 8002958:	b083      	sub	sp, #12
 800295a:	af00      	add	r7, sp, #0
 800295c:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 800295e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002962:	689b      	ldr	r3, [r3, #8]
 8002964:	f023 0203 	bic.w	r2, r3, #3
 8002968:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	4313      	orrs	r3, r2
 8002970:	608b      	str	r3, [r1, #8]
}
 8002972:	bf00      	nop
 8002974:	370c      	adds	r7, #12
 8002976:	46bd      	mov	sp, r7
 8002978:	f85d 7b04 	ldr.w	r7, [sp], #4
 800297c:	4770      	bx	lr

0800297e <LL_RCC_GetSysClkSource>:
{
 800297e:	b480      	push	{r7}
 8002980:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8002982:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002986:	689b      	ldr	r3, [r3, #8]
 8002988:	f003 030c 	and.w	r3, r3, #12
}
 800298c:	4618      	mov	r0, r3
 800298e:	46bd      	mov	sp, r7
 8002990:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002994:	4770      	bx	lr

08002996 <LL_RCC_SetAHBPrescaler>:
{
 8002996:	b480      	push	{r7}
 8002998:	b083      	sub	sp, #12
 800299a:	af00      	add	r7, sp, #0
 800299c:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 800299e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80029a2:	689b      	ldr	r3, [r3, #8]
 80029a4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80029a8:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	4313      	orrs	r3, r2
 80029b0:	608b      	str	r3, [r1, #8]
}
 80029b2:	bf00      	nop
 80029b4:	370c      	adds	r7, #12
 80029b6:	46bd      	mov	sp, r7
 80029b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029bc:	4770      	bx	lr

080029be <LL_C2_RCC_SetAHBPrescaler>:
{
 80029be:	b480      	push	{r7}
 80029c0:	b083      	sub	sp, #12
 80029c2:	af00      	add	r7, sp, #0
 80029c4:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_C2HPRE, Prescaler);
 80029c6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80029ca:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 80029ce:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80029d2:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	4313      	orrs	r3, r2
 80029da:	f8c1 3108 	str.w	r3, [r1, #264]	; 0x108
}
 80029de:	bf00      	nop
 80029e0:	370c      	adds	r7, #12
 80029e2:	46bd      	mov	sp, r7
 80029e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029e8:	4770      	bx	lr

080029ea <LL_RCC_SetAHB4Prescaler>:
{
 80029ea:	b480      	push	{r7}
 80029ec:	b083      	sub	sp, #12
 80029ee:	af00      	add	r7, sp, #0
 80029f0:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE, Prescaler >> 4);
 80029f2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80029f6:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 80029fa:	f023 020f 	bic.w	r2, r3, #15
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	091b      	lsrs	r3, r3, #4
 8002a02:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002a06:	4313      	orrs	r3, r2
 8002a08:	f8c1 3108 	str.w	r3, [r1, #264]	; 0x108
}
 8002a0c:	bf00      	nop
 8002a0e:	370c      	adds	r7, #12
 8002a10:	46bd      	mov	sp, r7
 8002a12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a16:	4770      	bx	lr

08002a18 <LL_RCC_SetAPB1Prescaler>:
{
 8002a18:	b480      	push	{r7}
 8002a1a:	b083      	sub	sp, #12
 8002a1c:	af00      	add	r7, sp, #0
 8002a1e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 8002a20:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002a24:	689b      	ldr	r3, [r3, #8]
 8002a26:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002a2a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	4313      	orrs	r3, r2
 8002a32:	608b      	str	r3, [r1, #8]
}
 8002a34:	bf00      	nop
 8002a36:	370c      	adds	r7, #12
 8002a38:	46bd      	mov	sp, r7
 8002a3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a3e:	4770      	bx	lr

08002a40 <LL_RCC_SetAPB2Prescaler>:
{
 8002a40:	b480      	push	{r7}
 8002a42:	b083      	sub	sp, #12
 8002a44:	af00      	add	r7, sp, #0
 8002a46:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 8002a48:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002a4c:	689b      	ldr	r3, [r3, #8]
 8002a4e:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002a52:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	4313      	orrs	r3, r2
 8002a5a:	608b      	str	r3, [r1, #8]
}
 8002a5c:	bf00      	nop
 8002a5e:	370c      	adds	r7, #12
 8002a60:	46bd      	mov	sp, r7
 8002a62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a66:	4770      	bx	lr

08002a68 <LL_RCC_GetAHBPrescaler>:
{
 8002a68:	b480      	push	{r7}
 8002a6a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 8002a6c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002a70:	689b      	ldr	r3, [r3, #8]
 8002a72:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 8002a76:	4618      	mov	r0, r3
 8002a78:	46bd      	mov	sp, r7
 8002a7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a7e:	4770      	bx	lr

08002a80 <LL_RCC_GetAHB4Prescaler>:
{
 8002a80:	b480      	push	{r7}
 8002a82:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE) << 4);
 8002a84:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002a88:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8002a8c:	011b      	lsls	r3, r3, #4
 8002a8e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 8002a92:	4618      	mov	r0, r3
 8002a94:	46bd      	mov	sp, r7
 8002a96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a9a:	4770      	bx	lr

08002a9c <LL_RCC_PLL_Enable>:
{
 8002a9c:	b480      	push	{r7}
 8002a9e:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLON);
 8002aa0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002aa4:	681b      	ldr	r3, [r3, #0]
 8002aa6:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002aaa:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002aae:	6013      	str	r3, [r2, #0]
}
 8002ab0:	bf00      	nop
 8002ab2:	46bd      	mov	sp, r7
 8002ab4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ab8:	4770      	bx	lr

08002aba <LL_RCC_PLL_Disable>:
{
 8002aba:	b480      	push	{r7}
 8002abc:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_PLLON);
 8002abe:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002ac2:	681b      	ldr	r3, [r3, #0]
 8002ac4:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002ac8:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002acc:	6013      	str	r3, [r2, #0]
}
 8002ace:	bf00      	nop
 8002ad0:	46bd      	mov	sp, r7
 8002ad2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ad6:	4770      	bx	lr

08002ad8 <LL_RCC_PLL_IsReady>:
{
 8002ad8:	b480      	push	{r7}
 8002ada:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY)) ? 1UL : 0UL);
 8002adc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002ae0:	681b      	ldr	r3, [r3, #0]
 8002ae2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002ae6:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8002aea:	d101      	bne.n	8002af0 <LL_RCC_PLL_IsReady+0x18>
 8002aec:	2301      	movs	r3, #1
 8002aee:	e000      	b.n	8002af2 <LL_RCC_PLL_IsReady+0x1a>
 8002af0:	2300      	movs	r3, #0
}
 8002af2:	4618      	mov	r0, r3
 8002af4:	46bd      	mov	sp, r7
 8002af6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002afa:	4770      	bx	lr

08002afc <LL_RCC_PLL_GetN>:
{
 8002afc:	b480      	push	{r7}
 8002afe:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >>  RCC_PLLCFGR_PLLN_Pos);
 8002b00:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002b04:	68db      	ldr	r3, [r3, #12]
 8002b06:	0a1b      	lsrs	r3, r3, #8
 8002b08:	f003 037f 	and.w	r3, r3, #127	; 0x7f
}
 8002b0c:	4618      	mov	r0, r3
 8002b0e:	46bd      	mov	sp, r7
 8002b10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b14:	4770      	bx	lr

08002b16 <LL_RCC_PLL_GetR>:
{
 8002b16:	b480      	push	{r7}
 8002b18:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR));
 8002b1a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002b1e:	68db      	ldr	r3, [r3, #12]
 8002b20:	f003 4360 	and.w	r3, r3, #3758096384	; 0xe0000000
}
 8002b24:	4618      	mov	r0, r3
 8002b26:	46bd      	mov	sp, r7
 8002b28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b2c:	4770      	bx	lr

08002b2e <LL_RCC_PLL_GetDivider>:
{
 8002b2e:	b480      	push	{r7}
 8002b30:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM));
 8002b32:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002b36:	68db      	ldr	r3, [r3, #12]
 8002b38:	f003 0370 	and.w	r3, r3, #112	; 0x70
}
 8002b3c:	4618      	mov	r0, r3
 8002b3e:	46bd      	mov	sp, r7
 8002b40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b44:	4770      	bx	lr

08002b46 <LL_RCC_PLL_GetMainSource>:
{
 8002b46:	b480      	push	{r7}
 8002b48:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 8002b4a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002b4e:	68db      	ldr	r3, [r3, #12]
 8002b50:	f003 0303 	and.w	r3, r3, #3
}
 8002b54:	4618      	mov	r0, r3
 8002b56:	46bd      	mov	sp, r7
 8002b58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b5c:	4770      	bx	lr

08002b5e <LL_RCC_IsActiveFlag_HPRE>:
{
 8002b5e:	b480      	push	{r7}
 8002b60:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_HPREF) == (RCC_CFGR_HPREF)) ? 1UL : 0UL);
 8002b62:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002b66:	689b      	ldr	r3, [r3, #8]
 8002b68:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002b6c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002b70:	d101      	bne.n	8002b76 <LL_RCC_IsActiveFlag_HPRE+0x18>
 8002b72:	2301      	movs	r3, #1
 8002b74:	e000      	b.n	8002b78 <LL_RCC_IsActiveFlag_HPRE+0x1a>
 8002b76:	2300      	movs	r3, #0
}
 8002b78:	4618      	mov	r0, r3
 8002b7a:	46bd      	mov	sp, r7
 8002b7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b80:	4770      	bx	lr

08002b82 <LL_RCC_IsActiveFlag_C2HPRE>:
{
 8002b82:	b480      	push	{r7}
 8002b84:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_C2HPREF) == (RCC_EXTCFGR_C2HPREF)) ? 1UL : 0UL);
 8002b86:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002b8a:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8002b8e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002b92:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8002b96:	d101      	bne.n	8002b9c <LL_RCC_IsActiveFlag_C2HPRE+0x1a>
 8002b98:	2301      	movs	r3, #1
 8002b9a:	e000      	b.n	8002b9e <LL_RCC_IsActiveFlag_C2HPRE+0x1c>
 8002b9c:	2300      	movs	r3, #0
}
 8002b9e:	4618      	mov	r0, r3
 8002ba0:	46bd      	mov	sp, r7
 8002ba2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ba6:	4770      	bx	lr

08002ba8 <LL_RCC_IsActiveFlag_SHDHPRE>:
{
 8002ba8:	b480      	push	{r7}
 8002baa:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPREF) == (RCC_EXTCFGR_SHDHPREF)) ? 1UL : 0UL);
 8002bac:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002bb0:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8002bb4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002bb8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002bbc:	d101      	bne.n	8002bc2 <LL_RCC_IsActiveFlag_SHDHPRE+0x1a>
 8002bbe:	2301      	movs	r3, #1
 8002bc0:	e000      	b.n	8002bc4 <LL_RCC_IsActiveFlag_SHDHPRE+0x1c>
 8002bc2:	2300      	movs	r3, #0
}
 8002bc4:	4618      	mov	r0, r3
 8002bc6:	46bd      	mov	sp, r7
 8002bc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bcc:	4770      	bx	lr

08002bce <LL_RCC_IsActiveFlag_PPRE1>:
{
 8002bce:	b480      	push	{r7}
 8002bd0:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1F) == (RCC_CFGR_PPRE1F)) ? 1UL : 0UL);
 8002bd2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002bd6:	689b      	ldr	r3, [r3, #8]
 8002bd8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002bdc:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8002be0:	d101      	bne.n	8002be6 <LL_RCC_IsActiveFlag_PPRE1+0x18>
 8002be2:	2301      	movs	r3, #1
 8002be4:	e000      	b.n	8002be8 <LL_RCC_IsActiveFlag_PPRE1+0x1a>
 8002be6:	2300      	movs	r3, #0
}
 8002be8:	4618      	mov	r0, r3
 8002bea:	46bd      	mov	sp, r7
 8002bec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bf0:	4770      	bx	lr

08002bf2 <LL_RCC_IsActiveFlag_PPRE2>:
{
 8002bf2:	b480      	push	{r7}
 8002bf4:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2F) == (RCC_CFGR_PPRE2F)) ? 1UL : 0UL);
 8002bf6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002bfa:	689b      	ldr	r3, [r3, #8]
 8002bfc:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002c00:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8002c04:	d101      	bne.n	8002c0a <LL_RCC_IsActiveFlag_PPRE2+0x18>
 8002c06:	2301      	movs	r3, #1
 8002c08:	e000      	b.n	8002c0c <LL_RCC_IsActiveFlag_PPRE2+0x1a>
 8002c0a:	2300      	movs	r3, #0
}
 8002c0c:	4618      	mov	r0, r3
 8002c0e:	46bd      	mov	sp, r7
 8002c10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c14:	4770      	bx	lr
	...

08002c18 <HAL_RCC_OscConfig>:
  * @note   The PLL is not disabled when used as system clock.
  * @note   The PLL source is not updated when used as PLLSAI1 clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002c18:	b590      	push	{r4, r7, lr}
 8002c1a:	b08d      	sub	sp, #52	; 0x34
 8002c1c:	af00      	add	r7, sp, #0
 8002c1e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	2b00      	cmp	r3, #0
 8002c24:	d101      	bne.n	8002c2a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002c26:	2301      	movs	r3, #1
 8002c28:	e37e      	b.n	8003328 <HAL_RCC_OscConfig+0x710>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*----------------------------- MSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	681b      	ldr	r3, [r3, #0]
 8002c2e:	f003 0320 	and.w	r3, r3, #32
 8002c32:	2b00      	cmp	r3, #0
 8002c34:	f000 8092 	beq.w	8002d5c <HAL_RCC_OscConfig+0x144>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* When the MSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002c38:	f7ff fea1 	bl	800297e <LL_RCC_GetSysClkSource>
 8002c3c:	62f8      	str	r0, [r7, #44]	; 0x2c
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002c3e:	f7ff ff82 	bl	8002b46 <LL_RCC_PLL_GetMainSource>
 8002c42:	62b8      	str	r0, [r7, #40]	; 0x28
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 8002c44:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002c46:	2b00      	cmp	r3, #0
 8002c48:	d005      	beq.n	8002c56 <HAL_RCC_OscConfig+0x3e>
 8002c4a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002c4c:	2b0c      	cmp	r3, #12
 8002c4e:	d14c      	bne.n	8002cea <HAL_RCC_OscConfig+0xd2>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_MSI)))
 8002c50:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002c52:	2b01      	cmp	r3, #1
 8002c54:	d149      	bne.n	8002cea <HAL_RCC_OscConfig+0xd2>
    {
      if ((LL_RCC_MSI_IsReady() != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002c56:	f7ff fe2f 	bl	80028b8 <LL_RCC_MSI_IsReady>
 8002c5a:	4603      	mov	r3, r0
 8002c5c:	2b00      	cmp	r3, #0
 8002c5e:	d005      	beq.n	8002c6c <HAL_RCC_OscConfig+0x54>
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	69db      	ldr	r3, [r3, #28]
 8002c64:	2b00      	cmp	r3, #0
 8002c66:	d101      	bne.n	8002c6c <HAL_RCC_OscConfig+0x54>
      {
        return HAL_ERROR;
 8002c68:	2301      	movs	r3, #1
 8002c6a:	e35d      	b.n	8003328 <HAL_RCC_OscConfig+0x710>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the AHB4 clock
           and the supply voltage of the device. */
        if (RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 8002c70:	f7ff fe47 	bl	8002902 <LL_RCC_MSI_GetRange>
 8002c74:	4603      	mov	r3, r0
 8002c76:	429c      	cmp	r4, r3
 8002c78:	d914      	bls.n	8002ca4 <HAL_RCC_OscConfig+0x8c>
        {
          /* First increase number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c7e:	4618      	mov	r0, r3
 8002c80:	f000 fd16 	bl	80036b0 <RCC_SetFlashLatencyFromMSIRange>
 8002c84:	4603      	mov	r3, r0
 8002c86:	2b00      	cmp	r3, #0
 8002c88:	d001      	beq.n	8002c8e <HAL_RCC_OscConfig+0x76>
          {
            return HAL_ERROR;
 8002c8a:	2301      	movs	r3, #1
 8002c8c:	e34c      	b.n	8003328 <HAL_RCC_OscConfig+0x710>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c92:	4618      	mov	r0, r3
 8002c94:	f7ff fe21 	bl	80028da <LL_RCC_MSI_SetRange>
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	6a1b      	ldr	r3, [r3, #32]
 8002c9c:	4618      	mov	r0, r3
 8002c9e:	f7ff fe45 	bl	800292c <LL_RCC_MSI_SetCalibTrimming>
 8002ca2:	e013      	b.n	8002ccc <HAL_RCC_OscConfig+0xb4>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ca8:	4618      	mov	r0, r3
 8002caa:	f7ff fe16 	bl	80028da <LL_RCC_MSI_SetRange>
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	6a1b      	ldr	r3, [r3, #32]
 8002cb2:	4618      	mov	r0, r3
 8002cb4:	f7ff fe3a 	bl	800292c <LL_RCC_MSI_SetCalibTrimming>

          /* Decrease number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002cbc:	4618      	mov	r0, r3
 8002cbe:	f000 fcf7 	bl	80036b0 <RCC_SetFlashLatencyFromMSIRange>
 8002cc2:	4603      	mov	r3, r0
 8002cc4:	2b00      	cmp	r3, #0
 8002cc6:	d001      	beq.n	8002ccc <HAL_RCC_OscConfig+0xb4>
          {
            return HAL_ERROR;
 8002cc8:	2301      	movs	r3, #1
 8002cca:	e32d      	b.n	8003328 <HAL_RCC_OscConfig+0x710>
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetHCLKFreq();
 8002ccc:	f000 fcdc 	bl	8003688 <HAL_RCC_GetHCLKFreq>
 8002cd0:	4603      	mov	r3, r0
 8002cd2:	4ab3      	ldr	r2, [pc, #716]	; (8002fa0 <HAL_RCC_OscConfig+0x388>)
 8002cd4:	6013      	str	r3, [r2, #0]
        
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8002cd6:	4bb3      	ldr	r3, [pc, #716]	; (8002fa4 <HAL_RCC_OscConfig+0x38c>)
 8002cd8:	681b      	ldr	r3, [r3, #0]
 8002cda:	4618      	mov	r0, r3
 8002cdc:	f7fe ffce 	bl	8001c7c <HAL_InitTick>
 8002ce0:	4603      	mov	r3, r0
 8002ce2:	2b00      	cmp	r3, #0
 8002ce4:	d039      	beq.n	8002d5a <HAL_RCC_OscConfig+0x142>
        {
          return HAL_ERROR;
 8002ce6:	2301      	movs	r3, #1
 8002ce8:	e31e      	b.n	8003328 <HAL_RCC_OscConfig+0x710>
      }
    }
    else
    {
      /* Check the MSI State */
      if (RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	69db      	ldr	r3, [r3, #28]
 8002cee:	2b00      	cmp	r3, #0
 8002cf0:	d01e      	beq.n	8002d30 <HAL_RCC_OscConfig+0x118>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8002cf2:	f7ff fdc3 	bl	800287c <LL_RCC_MSI_Enable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002cf6:	f7ff f80f 	bl	8001d18 <HAL_GetTick>
 8002cfa:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till MSI is ready */
        while (LL_RCC_MSI_IsReady() == 0U)
 8002cfc:	e008      	b.n	8002d10 <HAL_RCC_OscConfig+0xf8>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002cfe:	f7ff f80b 	bl	8001d18 <HAL_GetTick>
 8002d02:	4602      	mov	r2, r0
 8002d04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d06:	1ad3      	subs	r3, r2, r3
 8002d08:	2b02      	cmp	r3, #2
 8002d0a:	d901      	bls.n	8002d10 <HAL_RCC_OscConfig+0xf8>
          {
            return HAL_TIMEOUT;
 8002d0c:	2303      	movs	r3, #3
 8002d0e:	e30b      	b.n	8003328 <HAL_RCC_OscConfig+0x710>
        while (LL_RCC_MSI_IsReady() == 0U)
 8002d10:	f7ff fdd2 	bl	80028b8 <LL_RCC_MSI_IsReady>
 8002d14:	4603      	mov	r3, r0
 8002d16:	2b00      	cmp	r3, #0
 8002d18:	d0f1      	beq.n	8002cfe <HAL_RCC_OscConfig+0xe6>
          }
        }

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d1e:	4618      	mov	r0, r3
 8002d20:	f7ff fddb 	bl	80028da <LL_RCC_MSI_SetRange>
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	6a1b      	ldr	r3, [r3, #32]
 8002d28:	4618      	mov	r0, r3
 8002d2a:	f7ff fdff 	bl	800292c <LL_RCC_MSI_SetCalibTrimming>
 8002d2e:	e015      	b.n	8002d5c <HAL_RCC_OscConfig+0x144>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8002d30:	f7ff fdb3 	bl	800289a <LL_RCC_MSI_Disable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002d34:	f7fe fff0 	bl	8001d18 <HAL_GetTick>
 8002d38:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till MSI is disabled */
        while (LL_RCC_MSI_IsReady() != 0U)
 8002d3a:	e008      	b.n	8002d4e <HAL_RCC_OscConfig+0x136>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002d3c:	f7fe ffec 	bl	8001d18 <HAL_GetTick>
 8002d40:	4602      	mov	r2, r0
 8002d42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d44:	1ad3      	subs	r3, r2, r3
 8002d46:	2b02      	cmp	r3, #2
 8002d48:	d901      	bls.n	8002d4e <HAL_RCC_OscConfig+0x136>
          {
            return HAL_TIMEOUT;
 8002d4a:	2303      	movs	r3, #3
 8002d4c:	e2ec      	b.n	8003328 <HAL_RCC_OscConfig+0x710>
        while (LL_RCC_MSI_IsReady() != 0U)
 8002d4e:	f7ff fdb3 	bl	80028b8 <LL_RCC_MSI_IsReady>
 8002d52:	4603      	mov	r3, r0
 8002d54:	2b00      	cmp	r3, #0
 8002d56:	d1f1      	bne.n	8002d3c <HAL_RCC_OscConfig+0x124>
 8002d58:	e000      	b.n	8002d5c <HAL_RCC_OscConfig+0x144>
      if ((LL_RCC_MSI_IsReady() != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002d5a:	bf00      	nop
      }
    }
  }

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	681b      	ldr	r3, [r3, #0]
 8002d60:	f003 0301 	and.w	r3, r3, #1
 8002d64:	2b00      	cmp	r3, #0
 8002d66:	d04e      	beq.n	8002e06 <HAL_RCC_OscConfig+0x1ee>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002d68:	f7ff fe09 	bl	800297e <LL_RCC_GetSysClkSource>
 8002d6c:	6238      	str	r0, [r7, #32]
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002d6e:	f7ff feea 	bl	8002b46 <LL_RCC_PLL_GetMainSource>
 8002d72:	61f8      	str	r0, [r7, #28]
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 8002d74:	6a3b      	ldr	r3, [r7, #32]
 8002d76:	2b08      	cmp	r3, #8
 8002d78:	d005      	beq.n	8002d86 <HAL_RCC_OscConfig+0x16e>
 8002d7a:	6a3b      	ldr	r3, [r7, #32]
 8002d7c:	2b0c      	cmp	r3, #12
 8002d7e:	d10d      	bne.n	8002d9c <HAL_RCC_OscConfig+0x184>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_HSE)))
 8002d80:	69fb      	ldr	r3, [r7, #28]
 8002d82:	2b03      	cmp	r3, #3
 8002d84:	d10a      	bne.n	8002d9c <HAL_RCC_OscConfig+0x184>
    {
      if ((LL_RCC_HSE_IsReady() != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002d86:	f7ff fc19 	bl	80025bc <LL_RCC_HSE_IsReady>
 8002d8a:	4603      	mov	r3, r0
 8002d8c:	2b00      	cmp	r3, #0
 8002d8e:	d039      	beq.n	8002e04 <HAL_RCC_OscConfig+0x1ec>
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	685b      	ldr	r3, [r3, #4]
 8002d94:	2b00      	cmp	r3, #0
 8002d96:	d135      	bne.n	8002e04 <HAL_RCC_OscConfig+0x1ec>
      {
        return HAL_ERROR;
 8002d98:	2301      	movs	r3, #1
 8002d9a:	e2c5      	b.n	8003328 <HAL_RCC_OscConfig+0x710>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	685b      	ldr	r3, [r3, #4]
 8002da0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002da4:	d102      	bne.n	8002dac <HAL_RCC_OscConfig+0x194>
 8002da6:	f7ff fbeb 	bl	8002580 <LL_RCC_HSE_Enable>
 8002daa:	e001      	b.n	8002db0 <HAL_RCC_OscConfig+0x198>
 8002dac:	f7ff fbf7 	bl	800259e <LL_RCC_HSE_Disable>

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	685b      	ldr	r3, [r3, #4]
 8002db4:	2b00      	cmp	r3, #0
 8002db6:	d012      	beq.n	8002dde <HAL_RCC_OscConfig+0x1c6>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002db8:	f7fe ffae 	bl	8001d18 <HAL_GetTick>
 8002dbc:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while (LL_RCC_HSE_IsReady() == 0U)
 8002dbe:	e008      	b.n	8002dd2 <HAL_RCC_OscConfig+0x1ba>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002dc0:	f7fe ffaa 	bl	8001d18 <HAL_GetTick>
 8002dc4:	4602      	mov	r2, r0
 8002dc6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002dc8:	1ad3      	subs	r3, r2, r3
 8002dca:	2b64      	cmp	r3, #100	; 0x64
 8002dcc:	d901      	bls.n	8002dd2 <HAL_RCC_OscConfig+0x1ba>
          {
            return HAL_TIMEOUT;
 8002dce:	2303      	movs	r3, #3
 8002dd0:	e2aa      	b.n	8003328 <HAL_RCC_OscConfig+0x710>
        while (LL_RCC_HSE_IsReady() == 0U)
 8002dd2:	f7ff fbf3 	bl	80025bc <LL_RCC_HSE_IsReady>
 8002dd6:	4603      	mov	r3, r0
 8002dd8:	2b00      	cmp	r3, #0
 8002dda:	d0f1      	beq.n	8002dc0 <HAL_RCC_OscConfig+0x1a8>
 8002ddc:	e013      	b.n	8002e06 <HAL_RCC_OscConfig+0x1ee>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002dde:	f7fe ff9b 	bl	8001d18 <HAL_GetTick>
 8002de2:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while (LL_RCC_HSE_IsReady() != 0U)
 8002de4:	e008      	b.n	8002df8 <HAL_RCC_OscConfig+0x1e0>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002de6:	f7fe ff97 	bl	8001d18 <HAL_GetTick>
 8002dea:	4602      	mov	r2, r0
 8002dec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002dee:	1ad3      	subs	r3, r2, r3
 8002df0:	2b64      	cmp	r3, #100	; 0x64
 8002df2:	d901      	bls.n	8002df8 <HAL_RCC_OscConfig+0x1e0>
          {
            return HAL_TIMEOUT;
 8002df4:	2303      	movs	r3, #3
 8002df6:	e297      	b.n	8003328 <HAL_RCC_OscConfig+0x710>
        while (LL_RCC_HSE_IsReady() != 0U)
 8002df8:	f7ff fbe0 	bl	80025bc <LL_RCC_HSE_IsReady>
 8002dfc:	4603      	mov	r3, r0
 8002dfe:	2b00      	cmp	r3, #0
 8002e00:	d1f1      	bne.n	8002de6 <HAL_RCC_OscConfig+0x1ce>
 8002e02:	e000      	b.n	8002e06 <HAL_RCC_OscConfig+0x1ee>
      if ((LL_RCC_HSE_IsReady() != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002e04:	bf00      	nop
      }
    }
  }

  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	681b      	ldr	r3, [r3, #0]
 8002e0a:	f003 0302 	and.w	r3, r3, #2
 8002e0e:	2b00      	cmp	r3, #0
 8002e10:	d051      	beq.n	8002eb6 <HAL_RCC_OscConfig+0x29e>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002e12:	f7ff fdb4 	bl	800297e <LL_RCC_GetSysClkSource>
 8002e16:	61b8      	str	r0, [r7, #24]
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002e18:	f7ff fe95 	bl	8002b46 <LL_RCC_PLL_GetMainSource>
 8002e1c:	6178      	str	r0, [r7, #20]
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 8002e1e:	69bb      	ldr	r3, [r7, #24]
 8002e20:	2b04      	cmp	r3, #4
 8002e22:	d005      	beq.n	8002e30 <HAL_RCC_OscConfig+0x218>
 8002e24:	69bb      	ldr	r3, [r7, #24]
 8002e26:	2b0c      	cmp	r3, #12
 8002e28:	d113      	bne.n	8002e52 <HAL_RCC_OscConfig+0x23a>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_HSI)))
 8002e2a:	697b      	ldr	r3, [r7, #20]
 8002e2c:	2b02      	cmp	r3, #2
 8002e2e:	d110      	bne.n	8002e52 <HAL_RCC_OscConfig+0x23a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((LL_RCC_HSI_IsReady() != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002e30:	f7ff fbf4 	bl	800261c <LL_RCC_HSI_IsReady>
 8002e34:	4603      	mov	r3, r0
 8002e36:	2b00      	cmp	r3, #0
 8002e38:	d005      	beq.n	8002e46 <HAL_RCC_OscConfig+0x22e>
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	68db      	ldr	r3, [r3, #12]
 8002e3e:	2b00      	cmp	r3, #0
 8002e40:	d101      	bne.n	8002e46 <HAL_RCC_OscConfig+0x22e>
      {
        return HAL_ERROR;
 8002e42:	2301      	movs	r3, #1
 8002e44:	e270      	b.n	8003328 <HAL_RCC_OscConfig+0x710>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	691b      	ldr	r3, [r3, #16]
 8002e4a:	4618      	mov	r0, r3
 8002e4c:	f7ff fbf8 	bl	8002640 <LL_RCC_HSI_SetCalibTrimming>
      if ((LL_RCC_HSI_IsReady() != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002e50:	e031      	b.n	8002eb6 <HAL_RCC_OscConfig+0x29e>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	68db      	ldr	r3, [r3, #12]
 8002e56:	2b00      	cmp	r3, #0
 8002e58:	d019      	beq.n	8002e8e <HAL_RCC_OscConfig+0x276>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002e5a:	f7ff fbc1 	bl	80025e0 <LL_RCC_HSI_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002e5e:	f7fe ff5b 	bl	8001d18 <HAL_GetTick>
 8002e62:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (LL_RCC_HSI_IsReady() == 0U)
 8002e64:	e008      	b.n	8002e78 <HAL_RCC_OscConfig+0x260>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002e66:	f7fe ff57 	bl	8001d18 <HAL_GetTick>
 8002e6a:	4602      	mov	r2, r0
 8002e6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e6e:	1ad3      	subs	r3, r2, r3
 8002e70:	2b02      	cmp	r3, #2
 8002e72:	d901      	bls.n	8002e78 <HAL_RCC_OscConfig+0x260>
          {
            return HAL_TIMEOUT;
 8002e74:	2303      	movs	r3, #3
 8002e76:	e257      	b.n	8003328 <HAL_RCC_OscConfig+0x710>
        while (LL_RCC_HSI_IsReady() == 0U)
 8002e78:	f7ff fbd0 	bl	800261c <LL_RCC_HSI_IsReady>
 8002e7c:	4603      	mov	r3, r0
 8002e7e:	2b00      	cmp	r3, #0
 8002e80:	d0f1      	beq.n	8002e66 <HAL_RCC_OscConfig+0x24e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	691b      	ldr	r3, [r3, #16]
 8002e86:	4618      	mov	r0, r3
 8002e88:	f7ff fbda 	bl	8002640 <LL_RCC_HSI_SetCalibTrimming>
 8002e8c:	e013      	b.n	8002eb6 <HAL_RCC_OscConfig+0x29e>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002e8e:	f7ff fbb6 	bl	80025fe <LL_RCC_HSI_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002e92:	f7fe ff41 	bl	8001d18 <HAL_GetTick>
 8002e96:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while (LL_RCC_HSI_IsReady() != 0U)
 8002e98:	e008      	b.n	8002eac <HAL_RCC_OscConfig+0x294>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002e9a:	f7fe ff3d 	bl	8001d18 <HAL_GetTick>
 8002e9e:	4602      	mov	r2, r0
 8002ea0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ea2:	1ad3      	subs	r3, r2, r3
 8002ea4:	2b02      	cmp	r3, #2
 8002ea6:	d901      	bls.n	8002eac <HAL_RCC_OscConfig+0x294>
          {
            return HAL_TIMEOUT;
 8002ea8:	2303      	movs	r3, #3
 8002eaa:	e23d      	b.n	8003328 <HAL_RCC_OscConfig+0x710>
        while (LL_RCC_HSI_IsReady() != 0U)
 8002eac:	f7ff fbb6 	bl	800261c <LL_RCC_HSI_IsReady>
 8002eb0:	4603      	mov	r3, r0
 8002eb2:	2b00      	cmp	r3, #0
 8002eb4:	d1f1      	bne.n	8002e9a <HAL_RCC_OscConfig+0x282>
      }
    }
  }
  /*------------------------------ LSI Configuration (LSI1 or LSI2) -------------------------*/

  if ((((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI1) == RCC_OSCILLATORTYPE_LSI1) || \
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	681b      	ldr	r3, [r3, #0]
 8002eba:	f003 0308 	and.w	r3, r3, #8
 8002ebe:	2b00      	cmp	r3, #0
 8002ec0:	d106      	bne.n	8002ed0 <HAL_RCC_OscConfig+0x2b8>
      (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI2) == RCC_OSCILLATORTYPE_LSI2))
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	681b      	ldr	r3, [r3, #0]
 8002ec6:	f003 0310 	and.w	r3, r3, #16
  if ((((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI1) == RCC_OSCILLATORTYPE_LSI1) || \
 8002eca:	2b00      	cmp	r3, #0
 8002ecc:	f000 80a3 	beq.w	8003016 <HAL_RCC_OscConfig+0x3fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	695b      	ldr	r3, [r3, #20]
 8002ed4:	2b00      	cmp	r3, #0
 8002ed6:	d076      	beq.n	8002fc6 <HAL_RCC_OscConfig+0x3ae>
    {
      /*------------------------------ LSI2 selected by default (when Switch ON) -------------------------*/
      if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI2) == RCC_OSCILLATORTYPE_LSI2)
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	681b      	ldr	r3, [r3, #0]
 8002edc:	f003 0310 	and.w	r3, r3, #16
 8002ee0:	2b00      	cmp	r3, #0
 8002ee2:	d046      	beq.n	8002f72 <HAL_RCC_OscConfig+0x35a>
      {
        assert_param(IS_RCC_LSI2_CALIBRATION_VALUE(RCC_OscInitStruct->LSI2CalibrationValue));

        /* 1. Check LSI1 state and enable if required */
        if (LL_RCC_LSI1_IsReady() == 0U)
 8002ee4:	f7ff fc6d 	bl	80027c2 <LL_RCC_LSI1_IsReady>
 8002ee8:	4603      	mov	r3, r0
 8002eea:	2b00      	cmp	r3, #0
 8002eec:	d113      	bne.n	8002f16 <HAL_RCC_OscConfig+0x2fe>
        {
          /* This is required to enable LSI1 before enabling LSI2 */
          __HAL_RCC_LSI1_ENABLE();
 8002eee:	f7ff fc46 	bl	800277e <LL_RCC_LSI1_Enable>

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8002ef2:	f7fe ff11 	bl	8001d18 <HAL_GetTick>
 8002ef6:	6278      	str	r0, [r7, #36]	; 0x24

          /* Wait till LSI1 is ready */
          while (LL_RCC_LSI1_IsReady() == 0U)
 8002ef8:	e008      	b.n	8002f0c <HAL_RCC_OscConfig+0x2f4>
          {
            if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 8002efa:	f7fe ff0d 	bl	8001d18 <HAL_GetTick>
 8002efe:	4602      	mov	r2, r0
 8002f00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f02:	1ad3      	subs	r3, r2, r3
 8002f04:	2b02      	cmp	r3, #2
 8002f06:	d901      	bls.n	8002f0c <HAL_RCC_OscConfig+0x2f4>
            {
              return HAL_TIMEOUT;
 8002f08:	2303      	movs	r3, #3
 8002f0a:	e20d      	b.n	8003328 <HAL_RCC_OscConfig+0x710>
          while (LL_RCC_LSI1_IsReady() == 0U)
 8002f0c:	f7ff fc59 	bl	80027c2 <LL_RCC_LSI1_IsReady>
 8002f10:	4603      	mov	r3, r0
 8002f12:	2b00      	cmp	r3, #0
 8002f14:	d0f1      	beq.n	8002efa <HAL_RCC_OscConfig+0x2e2>
            }
          }
        }

        /* 2. Enable the Internal Low Speed oscillator (LSI2) and set trimming value */
        __HAL_RCC_LSI2_ENABLE();
 8002f16:	f7ff fc66 	bl	80027e6 <LL_RCC_LSI2_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002f1a:	f7fe fefd 	bl	8001d18 <HAL_GetTick>
 8002f1e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till LSI2 is ready */
        while (LL_RCC_LSI2_IsReady() == 0U)
 8002f20:	e008      	b.n	8002f34 <HAL_RCC_OscConfig+0x31c>
        {
          if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 8002f22:	f7fe fef9 	bl	8001d18 <HAL_GetTick>
 8002f26:	4602      	mov	r2, r0
 8002f28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f2a:	1ad3      	subs	r3, r2, r3
 8002f2c:	2b03      	cmp	r3, #3
 8002f2e:	d901      	bls.n	8002f34 <HAL_RCC_OscConfig+0x31c>
          {
            return HAL_TIMEOUT;
 8002f30:	2303      	movs	r3, #3
 8002f32:	e1f9      	b.n	8003328 <HAL_RCC_OscConfig+0x710>
        while (LL_RCC_LSI2_IsReady() == 0U)
 8002f34:	f7ff fc79 	bl	800282a <LL_RCC_LSI2_IsReady>
 8002f38:	4603      	mov	r3, r0
 8002f3a:	2b00      	cmp	r3, #0
 8002f3c:	d0f1      	beq.n	8002f22 <HAL_RCC_OscConfig+0x30a>
          }
        }
        /* Adjusts the Internal Low Spee oscillator (LSI2) calibration value */
        __HAL_RCC_LSI2_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->LSI2CalibrationValue);
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	699b      	ldr	r3, [r3, #24]
 8002f42:	4618      	mov	r0, r3
 8002f44:	f7ff fc83 	bl	800284e <LL_RCC_LSI2_SetTrimming>

        /* 3. Disable LSI1 */

        /* LSI1 was initially not enable, require to disable it */
        __HAL_RCC_LSI1_DISABLE();
 8002f48:	f7ff fc2a 	bl	80027a0 <LL_RCC_LSI1_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002f4c:	f7fe fee4 	bl	8001d18 <HAL_GetTick>
 8002f50:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till LSI1 is disabled */
        while (LL_RCC_LSI1_IsReady() != 0U)
 8002f52:	e008      	b.n	8002f66 <HAL_RCC_OscConfig+0x34e>
        {
          if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 8002f54:	f7fe fee0 	bl	8001d18 <HAL_GetTick>
 8002f58:	4602      	mov	r2, r0
 8002f5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f5c:	1ad3      	subs	r3, r2, r3
 8002f5e:	2b02      	cmp	r3, #2
 8002f60:	d901      	bls.n	8002f66 <HAL_RCC_OscConfig+0x34e>
          {
            return HAL_TIMEOUT;
 8002f62:	2303      	movs	r3, #3
 8002f64:	e1e0      	b.n	8003328 <HAL_RCC_OscConfig+0x710>
        while (LL_RCC_LSI1_IsReady() != 0U)
 8002f66:	f7ff fc2c 	bl	80027c2 <LL_RCC_LSI1_IsReady>
 8002f6a:	4603      	mov	r3, r0
 8002f6c:	2b00      	cmp	r3, #0
 8002f6e:	d1f1      	bne.n	8002f54 <HAL_RCC_OscConfig+0x33c>
 8002f70:	e051      	b.n	8003016 <HAL_RCC_OscConfig+0x3fe>
      else
      {
        /*------------------------------ LSI1 selected (only if LSI2 OFF)-------------------------*/

        /* 1. Enable the Internal Low Speed oscillator (LSI1). */
        __HAL_RCC_LSI1_ENABLE();
 8002f72:	f7ff fc04 	bl	800277e <LL_RCC_LSI1_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002f76:	f7fe fecf 	bl	8001d18 <HAL_GetTick>
 8002f7a:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till LSI1 is ready */
        while (LL_RCC_LSI1_IsReady() == 0U)
 8002f7c:	e008      	b.n	8002f90 <HAL_RCC_OscConfig+0x378>
        {
          if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 8002f7e:	f7fe fecb 	bl	8001d18 <HAL_GetTick>
 8002f82:	4602      	mov	r2, r0
 8002f84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f86:	1ad3      	subs	r3, r2, r3
 8002f88:	2b02      	cmp	r3, #2
 8002f8a:	d901      	bls.n	8002f90 <HAL_RCC_OscConfig+0x378>
          {
            return HAL_TIMEOUT;
 8002f8c:	2303      	movs	r3, #3
 8002f8e:	e1cb      	b.n	8003328 <HAL_RCC_OscConfig+0x710>
        while (LL_RCC_LSI1_IsReady() == 0U)
 8002f90:	f7ff fc17 	bl	80027c2 <LL_RCC_LSI1_IsReady>
 8002f94:	4603      	mov	r3, r0
 8002f96:	2b00      	cmp	r3, #0
 8002f98:	d0f1      	beq.n	8002f7e <HAL_RCC_OscConfig+0x366>
          }
        }
        /*2. Switch OFF LSI2*/

        /* Disable the Internal Low Speed oscillator (LSI2). */
        __HAL_RCC_LSI2_DISABLE();
 8002f9a:	f7ff fc35 	bl	8002808 <LL_RCC_LSI2_Disable>

        /* Wait till LSI2 is disabled */
        while (LL_RCC_LSI2_IsReady() != 0U)
 8002f9e:	e00c      	b.n	8002fba <HAL_RCC_OscConfig+0x3a2>
 8002fa0:	20000004 	.word	0x20000004
 8002fa4:	20000008 	.word	0x20000008
        {
          if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 8002fa8:	f7fe feb6 	bl	8001d18 <HAL_GetTick>
 8002fac:	4602      	mov	r2, r0
 8002fae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002fb0:	1ad3      	subs	r3, r2, r3
 8002fb2:	2b03      	cmp	r3, #3
 8002fb4:	d901      	bls.n	8002fba <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 8002fb6:	2303      	movs	r3, #3
 8002fb8:	e1b6      	b.n	8003328 <HAL_RCC_OscConfig+0x710>
        while (LL_RCC_LSI2_IsReady() != 0U)
 8002fba:	f7ff fc36 	bl	800282a <LL_RCC_LSI2_IsReady>
 8002fbe:	4603      	mov	r3, r0
 8002fc0:	2b00      	cmp	r3, #0
 8002fc2:	d1f1      	bne.n	8002fa8 <HAL_RCC_OscConfig+0x390>
 8002fc4:	e027      	b.n	8003016 <HAL_RCC_OscConfig+0x3fe>
    }
    else
    {

      /* Disable the Internal Low Speed oscillator (LSI2). */
      __HAL_RCC_LSI2_DISABLE();
 8002fc6:	f7ff fc1f 	bl	8002808 <LL_RCC_LSI2_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002fca:	f7fe fea5 	bl	8001d18 <HAL_GetTick>
 8002fce:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI2 is disabled */
      while (LL_RCC_LSI2_IsReady() != 0U)
 8002fd0:	e008      	b.n	8002fe4 <HAL_RCC_OscConfig+0x3cc>
      {
        if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 8002fd2:	f7fe fea1 	bl	8001d18 <HAL_GetTick>
 8002fd6:	4602      	mov	r2, r0
 8002fd8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002fda:	1ad3      	subs	r3, r2, r3
 8002fdc:	2b03      	cmp	r3, #3
 8002fde:	d901      	bls.n	8002fe4 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8002fe0:	2303      	movs	r3, #3
 8002fe2:	e1a1      	b.n	8003328 <HAL_RCC_OscConfig+0x710>
      while (LL_RCC_LSI2_IsReady() != 0U)
 8002fe4:	f7ff fc21 	bl	800282a <LL_RCC_LSI2_IsReady>
 8002fe8:	4603      	mov	r3, r0
 8002fea:	2b00      	cmp	r3, #0
 8002fec:	d1f1      	bne.n	8002fd2 <HAL_RCC_OscConfig+0x3ba>
        }
      }

      /* Disable the Internal Low Speed oscillator (LSI1). */
      __HAL_RCC_LSI1_DISABLE();
 8002fee:	f7ff fbd7 	bl	80027a0 <LL_RCC_LSI1_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002ff2:	f7fe fe91 	bl	8001d18 <HAL_GetTick>
 8002ff6:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI1 is disabled */
      while (LL_RCC_LSI1_IsReady() != 0U)
 8002ff8:	e008      	b.n	800300c <HAL_RCC_OscConfig+0x3f4>
      {
        if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 8002ffa:	f7fe fe8d 	bl	8001d18 <HAL_GetTick>
 8002ffe:	4602      	mov	r2, r0
 8003000:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003002:	1ad3      	subs	r3, r2, r3
 8003004:	2b02      	cmp	r3, #2
 8003006:	d901      	bls.n	800300c <HAL_RCC_OscConfig+0x3f4>
        {
          return HAL_TIMEOUT;
 8003008:	2303      	movs	r3, #3
 800300a:	e18d      	b.n	8003328 <HAL_RCC_OscConfig+0x710>
      while (LL_RCC_LSI1_IsReady() != 0U)
 800300c:	f7ff fbd9 	bl	80027c2 <LL_RCC_LSI1_IsReady>
 8003010:	4603      	mov	r3, r0
 8003012:	2b00      	cmp	r3, #0
 8003014:	d1f1      	bne.n	8002ffa <HAL_RCC_OscConfig+0x3e2>
      }
    }
  }

  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	681b      	ldr	r3, [r3, #0]
 800301a:	f003 0304 	and.w	r3, r3, #4
 800301e:	2b00      	cmp	r3, #0
 8003020:	d05b      	beq.n	80030da <HAL_RCC_OscConfig+0x4c2>
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003022:	4bb5      	ldr	r3, [pc, #724]	; (80032f8 <HAL_RCC_OscConfig+0x6e0>)
 8003024:	681b      	ldr	r3, [r3, #0]
 8003026:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800302a:	2b00      	cmp	r3, #0
 800302c:	d114      	bne.n	8003058 <HAL_RCC_OscConfig+0x440>
    {
      /* Enable write access to Backup domain */
      HAL_PWR_EnableBkUpAccess();
 800302e:	f7ff fa77 	bl	8002520 <HAL_PWR_EnableBkUpAccess>

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003032:	f7fe fe71 	bl	8001d18 <HAL_GetTick>
 8003036:	6278      	str	r0, [r7, #36]	; 0x24

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003038:	e008      	b.n	800304c <HAL_RCC_OscConfig+0x434>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800303a:	f7fe fe6d 	bl	8001d18 <HAL_GetTick>
 800303e:	4602      	mov	r2, r0
 8003040:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003042:	1ad3      	subs	r3, r2, r3
 8003044:	2b02      	cmp	r3, #2
 8003046:	d901      	bls.n	800304c <HAL_RCC_OscConfig+0x434>
        {
          return HAL_TIMEOUT;
 8003048:	2303      	movs	r3, #3
 800304a:	e16d      	b.n	8003328 <HAL_RCC_OscConfig+0x710>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800304c:	4baa      	ldr	r3, [pc, #680]	; (80032f8 <HAL_RCC_OscConfig+0x6e0>)
 800304e:	681b      	ldr	r3, [r3, #0]
 8003050:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003054:	2b00      	cmp	r3, #0
 8003056:	d0f0      	beq.n	800303a <HAL_RCC_OscConfig+0x422>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	689b      	ldr	r3, [r3, #8]
 800305c:	2b01      	cmp	r3, #1
 800305e:	d102      	bne.n	8003066 <HAL_RCC_OscConfig+0x44e>
 8003060:	f7ff fb37 	bl	80026d2 <LL_RCC_LSE_Enable>
 8003064:	e00c      	b.n	8003080 <HAL_RCC_OscConfig+0x468>
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	689b      	ldr	r3, [r3, #8]
 800306a:	2b05      	cmp	r3, #5
 800306c:	d104      	bne.n	8003078 <HAL_RCC_OscConfig+0x460>
 800306e:	f7ff fb52 	bl	8002716 <LL_RCC_LSE_EnableBypass>
 8003072:	f7ff fb2e 	bl	80026d2 <LL_RCC_LSE_Enable>
 8003076:	e003      	b.n	8003080 <HAL_RCC_OscConfig+0x468>
 8003078:	f7ff fb3c 	bl	80026f4 <LL_RCC_LSE_Disable>
 800307c:	f7ff fb5c 	bl	8002738 <LL_RCC_LSE_DisableBypass>

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	689b      	ldr	r3, [r3, #8]
 8003084:	2b00      	cmp	r3, #0
 8003086:	d014      	beq.n	80030b2 <HAL_RCC_OscConfig+0x49a>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003088:	f7fe fe46 	bl	8001d18 <HAL_GetTick>
 800308c:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while (LL_RCC_LSE_IsReady() == 0U)
 800308e:	e00a      	b.n	80030a6 <HAL_RCC_OscConfig+0x48e>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003090:	f7fe fe42 	bl	8001d18 <HAL_GetTick>
 8003094:	4602      	mov	r2, r0
 8003096:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003098:	1ad3      	subs	r3, r2, r3
 800309a:	f241 3288 	movw	r2, #5000	; 0x1388
 800309e:	4293      	cmp	r3, r2
 80030a0:	d901      	bls.n	80030a6 <HAL_RCC_OscConfig+0x48e>
        {
          return HAL_TIMEOUT;
 80030a2:	2303      	movs	r3, #3
 80030a4:	e140      	b.n	8003328 <HAL_RCC_OscConfig+0x710>
      while (LL_RCC_LSE_IsReady() == 0U)
 80030a6:	f7ff fb58 	bl	800275a <LL_RCC_LSE_IsReady>
 80030aa:	4603      	mov	r3, r0
 80030ac:	2b00      	cmp	r3, #0
 80030ae:	d0ef      	beq.n	8003090 <HAL_RCC_OscConfig+0x478>
 80030b0:	e013      	b.n	80030da <HAL_RCC_OscConfig+0x4c2>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80030b2:	f7fe fe31 	bl	8001d18 <HAL_GetTick>
 80030b6:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while (LL_RCC_LSE_IsReady() != 0U)
 80030b8:	e00a      	b.n	80030d0 <HAL_RCC_OscConfig+0x4b8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80030ba:	f7fe fe2d 	bl	8001d18 <HAL_GetTick>
 80030be:	4602      	mov	r2, r0
 80030c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030c2:	1ad3      	subs	r3, r2, r3
 80030c4:	f241 3288 	movw	r2, #5000	; 0x1388
 80030c8:	4293      	cmp	r3, r2
 80030ca:	d901      	bls.n	80030d0 <HAL_RCC_OscConfig+0x4b8>
        {
          return HAL_TIMEOUT;
 80030cc:	2303      	movs	r3, #3
 80030ce:	e12b      	b.n	8003328 <HAL_RCC_OscConfig+0x710>
      while (LL_RCC_LSE_IsReady() != 0U)
 80030d0:	f7ff fb43 	bl	800275a <LL_RCC_LSE_IsReady>
 80030d4:	4603      	mov	r3, r0
 80030d6:	2b00      	cmp	r3, #0
 80030d8:	d1ef      	bne.n	80030ba <HAL_RCC_OscConfig+0x4a2>
    }

  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	681b      	ldr	r3, [r3, #0]
 80030de:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80030e2:	2b00      	cmp	r3, #0
 80030e4:	d02c      	beq.n	8003140 <HAL_RCC_OscConfig+0x528>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if (RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80030ea:	2b00      	cmp	r3, #0
 80030ec:	d014      	beq.n	8003118 <HAL_RCC_OscConfig+0x500>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80030ee:	f7ff fabc 	bl	800266a <LL_RCC_HSI48_Enable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80030f2:	f7fe fe11 	bl	8001d18 <HAL_GetTick>
 80030f6:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (LL_RCC_HSI48_IsReady() == 0U)
 80030f8:	e008      	b.n	800310c <HAL_RCC_OscConfig+0x4f4>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80030fa:	f7fe fe0d 	bl	8001d18 <HAL_GetTick>
 80030fe:	4602      	mov	r2, r0
 8003100:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003102:	1ad3      	subs	r3, r2, r3
 8003104:	2b02      	cmp	r3, #2
 8003106:	d901      	bls.n	800310c <HAL_RCC_OscConfig+0x4f4>
        {
          return HAL_TIMEOUT;
 8003108:	2303      	movs	r3, #3
 800310a:	e10d      	b.n	8003328 <HAL_RCC_OscConfig+0x710>
      while (LL_RCC_HSI48_IsReady() == 0U)
 800310c:	f7ff facf 	bl	80026ae <LL_RCC_HSI48_IsReady>
 8003110:	4603      	mov	r3, r0
 8003112:	2b00      	cmp	r3, #0
 8003114:	d0f1      	beq.n	80030fa <HAL_RCC_OscConfig+0x4e2>
 8003116:	e013      	b.n	8003140 <HAL_RCC_OscConfig+0x528>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8003118:	f7ff fab8 	bl	800268c <LL_RCC_HSI48_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800311c:	f7fe fdfc 	bl	8001d18 <HAL_GetTick>
 8003120:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is disabled */
      while (LL_RCC_HSI48_IsReady() != 0U)
 8003122:	e008      	b.n	8003136 <HAL_RCC_OscConfig+0x51e>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003124:	f7fe fdf8 	bl	8001d18 <HAL_GetTick>
 8003128:	4602      	mov	r2, r0
 800312a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800312c:	1ad3      	subs	r3, r2, r3
 800312e:	2b02      	cmp	r3, #2
 8003130:	d901      	bls.n	8003136 <HAL_RCC_OscConfig+0x51e>
        {
          return HAL_TIMEOUT;
 8003132:	2303      	movs	r3, #3
 8003134:	e0f8      	b.n	8003328 <HAL_RCC_OscConfig+0x710>
      while (LL_RCC_HSI48_IsReady() != 0U)
 8003136:	f7ff faba 	bl	80026ae <LL_RCC_HSI48_IsReady>
 800313a:	4603      	mov	r3, r0
 800313c:	2b00      	cmp	r3, #0
 800313e:	d1f1      	bne.n	8003124 <HAL_RCC_OscConfig+0x50c>
#endif
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003144:	2b00      	cmp	r3, #0
 8003146:	f000 80ee 	beq.w	8003326 <HAL_RCC_OscConfig+0x70e>
  {
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800314a:	f7ff fc18 	bl	800297e <LL_RCC_GetSysClkSource>
 800314e:	6138      	str	r0, [r7, #16]
    const uint32_t temp_pllconfig = RCC->PLLCFGR;
 8003150:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003154:	68db      	ldr	r3, [r3, #12]
 8003156:	60fb      	str	r3, [r7, #12]
    
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800315c:	2b02      	cmp	r3, #2
 800315e:	f040 80af 	bne.w	80032c0 <HAL_RCC_OscConfig+0x6a8>
      assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
      
      /* Do nothing if PLL configuration is unchanged */
      if ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003162:	68fb      	ldr	r3, [r7, #12]
 8003164:	f003 0203 	and.w	r2, r3, #3
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800316c:	429a      	cmp	r2, r3
 800316e:	d123      	bne.n	80031b8 <HAL_RCC_OscConfig+0x5a0>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8003170:	68fb      	ldr	r3, [r7, #12]
 8003172:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	6b5b      	ldr	r3, [r3, #52]	; 0x34
      if ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800317a:	429a      	cmp	r2, r3
 800317c:	d11c      	bne.n	80031b8 <HAL_RCC_OscConfig+0x5a0>
          ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) != RCC_OscInitStruct->PLL.PLLN) ||
 800317e:	68fb      	ldr	r3, [r7, #12]
 8003180:	0a1b      	lsrs	r3, r3, #8
 8003182:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	6b9b      	ldr	r3, [r3, #56]	; 0x38
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800318a:	429a      	cmp	r2, r3
 800318c:	d114      	bne.n	80031b8 <HAL_RCC_OscConfig+0x5a0>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 800318e:	68fb      	ldr	r3, [r7, #12]
 8003190:	f403 1278 	and.w	r2, r3, #4063232	; 0x3e0000
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
          ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) != RCC_OscInitStruct->PLL.PLLN) ||
 8003198:	429a      	cmp	r2, r3
 800319a:	d10d      	bne.n	80031b8 <HAL_RCC_OscConfig+0x5a0>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 800319c:	68fb      	ldr	r3, [r7, #12]
 800319e:	f003 6260 	and.w	r2, r3, #234881024	; 0xe000000
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80031a6:	429a      	cmp	r2, r3
 80031a8:	d106      	bne.n	80031b8 <HAL_RCC_OscConfig+0x5a0>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 80031aa:	68fb      	ldr	r3, [r7, #12]
 80031ac:	f003 4260 	and.w	r2, r3, #3758096384	; 0xe0000000
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 80031b4:	429a      	cmp	r2, r3
 80031b6:	d05d      	beq.n	8003274 <HAL_RCC_OscConfig+0x65c>
      {
        /* Check if the PLL is used as system clock or not */
        if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80031b8:	693b      	ldr	r3, [r7, #16]
 80031ba:	2b0c      	cmp	r3, #12
 80031bc:	d058      	beq.n	8003270 <HAL_RCC_OscConfig+0x658>
        {
#if defined(SAI1)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if (READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 80031be:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80031c2:	681b      	ldr	r3, [r3, #0]
 80031c4:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80031c8:	2b00      	cmp	r3, #0
 80031ca:	d001      	beq.n	80031d0 <HAL_RCC_OscConfig+0x5b8>

          {
            return HAL_ERROR;
 80031cc:	2301      	movs	r3, #1
 80031ce:	e0ab      	b.n	8003328 <HAL_RCC_OscConfig+0x710>
          }
          else
#endif
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 80031d0:	f7ff fc73 	bl	8002aba <LL_RCC_PLL_Disable>
            
            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80031d4:	f7fe fda0 	bl	8001d18 <HAL_GetTick>
 80031d8:	6278      	str	r0, [r7, #36]	; 0x24
            
            /* Wait till PLL is ready */
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80031da:	e008      	b.n	80031ee <HAL_RCC_OscConfig+0x5d6>
            {
              if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80031dc:	f7fe fd9c 	bl	8001d18 <HAL_GetTick>
 80031e0:	4602      	mov	r2, r0
 80031e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031e4:	1ad3      	subs	r3, r2, r3
 80031e6:	2b02      	cmp	r3, #2
 80031e8:	d901      	bls.n	80031ee <HAL_RCC_OscConfig+0x5d6>
              {
                return HAL_TIMEOUT;
 80031ea:	2303      	movs	r3, #3
 80031ec:	e09c      	b.n	8003328 <HAL_RCC_OscConfig+0x710>
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80031ee:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80031f2:	681b      	ldr	r3, [r3, #0]
 80031f4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80031f8:	2b00      	cmp	r3, #0
 80031fa:	d1ef      	bne.n	80031dc <HAL_RCC_OscConfig+0x5c4>
              }
            }
            
            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80031fc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003200:	68da      	ldr	r2, [r3, #12]
 8003202:	4b3e      	ldr	r3, [pc, #248]	; (80032fc <HAL_RCC_OscConfig+0x6e4>)
 8003204:	4013      	ands	r3, r2
 8003206:	687a      	ldr	r2, [r7, #4]
 8003208:	6b11      	ldr	r1, [r2, #48]	; 0x30
 800320a:	687a      	ldr	r2, [r7, #4]
 800320c:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800320e:	4311      	orrs	r1, r2
 8003210:	687a      	ldr	r2, [r7, #4]
 8003212:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8003214:	0212      	lsls	r2, r2, #8
 8003216:	4311      	orrs	r1, r2
 8003218:	687a      	ldr	r2, [r7, #4]
 800321a:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 800321c:	4311      	orrs	r1, r2
 800321e:	687a      	ldr	r2, [r7, #4]
 8003220:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8003222:	4311      	orrs	r1, r2
 8003224:	687a      	ldr	r2, [r7, #4]
 8003226:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8003228:	430a      	orrs	r2, r1
 800322a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800322e:	4313      	orrs	r3, r2
 8003230:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLP,
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
            
            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8003232:	f7ff fc33 	bl	8002a9c <LL_RCC_PLL_Enable>
            
            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003236:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800323a:	68db      	ldr	r3, [r3, #12]
 800323c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003240:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003244:	60d3      	str	r3, [r2, #12]
            
            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8003246:	f7fe fd67 	bl	8001d18 <HAL_GetTick>
 800324a:	6278      	str	r0, [r7, #36]	; 0x24
            
            /* Wait till PLL is ready */
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800324c:	e008      	b.n	8003260 <HAL_RCC_OscConfig+0x648>
            {
              if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800324e:	f7fe fd63 	bl	8001d18 <HAL_GetTick>
 8003252:	4602      	mov	r2, r0
 8003254:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003256:	1ad3      	subs	r3, r2, r3
 8003258:	2b02      	cmp	r3, #2
 800325a:	d901      	bls.n	8003260 <HAL_RCC_OscConfig+0x648>
              {
                return HAL_TIMEOUT;
 800325c:	2303      	movs	r3, #3
 800325e:	e063      	b.n	8003328 <HAL_RCC_OscConfig+0x710>
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003260:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003264:	681b      	ldr	r3, [r3, #0]
 8003266:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800326a:	2b00      	cmp	r3, #0
 800326c:	d0ef      	beq.n	800324e <HAL_RCC_OscConfig+0x636>
        if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800326e:	e05a      	b.n	8003326 <HAL_RCC_OscConfig+0x70e>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8003270:	2301      	movs	r3, #1
 8003272:	e059      	b.n	8003328 <HAL_RCC_OscConfig+0x710>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003274:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003278:	681b      	ldr	r3, [r3, #0]
 800327a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800327e:	2b00      	cmp	r3, #0
 8003280:	d151      	bne.n	8003326 <HAL_RCC_OscConfig+0x70e>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8003282:	f7ff fc0b 	bl	8002a9c <LL_RCC_PLL_Enable>

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003286:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800328a:	68db      	ldr	r3, [r3, #12]
 800328c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003290:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003294:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8003296:	f7fe fd3f 	bl	8001d18 <HAL_GetTick>
 800329a:	6278      	str	r0, [r7, #36]	; 0x24

          /* Wait till PLL is ready */
          while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800329c:	e008      	b.n	80032b0 <HAL_RCC_OscConfig+0x698>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800329e:	f7fe fd3b 	bl	8001d18 <HAL_GetTick>
 80032a2:	4602      	mov	r2, r0
 80032a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032a6:	1ad3      	subs	r3, r2, r3
 80032a8:	2b02      	cmp	r3, #2
 80032aa:	d901      	bls.n	80032b0 <HAL_RCC_OscConfig+0x698>
            {
              return HAL_TIMEOUT;
 80032ac:	2303      	movs	r3, #3
 80032ae:	e03b      	b.n	8003328 <HAL_RCC_OscConfig+0x710>
          while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80032b0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80032b4:	681b      	ldr	r3, [r3, #0]
 80032b6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80032ba:	2b00      	cmp	r3, #0
 80032bc:	d0ef      	beq.n	800329e <HAL_RCC_OscConfig+0x686>
 80032be:	e032      	b.n	8003326 <HAL_RCC_OscConfig+0x70e>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80032c0:	693b      	ldr	r3, [r7, #16]
 80032c2:	2b0c      	cmp	r3, #12
 80032c4:	d02d      	beq.n	8003322 <HAL_RCC_OscConfig+0x70a>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80032c6:	f7ff fbf8 	bl	8002aba <LL_RCC_PLL_Disable>
        

        /* Disable all PLL outputs to save power */
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PLLSOURCE_NONE);
 80032ca:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80032ce:	68db      	ldr	r3, [r3, #12]
 80032d0:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80032d4:	f023 0303 	bic.w	r3, r3, #3
 80032d8:	60d3      	str	r3, [r2, #12]

#if defined(SAI1) && defined(USB)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_USBCLK | RCC_PLL_SAI1CLK);
 80032da:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80032de:	68db      	ldr	r3, [r3, #12]
 80032e0:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80032e4:	f023 5388 	bic.w	r3, r3, #285212672	; 0x11000000
 80032e8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80032ec:	60d3      	str	r3, [r2, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK);
#endif

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80032ee:	f7fe fd13 	bl	8001d18 <HAL_GetTick>
 80032f2:	6278      	str	r0, [r7, #36]	; 0x24
        
        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80032f4:	e00d      	b.n	8003312 <HAL_RCC_OscConfig+0x6fa>
 80032f6:	bf00      	nop
 80032f8:	58000400 	.word	0x58000400
 80032fc:	11c1808c 	.word	0x11c1808c
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003300:	f7fe fd0a 	bl	8001d18 <HAL_GetTick>
 8003304:	4602      	mov	r2, r0
 8003306:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003308:	1ad3      	subs	r3, r2, r3
 800330a:	2b02      	cmp	r3, #2
 800330c:	d901      	bls.n	8003312 <HAL_RCC_OscConfig+0x6fa>
          {
            return HAL_TIMEOUT;
 800330e:	2303      	movs	r3, #3
 8003310:	e00a      	b.n	8003328 <HAL_RCC_OscConfig+0x710>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003312:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003316:	681b      	ldr	r3, [r3, #0]
 8003318:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800331c:	2b00      	cmp	r3, #0
 800331e:	d1ef      	bne.n	8003300 <HAL_RCC_OscConfig+0x6e8>
 8003320:	e001      	b.n	8003326 <HAL_RCC_OscConfig+0x70e>
        }
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8003322:	2301      	movs	r3, #1
 8003324:	e000      	b.n	8003328 <HAL_RCC_OscConfig+0x710>
      }
    }
  }
  return HAL_OK;
 8003326:	2300      	movs	r3, #0
}
 8003328:	4618      	mov	r0, r3
 800332a:	3734      	adds	r7, #52	; 0x34
 800332c:	46bd      	mov	sp, r7
 800332e:	bd90      	pop	{r4, r7, pc}

08003330 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK1 not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003330:	b580      	push	{r7, lr}
 8003332:	b084      	sub	sp, #16
 8003334:	af00      	add	r7, sp, #0
 8003336:	6078      	str	r0, [r7, #4]
 8003338:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	2b00      	cmp	r3, #0
 800333e:	d101      	bne.n	8003344 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003340:	2301      	movs	r3, #1
 8003342:	e12d      	b.n	80035a0 <HAL_RCC_ClockConfig+0x270>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK4) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003344:	4b98      	ldr	r3, [pc, #608]	; (80035a8 <HAL_RCC_ClockConfig+0x278>)
 8003346:	681b      	ldr	r3, [r3, #0]
 8003348:	f003 0307 	and.w	r3, r3, #7
 800334c:	683a      	ldr	r2, [r7, #0]
 800334e:	429a      	cmp	r2, r3
 8003350:	d91b      	bls.n	800338a <HAL_RCC_ClockConfig+0x5a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003352:	4b95      	ldr	r3, [pc, #596]	; (80035a8 <HAL_RCC_ClockConfig+0x278>)
 8003354:	681b      	ldr	r3, [r3, #0]
 8003356:	f023 0207 	bic.w	r2, r3, #7
 800335a:	4993      	ldr	r1, [pc, #588]	; (80035a8 <HAL_RCC_ClockConfig+0x278>)
 800335c:	683b      	ldr	r3, [r7, #0]
 800335e:	4313      	orrs	r3, r2
 8003360:	600b      	str	r3, [r1, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003362:	f7fe fcd9 	bl	8001d18 <HAL_GetTick>
 8003366:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
       memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003368:	e008      	b.n	800337c <HAL_RCC_ClockConfig+0x4c>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 800336a:	f7fe fcd5 	bl	8001d18 <HAL_GetTick>
 800336e:	4602      	mov	r2, r0
 8003370:	68fb      	ldr	r3, [r7, #12]
 8003372:	1ad3      	subs	r3, r2, r3
 8003374:	2b02      	cmp	r3, #2
 8003376:	d901      	bls.n	800337c <HAL_RCC_ClockConfig+0x4c>
      {
        return HAL_TIMEOUT;
 8003378:	2303      	movs	r3, #3
 800337a:	e111      	b.n	80035a0 <HAL_RCC_ClockConfig+0x270>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800337c:	4b8a      	ldr	r3, [pc, #552]	; (80035a8 <HAL_RCC_ClockConfig+0x278>)
 800337e:	681b      	ldr	r3, [r3, #0]
 8003380:	f003 0307 	and.w	r3, r3, #7
 8003384:	683a      	ldr	r2, [r7, #0]
 8003386:	429a      	cmp	r2, r3
 8003388:	d1ef      	bne.n	800336a <HAL_RCC_ClockConfig+0x3a>
      }
    }
  }

  /*-------------------------- HCLK1 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	681b      	ldr	r3, [r3, #0]
 800338e:	f003 0302 	and.w	r3, r3, #2
 8003392:	2b00      	cmp	r3, #0
 8003394:	d016      	beq.n	80033c4 <HAL_RCC_ClockConfig+0x94>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLKDivider));
    LL_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLKDivider);
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	689b      	ldr	r3, [r3, #8]
 800339a:	4618      	mov	r0, r3
 800339c:	f7ff fafb 	bl	8002996 <LL_RCC_SetAHBPrescaler>

    /* HCLK1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 80033a0:	f7fe fcba 	bl	8001d18 <HAL_GetTick>
 80033a4:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 80033a6:	e008      	b.n	80033ba <HAL_RCC_ClockConfig+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 80033a8:	f7fe fcb6 	bl	8001d18 <HAL_GetTick>
 80033ac:	4602      	mov	r2, r0
 80033ae:	68fb      	ldr	r3, [r7, #12]
 80033b0:	1ad3      	subs	r3, r2, r3
 80033b2:	2b02      	cmp	r3, #2
 80033b4:	d901      	bls.n	80033ba <HAL_RCC_ClockConfig+0x8a>
      {
        return HAL_TIMEOUT;
 80033b6:	2303      	movs	r3, #3
 80033b8:	e0f2      	b.n	80035a0 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 80033ba:	f7ff fbd0 	bl	8002b5e <LL_RCC_IsActiveFlag_HPRE>
 80033be:	4603      	mov	r3, r0
 80033c0:	2b00      	cmp	r3, #0
 80033c2:	d0f1      	beq.n	80033a8 <HAL_RCC_ClockConfig+0x78>
      }
    }
  }

  /*-------------------------- HCLK2 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK2) == RCC_CLOCKTYPE_HCLK2)
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	681b      	ldr	r3, [r3, #0]
 80033c8:	f003 0320 	and.w	r3, r3, #32
 80033cc:	2b00      	cmp	r3, #0
 80033ce:	d016      	beq.n	80033fe <HAL_RCC_ClockConfig+0xce>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK2Divider));
    LL_C2_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLK2Divider);
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	695b      	ldr	r3, [r3, #20]
 80033d4:	4618      	mov	r0, r3
 80033d6:	f7ff faf2 	bl	80029be <LL_C2_RCC_SetAHBPrescaler>

    /* HCLK2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 80033da:	f7fe fc9d 	bl	8001d18 <HAL_GetTick>
 80033de:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_C2HPRE() == 0U)
 80033e0:	e008      	b.n	80033f4 <HAL_RCC_ClockConfig+0xc4>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 80033e2:	f7fe fc99 	bl	8001d18 <HAL_GetTick>
 80033e6:	4602      	mov	r2, r0
 80033e8:	68fb      	ldr	r3, [r7, #12]
 80033ea:	1ad3      	subs	r3, r2, r3
 80033ec:	2b02      	cmp	r3, #2
 80033ee:	d901      	bls.n	80033f4 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_TIMEOUT;
 80033f0:	2303      	movs	r3, #3
 80033f2:	e0d5      	b.n	80035a0 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_C2HPRE() == 0U)
 80033f4:	f7ff fbc5 	bl	8002b82 <LL_RCC_IsActiveFlag_C2HPRE>
 80033f8:	4603      	mov	r3, r0
 80033fa:	2b00      	cmp	r3, #0
 80033fc:	d0f1      	beq.n	80033e2 <HAL_RCC_ClockConfig+0xb2>
      }
    }
  }
  /*-------------------------- HCLK4 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK4) == RCC_CLOCKTYPE_HCLK4)
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	681b      	ldr	r3, [r3, #0]
 8003402:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003406:	2b00      	cmp	r3, #0
 8003408:	d016      	beq.n	8003438 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK4Divider));
    LL_RCC_SetAHB4Prescaler(RCC_ClkInitStruct->AHBCLK4Divider);
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	699b      	ldr	r3, [r3, #24]
 800340e:	4618      	mov	r0, r3
 8003410:	f7ff faeb 	bl	80029ea <LL_RCC_SetAHB4Prescaler>

    /* AHB shared prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8003414:	f7fe fc80 	bl	8001d18 <HAL_GetTick>
 8003418:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 800341a:	e008      	b.n	800342e <HAL_RCC_ClockConfig+0xfe>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 800341c:	f7fe fc7c 	bl	8001d18 <HAL_GetTick>
 8003420:	4602      	mov	r2, r0
 8003422:	68fb      	ldr	r3, [r7, #12]
 8003424:	1ad3      	subs	r3, r2, r3
 8003426:	2b02      	cmp	r3, #2
 8003428:	d901      	bls.n	800342e <HAL_RCC_ClockConfig+0xfe>
      {
        return HAL_TIMEOUT;
 800342a:	2303      	movs	r3, #3
 800342c:	e0b8      	b.n	80035a0 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 800342e:	f7ff fbbb 	bl	8002ba8 <LL_RCC_IsActiveFlag_SHDHPRE>
 8003432:	4603      	mov	r3, r0
 8003434:	2b00      	cmp	r3, #0
 8003436:	d0f1      	beq.n	800341c <HAL_RCC_ClockConfig+0xec>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	681b      	ldr	r3, [r3, #0]
 800343c:	f003 0304 	and.w	r3, r3, #4
 8003440:	2b00      	cmp	r3, #0
 8003442:	d016      	beq.n	8003472 <HAL_RCC_ClockConfig+0x142>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB1CLKDivider));
    LL_RCC_SetAPB1Prescaler(RCC_ClkInitStruct->APB1CLKDivider);
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	68db      	ldr	r3, [r3, #12]
 8003448:	4618      	mov	r0, r3
 800344a:	f7ff fae5 	bl	8002a18 <LL_RCC_SetAPB1Prescaler>

    /* APB1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 800344e:	f7fe fc63 	bl	8001d18 <HAL_GetTick>
 8003452:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 8003454:	e008      	b.n	8003468 <HAL_RCC_ClockConfig+0x138>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8003456:	f7fe fc5f 	bl	8001d18 <HAL_GetTick>
 800345a:	4602      	mov	r2, r0
 800345c:	68fb      	ldr	r3, [r7, #12]
 800345e:	1ad3      	subs	r3, r2, r3
 8003460:	2b02      	cmp	r3, #2
 8003462:	d901      	bls.n	8003468 <HAL_RCC_ClockConfig+0x138>
      {
        return HAL_TIMEOUT;
 8003464:	2303      	movs	r3, #3
 8003466:	e09b      	b.n	80035a0 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 8003468:	f7ff fbb1 	bl	8002bce <LL_RCC_IsActiveFlag_PPRE1>
 800346c:	4603      	mov	r3, r0
 800346e:	2b00      	cmp	r3, #0
 8003470:	d0f1      	beq.n	8003456 <HAL_RCC_ClockConfig+0x126>
      }
    }
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	681b      	ldr	r3, [r3, #0]
 8003476:	f003 0308 	and.w	r3, r3, #8
 800347a:	2b00      	cmp	r3, #0
 800347c:	d017      	beq.n	80034ae <HAL_RCC_ClockConfig+0x17e>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB2CLKDivider));
    LL_RCC_SetAPB2Prescaler((RCC_ClkInitStruct->APB2CLKDivider) << 3U);
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	691b      	ldr	r3, [r3, #16]
 8003482:	00db      	lsls	r3, r3, #3
 8003484:	4618      	mov	r0, r3
 8003486:	f7ff fadb 	bl	8002a40 <LL_RCC_SetAPB2Prescaler>

    /* APB2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 800348a:	f7fe fc45 	bl	8001d18 <HAL_GetTick>
 800348e:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 8003490:	e008      	b.n	80034a4 <HAL_RCC_ClockConfig+0x174>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8003492:	f7fe fc41 	bl	8001d18 <HAL_GetTick>
 8003496:	4602      	mov	r2, r0
 8003498:	68fb      	ldr	r3, [r7, #12]
 800349a:	1ad3      	subs	r3, r2, r3
 800349c:	2b02      	cmp	r3, #2
 800349e:	d901      	bls.n	80034a4 <HAL_RCC_ClockConfig+0x174>
      {
        return HAL_TIMEOUT;
 80034a0:	2303      	movs	r3, #3
 80034a2:	e07d      	b.n	80035a0 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 80034a4:	f7ff fba5 	bl	8002bf2 <LL_RCC_IsActiveFlag_PPRE2>
 80034a8:	4603      	mov	r3, r0
 80034aa:	2b00      	cmp	r3, #0
 80034ac:	d0f1      	beq.n	8003492 <HAL_RCC_ClockConfig+0x162>
      }
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	681b      	ldr	r3, [r3, #0]
 80034b2:	f003 0301 	and.w	r3, r3, #1
 80034b6:	2b00      	cmp	r3, #0
 80034b8:	d043      	beq.n	8003542 <HAL_RCC_ClockConfig+0x212>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	685b      	ldr	r3, [r3, #4]
 80034be:	2b02      	cmp	r3, #2
 80034c0:	d106      	bne.n	80034d0 <HAL_RCC_ClockConfig+0x1a0>
    {
      /* Check the HSE ready flag */
      if (LL_RCC_HSE_IsReady() == 0U)
 80034c2:	f7ff f87b 	bl	80025bc <LL_RCC_HSE_IsReady>
 80034c6:	4603      	mov	r3, r0
 80034c8:	2b00      	cmp	r3, #0
 80034ca:	d11e      	bne.n	800350a <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 80034cc:	2301      	movs	r3, #1
 80034ce:	e067      	b.n	80035a0 <HAL_RCC_ClockConfig+0x270>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	685b      	ldr	r3, [r3, #4]
 80034d4:	2b03      	cmp	r3, #3
 80034d6:	d106      	bne.n	80034e6 <HAL_RCC_ClockConfig+0x1b6>
    {
      /* Check the PLL ready flag */
      if (LL_RCC_PLL_IsReady() == 0U)
 80034d8:	f7ff fafe 	bl	8002ad8 <LL_RCC_PLL_IsReady>
 80034dc:	4603      	mov	r3, r0
 80034de:	2b00      	cmp	r3, #0
 80034e0:	d113      	bne.n	800350a <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 80034e2:	2301      	movs	r3, #1
 80034e4:	e05c      	b.n	80035a0 <HAL_RCC_ClockConfig+0x270>
      }
    }
    /* MSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	685b      	ldr	r3, [r3, #4]
 80034ea:	2b00      	cmp	r3, #0
 80034ec:	d106      	bne.n	80034fc <HAL_RCC_ClockConfig+0x1cc>
    {
      /* Check the MSI ready flag */
      if (LL_RCC_MSI_IsReady() == 0U)
 80034ee:	f7ff f9e3 	bl	80028b8 <LL_RCC_MSI_IsReady>
 80034f2:	4603      	mov	r3, r0
 80034f4:	2b00      	cmp	r3, #0
 80034f6:	d108      	bne.n	800350a <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 80034f8:	2301      	movs	r3, #1
 80034fa:	e051      	b.n	80035a0 <HAL_RCC_ClockConfig+0x270>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (LL_RCC_HSI_IsReady() == 0U)
 80034fc:	f7ff f88e 	bl	800261c <LL_RCC_HSI_IsReady>
 8003500:	4603      	mov	r3, r0
 8003502:	2b00      	cmp	r3, #0
 8003504:	d101      	bne.n	800350a <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8003506:	2301      	movs	r3, #1
 8003508:	e04a      	b.n	80035a0 <HAL_RCC_ClockConfig+0x270>
      }

    }

    /* apply system clock switch */
    LL_RCC_SetSysClkSource(RCC_ClkInitStruct->SYSCLKSource);
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	685b      	ldr	r3, [r3, #4]
 800350e:	4618      	mov	r0, r3
 8003510:	f7ff fa21 	bl	8002956 <LL_RCC_SetSysClkSource>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003514:	f7fe fc00 	bl	8001d18 <HAL_GetTick>
 8003518:	60f8      	str	r0, [r7, #12]

    /* check system clock source switch status */
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800351a:	e00a      	b.n	8003532 <HAL_RCC_ClockConfig+0x202>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800351c:	f7fe fbfc 	bl	8001d18 <HAL_GetTick>
 8003520:	4602      	mov	r2, r0
 8003522:	68fb      	ldr	r3, [r7, #12]
 8003524:	1ad3      	subs	r3, r2, r3
 8003526:	f241 3288 	movw	r2, #5000	; 0x1388
 800352a:	4293      	cmp	r3, r2
 800352c:	d901      	bls.n	8003532 <HAL_RCC_ClockConfig+0x202>
      {
        return HAL_TIMEOUT;
 800352e:	2303      	movs	r3, #3
 8003530:	e036      	b.n	80035a0 <HAL_RCC_ClockConfig+0x270>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003532:	f7ff fa24 	bl	800297e <LL_RCC_GetSysClkSource>
 8003536:	4602      	mov	r2, r0
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	685b      	ldr	r3, [r3, #4]
 800353c:	009b      	lsls	r3, r3, #2
 800353e:	429a      	cmp	r2, r3
 8003540:	d1ec      	bne.n	800351c <HAL_RCC_ClockConfig+0x1ec>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003542:	4b19      	ldr	r3, [pc, #100]	; (80035a8 <HAL_RCC_ClockConfig+0x278>)
 8003544:	681b      	ldr	r3, [r3, #0]
 8003546:	f003 0307 	and.w	r3, r3, #7
 800354a:	683a      	ldr	r2, [r7, #0]
 800354c:	429a      	cmp	r2, r3
 800354e:	d21b      	bcs.n	8003588 <HAL_RCC_ClockConfig+0x258>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003550:	4b15      	ldr	r3, [pc, #84]	; (80035a8 <HAL_RCC_ClockConfig+0x278>)
 8003552:	681b      	ldr	r3, [r3, #0]
 8003554:	f023 0207 	bic.w	r2, r3, #7
 8003558:	4913      	ldr	r1, [pc, #76]	; (80035a8 <HAL_RCC_ClockConfig+0x278>)
 800355a:	683b      	ldr	r3, [r7, #0]
 800355c:	4313      	orrs	r3, r2
 800355e:	600b      	str	r3, [r1, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003560:	f7fe fbda 	bl	8001d18 <HAL_GetTick>
 8003564:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003566:	e008      	b.n	800357a <HAL_RCC_ClockConfig+0x24a>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8003568:	f7fe fbd6 	bl	8001d18 <HAL_GetTick>
 800356c:	4602      	mov	r2, r0
 800356e:	68fb      	ldr	r3, [r7, #12]
 8003570:	1ad3      	subs	r3, r2, r3
 8003572:	2b02      	cmp	r3, #2
 8003574:	d901      	bls.n	800357a <HAL_RCC_ClockConfig+0x24a>
      {
        return HAL_TIMEOUT;
 8003576:	2303      	movs	r3, #3
 8003578:	e012      	b.n	80035a0 <HAL_RCC_ClockConfig+0x270>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800357a:	4b0b      	ldr	r3, [pc, #44]	; (80035a8 <HAL_RCC_ClockConfig+0x278>)
 800357c:	681b      	ldr	r3, [r3, #0]
 800357e:	f003 0307 	and.w	r3, r3, #7
 8003582:	683a      	ldr	r2, [r7, #0]
 8003584:	429a      	cmp	r2, r3
 8003586:	d1ef      	bne.n	8003568 <HAL_RCC_ClockConfig+0x238>
  }

  /*---------------------------------------------------------------------------*/

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetHCLKFreq();
 8003588:	f000 f87e 	bl	8003688 <HAL_RCC_GetHCLKFreq>
 800358c:	4603      	mov	r3, r0
 800358e:	4a07      	ldr	r2, [pc, #28]	; (80035ac <HAL_RCC_ClockConfig+0x27c>)
 8003590:	6013      	str	r3, [r2, #0]
  
  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(HAL_GetTickPrio());
 8003592:	f7fe fbcd 	bl	8001d30 <HAL_GetTickPrio>
 8003596:	4603      	mov	r3, r0
 8003598:	4618      	mov	r0, r3
 800359a:	f7fe fb6f 	bl	8001c7c <HAL_InitTick>
 800359e:	4603      	mov	r3, r0
}
 80035a0:	4618      	mov	r0, r3
 80035a2:	3710      	adds	r7, #16
 80035a4:	46bd      	mov	sp, r7
 80035a6:	bd80      	pop	{r7, pc}
 80035a8:	58004000 	.word	0x58004000
 80035ac:	20000004 	.word	0x20000004

080035b0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80035b0:	b590      	push	{r4, r7, lr}
 80035b2:	b085      	sub	sp, #20
 80035b4:	af00      	add	r7, sp, #0
  uint32_t pllsource;
  uint32_t sysclockfreq, pllinputfreq;
  const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80035b6:	f7ff f9e2 	bl	800297e <LL_RCC_GetSysClkSource>
 80035ba:	6078      	str	r0, [r7, #4]

  if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_MSI)
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	2b00      	cmp	r3, #0
 80035c0:	d10a      	bne.n	80035d8 <HAL_RCC_GetSysClockFreq+0x28>
  {
    /* Retrieve MSI frequency range in HZ*/
    /* MSI used as system clock source */
    sysclockfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_GetRange());
 80035c2:	f7ff f99e 	bl	8002902 <LL_RCC_MSI_GetRange>
 80035c6:	4603      	mov	r3, r0
 80035c8:	091b      	lsrs	r3, r3, #4
 80035ca:	f003 030f 	and.w	r3, r3, #15
 80035ce:	4a2b      	ldr	r2, [pc, #172]	; (800367c <HAL_RCC_GetSysClockFreq+0xcc>)
 80035d0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80035d4:	60fb      	str	r3, [r7, #12]
 80035d6:	e04b      	b.n	8003670 <HAL_RCC_GetSysClockFreq+0xc0>
  }
  else if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	2b04      	cmp	r3, #4
 80035dc:	d102      	bne.n	80035e4 <HAL_RCC_GetSysClockFreq+0x34>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80035de:	4b28      	ldr	r3, [pc, #160]	; (8003680 <HAL_RCC_GetSysClockFreq+0xd0>)
 80035e0:	60fb      	str	r3, [r7, #12]
 80035e2:	e045      	b.n	8003670 <HAL_RCC_GetSysClockFreq+0xc0>
  }
  else if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE)
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	2b08      	cmp	r3, #8
 80035e8:	d10a      	bne.n	8003600 <HAL_RCC_GetSysClockFreq+0x50>
  {
    /* HSE used as system clock source */
    if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 80035ea:	f7fe ffb7 	bl	800255c <LL_RCC_HSE_IsEnabledDiv2>
 80035ee:	4603      	mov	r3, r0
 80035f0:	2b01      	cmp	r3, #1
 80035f2:	d102      	bne.n	80035fa <HAL_RCC_GetSysClockFreq+0x4a>
    {
      sysclockfreq = HSE_VALUE / 2U;
 80035f4:	4b22      	ldr	r3, [pc, #136]	; (8003680 <HAL_RCC_GetSysClockFreq+0xd0>)
 80035f6:	60fb      	str	r3, [r7, #12]
 80035f8:	e03a      	b.n	8003670 <HAL_RCC_GetSysClockFreq+0xc0>
    }
    else
    {
      sysclockfreq = HSE_VALUE;
 80035fa:	4b22      	ldr	r3, [pc, #136]	; (8003684 <HAL_RCC_GetSysClockFreq+0xd4>)
 80035fc:	60fb      	str	r3, [r7, #12]
 80035fe:	e037      	b.n	8003670 <HAL_RCC_GetSysClockFreq+0xc0>
    }
  }
  else
  {
    /* PLL used as system clock  source */
    pllsource = LL_RCC_PLL_GetMainSource();
 8003600:	f7ff faa1 	bl	8002b46 <LL_RCC_PLL_GetMainSource>
 8003604:	6038      	str	r0, [r7, #0]
    switch (pllsource)
 8003606:	683b      	ldr	r3, [r7, #0]
 8003608:	2b02      	cmp	r3, #2
 800360a:	d003      	beq.n	8003614 <HAL_RCC_GetSysClockFreq+0x64>
 800360c:	683b      	ldr	r3, [r7, #0]
 800360e:	2b03      	cmp	r3, #3
 8003610:	d003      	beq.n	800361a <HAL_RCC_GetSysClockFreq+0x6a>
 8003612:	e00d      	b.n	8003630 <HAL_RCC_GetSysClockFreq+0x80>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
        pllinputfreq = HSI_VALUE;
 8003614:	4b1a      	ldr	r3, [pc, #104]	; (8003680 <HAL_RCC_GetSysClockFreq+0xd0>)
 8003616:	60bb      	str	r3, [r7, #8]
        break;
 8003618:	e015      	b.n	8003646 <HAL_RCC_GetSysClockFreq+0x96>
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 800361a:	f7fe ff9f 	bl	800255c <LL_RCC_HSE_IsEnabledDiv2>
 800361e:	4603      	mov	r3, r0
 8003620:	2b01      	cmp	r3, #1
 8003622:	d102      	bne.n	800362a <HAL_RCC_GetSysClockFreq+0x7a>
        {
          pllinputfreq = HSE_VALUE / 2U;
 8003624:	4b16      	ldr	r3, [pc, #88]	; (8003680 <HAL_RCC_GetSysClockFreq+0xd0>)
 8003626:	60bb      	str	r3, [r7, #8]
        }
        else
        {
          pllinputfreq = HSE_VALUE;
        }
        break;
 8003628:	e00d      	b.n	8003646 <HAL_RCC_GetSysClockFreq+0x96>
          pllinputfreq = HSE_VALUE;
 800362a:	4b16      	ldr	r3, [pc, #88]	; (8003684 <HAL_RCC_GetSysClockFreq+0xd4>)
 800362c:	60bb      	str	r3, [r7, #8]
        break;
 800362e:	e00a      	b.n	8003646 <HAL_RCC_GetSysClockFreq+0x96>
      case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      default:
        pllinputfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_GetRange());
 8003630:	f7ff f967 	bl	8002902 <LL_RCC_MSI_GetRange>
 8003634:	4603      	mov	r3, r0
 8003636:	091b      	lsrs	r3, r3, #4
 8003638:	f003 030f 	and.w	r3, r3, #15
 800363c:	4a0f      	ldr	r2, [pc, #60]	; (800367c <HAL_RCC_GetSysClockFreq+0xcc>)
 800363e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003642:	60bb      	str	r3, [r7, #8]
        break;
 8003644:	bf00      	nop
    }
    sysclockfreq = __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(), LL_RCC_PLL_GetN(), LL_RCC_PLL_GetR());
 8003646:	f7ff fa59 	bl	8002afc <LL_RCC_PLL_GetN>
 800364a:	4602      	mov	r2, r0
 800364c:	68bb      	ldr	r3, [r7, #8]
 800364e:	fb03 f402 	mul.w	r4, r3, r2
 8003652:	f7ff fa6c 	bl	8002b2e <LL_RCC_PLL_GetDivider>
 8003656:	4603      	mov	r3, r0
 8003658:	091b      	lsrs	r3, r3, #4
 800365a:	3301      	adds	r3, #1
 800365c:	fbb4 f4f3 	udiv	r4, r4, r3
 8003660:	f7ff fa59 	bl	8002b16 <LL_RCC_PLL_GetR>
 8003664:	4603      	mov	r3, r0
 8003666:	0f5b      	lsrs	r3, r3, #29
 8003668:	3301      	adds	r3, #1
 800366a:	fbb4 f3f3 	udiv	r3, r4, r3
 800366e:	60fb      	str	r3, [r7, #12]
  }

  return sysclockfreq;
 8003670:	68fb      	ldr	r3, [r7, #12]
}
 8003672:	4618      	mov	r0, r3
 8003674:	3714      	adds	r7, #20
 8003676:	46bd      	mov	sp, r7
 8003678:	bd90      	pop	{r4, r7, pc}
 800367a:	bf00      	nop
 800367c:	08007364 	.word	0x08007364
 8003680:	00f42400 	.word	0x00f42400
 8003684:	01e84800 	.word	0x01e84800

08003688 <HAL_RCC_GetHCLKFreq>:
/**
  * @brief  Return the HCLK frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003688:	b598      	push	{r3, r4, r7, lr}
 800368a:	af00      	add	r7, sp, #0
  /* Get SysClock and Compute HCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_HCLK1_FREQ(HAL_RCC_GetSysClockFreq(), LL_RCC_GetAHBPrescaler())));
 800368c:	f7ff ff90 	bl	80035b0 <HAL_RCC_GetSysClockFreq>
 8003690:	4604      	mov	r4, r0
 8003692:	f7ff f9e9 	bl	8002a68 <LL_RCC_GetAHBPrescaler>
 8003696:	4603      	mov	r3, r0
 8003698:	091b      	lsrs	r3, r3, #4
 800369a:	f003 030f 	and.w	r3, r3, #15
 800369e:	4a03      	ldr	r2, [pc, #12]	; (80036ac <HAL_RCC_GetHCLKFreq+0x24>)
 80036a0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80036a4:	fbb4 f3f3 	udiv	r3, r4, r3
}
 80036a8:	4618      	mov	r0, r3
 80036aa:	bd98      	pop	{r3, r4, r7, pc}
 80036ac:	08007324 	.word	0x08007324

080036b0 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  MSI_Range  MSI range value from @ref RCC_MSIRANGE_0 to @ref RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t MSI_Range)
{
 80036b0:	b590      	push	{r4, r7, lr}
 80036b2:	b085      	sub	sp, #20
 80036b4:	af00      	add	r7, sp, #0
 80036b6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RCC_MSI_CLOCK_RANGE(MSI_Range));

  /* MSI frequency range in Hz */
  if (MSI_Range > RCC_MSIRANGE_11)
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	2bb0      	cmp	r3, #176	; 0xb0
 80036bc:	d903      	bls.n	80036c6 <RCC_SetFlashLatencyFromMSIRange+0x16>
  {
    msifreq = __LL_RCC_CALC_MSI_FREQ(RCC_MSIRANGE_11);
 80036be:	4b15      	ldr	r3, [pc, #84]	; (8003714 <RCC_SetFlashLatencyFromMSIRange+0x64>)
 80036c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80036c2:	60fb      	str	r3, [r7, #12]
 80036c4:	e007      	b.n	80036d6 <RCC_SetFlashLatencyFromMSIRange+0x26>
  }
  else
  {
    msifreq = __LL_RCC_CALC_MSI_FREQ(MSI_Range);
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	091b      	lsrs	r3, r3, #4
 80036ca:	f003 030f 	and.w	r3, r3, #15
 80036ce:	4a11      	ldr	r2, [pc, #68]	; (8003714 <RCC_SetFlashLatencyFromMSIRange+0x64>)
 80036d0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80036d4:	60fb      	str	r3, [r7, #12]
  }

  flash_clksrcfreq = __LL_RCC_CALC_HCLK4_FREQ(msifreq, LL_RCC_GetAHB4Prescaler());
 80036d6:	f7ff f9d3 	bl	8002a80 <LL_RCC_GetAHB4Prescaler>
 80036da:	4603      	mov	r3, r0
 80036dc:	091b      	lsrs	r3, r3, #4
 80036de:	f003 030f 	and.w	r3, r3, #15
 80036e2:	4a0d      	ldr	r2, [pc, #52]	; (8003718 <RCC_SetFlashLatencyFromMSIRange+0x68>)
 80036e4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80036e8:	68fa      	ldr	r2, [r7, #12]
 80036ea:	fbb2 f3f3 	udiv	r3, r2, r3
 80036ee:	60bb      	str	r3, [r7, #8]

#if defined(PWR_CR1_VOS)
  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), HAL_PWREx_GetVoltageRange());
 80036f0:	68bb      	ldr	r3, [r7, #8]
 80036f2:	4a0a      	ldr	r2, [pc, #40]	; (800371c <RCC_SetFlashLatencyFromMSIRange+0x6c>)
 80036f4:	fba2 2303 	umull	r2, r3, r2, r3
 80036f8:	0c9c      	lsrs	r4, r3, #18
 80036fa:	f7fe ff21 	bl	8002540 <HAL_PWREx_GetVoltageRange>
 80036fe:	4603      	mov	r3, r0
 8003700:	4619      	mov	r1, r3
 8003702:	4620      	mov	r0, r4
 8003704:	f000 f80c 	bl	8003720 <RCC_SetFlashLatency>
 8003708:	4603      	mov	r3, r0
#else
  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), PWR_REGULATOR_VOLTAGE_SCALE1);
#endif
}
 800370a:	4618      	mov	r0, r3
 800370c:	3714      	adds	r7, #20
 800370e:	46bd      	mov	sp, r7
 8003710:	bd90      	pop	{r4, r7, pc}
 8003712:	bf00      	nop
 8003714:	08007364 	.word	0x08007364
 8003718:	08007324 	.word	0x08007324
 800371c:	431bde83 	.word	0x431bde83

08003720 <RCC_SetFlashLatency>:
  * @param  Flash_ClkSrcFreq  Flash Clock Source (in MHz)
  * @param  VCORE_Voltage     Current Vcore voltage (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2)
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatency(uint32_t Flash_ClkSrcFreq, uint32_t VCORE_Voltage)
{
 8003720:	b590      	push	{r4, r7, lr}
 8003722:	b093      	sub	sp, #76	; 0x4c
 8003724:	af00      	add	r7, sp, #0
 8003726:	6078      	str	r0, [r7, #4]
 8003728:	6039      	str	r1, [r7, #0]
  /* Flash Clock source (HCLK4) range in MHz with a VCORE is range1 */
  const uint32_t FLASH_CLK_SRC_RANGE_VOS1[] = {18UL, 36UL, 54UL, 64UL};
 800372a:	4b39      	ldr	r3, [pc, #228]	; (8003810 <RCC_SetFlashLatency+0xf0>)
 800372c:	f107 0428 	add.w	r4, r7, #40	; 0x28
 8003730:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8003732:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(PWR_CR1_VOS)
  /* Flash Clock source (HCLK4) range in MHz with a VCORE is range2 */
  const uint32_t FLASH_CLK_SRC_RANGE_VOS2[] = {6UL, 12UL, 16UL};
 8003736:	4a37      	ldr	r2, [pc, #220]	; (8003814 <RCC_SetFlashLatency+0xf4>)
 8003738:	f107 031c 	add.w	r3, r7, #28
 800373c:	ca07      	ldmia	r2, {r0, r1, r2}
 800373e:	e883 0007 	stmia.w	r3, {r0, r1, r2}
#endif
  /* Flash Latency range */
  const uint32_t FLASH_LATENCY_RANGE[] = {FLASH_LATENCY_0, FLASH_LATENCY_1, FLASH_LATENCY_2, FLASH_LATENCY_3};
 8003742:	4b35      	ldr	r3, [pc, #212]	; (8003818 <RCC_SetFlashLatency+0xf8>)
 8003744:	f107 040c 	add.w	r4, r7, #12
 8003748:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800374a:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  uint32_t latency   = FLASH_LATENCY_0;  /* default value 0WS */
 800374e:	2300      	movs	r3, #0
 8003750:	647b      	str	r3, [r7, #68]	; 0x44
  uint32_t tickstart;

#if defined(PWR_CR1_VOS)
  if (VCORE_Voltage == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003752:	683b      	ldr	r3, [r7, #0]
 8003754:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003758:	d11c      	bne.n	8003794 <RCC_SetFlashLatency+0x74>
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 800375a:	2300      	movs	r3, #0
 800375c:	643b      	str	r3, [r7, #64]	; 0x40
 800375e:	e015      	b.n	800378c <RCC_SetFlashLatency+0x6c>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS1[index])
 8003760:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003762:	009b      	lsls	r3, r3, #2
 8003764:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8003768:	4413      	add	r3, r2
 800376a:	f853 3c20 	ldr.w	r3, [r3, #-32]
 800376e:	687a      	ldr	r2, [r7, #4]
 8003770:	429a      	cmp	r2, r3
 8003772:	d808      	bhi.n	8003786 <RCC_SetFlashLatency+0x66>
      {
        latency = FLASH_LATENCY_RANGE[index];
 8003774:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003776:	009b      	lsls	r3, r3, #2
 8003778:	f107 0248 	add.w	r2, r7, #72	; 0x48
 800377c:	4413      	add	r3, r2
 800377e:	f853 3c3c 	ldr.w	r3, [r3, #-60]
 8003782:	647b      	str	r3, [r7, #68]	; 0x44
        break;
 8003784:	e022      	b.n	80037cc <RCC_SetFlashLatency+0xac>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 8003786:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003788:	3301      	adds	r3, #1
 800378a:	643b      	str	r3, [r7, #64]	; 0x40
 800378c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800378e:	2b03      	cmp	r3, #3
 8003790:	d9e6      	bls.n	8003760 <RCC_SetFlashLatency+0x40>
 8003792:	e01b      	b.n	80037cc <RCC_SetFlashLatency+0xac>
      }
    }
  }
  else  /* PWR_REGULATOR_VOLTAGE_SCALE2 */
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 8003794:	2300      	movs	r3, #0
 8003796:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003798:	e015      	b.n	80037c6 <RCC_SetFlashLatency+0xa6>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS2[index])
 800379a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800379c:	009b      	lsls	r3, r3, #2
 800379e:	f107 0248 	add.w	r2, r7, #72	; 0x48
 80037a2:	4413      	add	r3, r2
 80037a4:	f853 3c2c 	ldr.w	r3, [r3, #-44]
 80037a8:	687a      	ldr	r2, [r7, #4]
 80037aa:	429a      	cmp	r2, r3
 80037ac:	d808      	bhi.n	80037c0 <RCC_SetFlashLatency+0xa0>
      {
        latency = FLASH_LATENCY_RANGE[index];
 80037ae:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80037b0:	009b      	lsls	r3, r3, #2
 80037b2:	f107 0248 	add.w	r2, r7, #72	; 0x48
 80037b6:	4413      	add	r3, r2
 80037b8:	f853 3c3c 	ldr.w	r3, [r3, #-60]
 80037bc:	647b      	str	r3, [r7, #68]	; 0x44
        break;
 80037be:	e005      	b.n	80037cc <RCC_SetFlashLatency+0xac>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 80037c0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80037c2:	3301      	adds	r3, #1
 80037c4:	63fb      	str	r3, [r7, #60]	; 0x3c
 80037c6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80037c8:	2b02      	cmp	r3, #2
 80037ca:	d9e6      	bls.n	800379a <RCC_SetFlashLatency+0x7a>
      break;
    }
  }
#endif

  __HAL_FLASH_SET_LATENCY(latency);
 80037cc:	4b13      	ldr	r3, [pc, #76]	; (800381c <RCC_SetFlashLatency+0xfc>)
 80037ce:	681b      	ldr	r3, [r3, #0]
 80037d0:	f023 0207 	bic.w	r2, r3, #7
 80037d4:	4911      	ldr	r1, [pc, #68]	; (800381c <RCC_SetFlashLatency+0xfc>)
 80037d6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80037d8:	4313      	orrs	r3, r2
 80037da:	600b      	str	r3, [r1, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 80037dc:	f7fe fa9c 	bl	8001d18 <HAL_GetTick>
 80037e0:	63b8      	str	r0, [r7, #56]	; 0x38

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  while (__HAL_FLASH_GET_LATENCY() != latency)
 80037e2:	e008      	b.n	80037f6 <RCC_SetFlashLatency+0xd6>
  {
    if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 80037e4:	f7fe fa98 	bl	8001d18 <HAL_GetTick>
 80037e8:	4602      	mov	r2, r0
 80037ea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80037ec:	1ad3      	subs	r3, r2, r3
 80037ee:	2b02      	cmp	r3, #2
 80037f0:	d901      	bls.n	80037f6 <RCC_SetFlashLatency+0xd6>
    {
      return HAL_TIMEOUT;
 80037f2:	2303      	movs	r3, #3
 80037f4:	e007      	b.n	8003806 <RCC_SetFlashLatency+0xe6>
  while (__HAL_FLASH_GET_LATENCY() != latency)
 80037f6:	4b09      	ldr	r3, [pc, #36]	; (800381c <RCC_SetFlashLatency+0xfc>)
 80037f8:	681b      	ldr	r3, [r3, #0]
 80037fa:	f003 0307 	and.w	r3, r3, #7
 80037fe:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8003800:	429a      	cmp	r2, r3
 8003802:	d1ef      	bne.n	80037e4 <RCC_SetFlashLatency+0xc4>
    }
  }
  return HAL_OK;
 8003804:	2300      	movs	r3, #0
}
 8003806:	4618      	mov	r0, r3
 8003808:	374c      	adds	r7, #76	; 0x4c
 800380a:	46bd      	mov	sp, r7
 800380c:	bd90      	pop	{r4, r7, pc}
 800380e:	bf00      	nop
 8003810:	08007174 	.word	0x08007174
 8003814:	08007184 	.word	0x08007184
 8003818:	08007190 	.word	0x08007190
 800381c:	58004000 	.word	0x58004000

08003820 <LL_RCC_LSE_IsEnabled>:
{
 8003820:	b480      	push	{r7}
 8003822:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSEON) == (RCC_BDCR_LSEON)) ? 1UL : 0UL);
 8003824:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003828:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800382c:	f003 0301 	and.w	r3, r3, #1
 8003830:	2b01      	cmp	r3, #1
 8003832:	d101      	bne.n	8003838 <LL_RCC_LSE_IsEnabled+0x18>
 8003834:	2301      	movs	r3, #1
 8003836:	e000      	b.n	800383a <LL_RCC_LSE_IsEnabled+0x1a>
 8003838:	2300      	movs	r3, #0
}
 800383a:	4618      	mov	r0, r3
 800383c:	46bd      	mov	sp, r7
 800383e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003842:	4770      	bx	lr

08003844 <LL_RCC_LSE_IsReady>:
{
 8003844:	b480      	push	{r7}
 8003846:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 8003848:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800384c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003850:	f003 0302 	and.w	r3, r3, #2
 8003854:	2b02      	cmp	r3, #2
 8003856:	d101      	bne.n	800385c <LL_RCC_LSE_IsReady+0x18>
 8003858:	2301      	movs	r3, #1
 800385a:	e000      	b.n	800385e <LL_RCC_LSE_IsReady+0x1a>
 800385c:	2300      	movs	r3, #0
}
 800385e:	4618      	mov	r0, r3
 8003860:	46bd      	mov	sp, r7
 8003862:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003866:	4770      	bx	lr

08003868 <LL_RCC_SetRFWKPClockSource>:
{
 8003868:	b480      	push	{r7}
 800386a:	b083      	sub	sp, #12
 800386c:	af00      	add	r7, sp, #0
 800386e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CSR, RCC_CSR_RFWKPSEL, Source);
 8003870:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003874:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003878:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800387c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	4313      	orrs	r3, r2
 8003884:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
}
 8003888:	bf00      	nop
 800388a:	370c      	adds	r7, #12
 800388c:	46bd      	mov	sp, r7
 800388e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003892:	4770      	bx	lr

08003894 <LL_RCC_SetSMPSClockSource>:
{
 8003894:	b480      	push	{r7}
 8003896:	b083      	sub	sp, #12
 8003898:	af00      	add	r7, sp, #0
 800389a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->SMPSCR, RCC_SMPSCR_SMPSSEL, SMPSSource);
 800389c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80038a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038a2:	f023 0203 	bic.w	r2, r3, #3
 80038a6:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	4313      	orrs	r3, r2
 80038ae:	624b      	str	r3, [r1, #36]	; 0x24
}
 80038b0:	bf00      	nop
 80038b2:	370c      	adds	r7, #12
 80038b4:	46bd      	mov	sp, r7
 80038b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038ba:	4770      	bx	lr

080038bc <LL_RCC_SetSMPSPrescaler>:
{
 80038bc:	b480      	push	{r7}
 80038be:	b083      	sub	sp, #12
 80038c0:	af00      	add	r7, sp, #0
 80038c2:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->SMPSCR, RCC_SMPSCR_SMPSDIV, Prescaler);
 80038c4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80038c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038ca:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80038ce:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	4313      	orrs	r3, r2
 80038d6:	624b      	str	r3, [r1, #36]	; 0x24
}
 80038d8:	bf00      	nop
 80038da:	370c      	adds	r7, #12
 80038dc:	46bd      	mov	sp, r7
 80038de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038e2:	4770      	bx	lr

080038e4 <LL_RCC_SetUSARTClockSource>:
{
 80038e4:	b480      	push	{r7}
 80038e6:	b083      	sub	sp, #12
 80038e8:	af00      	add	r7, sp, #0
 80038ea:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_USART1SEL, USARTxSource);
 80038ec:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80038f0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80038f4:	f023 0203 	bic.w	r2, r3, #3
 80038f8:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	4313      	orrs	r3, r2
 8003900:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8003904:	bf00      	nop
 8003906:	370c      	adds	r7, #12
 8003908:	46bd      	mov	sp, r7
 800390a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800390e:	4770      	bx	lr

08003910 <LL_RCC_SetLPUARTClockSource>:
{
 8003910:	b480      	push	{r7}
 8003912:	b083      	sub	sp, #12
 8003914:	af00      	add	r7, sp, #0
 8003916:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_LPUART1SEL, LPUARTxSource);
 8003918:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800391c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003920:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8003924:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	4313      	orrs	r3, r2
 800392c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8003930:	bf00      	nop
 8003932:	370c      	adds	r7, #12
 8003934:	46bd      	mov	sp, r7
 8003936:	f85d 7b04 	ldr.w	r7, [sp], #4
 800393a:	4770      	bx	lr

0800393c <LL_RCC_SetI2CClockSource>:
{
 800393c:	b480      	push	{r7}
 800393e:	b083      	sub	sp, #12
 8003940:	af00      	add	r7, sp, #0
 8003942:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, ((I2CxSource >> 4) & 0x000FF000U), ((I2CxSource << 4) & 0x000FF000U));
 8003944:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003948:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	091b      	lsrs	r3, r3, #4
 8003950:	f403 237f 	and.w	r3, r3, #1044480	; 0xff000
 8003954:	43db      	mvns	r3, r3
 8003956:	401a      	ands	r2, r3
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	011b      	lsls	r3, r3, #4
 800395c:	f403 237f 	and.w	r3, r3, #1044480	; 0xff000
 8003960:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003964:	4313      	orrs	r3, r2
 8003966:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 800396a:	bf00      	nop
 800396c:	370c      	adds	r7, #12
 800396e:	46bd      	mov	sp, r7
 8003970:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003974:	4770      	bx	lr

08003976 <LL_RCC_SetLPTIMClockSource>:
{
 8003976:	b480      	push	{r7}
 8003978:	b083      	sub	sp, #12
 800397a:	af00      	add	r7, sp, #0
 800397c:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, (LPTIMxSource & 0xFFFF0000U), (LPTIMxSource << 16));
 800397e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003982:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	0c1b      	lsrs	r3, r3, #16
 800398a:	041b      	lsls	r3, r3, #16
 800398c:	43db      	mvns	r3, r3
 800398e:	401a      	ands	r2, r3
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	041b      	lsls	r3, r3, #16
 8003994:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003998:	4313      	orrs	r3, r2
 800399a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 800399e:	bf00      	nop
 80039a0:	370c      	adds	r7, #12
 80039a2:	46bd      	mov	sp, r7
 80039a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039a8:	4770      	bx	lr

080039aa <LL_RCC_SetSAIClockSource>:
{
 80039aa:	b480      	push	{r7}
 80039ac:	b083      	sub	sp, #12
 80039ae:	af00      	add	r7, sp, #0
 80039b0:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_SAI1SEL, SAIxSource);
 80039b2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80039b6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80039ba:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80039be:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	4313      	orrs	r3, r2
 80039c6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 80039ca:	bf00      	nop
 80039cc:	370c      	adds	r7, #12
 80039ce:	46bd      	mov	sp, r7
 80039d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039d4:	4770      	bx	lr

080039d6 <LL_RCC_SetRNGClockSource>:
{
 80039d6:	b480      	push	{r7}
 80039d8:	b083      	sub	sp, #12
 80039da:	af00      	add	r7, sp, #0
 80039dc:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_RNGSEL, RNGxSource);
 80039de:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80039e2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80039e6:	f023 4240 	bic.w	r2, r3, #3221225472	; 0xc0000000
 80039ea:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	4313      	orrs	r3, r2
 80039f2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 80039f6:	bf00      	nop
 80039f8:	370c      	adds	r7, #12
 80039fa:	46bd      	mov	sp, r7
 80039fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a00:	4770      	bx	lr

08003a02 <LL_RCC_SetCLK48ClockSource>:
{
 8003a02:	b480      	push	{r7}
 8003a04:	b083      	sub	sp, #12
 8003a06:	af00      	add	r7, sp, #0
 8003a08:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_CLK48SEL, CLK48xSource);
 8003a0a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003a0e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003a12:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003a16:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	4313      	orrs	r3, r2
 8003a1e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8003a22:	bf00      	nop
 8003a24:	370c      	adds	r7, #12
 8003a26:	46bd      	mov	sp, r7
 8003a28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a2c:	4770      	bx	lr

08003a2e <LL_RCC_SetUSBClockSource>:
{
 8003a2e:	b580      	push	{r7, lr}
 8003a30:	b082      	sub	sp, #8
 8003a32:	af00      	add	r7, sp, #0
 8003a34:	6078      	str	r0, [r7, #4]
  LL_RCC_SetCLK48ClockSource(USBxSource);
 8003a36:	6878      	ldr	r0, [r7, #4]
 8003a38:	f7ff ffe3 	bl	8003a02 <LL_RCC_SetCLK48ClockSource>
}
 8003a3c:	bf00      	nop
 8003a3e:	3708      	adds	r7, #8
 8003a40:	46bd      	mov	sp, r7
 8003a42:	bd80      	pop	{r7, pc}

08003a44 <LL_RCC_SetADCClockSource>:
{
 8003a44:	b480      	push	{r7}
 8003a46:	b083      	sub	sp, #12
 8003a48:	af00      	add	r7, sp, #0
 8003a4a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_ADCSEL, ADCxSource);
 8003a4c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003a50:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003a54:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8003a58:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	4313      	orrs	r3, r2
 8003a60:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8003a64:	bf00      	nop
 8003a66:	370c      	adds	r7, #12
 8003a68:	46bd      	mov	sp, r7
 8003a6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a6e:	4770      	bx	lr

08003a70 <LL_RCC_SetRTCClockSource>:
{
 8003a70:	b480      	push	{r7}
 8003a72:	b083      	sub	sp, #12
 8003a74:	af00      	add	r7, sp, #0
 8003a76:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_RTCSEL, Source);
 8003a78:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003a7c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003a80:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003a84:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	4313      	orrs	r3, r2
 8003a8c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
}
 8003a90:	bf00      	nop
 8003a92:	370c      	adds	r7, #12
 8003a94:	46bd      	mov	sp, r7
 8003a96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a9a:	4770      	bx	lr

08003a9c <LL_RCC_GetRTCClockSource>:
{
 8003a9c:	b480      	push	{r7}
 8003a9e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL));
 8003aa0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003aa4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003aa8:	f403 7340 	and.w	r3, r3, #768	; 0x300
}
 8003aac:	4618      	mov	r0, r3
 8003aae:	46bd      	mov	sp, r7
 8003ab0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ab4:	4770      	bx	lr

08003ab6 <LL_RCC_ForceBackupDomainReset>:
{
 8003ab6:	b480      	push	{r7}
 8003ab8:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 8003aba:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003abe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003ac2:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003ac6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003aca:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8003ace:	bf00      	nop
 8003ad0:	46bd      	mov	sp, r7
 8003ad2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ad6:	4770      	bx	lr

08003ad8 <LL_RCC_ReleaseBackupDomainReset>:
{
 8003ad8:	b480      	push	{r7}
 8003ada:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 8003adc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003ae0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003ae4:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003ae8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003aec:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8003af0:	bf00      	nop
 8003af2:	46bd      	mov	sp, r7
 8003af4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003af8:	4770      	bx	lr

08003afa <LL_RCC_PLLSAI1_Enable>:
{
 8003afa:	b480      	push	{r7}
 8003afc:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLSAI1ON);
 8003afe:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003b02:	681b      	ldr	r3, [r3, #0]
 8003b04:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003b08:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8003b0c:	6013      	str	r3, [r2, #0]
}
 8003b0e:	bf00      	nop
 8003b10:	46bd      	mov	sp, r7
 8003b12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b16:	4770      	bx	lr

08003b18 <LL_RCC_PLLSAI1_Disable>:
{
 8003b18:	b480      	push	{r7}
 8003b1a:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_PLLSAI1ON);
 8003b1c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003b20:	681b      	ldr	r3, [r3, #0]
 8003b22:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003b26:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8003b2a:	6013      	str	r3, [r2, #0]
}
 8003b2c:	bf00      	nop
 8003b2e:	46bd      	mov	sp, r7
 8003b30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b34:	4770      	bx	lr

08003b36 <LL_RCC_PLLSAI1_IsReady>:
{
 8003b36:	b480      	push	{r7}
 8003b38:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == (RCC_CR_PLLSAI1RDY)) ? 1UL : 0UL);
 8003b3a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003b3e:	681b      	ldr	r3, [r3, #0]
 8003b40:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003b44:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003b48:	d101      	bne.n	8003b4e <LL_RCC_PLLSAI1_IsReady+0x18>
 8003b4a:	2301      	movs	r3, #1
 8003b4c:	e000      	b.n	8003b50 <LL_RCC_PLLSAI1_IsReady+0x1a>
 8003b4e:	2300      	movs	r3, #0
}
 8003b50:	4618      	mov	r0, r3
 8003b52:	46bd      	mov	sp, r7
 8003b54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b58:	4770      	bx	lr

08003b5a <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003b5a:	b580      	push	{r7, lr}
 8003b5c:	b088      	sub	sp, #32
 8003b5e:	af00      	add	r7, sp, #0
 8003b60:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef ret     = HAL_OK;      /* Intermediate status */
 8003b62:	2300      	movs	r3, #0
 8003b64:	77fb      	strb	r3, [r7, #31]
  HAL_StatusTypeDef status  = HAL_OK;   /* Final status */
 8003b66:	2300      	movs	r3, #0
 8003b68:	77bb      	strb	r3, [r7, #30]
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)
  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	681b      	ldr	r3, [r3, #0]
 8003b6e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003b72:	2b00      	cmp	r3, #0
 8003b74:	d034      	beq.n	8003be0 <HAL_RCCEx_PeriphCLKConfig+0x86>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch (PeriphClkInit->Sai1ClockSelection)
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b7a:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8003b7e:	d021      	beq.n	8003bc4 <HAL_RCCEx_PeriphCLKConfig+0x6a>
 8003b80:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8003b84:	d81b      	bhi.n	8003bbe <HAL_RCCEx_PeriphCLKConfig+0x64>
 8003b86:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8003b8a:	d01d      	beq.n	8003bc8 <HAL_RCCEx_PeriphCLKConfig+0x6e>
 8003b8c:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8003b90:	d815      	bhi.n	8003bbe <HAL_RCCEx_PeriphCLKConfig+0x64>
 8003b92:	2b00      	cmp	r3, #0
 8003b94:	d00b      	beq.n	8003bae <HAL_RCCEx_PeriphCLKConfig+0x54>
 8003b96:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003b9a:	d110      	bne.n	8003bbe <HAL_RCCEx_PeriphCLKConfig+0x64>
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1 */
        /* Enable SAI1 Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI1CLK);
 8003b9c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003ba0:	68db      	ldr	r3, [r3, #12]
 8003ba2:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003ba6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003baa:	60d3      	str	r3, [r2, #12]

        /* SAI1 clock source config set later after clock selection check */
        break;
 8003bac:	e00d      	b.n	8003bca <HAL_RCCEx_PeriphCLKConfig+0x70>

#if defined(SAI1)
      case RCC_SAI1CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI1 */
        /* PLLSAI1 parameters N & P configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_ConfigNP(&(PeriphClkInit->PLLSAI1));
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	3304      	adds	r3, #4
 8003bb2:	4618      	mov	r0, r3
 8003bb4:	f000 f947 	bl	8003e46 <RCCEx_PLLSAI1_ConfigNP>
 8003bb8:	4603      	mov	r3, r0
 8003bba:	77fb      	strb	r3, [r7, #31]
        /* SAI1 clock source config set later after clock selection check */
        break;
 8003bbc:	e005      	b.n	8003bca <HAL_RCCEx_PeriphCLKConfig+0x70>
      case RCC_SAI1CLKSOURCE_HSI:

        break;

      default:
        ret = HAL_ERROR;
 8003bbe:	2301      	movs	r3, #1
 8003bc0:	77fb      	strb	r3, [r7, #31]
        break;
 8003bc2:	e002      	b.n	8003bca <HAL_RCCEx_PeriphCLKConfig+0x70>
        break;
 8003bc4:	bf00      	nop
 8003bc6:	e000      	b.n	8003bca <HAL_RCCEx_PeriphCLKConfig+0x70>
        break;
 8003bc8:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003bca:	7ffb      	ldrb	r3, [r7, #31]
 8003bcc:	2b00      	cmp	r3, #0
 8003bce:	d105      	bne.n	8003bdc <HAL_RCCEx_PeriphCLKConfig+0x82>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003bd4:	4618      	mov	r0, r3
 8003bd6:	f7ff fee8 	bl	80039aa <LL_RCC_SetSAIClockSource>
 8003bda:	e001      	b.n	8003be0 <HAL_RCCEx_PeriphCLKConfig+0x86>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003bdc:	7ffb      	ldrb	r3, [r7, #31]
 8003bde:	77bb      	strb	r3, [r7, #30]
    }
  }
#endif

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	681b      	ldr	r3, [r3, #0]
 8003be4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003be8:	2b00      	cmp	r3, #0
 8003bea:	d046      	beq.n	8003c7a <HAL_RCCEx_PeriphCLKConfig+0x120>
  {
    uint32_t rtcclocksource = LL_RCC_GetRTCClockSource();
 8003bec:	f7ff ff56 	bl	8003a9c <LL_RCC_GetRTCClockSource>
 8003bf0:	61b8      	str	r0, [r7, #24]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Configure the clock source only if a different source is expected */
    if (rtcclocksource != PeriphClkInit->RTCClockSelection)
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003bf6:	69ba      	ldr	r2, [r7, #24]
 8003bf8:	429a      	cmp	r2, r3
 8003bfa:	d03c      	beq.n	8003c76 <HAL_RCCEx_PeriphCLKConfig+0x11c>
    {
      /* Enable write access to Backup domain */
      HAL_PWR_EnableBkUpAccess();
 8003bfc:	f7fe fc90 	bl	8002520 <HAL_PWR_EnableBkUpAccess>

      /* If a clock source is not yet selected */
      if (rtcclocksource == RCC_RTCCLKSOURCE_NONE)
 8003c00:	69bb      	ldr	r3, [r7, #24]
 8003c02:	2b00      	cmp	r3, #0
 8003c04:	d105      	bne.n	8003c12 <HAL_RCCEx_PeriphCLKConfig+0xb8>
      {
        /* Directly set the configuration of the clock source selection */
        LL_RCC_SetRTCClockSource(PeriphClkInit->RTCClockSelection);
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c0a:	4618      	mov	r0, r3
 8003c0c:	f7ff ff30 	bl	8003a70 <LL_RCC_SetRTCClockSource>
 8003c10:	e02e      	b.n	8003c70 <HAL_RCCEx_PeriphCLKConfig+0x116>
      }
      else /* A clock source is already selected */
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        uint32_t bdcr = LL_RCC_ReadReg(BDCR);
 8003c12:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003c16:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003c1a:	617b      	str	r3, [r7, #20]

        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        LL_RCC_ForceBackupDomainReset();
 8003c1c:	f7ff ff4b 	bl	8003ab6 <LL_RCC_ForceBackupDomainReset>
        LL_RCC_ReleaseBackupDomainReset();
 8003c20:	f7ff ff5a 	bl	8003ad8 <LL_RCC_ReleaseBackupDomainReset>

        /* Set the value of the clock source selection */
        MODIFY_REG(bdcr, RCC_BDCR_RTCSEL, PeriphClkInit->RTCClockSelection);
 8003c24:	697b      	ldr	r3, [r7, #20]
 8003c26:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c2e:	4313      	orrs	r3, r2
 8003c30:	617b      	str	r3, [r7, #20]

        /* Restore the content of BDCR register */
        LL_RCC_WriteReg(BDCR, bdcr);
 8003c32:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003c36:	697b      	ldr	r3, [r7, #20]
 8003c38:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

        /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
        if (LL_RCC_LSE_IsEnabled() == 1U)
 8003c3c:	f7ff fdf0 	bl	8003820 <LL_RCC_LSE_IsEnabled>
 8003c40:	4603      	mov	r3, r0
 8003c42:	2b01      	cmp	r3, #1
 8003c44:	d114      	bne.n	8003c70 <HAL_RCCEx_PeriphCLKConfig+0x116>
        {
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8003c46:	f7fe f867 	bl	8001d18 <HAL_GetTick>
 8003c4a:	6138      	str	r0, [r7, #16]

          /* Wait till LSE is ready */
          while (LL_RCC_LSE_IsReady() != 1U)
 8003c4c:	e00b      	b.n	8003c66 <HAL_RCCEx_PeriphCLKConfig+0x10c>
          {
            if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003c4e:	f7fe f863 	bl	8001d18 <HAL_GetTick>
 8003c52:	4602      	mov	r2, r0
 8003c54:	693b      	ldr	r3, [r7, #16]
 8003c56:	1ad3      	subs	r3, r2, r3
 8003c58:	f241 3288 	movw	r2, #5000	; 0x1388
 8003c5c:	4293      	cmp	r3, r2
 8003c5e:	d902      	bls.n	8003c66 <HAL_RCCEx_PeriphCLKConfig+0x10c>
            {
              ret = HAL_TIMEOUT;
 8003c60:	2303      	movs	r3, #3
 8003c62:	77fb      	strb	r3, [r7, #31]
              break;
 8003c64:	e004      	b.n	8003c70 <HAL_RCCEx_PeriphCLKConfig+0x116>
          while (LL_RCC_LSE_IsReady() != 1U)
 8003c66:	f7ff fded 	bl	8003844 <LL_RCC_LSE_IsReady>
 8003c6a:	4603      	mov	r3, r0
 8003c6c:	2b01      	cmp	r3, #1
 8003c6e:	d1ee      	bne.n	8003c4e <HAL_RCCEx_PeriphCLKConfig+0xf4>
          }
        }
      }

      /* set overall return value */
      status = ret;
 8003c70:	7ffb      	ldrb	r3, [r7, #31]
 8003c72:	77bb      	strb	r3, [r7, #30]
 8003c74:	e001      	b.n	8003c7a <HAL_RCCEx_PeriphCLKConfig+0x120>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003c76:	7ffb      	ldrb	r3, [r7, #31]
 8003c78:	77bb      	strb	r3, [r7, #30]
    }

  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	681b      	ldr	r3, [r3, #0]
 8003c7e:	f003 0301 	and.w	r3, r3, #1
 8003c82:	2b00      	cmp	r3, #0
 8003c84:	d004      	beq.n	8003c90 <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	699b      	ldr	r3, [r3, #24]
 8003c8a:	4618      	mov	r0, r3
 8003c8c:	f7ff fe2a 	bl	80038e4 <LL_RCC_SetUSARTClockSource>
  }

#if defined(LPUART1)
  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	681b      	ldr	r3, [r3, #0]
 8003c94:	f003 0302 	and.w	r3, r3, #2
 8003c98:	2b00      	cmp	r3, #0
 8003c9a:	d004      	beq.n	8003ca6 <HAL_RCCEx_PeriphCLKConfig+0x14c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	69db      	ldr	r3, [r3, #28]
 8003ca0:	4618      	mov	r0, r3
 8003ca2:	f7ff fe35 	bl	8003910 <LL_RCC_SetLPUARTClockSource>
  }
#endif

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	681b      	ldr	r3, [r3, #0]
 8003caa:	f003 0310 	and.w	r3, r3, #16
 8003cae:	2b00      	cmp	r3, #0
 8003cb0:	d004      	beq.n	8003cbc <HAL_RCCEx_PeriphCLKConfig+0x162>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003cb6:	4618      	mov	r0, r3
 8003cb8:	f7ff fe5d 	bl	8003976 <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	681b      	ldr	r3, [r3, #0]
 8003cc0:	f003 0320 	and.w	r3, r3, #32
 8003cc4:	2b00      	cmp	r3, #0
 8003cc6:	d004      	beq.n	8003cd2 <HAL_RCCEx_PeriphCLKConfig+0x178>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ccc:	4618      	mov	r0, r3
 8003cce:	f7ff fe52 	bl	8003976 <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	681b      	ldr	r3, [r3, #0]
 8003cd6:	f003 0304 	and.w	r3, r3, #4
 8003cda:	2b00      	cmp	r3, #0
 8003cdc:	d004      	beq.n	8003ce8 <HAL_RCCEx_PeriphCLKConfig+0x18e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	6a1b      	ldr	r3, [r3, #32]
 8003ce2:	4618      	mov	r0, r3
 8003ce4:	f7ff fe2a 	bl	800393c <LL_RCC_SetI2CClockSource>
  }

#if defined(I2C3)
  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	681b      	ldr	r3, [r3, #0]
 8003cec:	f003 0308 	and.w	r3, r3, #8
 8003cf0:	2b00      	cmp	r3, #0
 8003cf2:	d004      	beq.n	8003cfe <HAL_RCCEx_PeriphCLKConfig+0x1a4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003cf8:	4618      	mov	r0, r3
 8003cfa:	f7ff fe1f 	bl	800393c <LL_RCC_SetI2CClockSource>
  }
#endif

#if defined(USB)
  /*-------------------------- USB clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	681b      	ldr	r3, [r3, #0]
 8003d02:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003d06:	2b00      	cmp	r3, #0
 8003d08:	d022      	beq.n	8003d50 <HAL_RCCEx_PeriphCLKConfig+0x1f6>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003d0e:	4618      	mov	r0, r3
 8003d10:	f7ff fe8d 	bl	8003a2e <LL_RCC_SetUSBClockSource>

    if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003d18:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003d1c:	d107      	bne.n	8003d2e <HAL_RCCEx_PeriphCLKConfig+0x1d4>
    {
      /* Enable PLLQ output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_USBCLK);
 8003d1e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003d22:	68db      	ldr	r3, [r3, #12]
 8003d24:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003d28:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003d2c:	60d3      	str	r3, [r2, #12]
    }
#if defined(SAI1)
  if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003d32:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003d36:	d10b      	bne.n	8003d50 <HAL_RCCEx_PeriphCLKConfig+0x1f6>
  {
    /* PLLSAI1 parameters N & Q configuration and clock output (PLLSAI1ClockOut) */
    ret = RCCEx_PLLSAI1_ConfigNQ(&(PeriphClkInit->PLLSAI1));
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	3304      	adds	r3, #4
 8003d3c:	4618      	mov	r0, r3
 8003d3e:	f000 f8dd 	bl	8003efc <RCCEx_PLLSAI1_ConfigNQ>
 8003d42:	4603      	mov	r3, r0
 8003d44:	77fb      	strb	r3, [r7, #31]

    if (ret != HAL_OK)
 8003d46:	7ffb      	ldrb	r3, [r7, #31]
 8003d48:	2b00      	cmp	r3, #0
 8003d4a:	d001      	beq.n	8003d50 <HAL_RCCEx_PeriphCLKConfig+0x1f6>
    {
      /* set overall return value */
      status = ret;
 8003d4c:	7ffb      	ldrb	r3, [r7, #31]
 8003d4e:	77bb      	strb	r3, [r7, #30]
#endif
  }
#endif

  /*-------------------------- RNG clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	681b      	ldr	r3, [r3, #0]
 8003d54:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003d58:	2b00      	cmp	r3, #0
 8003d5a:	d02b      	beq.n	8003db4 <HAL_RCCEx_PeriphCLKConfig+0x25a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));

    /* Configure the RNG clock source */
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003d60:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003d64:	d008      	beq.n	8003d78 <HAL_RCCEx_PeriphCLKConfig+0x21e>
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003d6a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003d6e:	d003      	beq.n	8003d78 <HAL_RCCEx_PeriphCLKConfig+0x21e>
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003d74:	2b00      	cmp	r3, #0
 8003d76:	d105      	bne.n	8003d84 <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003d7c:	4618      	mov	r0, r3
 8003d7e:	f7ff fe2a 	bl	80039d6 <LL_RCC_SetRNGClockSource>
 8003d82:	e00a      	b.n	8003d9a <HAL_RCCEx_PeriphCLKConfig+0x240>
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003d88:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003d8c:	60fb      	str	r3, [r7, #12]
 8003d8e:	2000      	movs	r0, #0
 8003d90:	f7ff fe21 	bl	80039d6 <LL_RCC_SetRNGClockSource>
 8003d94:	68f8      	ldr	r0, [r7, #12]
 8003d96:	f7ff fe34 	bl	8003a02 <LL_RCC_SetCLK48ClockSource>

    if (PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003d9e:	f1b3 5fc0 	cmp.w	r3, #402653184	; 0x18000000
 8003da2:	d107      	bne.n	8003db4 <HAL_RCCEx_PeriphCLKConfig+0x25a>
    {
      /* Enable PLLQ output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_RNGCLK);
 8003da4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003da8:	68db      	ldr	r3, [r3, #12]
 8003daa:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003dae:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003db2:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	681b      	ldr	r3, [r3, #0]
 8003db8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003dbc:	2b00      	cmp	r3, #0
 8003dbe:	d022      	beq.n	8003e06 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003dc4:	4618      	mov	r0, r3
 8003dc6:	f7ff fe3d 	bl	8003a44 <LL_RCC_SetADCClockSource>

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLL)
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003dce:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003dd2:	d107      	bne.n	8003de4 <HAL_RCCEx_PeriphCLKConfig+0x28a>
    {
      /* Enable RCC_PLL_RNGCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8003dd4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003dd8:	68db      	ldr	r3, [r3, #12]
 8003dda:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003dde:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003de2:	60d3      	str	r3, [r2, #12]
    }

#if defined(SAI1)
  if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003de8:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003dec:	d10b      	bne.n	8003e06 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
  {
    /* PLLSAI1 parameters N & R configuration and clock output (PLLSAI1ClockOut) */
    ret = RCCEx_PLLSAI1_ConfigNR(&(PeriphClkInit->PLLSAI1));
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	3304      	adds	r3, #4
 8003df2:	4618      	mov	r0, r3
 8003df4:	f000 f8dd 	bl	8003fb2 <RCCEx_PLLSAI1_ConfigNR>
 8003df8:	4603      	mov	r3, r0
 8003dfa:	77fb      	strb	r3, [r7, #31]

    if (ret != HAL_OK)
 8003dfc:	7ffb      	ldrb	r3, [r7, #31]
 8003dfe:	2b00      	cmp	r3, #0
 8003e00:	d001      	beq.n	8003e06 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
    {
      /* set overall return value */
      status = ret;
 8003e02:	7ffb      	ldrb	r3, [r7, #31]
 8003e04:	77bb      	strb	r3, [r7, #30]
  }
#endif
  }

  /*-------------------------- RFWKP clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RFWAKEUP) == RCC_PERIPHCLK_RFWAKEUP)
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	681b      	ldr	r3, [r3, #0]
 8003e0a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003e0e:	2b00      	cmp	r3, #0
 8003e10:	d004      	beq.n	8003e1c <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_RFWKPCLKSOURCE(PeriphClkInit->RFWakeUpClockSelection));

    /* Configure the RFWKP interface clock source */
    __HAL_RCC_RFWAKEUP_CONFIG(PeriphClkInit->RFWakeUpClockSelection);
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003e16:	4618      	mov	r0, r3
 8003e18:	f7ff fd26 	bl	8003868 <LL_RCC_SetRFWKPClockSource>

  }

#if defined(RCC_SMPS_SUPPORT)
  /*-------------------------- SMPS clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SMPS) == RCC_PERIPHCLK_SMPS)
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	681b      	ldr	r3, [r3, #0]
 8003e20:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003e24:	2b00      	cmp	r3, #0
 8003e26:	d009      	beq.n	8003e3c <HAL_RCCEx_PeriphCLKConfig+0x2e2>
    /* Check the parameters */
    assert_param(IS_RCC_SMPSCLKDIV(PeriphClkInit->SmpsDivSelection));
    assert_param(IS_RCC_SMPSCLKSOURCE(PeriphClkInit->SmpsClockSelection));

    /* Configure the SMPS interface clock division factor */
    __HAL_RCC_SMPS_DIV_CONFIG(PeriphClkInit->SmpsDivSelection);
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003e2c:	4618      	mov	r0, r3
 8003e2e:	f7ff fd45 	bl	80038bc <LL_RCC_SetSMPSPrescaler>

    /* Configure the SMPS interface clock source */
    __HAL_RCC_SMPS_CONFIG(PeriphClkInit->SmpsClockSelection);
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003e36:	4618      	mov	r0, r3
 8003e38:	f7ff fd2c 	bl	8003894 <LL_RCC_SetSMPSClockSource>
  }
#endif


  return status;
 8003e3c:	7fbb      	ldrb	r3, [r7, #30]
}
 8003e3e:	4618      	mov	r0, r3
 8003e40:	3720      	adds	r7, #32
 8003e42:	46bd      	mov	sp, r7
 8003e44:	bd80      	pop	{r7, pc}

08003e46 <RCCEx_PLLSAI1_ConfigNP>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNP(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 8003e46:	b580      	push	{r7, lr}
 8003e48:	b084      	sub	sp, #16
 8003e4a:	af00      	add	r7, sp, #0
 8003e4c:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8003e4e:	2300      	movs	r3, #0
 8003e50:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLP_VALUE(PLLSAI1->PLLP));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 8003e52:	f7ff fe61 	bl	8003b18 <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8003e56:	f7fd ff5f 	bl	8001d18 <HAL_GetTick>
 8003e5a:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8003e5c:	e009      	b.n	8003e72 <RCCEx_PLLSAI1_ConfigNP+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003e5e:	f7fd ff5b 	bl	8001d18 <HAL_GetTick>
 8003e62:	4602      	mov	r2, r0
 8003e64:	68bb      	ldr	r3, [r7, #8]
 8003e66:	1ad3      	subs	r3, r2, r3
 8003e68:	2b02      	cmp	r3, #2
 8003e6a:	d902      	bls.n	8003e72 <RCCEx_PLLSAI1_ConfigNP+0x2c>
    {
      status = HAL_TIMEOUT;
 8003e6c:	2303      	movs	r3, #3
 8003e6e:	73fb      	strb	r3, [r7, #15]
      break;
 8003e70:	e004      	b.n	8003e7c <RCCEx_PLLSAI1_ConfigNP+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8003e72:	f7ff fe60 	bl	8003b36 <LL_RCC_PLLSAI1_IsReady>
 8003e76:	4603      	mov	r3, r0
 8003e78:	2b00      	cmp	r3, #0
 8003e7a:	d1f0      	bne.n	8003e5e <RCCEx_PLLSAI1_ConfigNP+0x18>
    }
  }

  if (status == HAL_OK)
 8003e7c:	7bfb      	ldrb	r3, [r7, #15]
 8003e7e:	2b00      	cmp	r3, #0
 8003e80:	d137      	bne.n	8003ef2 <RCCEx_PLLSAI1_ConfigNP+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 8003e82:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003e86:	691b      	ldr	r3, [r3, #16]
 8003e88:	f423 42fe 	bic.w	r2, r3, #32512	; 0x7f00
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	681b      	ldr	r3, [r3, #0]
 8003e90:	021b      	lsls	r3, r3, #8
 8003e92:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003e96:	4313      	orrs	r3, r2
 8003e98:	610b      	str	r3, [r1, #16]

    /* Configure the PLLSAI1 Division factor P */
    __HAL_RCC_PLLSAI1_DIVP_CONFIG(PLLSAI1->PLLP);
 8003e9a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003e9e:	691b      	ldr	r3, [r3, #16]
 8003ea0:	f423 1278 	bic.w	r2, r3, #4063232	; 0x3e0000
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	685b      	ldr	r3, [r3, #4]
 8003ea8:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003eac:	4313      	orrs	r3, r2
 8003eae:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 8003eb0:	f7ff fe23 	bl	8003afa <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003eb4:	f7fd ff30 	bl	8001d18 <HAL_GetTick>
 8003eb8:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8003eba:	e009      	b.n	8003ed0 <RCCEx_PLLSAI1_ConfigNP+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003ebc:	f7fd ff2c 	bl	8001d18 <HAL_GetTick>
 8003ec0:	4602      	mov	r2, r0
 8003ec2:	68bb      	ldr	r3, [r7, #8]
 8003ec4:	1ad3      	subs	r3, r2, r3
 8003ec6:	2b02      	cmp	r3, #2
 8003ec8:	d902      	bls.n	8003ed0 <RCCEx_PLLSAI1_ConfigNP+0x8a>
      {
        status = HAL_TIMEOUT;
 8003eca:	2303      	movs	r3, #3
 8003ecc:	73fb      	strb	r3, [r7, #15]
        break;
 8003ece:	e004      	b.n	8003eda <RCCEx_PLLSAI1_ConfigNP+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8003ed0:	f7ff fe31 	bl	8003b36 <LL_RCC_PLLSAI1_IsReady>
 8003ed4:	4603      	mov	r3, r0
 8003ed6:	2b01      	cmp	r3, #1
 8003ed8:	d1f0      	bne.n	8003ebc <RCCEx_PLLSAI1_ConfigNP+0x76>
      }
    }

    if (status == HAL_OK)
 8003eda:	7bfb      	ldrb	r3, [r7, #15]
 8003edc:	2b00      	cmp	r3, #0
 8003ede:	d108      	bne.n	8003ef2 <RCCEx_PLLSAI1_ConfigNP+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 8003ee0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003ee4:	691a      	ldr	r2, [r3, #16]
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	691b      	ldr	r3, [r3, #16]
 8003eea:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003eee:	4313      	orrs	r3, r2
 8003ef0:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 8003ef2:	7bfb      	ldrb	r3, [r7, #15]
}
 8003ef4:	4618      	mov	r0, r3
 8003ef6:	3710      	adds	r7, #16
 8003ef8:	46bd      	mov	sp, r7
 8003efa:	bd80      	pop	{r7, pc}

08003efc <RCCEx_PLLSAI1_ConfigNQ>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNQ(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 8003efc:	b580      	push	{r7, lr}
 8003efe:	b084      	sub	sp, #16
 8003f00:	af00      	add	r7, sp, #0
 8003f02:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8003f04:	2300      	movs	r3, #0
 8003f06:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLQ_VALUE(PLLSAI1->PLLQ));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 8003f08:	f7ff fe06 	bl	8003b18 <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8003f0c:	f7fd ff04 	bl	8001d18 <HAL_GetTick>
 8003f10:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8003f12:	e009      	b.n	8003f28 <RCCEx_PLLSAI1_ConfigNQ+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003f14:	f7fd ff00 	bl	8001d18 <HAL_GetTick>
 8003f18:	4602      	mov	r2, r0
 8003f1a:	68bb      	ldr	r3, [r7, #8]
 8003f1c:	1ad3      	subs	r3, r2, r3
 8003f1e:	2b02      	cmp	r3, #2
 8003f20:	d902      	bls.n	8003f28 <RCCEx_PLLSAI1_ConfigNQ+0x2c>
    {
      status = HAL_TIMEOUT;
 8003f22:	2303      	movs	r3, #3
 8003f24:	73fb      	strb	r3, [r7, #15]
      break;
 8003f26:	e004      	b.n	8003f32 <RCCEx_PLLSAI1_ConfigNQ+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8003f28:	f7ff fe05 	bl	8003b36 <LL_RCC_PLLSAI1_IsReady>
 8003f2c:	4603      	mov	r3, r0
 8003f2e:	2b00      	cmp	r3, #0
 8003f30:	d1f0      	bne.n	8003f14 <RCCEx_PLLSAI1_ConfigNQ+0x18>
    }
  }

  if (status == HAL_OK)
 8003f32:	7bfb      	ldrb	r3, [r7, #15]
 8003f34:	2b00      	cmp	r3, #0
 8003f36:	d137      	bne.n	8003fa8 <RCCEx_PLLSAI1_ConfigNQ+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 8003f38:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003f3c:	691b      	ldr	r3, [r3, #16]
 8003f3e:	f423 42fe 	bic.w	r2, r3, #32512	; 0x7f00
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	681b      	ldr	r3, [r3, #0]
 8003f46:	021b      	lsls	r3, r3, #8
 8003f48:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003f4c:	4313      	orrs	r3, r2
 8003f4e:	610b      	str	r3, [r1, #16]
    /* Configure the PLLSAI1 Division factor Q */
    __HAL_RCC_PLLSAI1_DIVQ_CONFIG(PLLSAI1->PLLQ);
 8003f50:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003f54:	691b      	ldr	r3, [r3, #16]
 8003f56:	f023 6260 	bic.w	r2, r3, #234881024	; 0xe000000
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	689b      	ldr	r3, [r3, #8]
 8003f5e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003f62:	4313      	orrs	r3, r2
 8003f64:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 8003f66:	f7ff fdc8 	bl	8003afa <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003f6a:	f7fd fed5 	bl	8001d18 <HAL_GetTick>
 8003f6e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8003f70:	e009      	b.n	8003f86 <RCCEx_PLLSAI1_ConfigNQ+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003f72:	f7fd fed1 	bl	8001d18 <HAL_GetTick>
 8003f76:	4602      	mov	r2, r0
 8003f78:	68bb      	ldr	r3, [r7, #8]
 8003f7a:	1ad3      	subs	r3, r2, r3
 8003f7c:	2b02      	cmp	r3, #2
 8003f7e:	d902      	bls.n	8003f86 <RCCEx_PLLSAI1_ConfigNQ+0x8a>
      {
        status = HAL_TIMEOUT;
 8003f80:	2303      	movs	r3, #3
 8003f82:	73fb      	strb	r3, [r7, #15]
        break;
 8003f84:	e004      	b.n	8003f90 <RCCEx_PLLSAI1_ConfigNQ+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8003f86:	f7ff fdd6 	bl	8003b36 <LL_RCC_PLLSAI1_IsReady>
 8003f8a:	4603      	mov	r3, r0
 8003f8c:	2b01      	cmp	r3, #1
 8003f8e:	d1f0      	bne.n	8003f72 <RCCEx_PLLSAI1_ConfigNQ+0x76>
      }
    }

    if (status == HAL_OK)
 8003f90:	7bfb      	ldrb	r3, [r7, #15]
 8003f92:	2b00      	cmp	r3, #0
 8003f94:	d108      	bne.n	8003fa8 <RCCEx_PLLSAI1_ConfigNQ+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 8003f96:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003f9a:	691a      	ldr	r2, [r3, #16]
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	691b      	ldr	r3, [r3, #16]
 8003fa0:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003fa4:	4313      	orrs	r3, r2
 8003fa6:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 8003fa8:	7bfb      	ldrb	r3, [r7, #15]
}
 8003faa:	4618      	mov	r0, r3
 8003fac:	3710      	adds	r7, #16
 8003fae:	46bd      	mov	sp, r7
 8003fb0:	bd80      	pop	{r7, pc}

08003fb2 <RCCEx_PLLSAI1_ConfigNR>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNR(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 8003fb2:	b580      	push	{r7, lr}
 8003fb4:	b084      	sub	sp, #16
 8003fb6:	af00      	add	r7, sp, #0
 8003fb8:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8003fba:	2300      	movs	r3, #0
 8003fbc:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLR_VALUE(PLLSAI1->PLLR));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 8003fbe:	f7ff fdab 	bl	8003b18 <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8003fc2:	f7fd fea9 	bl	8001d18 <HAL_GetTick>
 8003fc6:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8003fc8:	e009      	b.n	8003fde <RCCEx_PLLSAI1_ConfigNR+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003fca:	f7fd fea5 	bl	8001d18 <HAL_GetTick>
 8003fce:	4602      	mov	r2, r0
 8003fd0:	68bb      	ldr	r3, [r7, #8]
 8003fd2:	1ad3      	subs	r3, r2, r3
 8003fd4:	2b02      	cmp	r3, #2
 8003fd6:	d902      	bls.n	8003fde <RCCEx_PLLSAI1_ConfigNR+0x2c>
    {
      status = HAL_TIMEOUT;
 8003fd8:	2303      	movs	r3, #3
 8003fda:	73fb      	strb	r3, [r7, #15]
      break;
 8003fdc:	e004      	b.n	8003fe8 <RCCEx_PLLSAI1_ConfigNR+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8003fde:	f7ff fdaa 	bl	8003b36 <LL_RCC_PLLSAI1_IsReady>
 8003fe2:	4603      	mov	r3, r0
 8003fe4:	2b00      	cmp	r3, #0
 8003fe6:	d1f0      	bne.n	8003fca <RCCEx_PLLSAI1_ConfigNR+0x18>
    }
  }

  if (status == HAL_OK)
 8003fe8:	7bfb      	ldrb	r3, [r7, #15]
 8003fea:	2b00      	cmp	r3, #0
 8003fec:	d137      	bne.n	800405e <RCCEx_PLLSAI1_ConfigNR+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 8003fee:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003ff2:	691b      	ldr	r3, [r3, #16]
 8003ff4:	f423 42fe 	bic.w	r2, r3, #32512	; 0x7f00
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	681b      	ldr	r3, [r3, #0]
 8003ffc:	021b      	lsls	r3, r3, #8
 8003ffe:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004002:	4313      	orrs	r3, r2
 8004004:	610b      	str	r3, [r1, #16]
    /* Configure the PLLSAI1 Division factor R */
    __HAL_RCC_PLLSAI1_DIVR_CONFIG(PLLSAI1->PLLR);
 8004006:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800400a:	691b      	ldr	r3, [r3, #16]
 800400c:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	68db      	ldr	r3, [r3, #12]
 8004014:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004018:	4313      	orrs	r3, r2
 800401a:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 800401c:	f7ff fd6d 	bl	8003afa <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004020:	f7fd fe7a 	bl	8001d18 <HAL_GetTick>
 8004024:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8004026:	e009      	b.n	800403c <RCCEx_PLLSAI1_ConfigNR+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8004028:	f7fd fe76 	bl	8001d18 <HAL_GetTick>
 800402c:	4602      	mov	r2, r0
 800402e:	68bb      	ldr	r3, [r7, #8]
 8004030:	1ad3      	subs	r3, r2, r3
 8004032:	2b02      	cmp	r3, #2
 8004034:	d902      	bls.n	800403c <RCCEx_PLLSAI1_ConfigNR+0x8a>
      {
        status = HAL_TIMEOUT;
 8004036:	2303      	movs	r3, #3
 8004038:	73fb      	strb	r3, [r7, #15]
        break;
 800403a:	e004      	b.n	8004046 <RCCEx_PLLSAI1_ConfigNR+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 800403c:	f7ff fd7b 	bl	8003b36 <LL_RCC_PLLSAI1_IsReady>
 8004040:	4603      	mov	r3, r0
 8004042:	2b01      	cmp	r3, #1
 8004044:	d1f0      	bne.n	8004028 <RCCEx_PLLSAI1_ConfigNR+0x76>
      }
    }

    if (status == HAL_OK)
 8004046:	7bfb      	ldrb	r3, [r7, #15]
 8004048:	2b00      	cmp	r3, #0
 800404a:	d108      	bne.n	800405e <RCCEx_PLLSAI1_ConfigNR+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 800404c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004050:	691a      	ldr	r2, [r3, #16]
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	691b      	ldr	r3, [r3, #16]
 8004056:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800405a:	4313      	orrs	r3, r2
 800405c:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 800405e:	7bfb      	ldrb	r3, [r7, #15]
}
 8004060:	4618      	mov	r0, r3
 8004062:	3710      	adds	r7, #16
 8004064:	46bd      	mov	sp, r7
 8004066:	bd80      	pop	{r7, pc}

08004068 <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8004068:	b580      	push	{r7, lr}
 800406a:	b082      	sub	sp, #8
 800406c:	af00      	add	r7, sp, #0
 800406e:	6078      	str	r0, [r7, #4]
  /* Check the RTC peripheral state */
  if (hrtc == NULL)
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	2b00      	cmp	r3, #0
 8004074:	d101      	bne.n	800407a <HAL_RTC_Init+0x12>
  {
    return HAL_ERROR;
 8004076:	2301      	movs	r3, #1
 8004078:	e090      	b.n	800419c <HAL_RTC_Init+0x134>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else
  if (hrtc->State == HAL_RTC_STATE_RESET)
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8004080:	b2db      	uxtb	r3, r3
 8004082:	2b00      	cmp	r3, #0
 8004084:	d106      	bne.n	8004094 <HAL_RTC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	2200      	movs	r2, #0
 800408a:	f883 2020 	strb.w	r2, [r3, #32]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 800408e:	6878      	ldr	r0, [r7, #4]
 8004090:	f7fd fcee 	bl	8001a70 <HAL_RTC_MspInit>
  }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	2202      	movs	r2, #2
 8004098:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	681b      	ldr	r3, [r3, #0]
 80040a0:	22ca      	movs	r2, #202	; 0xca
 80040a2:	625a      	str	r2, [r3, #36]	; 0x24
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	681b      	ldr	r3, [r3, #0]
 80040a8:	2253      	movs	r2, #83	; 0x53
 80040aa:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 80040ac:	6878      	ldr	r0, [r7, #4]
 80040ae:	f000 f89f 	bl	80041f0 <RTC_EnterInitMode>
 80040b2:	4603      	mov	r3, r0
 80040b4:	2b00      	cmp	r3, #0
 80040b6:	d009      	beq.n	80040cc <HAL_RTC_Init+0x64>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	681b      	ldr	r3, [r3, #0]
 80040bc:	22ff      	movs	r2, #255	; 0xff
 80040be:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	2204      	movs	r2, #4
 80040c4:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    return HAL_ERROR;
 80040c8:	2301      	movs	r3, #1
 80040ca:	e067      	b.n	800419c <HAL_RTC_Init+0x134>
  }
  else
  {
    /* Clear RTC_CR FMT, OSEL and POL Bits */
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	681b      	ldr	r3, [r3, #0]
 80040d0:	689b      	ldr	r3, [r3, #8]
 80040d2:	687a      	ldr	r2, [r7, #4]
 80040d4:	6812      	ldr	r2, [r2, #0]
 80040d6:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 80040da:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80040de:	6093      	str	r3, [r2, #8]
    /* Set RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	681b      	ldr	r3, [r3, #0]
 80040e4:	6899      	ldr	r1, [r3, #8]
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	685a      	ldr	r2, [r3, #4]
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	691b      	ldr	r3, [r3, #16]
 80040ee:	431a      	orrs	r2, r3
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	699b      	ldr	r3, [r3, #24]
 80040f4:	431a      	orrs	r2, r3
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	681b      	ldr	r3, [r3, #0]
 80040fa:	430a      	orrs	r2, r1
 80040fc:	609a      	str	r2, [r3, #8]

    /* Configure the RTC PRER */
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	681b      	ldr	r3, [r3, #0]
 8004102:	687a      	ldr	r2, [r7, #4]
 8004104:	68d2      	ldr	r2, [r2, #12]
 8004106:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << 16U);
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	681b      	ldr	r3, [r3, #0]
 800410c:	6919      	ldr	r1, [r3, #16]
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	689b      	ldr	r3, [r3, #8]
 8004112:	041a      	lsls	r2, r3, #16
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	681b      	ldr	r3, [r3, #0]
 8004118:	430a      	orrs	r2, r1
 800411a:	611a      	str	r2, [r3, #16]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= ((uint32_t)~RTC_ISR_INIT);
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	681b      	ldr	r3, [r3, #0]
 8004120:	68da      	ldr	r2, [r3, #12]
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	681b      	ldr	r3, [r3, #0]
 8004126:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800412a:	60da      	str	r2, [r3, #12]

#if defined(RTC_OR_ALARMOUTTYPE)
    hrtc->Instance->OR &= (uint32_t)~(RTC_OR_ALARMOUTTYPE | RTC_OR_OUT_RMP);
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	681b      	ldr	r3, [r3, #0]
 8004130:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	681b      	ldr	r3, [r3, #0]
 8004136:	f022 0203 	bic.w	r2, r2, #3
 800413a:	64da      	str	r2, [r3, #76]	; 0x4c
#else
    hrtc->Instance->OR &= (uint32_t)~(RTC_OR_OUT_RMP);
#endif
    hrtc->Instance->OR |= (uint32_t)(hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	681b      	ldr	r3, [r3, #0]
 8004140:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	69da      	ldr	r2, [r3, #28]
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	695b      	ldr	r3, [r3, #20]
 800414a:	431a      	orrs	r2, r3
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	681b      	ldr	r3, [r3, #0]
 8004150:	430a      	orrs	r2, r1
 8004152:	64da      	str	r2, [r3, #76]	; 0x4c

    /* If CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if ((hrtc->Instance->CR & RTC_CR_BYPSHAD) == 0U)
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	681b      	ldr	r3, [r3, #0]
 8004158:	689b      	ldr	r3, [r3, #8]
 800415a:	f003 0320 	and.w	r3, r3, #32
 800415e:	2b00      	cmp	r3, #0
 8004160:	d113      	bne.n	800418a <HAL_RTC_Init+0x122>
    {
      if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8004162:	6878      	ldr	r0, [r7, #4]
 8004164:	f000 f81e 	bl	80041a4 <HAL_RTC_WaitForSynchro>
 8004168:	4603      	mov	r3, r0
 800416a:	2b00      	cmp	r3, #0
 800416c:	d00d      	beq.n	800418a <HAL_RTC_Init+0x122>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	681b      	ldr	r3, [r3, #0]
 8004172:	22ff      	movs	r2, #255	; 0xff
 8004174:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	2204      	movs	r2, #4
 800417a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	2200      	movs	r2, #0
 8004182:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 8004186:	2301      	movs	r3, #1
 8004188:	e008      	b.n	800419c <HAL_RTC_Init+0x134>
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	681b      	ldr	r3, [r3, #0]
 800418e:	22ff      	movs	r2, #255	; 0xff
 8004190:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_READY;
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	2201      	movs	r2, #1
 8004196:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    return HAL_OK;
 800419a:	2300      	movs	r3, #0
  }
}
 800419c:	4618      	mov	r0, r3
 800419e:	3708      	adds	r7, #8
 80041a0:	46bd      	mov	sp, r7
 80041a2:	bd80      	pop	{r7, pc}

080041a4 <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 80041a4:	b580      	push	{r7, lr}
 80041a6:	b084      	sub	sp, #16
 80041a8:	af00      	add	r7, sp, #0
 80041aa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	681b      	ldr	r3, [r3, #0]
 80041b0:	68da      	ldr	r2, [r3, #12]
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	681b      	ldr	r3, [r3, #0]
 80041b6:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80041ba:	60da      	str	r2, [r3, #12]

  tickstart = HAL_GetTick();
 80041bc:	f7fd fdac 	bl	8001d18 <HAL_GetTick>
 80041c0:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 80041c2:	e009      	b.n	80041d8 <HAL_RTC_WaitForSynchro+0x34>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 80041c4:	f7fd fda8 	bl	8001d18 <HAL_GetTick>
 80041c8:	4602      	mov	r2, r0
 80041ca:	68fb      	ldr	r3, [r7, #12]
 80041cc:	1ad3      	subs	r3, r2, r3
 80041ce:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80041d2:	d901      	bls.n	80041d8 <HAL_RTC_WaitForSynchro+0x34>
    {
      return HAL_TIMEOUT;
 80041d4:	2303      	movs	r3, #3
 80041d6:	e007      	b.n	80041e8 <HAL_RTC_WaitForSynchro+0x44>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	681b      	ldr	r3, [r3, #0]
 80041dc:	68db      	ldr	r3, [r3, #12]
 80041de:	f003 0320 	and.w	r3, r3, #32
 80041e2:	2b00      	cmp	r3, #0
 80041e4:	d0ee      	beq.n	80041c4 <HAL_RTC_WaitForSynchro+0x20>
    }
  }

  return HAL_OK;
 80041e6:	2300      	movs	r3, #0
}
 80041e8:	4618      	mov	r0, r3
 80041ea:	3710      	adds	r7, #16
 80041ec:	46bd      	mov	sp, r7
 80041ee:	bd80      	pop	{r7, pc}

080041f0 <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 80041f0:	b580      	push	{r7, lr}
 80041f2:	b084      	sub	sp, #16
 80041f4:	af00      	add	r7, sp, #0
 80041f6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check if the Initialization mode is set */
  if ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	681b      	ldr	r3, [r3, #0]
 80041fc:	68db      	ldr	r3, [r3, #12]
 80041fe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004202:	2b00      	cmp	r3, #0
 8004204:	d119      	bne.n	800423a <RTC_EnterInitMode+0x4a>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	681b      	ldr	r3, [r3, #0]
 800420a:	f04f 32ff 	mov.w	r2, #4294967295
 800420e:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 8004210:	f7fd fd82 	bl	8001d18 <HAL_GetTick>
 8004214:	60f8      	str	r0, [r7, #12]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 8004216:	e009      	b.n	800422c <RTC_EnterInitMode+0x3c>
    {
      if ((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 8004218:	f7fd fd7e 	bl	8001d18 <HAL_GetTick>
 800421c:	4602      	mov	r2, r0
 800421e:	68fb      	ldr	r3, [r7, #12]
 8004220:	1ad3      	subs	r3, r2, r3
 8004222:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004226:	d901      	bls.n	800422c <RTC_EnterInitMode+0x3c>
      {
        return HAL_TIMEOUT;
 8004228:	2303      	movs	r3, #3
 800422a:	e007      	b.n	800423c <RTC_EnterInitMode+0x4c>
    while ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	681b      	ldr	r3, [r3, #0]
 8004230:	68db      	ldr	r3, [r3, #12]
 8004232:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004236:	2b00      	cmp	r3, #0
 8004238:	d0ee      	beq.n	8004218 <RTC_EnterInitMode+0x28>
      }
    }
  }

  return HAL_OK;
 800423a:	2300      	movs	r3, #0
}
 800423c:	4618      	mov	r0, r3
 800423e:	3710      	adds	r7, #16
 8004240:	46bd      	mov	sp, r7
 8004242:	bd80      	pop	{r7, pc}

08004244 <aci_gap_set_non_discoverable>:
 */

#include "ble_gap_aci.h"

tBleStatus aci_gap_set_non_discoverable( void )
{
 8004244:	b580      	push	{r7, lr}
 8004246:	b088      	sub	sp, #32
 8004248:	af00      	add	r7, sp, #0
  struct hci_request rq;
  tBleStatus status = 0;
 800424a:	2300      	movs	r3, #0
 800424c:	71fb      	strb	r3, [r7, #7]
  Osal_MemSet( &rq, 0, sizeof(rq) );
 800424e:	f107 0308 	add.w	r3, r7, #8
 8004252:	2218      	movs	r2, #24
 8004254:	2100      	movs	r1, #0
 8004256:	4618      	mov	r0, r3
 8004258:	f000 ff45 	bl	80050e6 <Osal_MemSet>
  rq.ogf = 0x3f;
 800425c:	233f      	movs	r3, #63	; 0x3f
 800425e:	813b      	strh	r3, [r7, #8]
  rq.ocf = 0x081;
 8004260:	2381      	movs	r3, #129	; 0x81
 8004262:	817b      	strh	r3, [r7, #10]
  rq.rparam = &status;
 8004264:	1dfb      	adds	r3, r7, #7
 8004266:	61bb      	str	r3, [r7, #24]
  rq.rlen = 1;
 8004268:	2301      	movs	r3, #1
 800426a:	61fb      	str	r3, [r7, #28]
  if ( hci_send_req(&rq, FALSE) < 0 )
 800426c:	f107 0308 	add.w	r3, r7, #8
 8004270:	2100      	movs	r1, #0
 8004272:	4618      	mov	r0, r3
 8004274:	f001 fac6 	bl	8005804 <hci_send_req>
 8004278:	4603      	mov	r3, r0
 800427a:	2b00      	cmp	r3, #0
 800427c:	da01      	bge.n	8004282 <aci_gap_set_non_discoverable+0x3e>
    return BLE_STATUS_TIMEOUT;
 800427e:	23ff      	movs	r3, #255	; 0xff
 8004280:	e000      	b.n	8004284 <aci_gap_set_non_discoverable+0x40>
  return status;
 8004282:	79fb      	ldrb	r3, [r7, #7]
}
 8004284:	4618      	mov	r0, r3
 8004286:	3720      	adds	r7, #32
 8004288:	46bd      	mov	sp, r7
 800428a:	bd80      	pop	{r7, pc}

0800428c <aci_gap_set_discoverable>:
                                     const uint8_t* Local_Name,
                                     uint8_t Service_Uuid_length,
                                     const uint8_t* Service_Uuid_List,
                                     uint16_t Slave_Conn_Interval_Min,
                                     uint16_t Slave_Conn_Interval_Max )
{
 800428c:	b5b0      	push	{r4, r5, r7, lr}
 800428e:	b0ce      	sub	sp, #312	; 0x138
 8004290:	af00      	add	r7, sp, #0
 8004292:	4605      	mov	r5, r0
 8004294:	460c      	mov	r4, r1
 8004296:	4610      	mov	r0, r2
 8004298:	4619      	mov	r1, r3
 800429a:	1dfb      	adds	r3, r7, #7
 800429c:	462a      	mov	r2, r5
 800429e:	701a      	strb	r2, [r3, #0]
 80042a0:	1d3b      	adds	r3, r7, #4
 80042a2:	4622      	mov	r2, r4
 80042a4:	801a      	strh	r2, [r3, #0]
 80042a6:	1cbb      	adds	r3, r7, #2
 80042a8:	4602      	mov	r2, r0
 80042aa:	801a      	strh	r2, [r3, #0]
 80042ac:	1dbb      	adds	r3, r7, #6
 80042ae:	460a      	mov	r2, r1
 80042b0:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gap_set_discoverable_cp0 *cp0 = (aci_gap_set_discoverable_cp0*)(cmd_buffer);
 80042b2:	f107 0310 	add.w	r3, r7, #16
 80042b6:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
  aci_gap_set_discoverable_cp1 *cp1 = (aci_gap_set_discoverable_cp1*)(cmd_buffer + 1 + 2 + 2 + 1 + 1 + 1 + Local_Name_Length * (sizeof(uint8_t)));
 80042ba:	f897 314c 	ldrb.w	r3, [r7, #332]	; 0x14c
 80042be:	3308      	adds	r3, #8
 80042c0:	f107 0210 	add.w	r2, r7, #16
 80042c4:	4413      	add	r3, r2
 80042c6:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  aci_gap_set_discoverable_cp2 *cp2 = (aci_gap_set_discoverable_cp2*)(cmd_buffer + 1 + 2 + 2 + 1 + 1 + 1 + Local_Name_Length * (sizeof(uint8_t)) + 1 + Service_Uuid_length * (sizeof(uint8_t)));
 80042ca:	f897 214c 	ldrb.w	r2, [r7, #332]	; 0x14c
 80042ce:	f897 3154 	ldrb.w	r3, [r7, #340]	; 0x154
 80042d2:	4413      	add	r3, r2
 80042d4:	3309      	adds	r3, #9
 80042d6:	f107 0210 	add.w	r2, r7, #16
 80042da:	4413      	add	r3, r2
 80042dc:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 80042e0:	f107 030f 	add.w	r3, r7, #15
 80042e4:	2200      	movs	r2, #0
 80042e6:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 80042e8:	2300      	movs	r3, #0
 80042ea:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Advertising_Type = Advertising_Type;
 80042ee:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 80042f2:	1dfa      	adds	r2, r7, #7
 80042f4:	7812      	ldrb	r2, [r2, #0]
 80042f6:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 80042f8:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80042fc:	3301      	adds	r3, #1
 80042fe:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Advertising_Interval_Min = Advertising_Interval_Min;
 8004302:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8004306:	1d3a      	adds	r2, r7, #4
 8004308:	8812      	ldrh	r2, [r2, #0]
 800430a:	f8a3 2001 	strh.w	r2, [r3, #1]
  index_input += 2;
 800430e:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8004312:	3302      	adds	r3, #2
 8004314:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Advertising_Interval_Max = Advertising_Interval_Max;
 8004318:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 800431c:	1cba      	adds	r2, r7, #2
 800431e:	8812      	ldrh	r2, [r2, #0]
 8004320:	f8a3 2003 	strh.w	r2, [r3, #3]
  index_input += 2;
 8004324:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8004328:	3302      	adds	r3, #2
 800432a:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Own_Address_Type = Own_Address_Type;
 800432e:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8004332:	1dba      	adds	r2, r7, #6
 8004334:	7812      	ldrb	r2, [r2, #0]
 8004336:	715a      	strb	r2, [r3, #5]
  index_input += 1;
 8004338:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800433c:	3301      	adds	r3, #1
 800433e:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Advertising_Filter_Policy = Advertising_Filter_Policy;
 8004342:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8004346:	f897 2148 	ldrb.w	r2, [r7, #328]	; 0x148
 800434a:	719a      	strb	r2, [r3, #6]
  index_input += 1;
 800434c:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8004350:	3301      	adds	r3, #1
 8004352:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Local_Name_Length = Local_Name_Length;
 8004356:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 800435a:	f897 214c 	ldrb.w	r2, [r7, #332]	; 0x14c
 800435e:	71da      	strb	r2, [r3, #7]
  index_input += 1;
 8004360:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8004364:	3301      	adds	r3, #1
 8004366:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  /* var_len_data input */
  {
    Osal_MemCpy( (void*)&cp0->Local_Name, (const void*)Local_Name, Local_Name_Length );
 800436a:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 800436e:	3308      	adds	r3, #8
 8004370:	f897 214c 	ldrb.w	r2, [r7, #332]	; 0x14c
 8004374:	f8d7 1150 	ldr.w	r1, [r7, #336]	; 0x150
 8004378:	4618      	mov	r0, r3
 800437a:	f000 fea4 	bl	80050c6 <Osal_MemCpy>
    index_input += Local_Name_Length;
 800437e:	f897 314c 	ldrb.w	r3, [r7, #332]	; 0x14c
 8004382:	f8d7 2128 	ldr.w	r2, [r7, #296]	; 0x128
 8004386:	4413      	add	r3, r2
 8004388:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
    {
      cp1->Service_Uuid_length = Service_Uuid_length;
 800438c:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8004390:	f897 2154 	ldrb.w	r2, [r7, #340]	; 0x154
 8004394:	701a      	strb	r2, [r3, #0]
    }
    index_input += 1;
 8004396:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800439a:	3301      	adds	r3, #1
 800439c:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
    Osal_MemCpy( (void*)&cp1->Service_Uuid_List, (const void*)Service_Uuid_List, Service_Uuid_length );
 80043a0:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 80043a4:	3301      	adds	r3, #1
 80043a6:	f897 2154 	ldrb.w	r2, [r7, #340]	; 0x154
 80043aa:	f8d7 1158 	ldr.w	r1, [r7, #344]	; 0x158
 80043ae:	4618      	mov	r0, r3
 80043b0:	f000 fe89 	bl	80050c6 <Osal_MemCpy>
    index_input += Service_Uuid_length;
 80043b4:	f897 3154 	ldrb.w	r3, [r7, #340]	; 0x154
 80043b8:	f8d7 2128 	ldr.w	r2, [r7, #296]	; 0x128
 80043bc:	4413      	add	r3, r2
 80043be:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
    {
      cp2->Slave_Conn_Interval_Min = Slave_Conn_Interval_Min;
 80043c2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80043c6:	f8b7 215c 	ldrh.w	r2, [r7, #348]	; 0x15c
 80043ca:	801a      	strh	r2, [r3, #0]
    }
    index_input += 2;
 80043cc:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80043d0:	3302      	adds	r3, #2
 80043d2:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
    {
      cp2->Slave_Conn_Interval_Max = Slave_Conn_Interval_Max;
 80043d6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80043da:	f8b7 2160 	ldrh.w	r2, [r7, #352]	; 0x160
 80043de:	805a      	strh	r2, [r3, #2]
    }
    index_input += 2;
 80043e0:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80043e4:	3302      	adds	r3, #2
 80043e6:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  }
  Osal_MemSet( &rq, 0, sizeof(rq) );
 80043ea:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80043ee:	2218      	movs	r2, #24
 80043f0:	2100      	movs	r1, #0
 80043f2:	4618      	mov	r0, r3
 80043f4:	f000 fe77 	bl	80050e6 <Osal_MemSet>
  rq.ogf = 0x3f;
 80043f8:	233f      	movs	r3, #63	; 0x3f
 80043fa:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x083;
 80043fe:	2383      	movs	r3, #131	; 0x83
 8004400:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 8004404:	f107 0310 	add.w	r3, r7, #16
 8004408:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 800440c:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8004410:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 8004414:	f107 030f 	add.w	r3, r7, #15
 8004418:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 800441c:	2301      	movs	r3, #1
 800441e:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 8004422:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8004426:	2100      	movs	r1, #0
 8004428:	4618      	mov	r0, r3
 800442a:	f001 f9eb 	bl	8005804 <hci_send_req>
 800442e:	4603      	mov	r3, r0
 8004430:	2b00      	cmp	r3, #0
 8004432:	da01      	bge.n	8004438 <aci_gap_set_discoverable+0x1ac>
    return BLE_STATUS_TIMEOUT;
 8004434:	23ff      	movs	r3, #255	; 0xff
 8004436:	e002      	b.n	800443e <aci_gap_set_discoverable+0x1b2>
  return status;
 8004438:	f107 030f 	add.w	r3, r7, #15
 800443c:	781b      	ldrb	r3, [r3, #0]
}
 800443e:	4618      	mov	r0, r3
 8004440:	f507 779c 	add.w	r7, r7, #312	; 0x138
 8004444:	46bd      	mov	sp, r7
 8004446:	bdb0      	pop	{r4, r5, r7, pc}

08004448 <aci_gap_set_io_capability>:
    return BLE_STATUS_TIMEOUT;
  return status;
}

tBleStatus aci_gap_set_io_capability( uint8_t IO_Capability )
{
 8004448:	b580      	push	{r7, lr}
 800444a:	b0cc      	sub	sp, #304	; 0x130
 800444c:	af00      	add	r7, sp, #0
 800444e:	4602      	mov	r2, r0
 8004450:	1dfb      	adds	r3, r7, #7
 8004452:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gap_set_io_capability_cp0 *cp0 = (aci_gap_set_io_capability_cp0*)(cmd_buffer);
 8004454:	f107 0310 	add.w	r3, r7, #16
 8004458:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 800445c:	f107 030f 	add.w	r3, r7, #15
 8004460:	2200      	movs	r2, #0
 8004462:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 8004464:	2300      	movs	r3, #0
 8004466:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->IO_Capability = IO_Capability;
 800446a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800446e:	1dfa      	adds	r2, r7, #7
 8004470:	7812      	ldrb	r2, [r2, #0]
 8004472:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 8004474:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8004478:	3301      	adds	r3, #1
 800447a:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 800447e:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8004482:	2218      	movs	r2, #24
 8004484:	2100      	movs	r1, #0
 8004486:	4618      	mov	r0, r3
 8004488:	f000 fe2d 	bl	80050e6 <Osal_MemSet>
  rq.ogf = 0x3f;
 800448c:	233f      	movs	r3, #63	; 0x3f
 800448e:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x085;
 8004492:	2385      	movs	r3, #133	; 0x85
 8004494:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 8004498:	f107 0310 	add.w	r3, r7, #16
 800449c:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 80044a0:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80044a4:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 80044a8:	f107 030f 	add.w	r3, r7, #15
 80044ac:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 80044b0:	2301      	movs	r3, #1
 80044b2:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 80044b6:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80044ba:	2100      	movs	r1, #0
 80044bc:	4618      	mov	r0, r3
 80044be:	f001 f9a1 	bl	8005804 <hci_send_req>
 80044c2:	4603      	mov	r3, r0
 80044c4:	2b00      	cmp	r3, #0
 80044c6:	da01      	bge.n	80044cc <aci_gap_set_io_capability+0x84>
    return BLE_STATUS_TIMEOUT;
 80044c8:	23ff      	movs	r3, #255	; 0xff
 80044ca:	e002      	b.n	80044d2 <aci_gap_set_io_capability+0x8a>
  return status;
 80044cc:	f107 030f 	add.w	r3, r7, #15
 80044d0:	781b      	ldrb	r3, [r3, #0]
}
 80044d2:	4618      	mov	r0, r3
 80044d4:	f507 7798 	add.w	r7, r7, #304	; 0x130
 80044d8:	46bd      	mov	sp, r7
 80044da:	bd80      	pop	{r7, pc}

080044dc <aci_gap_set_authentication_requirement>:
                                                   uint8_t Min_Encryption_Key_Size,
                                                   uint8_t Max_Encryption_Key_Size,
                                                   uint8_t Use_Fixed_Pin,
                                                   uint32_t Fixed_Pin,
                                                   uint8_t Identity_Address_Type )
{
 80044dc:	b5b0      	push	{r4, r5, r7, lr}
 80044de:	b0cc      	sub	sp, #304	; 0x130
 80044e0:	af00      	add	r7, sp, #0
 80044e2:	4605      	mov	r5, r0
 80044e4:	460c      	mov	r4, r1
 80044e6:	4610      	mov	r0, r2
 80044e8:	4619      	mov	r1, r3
 80044ea:	1dfb      	adds	r3, r7, #7
 80044ec:	462a      	mov	r2, r5
 80044ee:	701a      	strb	r2, [r3, #0]
 80044f0:	1dbb      	adds	r3, r7, #6
 80044f2:	4622      	mov	r2, r4
 80044f4:	701a      	strb	r2, [r3, #0]
 80044f6:	1d7b      	adds	r3, r7, #5
 80044f8:	4602      	mov	r2, r0
 80044fa:	701a      	strb	r2, [r3, #0]
 80044fc:	1d3b      	adds	r3, r7, #4
 80044fe:	460a      	mov	r2, r1
 8004500:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gap_set_authentication_requirement_cp0 *cp0 = (aci_gap_set_authentication_requirement_cp0*)(cmd_buffer);
 8004502:	f107 0310 	add.w	r3, r7, #16
 8004506:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 800450a:	f107 030f 	add.w	r3, r7, #15
 800450e:	2200      	movs	r2, #0
 8004510:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 8004512:	2300      	movs	r3, #0
 8004514:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Bonding_Mode = Bonding_Mode;
 8004518:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800451c:	1dfa      	adds	r2, r7, #7
 800451e:	7812      	ldrb	r2, [r2, #0]
 8004520:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 8004522:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8004526:	3301      	adds	r3, #1
 8004528:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->MITM_Mode = MITM_Mode;
 800452c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004530:	1dba      	adds	r2, r7, #6
 8004532:	7812      	ldrb	r2, [r2, #0]
 8004534:	705a      	strb	r2, [r3, #1]
  index_input += 1;
 8004536:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800453a:	3301      	adds	r3, #1
 800453c:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->SC_Support = SC_Support;
 8004540:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004544:	1d7a      	adds	r2, r7, #5
 8004546:	7812      	ldrb	r2, [r2, #0]
 8004548:	709a      	strb	r2, [r3, #2]
  index_input += 1;
 800454a:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800454e:	3301      	adds	r3, #1
 8004550:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->KeyPress_Notification_Support = KeyPress_Notification_Support;
 8004554:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004558:	1d3a      	adds	r2, r7, #4
 800455a:	7812      	ldrb	r2, [r2, #0]
 800455c:	70da      	strb	r2, [r3, #3]
  index_input += 1;
 800455e:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8004562:	3301      	adds	r3, #1
 8004564:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Min_Encryption_Key_Size = Min_Encryption_Key_Size;
 8004568:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800456c:	f897 2140 	ldrb.w	r2, [r7, #320]	; 0x140
 8004570:	711a      	strb	r2, [r3, #4]
  index_input += 1;
 8004572:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8004576:	3301      	adds	r3, #1
 8004578:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Max_Encryption_Key_Size = Max_Encryption_Key_Size;
 800457c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004580:	f897 2144 	ldrb.w	r2, [r7, #324]	; 0x144
 8004584:	715a      	strb	r2, [r3, #5]
  index_input += 1;
 8004586:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800458a:	3301      	adds	r3, #1
 800458c:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Use_Fixed_Pin = Use_Fixed_Pin;
 8004590:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004594:	f897 2148 	ldrb.w	r2, [r7, #328]	; 0x148
 8004598:	719a      	strb	r2, [r3, #6]
  index_input += 1;
 800459a:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800459e:	3301      	adds	r3, #1
 80045a0:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Fixed_Pin = Fixed_Pin;
 80045a4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80045a8:	f8d7 214c 	ldr.w	r2, [r7, #332]	; 0x14c
 80045ac:	f8c3 2007 	str.w	r2, [r3, #7]
  index_input += 4;
 80045b0:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80045b4:	3304      	adds	r3, #4
 80045b6:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Identity_Address_Type = Identity_Address_Type;
 80045ba:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80045be:	f897 2150 	ldrb.w	r2, [r7, #336]	; 0x150
 80045c2:	72da      	strb	r2, [r3, #11]
  index_input += 1;
 80045c4:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80045c8:	3301      	adds	r3, #1
 80045ca:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 80045ce:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80045d2:	2218      	movs	r2, #24
 80045d4:	2100      	movs	r1, #0
 80045d6:	4618      	mov	r0, r3
 80045d8:	f000 fd85 	bl	80050e6 <Osal_MemSet>
  rq.ogf = 0x3f;
 80045dc:	233f      	movs	r3, #63	; 0x3f
 80045de:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x086;
 80045e2:	2386      	movs	r3, #134	; 0x86
 80045e4:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 80045e8:	f107 0310 	add.w	r3, r7, #16
 80045ec:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 80045f0:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80045f4:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 80045f8:	f107 030f 	add.w	r3, r7, #15
 80045fc:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 8004600:	2301      	movs	r3, #1
 8004602:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 8004606:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800460a:	2100      	movs	r1, #0
 800460c:	4618      	mov	r0, r3
 800460e:	f001 f8f9 	bl	8005804 <hci_send_req>
 8004612:	4603      	mov	r3, r0
 8004614:	2b00      	cmp	r3, #0
 8004616:	da01      	bge.n	800461c <aci_gap_set_authentication_requirement+0x140>
    return BLE_STATUS_TIMEOUT;
 8004618:	23ff      	movs	r3, #255	; 0xff
 800461a:	e002      	b.n	8004622 <aci_gap_set_authentication_requirement+0x146>
  return status;
 800461c:	f107 030f 	add.w	r3, r7, #15
 8004620:	781b      	ldrb	r3, [r3, #0]
}
 8004622:	4618      	mov	r0, r3
 8004624:	f507 7798 	add.w	r7, r7, #304	; 0x130
 8004628:	46bd      	mov	sp, r7
 800462a:	bdb0      	pop	{r4, r5, r7, pc}

0800462c <aci_gap_init>:
                         uint8_t privacy_enabled,
                         uint8_t device_name_char_len,
                         uint16_t* Service_Handle,
                         uint16_t* Dev_Name_Char_Handle,
                         uint16_t* Appearance_Char_Handle )
{
 800462c:	b590      	push	{r4, r7, lr}
 800462e:	b0cd      	sub	sp, #308	; 0x134
 8004630:	af00      	add	r7, sp, #0
 8004632:	4604      	mov	r4, r0
 8004634:	4608      	mov	r0, r1
 8004636:	4611      	mov	r1, r2
 8004638:	463a      	mov	r2, r7
 800463a:	6013      	str	r3, [r2, #0]
 800463c:	1dfb      	adds	r3, r7, #7
 800463e:	4622      	mov	r2, r4
 8004640:	701a      	strb	r2, [r3, #0]
 8004642:	1dbb      	adds	r3, r7, #6
 8004644:	4602      	mov	r2, r0
 8004646:	701a      	strb	r2, [r3, #0]
 8004648:	1d7b      	adds	r3, r7, #5
 800464a:	460a      	mov	r2, r1
 800464c:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gap_init_cp0 *cp0 = (aci_gap_init_cp0*)(cmd_buffer);
 800464e:	f107 0310 	add.w	r3, r7, #16
 8004652:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  aci_gap_init_rp0 resp;
  Osal_MemSet( &resp, 0, sizeof(resp) );
 8004656:	f107 0308 	add.w	r3, r7, #8
 800465a:	2207      	movs	r2, #7
 800465c:	2100      	movs	r1, #0
 800465e:	4618      	mov	r0, r3
 8004660:	f000 fd41 	bl	80050e6 <Osal_MemSet>
  int index_input = 0;
 8004664:	2300      	movs	r3, #0
 8004666:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Role = Role;
 800466a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800466e:	1dfa      	adds	r2, r7, #7
 8004670:	7812      	ldrb	r2, [r2, #0]
 8004672:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 8004674:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8004678:	3301      	adds	r3, #1
 800467a:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->privacy_enabled = privacy_enabled;
 800467e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004682:	1dba      	adds	r2, r7, #6
 8004684:	7812      	ldrb	r2, [r2, #0]
 8004686:	705a      	strb	r2, [r3, #1]
  index_input += 1;
 8004688:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800468c:	3301      	adds	r3, #1
 800468e:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->device_name_char_len = device_name_char_len;
 8004692:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004696:	1d7a      	adds	r2, r7, #5
 8004698:	7812      	ldrb	r2, [r2, #0]
 800469a:	709a      	strb	r2, [r3, #2]
  index_input += 1;
 800469c:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80046a0:	3301      	adds	r3, #1
 80046a2:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 80046a6:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80046aa:	2218      	movs	r2, #24
 80046ac:	2100      	movs	r1, #0
 80046ae:	4618      	mov	r0, r3
 80046b0:	f000 fd19 	bl	80050e6 <Osal_MemSet>
  rq.ogf = 0x3f;
 80046b4:	233f      	movs	r3, #63	; 0x3f
 80046b6:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x08a;
 80046ba:	238a      	movs	r3, #138	; 0x8a
 80046bc:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 80046c0:	f107 0310 	add.w	r3, r7, #16
 80046c4:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 80046c8:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80046cc:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &resp;
 80046d0:	f107 0308 	add.w	r3, r7, #8
 80046d4:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = sizeof(resp);
 80046d8:	2307      	movs	r3, #7
 80046da:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 80046de:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80046e2:	2100      	movs	r1, #0
 80046e4:	4618      	mov	r0, r3
 80046e6:	f001 f88d 	bl	8005804 <hci_send_req>
 80046ea:	4603      	mov	r3, r0
 80046ec:	2b00      	cmp	r3, #0
 80046ee:	da01      	bge.n	80046f4 <aci_gap_init+0xc8>
    return BLE_STATUS_TIMEOUT;
 80046f0:	23ff      	movs	r3, #255	; 0xff
 80046f2:	e021      	b.n	8004738 <aci_gap_init+0x10c>
  if ( resp.Status )
 80046f4:	f107 0308 	add.w	r3, r7, #8
 80046f8:	781b      	ldrb	r3, [r3, #0]
 80046fa:	2b00      	cmp	r3, #0
 80046fc:	d003      	beq.n	8004706 <aci_gap_init+0xda>
    return resp.Status;
 80046fe:	f107 0308 	add.w	r3, r7, #8
 8004702:	781b      	ldrb	r3, [r3, #0]
 8004704:	e018      	b.n	8004738 <aci_gap_init+0x10c>
  *Service_Handle = resp.Service_Handle;
 8004706:	f107 0308 	add.w	r3, r7, #8
 800470a:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 800470e:	b29a      	uxth	r2, r3
 8004710:	463b      	mov	r3, r7
 8004712:	681b      	ldr	r3, [r3, #0]
 8004714:	801a      	strh	r2, [r3, #0]
  *Dev_Name_Char_Handle = resp.Dev_Name_Char_Handle;
 8004716:	f107 0308 	add.w	r3, r7, #8
 800471a:	f8b3 3003 	ldrh.w	r3, [r3, #3]
 800471e:	b29a      	uxth	r2, r3
 8004720:	f8d7 3140 	ldr.w	r3, [r7, #320]	; 0x140
 8004724:	801a      	strh	r2, [r3, #0]
  *Appearance_Char_Handle = resp.Appearance_Char_Handle;
 8004726:	f107 0308 	add.w	r3, r7, #8
 800472a:	f8b3 3005 	ldrh.w	r3, [r3, #5]
 800472e:	b29a      	uxth	r2, r3
 8004730:	f8d7 3144 	ldr.w	r3, [r7, #324]	; 0x144
 8004734:	801a      	strh	r2, [r3, #0]
  return BLE_STATUS_SUCCESS;
 8004736:	2300      	movs	r3, #0
}
 8004738:	4618      	mov	r0, r3
 800473a:	f507 779a 	add.w	r7, r7, #308	; 0x134
 800473e:	46bd      	mov	sp, r7
 8004740:	bd90      	pop	{r4, r7, pc}

08004742 <aci_gap_update_adv_data>:
  return status;
}

tBleStatus aci_gap_update_adv_data( uint8_t AdvDataLen,
                                    const uint8_t* AdvData )
{
 8004742:	b580      	push	{r7, lr}
 8004744:	b0cc      	sub	sp, #304	; 0x130
 8004746:	af00      	add	r7, sp, #0
 8004748:	4602      	mov	r2, r0
 800474a:	463b      	mov	r3, r7
 800474c:	6019      	str	r1, [r3, #0]
 800474e:	1dfb      	adds	r3, r7, #7
 8004750:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gap_update_adv_data_cp0 *cp0 = (aci_gap_update_adv_data_cp0*)(cmd_buffer);
 8004752:	f107 0310 	add.w	r3, r7, #16
 8004756:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 800475a:	f107 030f 	add.w	r3, r7, #15
 800475e:	2200      	movs	r2, #0
 8004760:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 8004762:	2300      	movs	r3, #0
 8004764:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->AdvDataLen = AdvDataLen;
 8004768:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800476c:	1dfa      	adds	r2, r7, #7
 800476e:	7812      	ldrb	r2, [r2, #0]
 8004770:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 8004772:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8004776:	3301      	adds	r3, #1
 8004778:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemCpy( (void*)&cp0->AdvData, (const void*)AdvData, AdvDataLen );
 800477c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004780:	1c58      	adds	r0, r3, #1
 8004782:	1dfb      	adds	r3, r7, #7
 8004784:	781a      	ldrb	r2, [r3, #0]
 8004786:	463b      	mov	r3, r7
 8004788:	6819      	ldr	r1, [r3, #0]
 800478a:	f000 fc9c 	bl	80050c6 <Osal_MemCpy>
  index_input += AdvDataLen;
 800478e:	1dfb      	adds	r3, r7, #7
 8004790:	781b      	ldrb	r3, [r3, #0]
 8004792:	f8d7 2128 	ldr.w	r2, [r7, #296]	; 0x128
 8004796:	4413      	add	r3, r2
 8004798:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 800479c:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80047a0:	2218      	movs	r2, #24
 80047a2:	2100      	movs	r1, #0
 80047a4:	4618      	mov	r0, r3
 80047a6:	f000 fc9e 	bl	80050e6 <Osal_MemSet>
  rq.ogf = 0x3f;
 80047aa:	233f      	movs	r3, #63	; 0x3f
 80047ac:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x08e;
 80047b0:	238e      	movs	r3, #142	; 0x8e
 80047b2:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 80047b6:	f107 0310 	add.w	r3, r7, #16
 80047ba:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 80047be:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80047c2:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 80047c6:	f107 030f 	add.w	r3, r7, #15
 80047ca:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 80047ce:	2301      	movs	r3, #1
 80047d0:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 80047d4:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80047d8:	2100      	movs	r1, #0
 80047da:	4618      	mov	r0, r3
 80047dc:	f001 f812 	bl	8005804 <hci_send_req>
 80047e0:	4603      	mov	r3, r0
 80047e2:	2b00      	cmp	r3, #0
 80047e4:	da01      	bge.n	80047ea <aci_gap_update_adv_data+0xa8>
    return BLE_STATUS_TIMEOUT;
 80047e6:	23ff      	movs	r3, #255	; 0xff
 80047e8:	e002      	b.n	80047f0 <aci_gap_update_adv_data+0xae>
  return status;
 80047ea:	f107 030f 	add.w	r3, r7, #15
 80047ee:	781b      	ldrb	r3, [r3, #0]
}
 80047f0:	4618      	mov	r0, r3
 80047f2:	f507 7798 	add.w	r7, r7, #304	; 0x130
 80047f6:	46bd      	mov	sp, r7
 80047f8:	bd80      	pop	{r7, pc}

080047fa <aci_gap_configure_whitelist>:
    return BLE_STATUS_TIMEOUT;
  return status;
}

tBleStatus aci_gap_configure_whitelist( void )
{
 80047fa:	b580      	push	{r7, lr}
 80047fc:	b088      	sub	sp, #32
 80047fe:	af00      	add	r7, sp, #0
  struct hci_request rq;
  tBleStatus status = 0;
 8004800:	2300      	movs	r3, #0
 8004802:	71fb      	strb	r3, [r7, #7]
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8004804:	f107 0308 	add.w	r3, r7, #8
 8004808:	2218      	movs	r2, #24
 800480a:	2100      	movs	r1, #0
 800480c:	4618      	mov	r0, r3
 800480e:	f000 fc6a 	bl	80050e6 <Osal_MemSet>
  rq.ogf = 0x3f;
 8004812:	233f      	movs	r3, #63	; 0x3f
 8004814:	813b      	strh	r3, [r7, #8]
  rq.ocf = 0x092;
 8004816:	2392      	movs	r3, #146	; 0x92
 8004818:	817b      	strh	r3, [r7, #10]
  rq.rparam = &status;
 800481a:	1dfb      	adds	r3, r7, #7
 800481c:	61bb      	str	r3, [r7, #24]
  rq.rlen = 1;
 800481e:	2301      	movs	r3, #1
 8004820:	61fb      	str	r3, [r7, #28]
  if ( hci_send_req(&rq, FALSE) < 0 )
 8004822:	f107 0308 	add.w	r3, r7, #8
 8004826:	2100      	movs	r1, #0
 8004828:	4618      	mov	r0, r3
 800482a:	f000 ffeb 	bl	8005804 <hci_send_req>
 800482e:	4603      	mov	r3, r0
 8004830:	2b00      	cmp	r3, #0
 8004832:	da01      	bge.n	8004838 <aci_gap_configure_whitelist+0x3e>
    return BLE_STATUS_TIMEOUT;
 8004834:	23ff      	movs	r3, #255	; 0xff
 8004836:	e000      	b.n	800483a <aci_gap_configure_whitelist+0x40>
  return status;
 8004838:	79fb      	ldrb	r3, [r7, #7]
}
 800483a:	4618      	mov	r0, r3
 800483c:	3720      	adds	r7, #32
 800483e:	46bd      	mov	sp, r7
 8004840:	bd80      	pop	{r7, pc}

08004842 <aci_gatt_init>:
 */

#include "ble_gatt_aci.h"

tBleStatus aci_gatt_init( void )
{
 8004842:	b580      	push	{r7, lr}
 8004844:	b088      	sub	sp, #32
 8004846:	af00      	add	r7, sp, #0
  struct hci_request rq;
  tBleStatus status = 0;
 8004848:	2300      	movs	r3, #0
 800484a:	71fb      	strb	r3, [r7, #7]
  Osal_MemSet( &rq, 0, sizeof(rq) );
 800484c:	f107 0308 	add.w	r3, r7, #8
 8004850:	2218      	movs	r2, #24
 8004852:	2100      	movs	r1, #0
 8004854:	4618      	mov	r0, r3
 8004856:	f000 fc46 	bl	80050e6 <Osal_MemSet>
  rq.ogf = 0x3f;
 800485a:	233f      	movs	r3, #63	; 0x3f
 800485c:	813b      	strh	r3, [r7, #8]
  rq.ocf = 0x101;
 800485e:	f240 1301 	movw	r3, #257	; 0x101
 8004862:	817b      	strh	r3, [r7, #10]
  rq.rparam = &status;
 8004864:	1dfb      	adds	r3, r7, #7
 8004866:	61bb      	str	r3, [r7, #24]
  rq.rlen = 1;
 8004868:	2301      	movs	r3, #1
 800486a:	61fb      	str	r3, [r7, #28]
  if ( hci_send_req(&rq, FALSE) < 0 )
 800486c:	f107 0308 	add.w	r3, r7, #8
 8004870:	2100      	movs	r1, #0
 8004872:	4618      	mov	r0, r3
 8004874:	f000 ffc6 	bl	8005804 <hci_send_req>
 8004878:	4603      	mov	r3, r0
 800487a:	2b00      	cmp	r3, #0
 800487c:	da01      	bge.n	8004882 <aci_gatt_init+0x40>
    return BLE_STATUS_TIMEOUT;
 800487e:	23ff      	movs	r3, #255	; 0xff
 8004880:	e000      	b.n	8004884 <aci_gatt_init+0x42>
  return status;
 8004882:	79fb      	ldrb	r3, [r7, #7]
}
 8004884:	4618      	mov	r0, r3
 8004886:	3720      	adds	r7, #32
 8004888:	46bd      	mov	sp, r7
 800488a:	bd80      	pop	{r7, pc}

0800488c <aci_gatt_add_service>:
tBleStatus aci_gatt_add_service( uint8_t Service_UUID_Type,
                                 const Service_UUID_t* Service_UUID,
                                 uint8_t Service_Type,
                                 uint8_t Max_Attribute_Records,
                                 uint16_t* Service_Handle )
{
 800488c:	b590      	push	{r4, r7, lr}
 800488e:	b0cf      	sub	sp, #316	; 0x13c
 8004890:	af00      	add	r7, sp, #0
 8004892:	4604      	mov	r4, r0
 8004894:	4638      	mov	r0, r7
 8004896:	6001      	str	r1, [r0, #0]
 8004898:	4610      	mov	r0, r2
 800489a:	4619      	mov	r1, r3
 800489c:	1dfb      	adds	r3, r7, #7
 800489e:	4622      	mov	r2, r4
 80048a0:	701a      	strb	r2, [r3, #0]
 80048a2:	1dbb      	adds	r3, r7, #6
 80048a4:	4602      	mov	r2, r0
 80048a6:	701a      	strb	r2, [r3, #0]
 80048a8:	1d7b      	adds	r3, r7, #5
 80048aa:	460a      	mov	r2, r1
 80048ac:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gatt_add_service_cp0 *cp0 = (aci_gatt_add_service_cp0*)(cmd_buffer);
 80048ae:	f107 0310 	add.w	r3, r7, #16
 80048b2:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  aci_gatt_add_service_cp1 *cp1 = (aci_gatt_add_service_cp1*)(cmd_buffer + 1 + (Service_UUID_Type == 1 ? 2 : (Service_UUID_Type == 2 ? 16 : 0)));
 80048b6:	1dfb      	adds	r3, r7, #7
 80048b8:	781b      	ldrb	r3, [r3, #0]
 80048ba:	2b01      	cmp	r3, #1
 80048bc:	d007      	beq.n	80048ce <aci_gatt_add_service+0x42>
 80048be:	1dfb      	adds	r3, r7, #7
 80048c0:	781b      	ldrb	r3, [r3, #0]
 80048c2:	2b02      	cmp	r3, #2
 80048c4:	d101      	bne.n	80048ca <aci_gatt_add_service+0x3e>
 80048c6:	2311      	movs	r3, #17
 80048c8:	e002      	b.n	80048d0 <aci_gatt_add_service+0x44>
 80048ca:	2301      	movs	r3, #1
 80048cc:	e000      	b.n	80048d0 <aci_gatt_add_service+0x44>
 80048ce:	2303      	movs	r3, #3
 80048d0:	f107 0210 	add.w	r2, r7, #16
 80048d4:	4413      	add	r3, r2
 80048d6:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  aci_gatt_add_service_rp0 resp;
  Osal_MemSet( &resp, 0, sizeof(resp) );
 80048da:	f107 030c 	add.w	r3, r7, #12
 80048de:	2203      	movs	r2, #3
 80048e0:	2100      	movs	r1, #0
 80048e2:	4618      	mov	r0, r3
 80048e4:	f000 fbff 	bl	80050e6 <Osal_MemSet>
  int index_input = 0;
 80048e8:	2300      	movs	r3, #0
 80048ea:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Service_UUID_Type = Service_UUID_Type;
 80048ee:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 80048f2:	1dfa      	adds	r2, r7, #7
 80048f4:	7812      	ldrb	r2, [r2, #0]
 80048f6:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 80048f8:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80048fc:	3301      	adds	r3, #1
 80048fe:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  /* var_len_data input */
  {
    uint8_t size;
    switch ( Service_UUID_Type )
 8004902:	1dfb      	adds	r3, r7, #7
 8004904:	781b      	ldrb	r3, [r3, #0]
 8004906:	2b01      	cmp	r3, #1
 8004908:	d002      	beq.n	8004910 <aci_gatt_add_service+0x84>
 800490a:	2b02      	cmp	r3, #2
 800490c:	d004      	beq.n	8004918 <aci_gatt_add_service+0x8c>
 800490e:	e007      	b.n	8004920 <aci_gatt_add_service+0x94>
    {
      case 1: size = 2; break;
 8004910:	2302      	movs	r3, #2
 8004912:	f887 3137 	strb.w	r3, [r7, #311]	; 0x137
 8004916:	e005      	b.n	8004924 <aci_gatt_add_service+0x98>
      case 2: size = 16; break;
 8004918:	2310      	movs	r3, #16
 800491a:	f887 3137 	strb.w	r3, [r7, #311]	; 0x137
 800491e:	e001      	b.n	8004924 <aci_gatt_add_service+0x98>
      default: return BLE_STATUS_ERROR;
 8004920:	2397      	movs	r3, #151	; 0x97
 8004922:	e05d      	b.n	80049e0 <aci_gatt_add_service+0x154>
    }
    Osal_MemCpy( (void*)&cp0->Service_UUID, (const void*)Service_UUID, size );
 8004924:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8004928:	1c58      	adds	r0, r3, #1
 800492a:	f897 2137 	ldrb.w	r2, [r7, #311]	; 0x137
 800492e:	463b      	mov	r3, r7
 8004930:	6819      	ldr	r1, [r3, #0]
 8004932:	f000 fbc8 	bl	80050c6 <Osal_MemCpy>
    index_input += size;
 8004936:	f897 3137 	ldrb.w	r3, [r7, #311]	; 0x137
 800493a:	f8d7 2128 	ldr.w	r2, [r7, #296]	; 0x128
 800493e:	4413      	add	r3, r2
 8004940:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
    {
      cp1->Service_Type = Service_Type;
 8004944:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004948:	1dba      	adds	r2, r7, #6
 800494a:	7812      	ldrb	r2, [r2, #0]
 800494c:	701a      	strb	r2, [r3, #0]
    }
    index_input += 1;
 800494e:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8004952:	3301      	adds	r3, #1
 8004954:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
    {
      cp1->Max_Attribute_Records = Max_Attribute_Records;
 8004958:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800495c:	1d7a      	adds	r2, r7, #5
 800495e:	7812      	ldrb	r2, [r2, #0]
 8004960:	705a      	strb	r2, [r3, #1]
    }
    index_input += 1;
 8004962:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8004966:	3301      	adds	r3, #1
 8004968:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  }
  Osal_MemSet( &rq, 0, sizeof(rq) );
 800496c:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8004970:	2218      	movs	r2, #24
 8004972:	2100      	movs	r1, #0
 8004974:	4618      	mov	r0, r3
 8004976:	f000 fbb6 	bl	80050e6 <Osal_MemSet>
  rq.ogf = 0x3f;
 800497a:	233f      	movs	r3, #63	; 0x3f
 800497c:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x102;
 8004980:	f44f 7381 	mov.w	r3, #258	; 0x102
 8004984:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 8004988:	f107 0310 	add.w	r3, r7, #16
 800498c:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 8004990:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8004994:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &resp;
 8004998:	f107 030c 	add.w	r3, r7, #12
 800499c:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = sizeof(resp);
 80049a0:	2303      	movs	r3, #3
 80049a2:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 80049a6:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80049aa:	2100      	movs	r1, #0
 80049ac:	4618      	mov	r0, r3
 80049ae:	f000 ff29 	bl	8005804 <hci_send_req>
 80049b2:	4603      	mov	r3, r0
 80049b4:	2b00      	cmp	r3, #0
 80049b6:	da01      	bge.n	80049bc <aci_gatt_add_service+0x130>
    return BLE_STATUS_TIMEOUT;
 80049b8:	23ff      	movs	r3, #255	; 0xff
 80049ba:	e011      	b.n	80049e0 <aci_gatt_add_service+0x154>
  if ( resp.Status )
 80049bc:	f107 030c 	add.w	r3, r7, #12
 80049c0:	781b      	ldrb	r3, [r3, #0]
 80049c2:	2b00      	cmp	r3, #0
 80049c4:	d003      	beq.n	80049ce <aci_gatt_add_service+0x142>
    return resp.Status;
 80049c6:	f107 030c 	add.w	r3, r7, #12
 80049ca:	781b      	ldrb	r3, [r3, #0]
 80049cc:	e008      	b.n	80049e0 <aci_gatt_add_service+0x154>
  *Service_Handle = resp.Service_Handle;
 80049ce:	f107 030c 	add.w	r3, r7, #12
 80049d2:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 80049d6:	b29a      	uxth	r2, r3
 80049d8:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 80049dc:	801a      	strh	r2, [r3, #0]
  return BLE_STATUS_SUCCESS;
 80049de:	2300      	movs	r3, #0
}
 80049e0:	4618      	mov	r0, r3
 80049e2:	f507 779e 	add.w	r7, r7, #316	; 0x13c
 80049e6:	46bd      	mov	sp, r7
 80049e8:	bd90      	pop	{r4, r7, pc}

080049ea <aci_gatt_add_char>:
                              uint8_t Security_Permissions,
                              uint8_t GATT_Evt_Mask,
                              uint8_t Enc_Key_Size,
                              uint8_t Is_Variable,
                              uint16_t* Char_Handle )
{
 80049ea:	b590      	push	{r4, r7, lr}
 80049ec:	b0d1      	sub	sp, #324	; 0x144
 80049ee:	af00      	add	r7, sp, #0
 80049f0:	4604      	mov	r4, r0
 80049f2:	4608      	mov	r0, r1
 80049f4:	f107 0108 	add.w	r1, r7, #8
 80049f8:	600a      	str	r2, [r1, #0]
 80049fa:	4619      	mov	r1, r3
 80049fc:	f107 030e 	add.w	r3, r7, #14
 8004a00:	4622      	mov	r2, r4
 8004a02:	801a      	strh	r2, [r3, #0]
 8004a04:	f107 030d 	add.w	r3, r7, #13
 8004a08:	4602      	mov	r2, r0
 8004a0a:	701a      	strb	r2, [r3, #0]
 8004a0c:	1dbb      	adds	r3, r7, #6
 8004a0e:	460a      	mov	r2, r1
 8004a10:	801a      	strh	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gatt_add_char_cp0 *cp0 = (aci_gatt_add_char_cp0*)(cmd_buffer);
 8004a12:	f107 0318 	add.w	r3, r7, #24
 8004a16:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
  aci_gatt_add_char_cp1 *cp1 = (aci_gatt_add_char_cp1*)(cmd_buffer + 2 + 1 + (Char_UUID_Type == 1 ? 2 : (Char_UUID_Type == 2 ? 16 : 0)));
 8004a1a:	f107 030d 	add.w	r3, r7, #13
 8004a1e:	781b      	ldrb	r3, [r3, #0]
 8004a20:	2b01      	cmp	r3, #1
 8004a22:	d008      	beq.n	8004a36 <aci_gatt_add_char+0x4c>
 8004a24:	f107 030d 	add.w	r3, r7, #13
 8004a28:	781b      	ldrb	r3, [r3, #0]
 8004a2a:	2b02      	cmp	r3, #2
 8004a2c:	d101      	bne.n	8004a32 <aci_gatt_add_char+0x48>
 8004a2e:	2313      	movs	r3, #19
 8004a30:	e002      	b.n	8004a38 <aci_gatt_add_char+0x4e>
 8004a32:	2303      	movs	r3, #3
 8004a34:	e000      	b.n	8004a38 <aci_gatt_add_char+0x4e>
 8004a36:	2305      	movs	r3, #5
 8004a38:	f107 0218 	add.w	r2, r7, #24
 8004a3c:	4413      	add	r3, r2
 8004a3e:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
  aci_gatt_add_char_rp0 resp;
  Osal_MemSet( &resp, 0, sizeof(resp) );
 8004a42:	f107 0314 	add.w	r3, r7, #20
 8004a46:	2203      	movs	r2, #3
 8004a48:	2100      	movs	r1, #0
 8004a4a:	4618      	mov	r0, r3
 8004a4c:	f000 fb4b 	bl	80050e6 <Osal_MemSet>
  int index_input = 0;
 8004a50:	2300      	movs	r3, #0
 8004a52:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  cp0->Service_Handle = Service_Handle;
 8004a56:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8004a5a:	f107 020e 	add.w	r2, r7, #14
 8004a5e:	8812      	ldrh	r2, [r2, #0]
 8004a60:	801a      	strh	r2, [r3, #0]
  index_input += 2;
 8004a62:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8004a66:	3302      	adds	r3, #2
 8004a68:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  cp0->Char_UUID_Type = Char_UUID_Type;
 8004a6c:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8004a70:	f107 020d 	add.w	r2, r7, #13
 8004a74:	7812      	ldrb	r2, [r2, #0]
 8004a76:	709a      	strb	r2, [r3, #2]
  index_input += 1;
 8004a78:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8004a7c:	3301      	adds	r3, #1
 8004a7e:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  /* var_len_data input */
  {
    uint8_t size;
    switch ( Char_UUID_Type )
 8004a82:	f107 030d 	add.w	r3, r7, #13
 8004a86:	781b      	ldrb	r3, [r3, #0]
 8004a88:	2b01      	cmp	r3, #1
 8004a8a:	d002      	beq.n	8004a92 <aci_gatt_add_char+0xa8>
 8004a8c:	2b02      	cmp	r3, #2
 8004a8e:	d004      	beq.n	8004a9a <aci_gatt_add_char+0xb0>
 8004a90:	e007      	b.n	8004aa2 <aci_gatt_add_char+0xb8>
    {
      case 1: size = 2; break;
 8004a92:	2302      	movs	r3, #2
 8004a94:	f887 313f 	strb.w	r3, [r7, #319]	; 0x13f
 8004a98:	e005      	b.n	8004aa6 <aci_gatt_add_char+0xbc>
      case 2: size = 16; break;
 8004a9a:	2310      	movs	r3, #16
 8004a9c:	f887 313f 	strb.w	r3, [r7, #319]	; 0x13f
 8004aa0:	e001      	b.n	8004aa6 <aci_gatt_add_char+0xbc>
      default: return BLE_STATUS_ERROR;
 8004aa2:	2397      	movs	r3, #151	; 0x97
 8004aa4:	e086      	b.n	8004bb4 <aci_gatt_add_char+0x1ca>
    }
    Osal_MemCpy( (void*)&cp0->Char_UUID, (const void*)Char_UUID, size );
 8004aa6:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8004aaa:	1cd8      	adds	r0, r3, #3
 8004aac:	f897 213f 	ldrb.w	r2, [r7, #319]	; 0x13f
 8004ab0:	f107 0308 	add.w	r3, r7, #8
 8004ab4:	6819      	ldr	r1, [r3, #0]
 8004ab6:	f000 fb06 	bl	80050c6 <Osal_MemCpy>
    index_input += size;
 8004aba:	f897 313f 	ldrb.w	r3, [r7, #319]	; 0x13f
 8004abe:	f8d7 2130 	ldr.w	r2, [r7, #304]	; 0x130
 8004ac2:	4413      	add	r3, r2
 8004ac4:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
    {
      cp1->Char_Value_Length = Char_Value_Length;
 8004ac8:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8004acc:	1dba      	adds	r2, r7, #6
 8004ace:	8812      	ldrh	r2, [r2, #0]
 8004ad0:	801a      	strh	r2, [r3, #0]
    }
    index_input += 2;
 8004ad2:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8004ad6:	3302      	adds	r3, #2
 8004ad8:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
    {
      cp1->Char_Properties = Char_Properties;
 8004adc:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8004ae0:	f897 2150 	ldrb.w	r2, [r7, #336]	; 0x150
 8004ae4:	709a      	strb	r2, [r3, #2]
    }
    index_input += 1;
 8004ae6:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8004aea:	3301      	adds	r3, #1
 8004aec:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
    {
      cp1->Security_Permissions = Security_Permissions;
 8004af0:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8004af4:	f897 2154 	ldrb.w	r2, [r7, #340]	; 0x154
 8004af8:	70da      	strb	r2, [r3, #3]
    }
    index_input += 1;
 8004afa:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8004afe:	3301      	adds	r3, #1
 8004b00:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
    {
      cp1->GATT_Evt_Mask = GATT_Evt_Mask;
 8004b04:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8004b08:	f897 2158 	ldrb.w	r2, [r7, #344]	; 0x158
 8004b0c:	711a      	strb	r2, [r3, #4]
    }
    index_input += 1;
 8004b0e:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8004b12:	3301      	adds	r3, #1
 8004b14:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
    {
      cp1->Enc_Key_Size = Enc_Key_Size;
 8004b18:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8004b1c:	f897 215c 	ldrb.w	r2, [r7, #348]	; 0x15c
 8004b20:	715a      	strb	r2, [r3, #5]
    }
    index_input += 1;
 8004b22:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8004b26:	3301      	adds	r3, #1
 8004b28:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
    {
      cp1->Is_Variable = Is_Variable;
 8004b2c:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8004b30:	f897 2160 	ldrb.w	r2, [r7, #352]	; 0x160
 8004b34:	719a      	strb	r2, [r3, #6]
    }
    index_input += 1;
 8004b36:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8004b3a:	3301      	adds	r3, #1
 8004b3c:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  }
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8004b40:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8004b44:	2218      	movs	r2, #24
 8004b46:	2100      	movs	r1, #0
 8004b48:	4618      	mov	r0, r3
 8004b4a:	f000 facc 	bl	80050e6 <Osal_MemSet>
  rq.ogf = 0x3f;
 8004b4e:	233f      	movs	r3, #63	; 0x3f
 8004b50:	f8a7 3118 	strh.w	r3, [r7, #280]	; 0x118
  rq.ocf = 0x104;
 8004b54:	f44f 7382 	mov.w	r3, #260	; 0x104
 8004b58:	f8a7 311a 	strh.w	r3, [r7, #282]	; 0x11a
  rq.cparam = cmd_buffer;
 8004b5c:	f107 0318 	add.w	r3, r7, #24
 8004b60:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.clen = index_input;
 8004b64:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8004b68:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  rq.rparam = &resp;
 8004b6c:	f107 0314 	add.w	r3, r7, #20
 8004b70:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  rq.rlen = sizeof(resp);
 8004b74:	2303      	movs	r3, #3
 8004b76:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  if ( hci_send_req(&rq, FALSE) < 0 )
 8004b7a:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8004b7e:	2100      	movs	r1, #0
 8004b80:	4618      	mov	r0, r3
 8004b82:	f000 fe3f 	bl	8005804 <hci_send_req>
 8004b86:	4603      	mov	r3, r0
 8004b88:	2b00      	cmp	r3, #0
 8004b8a:	da01      	bge.n	8004b90 <aci_gatt_add_char+0x1a6>
    return BLE_STATUS_TIMEOUT;
 8004b8c:	23ff      	movs	r3, #255	; 0xff
 8004b8e:	e011      	b.n	8004bb4 <aci_gatt_add_char+0x1ca>
  if ( resp.Status )
 8004b90:	f107 0314 	add.w	r3, r7, #20
 8004b94:	781b      	ldrb	r3, [r3, #0]
 8004b96:	2b00      	cmp	r3, #0
 8004b98:	d003      	beq.n	8004ba2 <aci_gatt_add_char+0x1b8>
    return resp.Status;
 8004b9a:	f107 0314 	add.w	r3, r7, #20
 8004b9e:	781b      	ldrb	r3, [r3, #0]
 8004ba0:	e008      	b.n	8004bb4 <aci_gatt_add_char+0x1ca>
  *Char_Handle = resp.Char_Handle;
 8004ba2:	f107 0314 	add.w	r3, r7, #20
 8004ba6:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 8004baa:	b29a      	uxth	r2, r3
 8004bac:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
 8004bb0:	801a      	strh	r2, [r3, #0]
  return BLE_STATUS_SUCCESS;
 8004bb2:	2300      	movs	r3, #0
}
 8004bb4:	4618      	mov	r0, r3
 8004bb6:	f507 77a2 	add.w	r7, r7, #324	; 0x144
 8004bba:	46bd      	mov	sp, r7
 8004bbc:	bd90      	pop	{r4, r7, pc}

08004bbe <aci_gatt_update_char_value>:
tBleStatus aci_gatt_update_char_value( uint16_t Service_Handle,
                                       uint16_t Char_Handle,
                                       uint8_t Val_Offset,
                                       uint8_t Char_Value_Length,
                                       const uint8_t* Char_Value )
{
 8004bbe:	b5b0      	push	{r4, r5, r7, lr}
 8004bc0:	b0cc      	sub	sp, #304	; 0x130
 8004bc2:	af00      	add	r7, sp, #0
 8004bc4:	4605      	mov	r5, r0
 8004bc6:	460c      	mov	r4, r1
 8004bc8:	4610      	mov	r0, r2
 8004bca:	4619      	mov	r1, r3
 8004bcc:	1dbb      	adds	r3, r7, #6
 8004bce:	462a      	mov	r2, r5
 8004bd0:	801a      	strh	r2, [r3, #0]
 8004bd2:	1d3b      	adds	r3, r7, #4
 8004bd4:	4622      	mov	r2, r4
 8004bd6:	801a      	strh	r2, [r3, #0]
 8004bd8:	1cfb      	adds	r3, r7, #3
 8004bda:	4602      	mov	r2, r0
 8004bdc:	701a      	strb	r2, [r3, #0]
 8004bde:	1cbb      	adds	r3, r7, #2
 8004be0:	460a      	mov	r2, r1
 8004be2:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gatt_update_char_value_cp0 *cp0 = (aci_gatt_update_char_value_cp0*)(cmd_buffer);
 8004be4:	f107 0310 	add.w	r3, r7, #16
 8004be8:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 8004bec:	f107 030f 	add.w	r3, r7, #15
 8004bf0:	2200      	movs	r2, #0
 8004bf2:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 8004bf4:	2300      	movs	r3, #0
 8004bf6:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Service_Handle = Service_Handle;
 8004bfa:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004bfe:	1dba      	adds	r2, r7, #6
 8004c00:	8812      	ldrh	r2, [r2, #0]
 8004c02:	801a      	strh	r2, [r3, #0]
  index_input += 2;
 8004c04:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8004c08:	3302      	adds	r3, #2
 8004c0a:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Char_Handle = Char_Handle;
 8004c0e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004c12:	1d3a      	adds	r2, r7, #4
 8004c14:	8812      	ldrh	r2, [r2, #0]
 8004c16:	805a      	strh	r2, [r3, #2]
  index_input += 2;
 8004c18:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8004c1c:	3302      	adds	r3, #2
 8004c1e:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Val_Offset = Val_Offset;
 8004c22:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004c26:	1cfa      	adds	r2, r7, #3
 8004c28:	7812      	ldrb	r2, [r2, #0]
 8004c2a:	711a      	strb	r2, [r3, #4]
  index_input += 1;
 8004c2c:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8004c30:	3301      	adds	r3, #1
 8004c32:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Char_Value_Length = Char_Value_Length;
 8004c36:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004c3a:	1cba      	adds	r2, r7, #2
 8004c3c:	7812      	ldrb	r2, [r2, #0]
 8004c3e:	715a      	strb	r2, [r3, #5]
  index_input += 1;
 8004c40:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8004c44:	3301      	adds	r3, #1
 8004c46:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemCpy( (void*)&cp0->Char_Value, (const void*)Char_Value, Char_Value_Length );
 8004c4a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004c4e:	1d98      	adds	r0, r3, #6
 8004c50:	1cbb      	adds	r3, r7, #2
 8004c52:	781b      	ldrb	r3, [r3, #0]
 8004c54:	461a      	mov	r2, r3
 8004c56:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 8004c5a:	f000 fa34 	bl	80050c6 <Osal_MemCpy>
  index_input += Char_Value_Length;
 8004c5e:	1cbb      	adds	r3, r7, #2
 8004c60:	781b      	ldrb	r3, [r3, #0]
 8004c62:	f8d7 2128 	ldr.w	r2, [r7, #296]	; 0x128
 8004c66:	4413      	add	r3, r2
 8004c68:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8004c6c:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8004c70:	2218      	movs	r2, #24
 8004c72:	2100      	movs	r1, #0
 8004c74:	4618      	mov	r0, r3
 8004c76:	f000 fa36 	bl	80050e6 <Osal_MemSet>
  rq.ogf = 0x3f;
 8004c7a:	233f      	movs	r3, #63	; 0x3f
 8004c7c:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x106;
 8004c80:	f44f 7383 	mov.w	r3, #262	; 0x106
 8004c84:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 8004c88:	f107 0310 	add.w	r3, r7, #16
 8004c8c:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 8004c90:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8004c94:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 8004c98:	f107 030f 	add.w	r3, r7, #15
 8004c9c:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 8004ca0:	2301      	movs	r3, #1
 8004ca2:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 8004ca6:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8004caa:	2100      	movs	r1, #0
 8004cac:	4618      	mov	r0, r3
 8004cae:	f000 fda9 	bl	8005804 <hci_send_req>
 8004cb2:	4603      	mov	r3, r0
 8004cb4:	2b00      	cmp	r3, #0
 8004cb6:	da01      	bge.n	8004cbc <aci_gatt_update_char_value+0xfe>
    return BLE_STATUS_TIMEOUT;
 8004cb8:	23ff      	movs	r3, #255	; 0xff
 8004cba:	e002      	b.n	8004cc2 <aci_gatt_update_char_value+0x104>
  return status;
 8004cbc:	f107 030f 	add.w	r3, r7, #15
 8004cc0:	781b      	ldrb	r3, [r3, #0]
}
 8004cc2:	4618      	mov	r0, r3
 8004cc4:	f507 7798 	add.w	r7, r7, #304	; 0x130
 8004cc8:	46bd      	mov	sp, r7
 8004cca:	bdb0      	pop	{r4, r5, r7, pc}

08004ccc <aci_hal_write_config_data>:
}

tBleStatus aci_hal_write_config_data( uint8_t Offset,
                                      uint8_t Length,
                                      const uint8_t* Value )
{
 8004ccc:	b580      	push	{r7, lr}
 8004cce:	b0cc      	sub	sp, #304	; 0x130
 8004cd0:	af00      	add	r7, sp, #0
 8004cd2:	463b      	mov	r3, r7
 8004cd4:	601a      	str	r2, [r3, #0]
 8004cd6:	1dfb      	adds	r3, r7, #7
 8004cd8:	4602      	mov	r2, r0
 8004cda:	701a      	strb	r2, [r3, #0]
 8004cdc:	1dbb      	adds	r3, r7, #6
 8004cde:	460a      	mov	r2, r1
 8004ce0:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_hal_write_config_data_cp0 *cp0 = (aci_hal_write_config_data_cp0*)(cmd_buffer);
 8004ce2:	f107 0310 	add.w	r3, r7, #16
 8004ce6:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 8004cea:	f107 030f 	add.w	r3, r7, #15
 8004cee:	2200      	movs	r2, #0
 8004cf0:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 8004cf2:	2300      	movs	r3, #0
 8004cf4:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Offset = Offset;
 8004cf8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004cfc:	1dfa      	adds	r2, r7, #7
 8004cfe:	7812      	ldrb	r2, [r2, #0]
 8004d00:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 8004d02:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8004d06:	3301      	adds	r3, #1
 8004d08:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Length = Length;
 8004d0c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004d10:	1dba      	adds	r2, r7, #6
 8004d12:	7812      	ldrb	r2, [r2, #0]
 8004d14:	705a      	strb	r2, [r3, #1]
  index_input += 1;
 8004d16:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8004d1a:	3301      	adds	r3, #1
 8004d1c:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemCpy( (void*)&cp0->Value, (const void*)Value, Length );
 8004d20:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004d24:	1c98      	adds	r0, r3, #2
 8004d26:	1dbb      	adds	r3, r7, #6
 8004d28:	781a      	ldrb	r2, [r3, #0]
 8004d2a:	463b      	mov	r3, r7
 8004d2c:	6819      	ldr	r1, [r3, #0]
 8004d2e:	f000 f9ca 	bl	80050c6 <Osal_MemCpy>
  index_input += Length;
 8004d32:	1dbb      	adds	r3, r7, #6
 8004d34:	781b      	ldrb	r3, [r3, #0]
 8004d36:	f8d7 2128 	ldr.w	r2, [r7, #296]	; 0x128
 8004d3a:	4413      	add	r3, r2
 8004d3c:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8004d40:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8004d44:	2218      	movs	r2, #24
 8004d46:	2100      	movs	r1, #0
 8004d48:	4618      	mov	r0, r3
 8004d4a:	f000 f9cc 	bl	80050e6 <Osal_MemSet>
  rq.ogf = 0x3f;
 8004d4e:	233f      	movs	r3, #63	; 0x3f
 8004d50:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x00c;
 8004d54:	230c      	movs	r3, #12
 8004d56:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 8004d5a:	f107 0310 	add.w	r3, r7, #16
 8004d5e:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 8004d62:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8004d66:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 8004d6a:	f107 030f 	add.w	r3, r7, #15
 8004d6e:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 8004d72:	2301      	movs	r3, #1
 8004d74:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 8004d78:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8004d7c:	2100      	movs	r1, #0
 8004d7e:	4618      	mov	r0, r3
 8004d80:	f000 fd40 	bl	8005804 <hci_send_req>
 8004d84:	4603      	mov	r3, r0
 8004d86:	2b00      	cmp	r3, #0
 8004d88:	da01      	bge.n	8004d8e <aci_hal_write_config_data+0xc2>
    return BLE_STATUS_TIMEOUT;
 8004d8a:	23ff      	movs	r3, #255	; 0xff
 8004d8c:	e002      	b.n	8004d94 <aci_hal_write_config_data+0xc8>
  return status;
 8004d8e:	f107 030f 	add.w	r3, r7, #15
 8004d92:	781b      	ldrb	r3, [r3, #0]
}
 8004d94:	4618      	mov	r0, r3
 8004d96:	f507 7798 	add.w	r7, r7, #304	; 0x130
 8004d9a:	46bd      	mov	sp, r7
 8004d9c:	bd80      	pop	{r7, pc}

08004d9e <aci_hal_set_tx_power_level>:
  return BLE_STATUS_SUCCESS;
}

tBleStatus aci_hal_set_tx_power_level( uint8_t En_High_Power,
                                       uint8_t PA_Level )
{
 8004d9e:	b580      	push	{r7, lr}
 8004da0:	b0cc      	sub	sp, #304	; 0x130
 8004da2:	af00      	add	r7, sp, #0
 8004da4:	4602      	mov	r2, r0
 8004da6:	1dfb      	adds	r3, r7, #7
 8004da8:	701a      	strb	r2, [r3, #0]
 8004daa:	1dbb      	adds	r3, r7, #6
 8004dac:	460a      	mov	r2, r1
 8004dae:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_hal_set_tx_power_level_cp0 *cp0 = (aci_hal_set_tx_power_level_cp0*)(cmd_buffer);
 8004db0:	f107 0310 	add.w	r3, r7, #16
 8004db4:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 8004db8:	f107 030f 	add.w	r3, r7, #15
 8004dbc:	2200      	movs	r2, #0
 8004dbe:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 8004dc0:	2300      	movs	r3, #0
 8004dc2:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->En_High_Power = En_High_Power;
 8004dc6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004dca:	1dfa      	adds	r2, r7, #7
 8004dcc:	7812      	ldrb	r2, [r2, #0]
 8004dce:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 8004dd0:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8004dd4:	3301      	adds	r3, #1
 8004dd6:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->PA_Level = PA_Level;
 8004dda:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004dde:	1dba      	adds	r2, r7, #6
 8004de0:	7812      	ldrb	r2, [r2, #0]
 8004de2:	705a      	strb	r2, [r3, #1]
  index_input += 1;
 8004de4:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8004de8:	3301      	adds	r3, #1
 8004dea:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8004dee:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8004df2:	2218      	movs	r2, #24
 8004df4:	2100      	movs	r1, #0
 8004df6:	4618      	mov	r0, r3
 8004df8:	f000 f975 	bl	80050e6 <Osal_MemSet>
  rq.ogf = 0x3f;
 8004dfc:	233f      	movs	r3, #63	; 0x3f
 8004dfe:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x00f;
 8004e02:	230f      	movs	r3, #15
 8004e04:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 8004e08:	f107 0310 	add.w	r3, r7, #16
 8004e0c:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 8004e10:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8004e14:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 8004e18:	f107 030f 	add.w	r3, r7, #15
 8004e1c:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 8004e20:	2301      	movs	r3, #1
 8004e22:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 8004e26:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8004e2a:	2100      	movs	r1, #0
 8004e2c:	4618      	mov	r0, r3
 8004e2e:	f000 fce9 	bl	8005804 <hci_send_req>
 8004e32:	4603      	mov	r3, r0
 8004e34:	2b00      	cmp	r3, #0
 8004e36:	da01      	bge.n	8004e3c <aci_hal_set_tx_power_level+0x9e>
    return BLE_STATUS_TIMEOUT;
 8004e38:	23ff      	movs	r3, #255	; 0xff
 8004e3a:	e002      	b.n	8004e42 <aci_hal_set_tx_power_level+0xa4>
  return status;
 8004e3c:	f107 030f 	add.w	r3, r7, #15
 8004e40:	781b      	ldrb	r3, [r3, #0]
}
 8004e42:	4618      	mov	r0, r3
 8004e44:	f507 7798 	add.w	r7, r7, #304	; 0x130
 8004e48:	46bd      	mov	sp, r7
 8004e4a:	bd80      	pop	{r7, pc}

08004e4c <aci_hal_set_radio_activity_mask>:
  Osal_MemCpy( (void*)Link_Connection_Handle, (const void*)resp.Link_Connection_Handle, 16 );
  return BLE_STATUS_SUCCESS;
}

tBleStatus aci_hal_set_radio_activity_mask( uint16_t Radio_Activity_Mask )
{
 8004e4c:	b580      	push	{r7, lr}
 8004e4e:	b0cc      	sub	sp, #304	; 0x130
 8004e50:	af00      	add	r7, sp, #0
 8004e52:	4602      	mov	r2, r0
 8004e54:	1dbb      	adds	r3, r7, #6
 8004e56:	801a      	strh	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_hal_set_radio_activity_mask_cp0 *cp0 = (aci_hal_set_radio_activity_mask_cp0*)(cmd_buffer);
 8004e58:	f107 0310 	add.w	r3, r7, #16
 8004e5c:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 8004e60:	f107 030f 	add.w	r3, r7, #15
 8004e64:	2200      	movs	r2, #0
 8004e66:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 8004e68:	2300      	movs	r3, #0
 8004e6a:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Radio_Activity_Mask = Radio_Activity_Mask;
 8004e6e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004e72:	1dba      	adds	r2, r7, #6
 8004e74:	8812      	ldrh	r2, [r2, #0]
 8004e76:	801a      	strh	r2, [r3, #0]
  index_input += 2;
 8004e78:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8004e7c:	3302      	adds	r3, #2
 8004e7e:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8004e82:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8004e86:	2218      	movs	r2, #24
 8004e88:	2100      	movs	r1, #0
 8004e8a:	4618      	mov	r0, r3
 8004e8c:	f000 f92b 	bl	80050e6 <Osal_MemSet>
  rq.ogf = 0x3f;
 8004e90:	233f      	movs	r3, #63	; 0x3f
 8004e92:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x018;
 8004e96:	2318      	movs	r3, #24
 8004e98:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 8004e9c:	f107 0310 	add.w	r3, r7, #16
 8004ea0:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 8004ea4:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8004ea8:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 8004eac:	f107 030f 	add.w	r3, r7, #15
 8004eb0:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 8004eb4:	2301      	movs	r3, #1
 8004eb6:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 8004eba:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8004ebe:	2100      	movs	r1, #0
 8004ec0:	4618      	mov	r0, r3
 8004ec2:	f000 fc9f 	bl	8005804 <hci_send_req>
 8004ec6:	4603      	mov	r3, r0
 8004ec8:	2b00      	cmp	r3, #0
 8004eca:	da01      	bge.n	8004ed0 <aci_hal_set_radio_activity_mask+0x84>
    return BLE_STATUS_TIMEOUT;
 8004ecc:	23ff      	movs	r3, #255	; 0xff
 8004ece:	e002      	b.n	8004ed6 <aci_hal_set_radio_activity_mask+0x8a>
  return status;
 8004ed0:	f107 030f 	add.w	r3, r7, #15
 8004ed4:	781b      	ldrb	r3, [r3, #0]
}
 8004ed6:	4618      	mov	r0, r3
 8004ed8:	f507 7798 	add.w	r7, r7, #304	; 0x130
 8004edc:	46bd      	mov	sp, r7
 8004ede:	bd80      	pop	{r7, pc}

08004ee0 <hci_reset>:
    return BLE_STATUS_TIMEOUT;
  return status;
}

tBleStatus hci_reset( void )
{
 8004ee0:	b580      	push	{r7, lr}
 8004ee2:	b088      	sub	sp, #32
 8004ee4:	af00      	add	r7, sp, #0
  struct hci_request rq;
  tBleStatus status = 0;
 8004ee6:	2300      	movs	r3, #0
 8004ee8:	71fb      	strb	r3, [r7, #7]
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8004eea:	f107 0308 	add.w	r3, r7, #8
 8004eee:	2218      	movs	r2, #24
 8004ef0:	2100      	movs	r1, #0
 8004ef2:	4618      	mov	r0, r3
 8004ef4:	f000 f8f7 	bl	80050e6 <Osal_MemSet>
  rq.ogf = 0x03;
 8004ef8:	2303      	movs	r3, #3
 8004efa:	813b      	strh	r3, [r7, #8]
  rq.ocf = 0x003;
 8004efc:	2303      	movs	r3, #3
 8004efe:	817b      	strh	r3, [r7, #10]
  rq.rparam = &status;
 8004f00:	1dfb      	adds	r3, r7, #7
 8004f02:	61bb      	str	r3, [r7, #24]
  rq.rlen = 1;
 8004f04:	2301      	movs	r3, #1
 8004f06:	61fb      	str	r3, [r7, #28]
  if ( hci_send_req(&rq, FALSE) < 0 )
 8004f08:	f107 0308 	add.w	r3, r7, #8
 8004f0c:	2100      	movs	r1, #0
 8004f0e:	4618      	mov	r0, r3
 8004f10:	f000 fc78 	bl	8005804 <hci_send_req>
 8004f14:	4603      	mov	r3, r0
 8004f16:	2b00      	cmp	r3, #0
 8004f18:	da01      	bge.n	8004f1e <hci_reset+0x3e>
    return BLE_STATUS_TIMEOUT;
 8004f1a:	23ff      	movs	r3, #255	; 0xff
 8004f1c:	e000      	b.n	8004f20 <hci_reset+0x40>
  return status;
 8004f1e:	79fb      	ldrb	r3, [r7, #7]
}
 8004f20:	4618      	mov	r0, r3
 8004f22:	3720      	adds	r7, #32
 8004f24:	46bd      	mov	sp, r7
 8004f26:	bd80      	pop	{r7, pc}

08004f28 <hci_le_read_phy>:
}

tBleStatus hci_le_read_phy( uint16_t Connection_Handle,
                            uint8_t* TX_PHY,
                            uint8_t* RX_PHY )
{
 8004f28:	b580      	push	{r7, lr}
 8004f2a:	b0ce      	sub	sp, #312	; 0x138
 8004f2c:	af00      	add	r7, sp, #0
 8004f2e:	f107 0308 	add.w	r3, r7, #8
 8004f32:	6019      	str	r1, [r3, #0]
 8004f34:	1d3b      	adds	r3, r7, #4
 8004f36:	601a      	str	r2, [r3, #0]
 8004f38:	f107 030e 	add.w	r3, r7, #14
 8004f3c:	4602      	mov	r2, r0
 8004f3e:	801a      	strh	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  hci_le_read_phy_cp0 *cp0 = (hci_le_read_phy_cp0*)(cmd_buffer);
 8004f40:	f107 0318 	add.w	r3, r7, #24
 8004f44:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
  hci_le_read_phy_rp0 resp;
  Osal_MemSet( &resp, 0, sizeof(resp) );
 8004f48:	f107 0310 	add.w	r3, r7, #16
 8004f4c:	2205      	movs	r2, #5
 8004f4e:	2100      	movs	r1, #0
 8004f50:	4618      	mov	r0, r3
 8004f52:	f000 f8c8 	bl	80050e6 <Osal_MemSet>
  int index_input = 0;
 8004f56:	2300      	movs	r3, #0
 8004f58:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  cp0->Connection_Handle = Connection_Handle;
 8004f5c:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8004f60:	f107 020e 	add.w	r2, r7, #14
 8004f64:	8812      	ldrh	r2, [r2, #0]
 8004f66:	801a      	strh	r2, [r3, #0]
  index_input += 2;
 8004f68:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8004f6c:	3302      	adds	r3, #2
 8004f6e:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8004f72:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8004f76:	2218      	movs	r2, #24
 8004f78:	2100      	movs	r1, #0
 8004f7a:	4618      	mov	r0, r3
 8004f7c:	f000 f8b3 	bl	80050e6 <Osal_MemSet>
  rq.ogf = 0x08;
 8004f80:	2308      	movs	r3, #8
 8004f82:	f8a7 3118 	strh.w	r3, [r7, #280]	; 0x118
  rq.ocf = 0x030;
 8004f86:	2330      	movs	r3, #48	; 0x30
 8004f88:	f8a7 311a 	strh.w	r3, [r7, #282]	; 0x11a
  rq.cparam = cmd_buffer;
 8004f8c:	f107 0318 	add.w	r3, r7, #24
 8004f90:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.clen = index_input;
 8004f94:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8004f98:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  rq.rparam = &resp;
 8004f9c:	f107 0310 	add.w	r3, r7, #16
 8004fa0:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  rq.rlen = sizeof(resp);
 8004fa4:	2305      	movs	r3, #5
 8004fa6:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  if ( hci_send_req(&rq, FALSE) < 0 )
 8004faa:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8004fae:	2100      	movs	r1, #0
 8004fb0:	4618      	mov	r0, r3
 8004fb2:	f000 fc27 	bl	8005804 <hci_send_req>
 8004fb6:	4603      	mov	r3, r0
 8004fb8:	2b00      	cmp	r3, #0
 8004fba:	da01      	bge.n	8004fc0 <hci_le_read_phy+0x98>
    return BLE_STATUS_TIMEOUT;
 8004fbc:	23ff      	movs	r3, #255	; 0xff
 8004fbe:	e016      	b.n	8004fee <hci_le_read_phy+0xc6>
  if ( resp.Status )
 8004fc0:	f107 0310 	add.w	r3, r7, #16
 8004fc4:	781b      	ldrb	r3, [r3, #0]
 8004fc6:	2b00      	cmp	r3, #0
 8004fc8:	d003      	beq.n	8004fd2 <hci_le_read_phy+0xaa>
    return resp.Status;
 8004fca:	f107 0310 	add.w	r3, r7, #16
 8004fce:	781b      	ldrb	r3, [r3, #0]
 8004fd0:	e00d      	b.n	8004fee <hci_le_read_phy+0xc6>
  *TX_PHY = resp.TX_PHY;
 8004fd2:	f107 0310 	add.w	r3, r7, #16
 8004fd6:	78da      	ldrb	r2, [r3, #3]
 8004fd8:	f107 0308 	add.w	r3, r7, #8
 8004fdc:	681b      	ldr	r3, [r3, #0]
 8004fde:	701a      	strb	r2, [r3, #0]
  *RX_PHY = resp.RX_PHY;
 8004fe0:	f107 0310 	add.w	r3, r7, #16
 8004fe4:	791a      	ldrb	r2, [r3, #4]
 8004fe6:	1d3b      	adds	r3, r7, #4
 8004fe8:	681b      	ldr	r3, [r3, #0]
 8004fea:	701a      	strb	r2, [r3, #0]
  return BLE_STATUS_SUCCESS;
 8004fec:	2300      	movs	r3, #0
}
 8004fee:	4618      	mov	r0, r3
 8004ff0:	f507 779c 	add.w	r7, r7, #312	; 0x138
 8004ff4:	46bd      	mov	sp, r7
 8004ff6:	bd80      	pop	{r7, pc}

08004ff8 <hci_le_set_default_phy>:

tBleStatus hci_le_set_default_phy( uint8_t ALL_PHYS,
                                   uint8_t TX_PHYS,
                                   uint8_t RX_PHYS )
{
 8004ff8:	b590      	push	{r4, r7, lr}
 8004ffa:	b0cd      	sub	sp, #308	; 0x134
 8004ffc:	af00      	add	r7, sp, #0
 8004ffe:	4604      	mov	r4, r0
 8005000:	4608      	mov	r0, r1
 8005002:	4611      	mov	r1, r2
 8005004:	1dfb      	adds	r3, r7, #7
 8005006:	4622      	mov	r2, r4
 8005008:	701a      	strb	r2, [r3, #0]
 800500a:	1dbb      	adds	r3, r7, #6
 800500c:	4602      	mov	r2, r0
 800500e:	701a      	strb	r2, [r3, #0]
 8005010:	1d7b      	adds	r3, r7, #5
 8005012:	460a      	mov	r2, r1
 8005014:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  hci_le_set_default_phy_cp0 *cp0 = (hci_le_set_default_phy_cp0*)(cmd_buffer);
 8005016:	f107 0310 	add.w	r3, r7, #16
 800501a:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 800501e:	f107 030f 	add.w	r3, r7, #15
 8005022:	2200      	movs	r2, #0
 8005024:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 8005026:	2300      	movs	r3, #0
 8005028:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->ALL_PHYS = ALL_PHYS;
 800502c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005030:	1dfa      	adds	r2, r7, #7
 8005032:	7812      	ldrb	r2, [r2, #0]
 8005034:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 8005036:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800503a:	3301      	adds	r3, #1
 800503c:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->TX_PHYS = TX_PHYS;
 8005040:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005044:	1dba      	adds	r2, r7, #6
 8005046:	7812      	ldrb	r2, [r2, #0]
 8005048:	705a      	strb	r2, [r3, #1]
  index_input += 1;
 800504a:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800504e:	3301      	adds	r3, #1
 8005050:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->RX_PHYS = RX_PHYS;
 8005054:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005058:	1d7a      	adds	r2, r7, #5
 800505a:	7812      	ldrb	r2, [r2, #0]
 800505c:	709a      	strb	r2, [r3, #2]
  index_input += 1;
 800505e:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8005062:	3301      	adds	r3, #1
 8005064:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8005068:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800506c:	2218      	movs	r2, #24
 800506e:	2100      	movs	r1, #0
 8005070:	4618      	mov	r0, r3
 8005072:	f000 f838 	bl	80050e6 <Osal_MemSet>
  rq.ogf = 0x08;
 8005076:	2308      	movs	r3, #8
 8005078:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x031;
 800507c:	2331      	movs	r3, #49	; 0x31
 800507e:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 8005082:	f107 0310 	add.w	r3, r7, #16
 8005086:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 800508a:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800508e:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 8005092:	f107 030f 	add.w	r3, r7, #15
 8005096:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 800509a:	2301      	movs	r3, #1
 800509c:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 80050a0:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80050a4:	2100      	movs	r1, #0
 80050a6:	4618      	mov	r0, r3
 80050a8:	f000 fbac 	bl	8005804 <hci_send_req>
 80050ac:	4603      	mov	r3, r0
 80050ae:	2b00      	cmp	r3, #0
 80050b0:	da01      	bge.n	80050b6 <hci_le_set_default_phy+0xbe>
    return BLE_STATUS_TIMEOUT;
 80050b2:	23ff      	movs	r3, #255	; 0xff
 80050b4:	e002      	b.n	80050bc <hci_le_set_default_phy+0xc4>
  return status;
 80050b6:	f107 030f 	add.w	r3, r7, #15
 80050ba:	781b      	ldrb	r3, [r3, #0]
}
 80050bc:	4618      	mov	r0, r3
 80050be:	f507 779a 	add.w	r7, r7, #308	; 0x134
 80050c2:	46bd      	mov	sp, r7
 80050c4:	bd90      	pop	{r4, r7, pc}

080050c6 <Osal_MemCpy>:
 * Osal_MemCpy
 * 
 */
 
void* Osal_MemCpy( void *dest, const void *src, unsigned int size )
{
 80050c6:	b580      	push	{r7, lr}
 80050c8:	b084      	sub	sp, #16
 80050ca:	af00      	add	r7, sp, #0
 80050cc:	60f8      	str	r0, [r7, #12]
 80050ce:	60b9      	str	r1, [r7, #8]
 80050d0:	607a      	str	r2, [r7, #4]
  return memcpy( dest, src, size ); 
 80050d2:	687a      	ldr	r2, [r7, #4]
 80050d4:	68b9      	ldr	r1, [r7, #8]
 80050d6:	68f8      	ldr	r0, [r7, #12]
 80050d8:	f002 f81c 	bl	8007114 <memcpy>
 80050dc:	4603      	mov	r3, r0
}
 80050de:	4618      	mov	r0, r3
 80050e0:	3710      	adds	r7, #16
 80050e2:	46bd      	mov	sp, r7
 80050e4:	bd80      	pop	{r7, pc}

080050e6 <Osal_MemSet>:
 * Osal_MemSet
 * 
 */
 
void* Osal_MemSet( void *ptr, int value, unsigned int size )
{
 80050e6:	b580      	push	{r7, lr}
 80050e8:	b084      	sub	sp, #16
 80050ea:	af00      	add	r7, sp, #0
 80050ec:	60f8      	str	r0, [r7, #12]
 80050ee:	60b9      	str	r1, [r7, #8]
 80050f0:	607a      	str	r2, [r7, #4]
  return memset( ptr, value, size );
 80050f2:	687a      	ldr	r2, [r7, #4]
 80050f4:	68b9      	ldr	r1, [r7, #8]
 80050f6:	68f8      	ldr	r0, [r7, #12]
 80050f8:	f002 f81a 	bl	8007130 <memset>
 80050fc:	4603      	mov	r3, r0
}
 80050fe:	4618      	mov	r0, r3
 8005100:	3710      	adds	r7, #16
 8005102:	46bd      	mov	sp, r7
 8005104:	bd80      	pop	{r7, pc}
	...

08005108 <PeerToPeer_Event_Handler>:
 * @brief  Event handler
 * @param  Event: Address of the buffer holding the Event
 * @retval Ack: Return whether the Event has been managed or not
 */
static SVCCTL_EvtAckStatus_t PeerToPeer_Event_Handler(void *Event)
{
 8005108:	b580      	push	{r7, lr}
 800510a:	b08a      	sub	sp, #40	; 0x28
 800510c:	af00      	add	r7, sp, #0
 800510e:	6078      	str	r0, [r7, #4]
  hci_event_pckt *event_pckt;
  evt_blecore_aci *blecore_evt;
  aci_gatt_attribute_modified_event_rp0    * attribute_modified;
  P2PS_STM_App_Notification_evt_t Notification;

  return_value = SVCCTL_EvtNotAck;
 8005110:	2300      	movs	r3, #0
 8005112:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  event_pckt = (hci_event_pckt *)(((hci_uart_pckt*)Event)->data);
 8005116:	687b      	ldr	r3, [r7, #4]
 8005118:	3301      	adds	r3, #1
 800511a:	623b      	str	r3, [r7, #32]

  switch(event_pckt->evt)
 800511c:	6a3b      	ldr	r3, [r7, #32]
 800511e:	781b      	ldrb	r3, [r3, #0]
 8005120:	2bff      	cmp	r3, #255	; 0xff
 8005122:	d14c      	bne.n	80051be <PeerToPeer_Event_Handler+0xb6>
  {
    case HCI_VENDOR_SPECIFIC_DEBUG_EVT_CODE:
    {
      blecore_evt = (evt_blecore_aci*)event_pckt->data;
 8005124:	6a3b      	ldr	r3, [r7, #32]
 8005126:	3302      	adds	r3, #2
 8005128:	61fb      	str	r3, [r7, #28]
      switch(blecore_evt->ecode)
 800512a:	69fb      	ldr	r3, [r7, #28]
 800512c:	881b      	ldrh	r3, [r3, #0]
 800512e:	b29b      	uxth	r3, r3
 8005130:	461a      	mov	r2, r3
 8005132:	f640 4301 	movw	r3, #3073	; 0xc01
 8005136:	429a      	cmp	r2, r3
 8005138:	d13d      	bne.n	80051b6 <PeerToPeer_Event_Handler+0xae>
      {
        case ACI_GATT_ATTRIBUTE_MODIFIED_VSEVT_CODE:
       {
          attribute_modified = (aci_gatt_attribute_modified_event_rp0*)blecore_evt->data;
 800513a:	69fb      	ldr	r3, [r7, #28]
 800513c:	3302      	adds	r3, #2
 800513e:	61bb      	str	r3, [r7, #24]
            if(attribute_modified->Attr_Handle == (aPeerToPeerContext.P2PNotifyServerToClientCharHdle + 2))
 8005140:	69bb      	ldr	r3, [r7, #24]
 8005142:	885b      	ldrh	r3, [r3, #2]
 8005144:	b29b      	uxth	r3, r3
 8005146:	461a      	mov	r2, r3
 8005148:	4b20      	ldr	r3, [pc, #128]	; (80051cc <PeerToPeer_Event_Handler+0xc4>)
 800514a:	889b      	ldrh	r3, [r3, #4]
 800514c:	3302      	adds	r3, #2
 800514e:	429a      	cmp	r2, r3
 8005150:	d118      	bne.n	8005184 <PeerToPeer_Event_Handler+0x7c>
            {
              /**
               * Descriptor handle
               */
              return_value = SVCCTL_EvtAckFlowEnable;
 8005152:	2301      	movs	r3, #1
 8005154:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
              /**
               * Notify to application
               */
              if(attribute_modified->Attr_Data[0] & COMSVC_Notification)
 8005158:	69bb      	ldr	r3, [r7, #24]
 800515a:	7a1b      	ldrb	r3, [r3, #8]
 800515c:	f003 0301 	and.w	r3, r3, #1
 8005160:	2b00      	cmp	r3, #0
 8005162:	d007      	beq.n	8005174 <PeerToPeer_Event_Handler+0x6c>
              {
                Notification.P2P_Evt_Opcode = P2PS_STM__NOTIFY_ENABLED_EVT;
 8005164:	2300      	movs	r3, #0
 8005166:	723b      	strb	r3, [r7, #8]
                P2PS_STM_App_Notification(&Notification);
 8005168:	f107 0308 	add.w	r3, r7, #8
 800516c:	4618      	mov	r0, r3
 800516e:	f001 fb79 	bl	8006864 <P2PS_STM_App_Notification>
              Notification.DataTransfered.pPayload=attribute_modified->Attr_Data;
              P2PS_STM_App_Notification(&Notification);
            }
#endif
        }
        break;
 8005172:	e022      	b.n	80051ba <PeerToPeer_Event_Handler+0xb2>
                Notification.P2P_Evt_Opcode = P2PS_STM_NOTIFY_DISABLED_EVT;
 8005174:	2301      	movs	r3, #1
 8005176:	723b      	strb	r3, [r7, #8]
                P2PS_STM_App_Notification(&Notification);
 8005178:	f107 0308 	add.w	r3, r7, #8
 800517c:	4618      	mov	r0, r3
 800517e:	f001 fb71 	bl	8006864 <P2PS_STM_App_Notification>
        break;
 8005182:	e01a      	b.n	80051ba <PeerToPeer_Event_Handler+0xb2>
            else if(attribute_modified->Attr_Handle == (aPeerToPeerContext.P2PWriteClientToServerCharHdle + 1))
 8005184:	69bb      	ldr	r3, [r7, #24]
 8005186:	885b      	ldrh	r3, [r3, #2]
 8005188:	b29b      	uxth	r3, r3
 800518a:	461a      	mov	r2, r3
 800518c:	4b0f      	ldr	r3, [pc, #60]	; (80051cc <PeerToPeer_Event_Handler+0xc4>)
 800518e:	885b      	ldrh	r3, [r3, #2]
 8005190:	3301      	adds	r3, #1
 8005192:	429a      	cmp	r2, r3
 8005194:	d111      	bne.n	80051ba <PeerToPeer_Event_Handler+0xb2>
              Notification.P2P_Evt_Opcode = P2PS_STM_WRITE_EVT;
 8005196:	2303      	movs	r3, #3
 8005198:	723b      	strb	r3, [r7, #8]
              Notification.DataTransfered.Length=attribute_modified->Attr_Data_Length;
 800519a:	69bb      	ldr	r3, [r7, #24]
 800519c:	88db      	ldrh	r3, [r3, #6]
 800519e:	b29b      	uxth	r3, r3
 80051a0:	b2db      	uxtb	r3, r3
 80051a2:	743b      	strb	r3, [r7, #16]
              Notification.DataTransfered.pPayload=attribute_modified->Attr_Data;
 80051a4:	69bb      	ldr	r3, [r7, #24]
 80051a6:	3308      	adds	r3, #8
 80051a8:	60fb      	str	r3, [r7, #12]
              P2PS_STM_App_Notification(&Notification);  
 80051aa:	f107 0308 	add.w	r3, r7, #8
 80051ae:	4618      	mov	r0, r3
 80051b0:	f001 fb58 	bl	8006864 <P2PS_STM_App_Notification>
        break;
 80051b4:	e001      	b.n	80051ba <PeerToPeer_Event_Handler+0xb2>

        default:
          break;
 80051b6:	bf00      	nop
 80051b8:	e002      	b.n	80051c0 <PeerToPeer_Event_Handler+0xb8>
        break;
 80051ba:	bf00      	nop
      }
    }
    break; /* HCI_HCI_VENDOR_SPECIFIC_DEBUG_EVT_CODE_SPECIFIC */
 80051bc:	e000      	b.n	80051c0 <PeerToPeer_Event_Handler+0xb8>

    default:
      break;
 80051be:	bf00      	nop
  }

  return(return_value);
 80051c0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}/* end SVCCTL_EvtAckStatus_t */
 80051c4:	4618      	mov	r0, r3
 80051c6:	3728      	adds	r7, #40	; 0x28
 80051c8:	46bd      	mov	sp, r7
 80051ca:	bd80      	pop	{r7, pc}
 80051cc:	200000c4 	.word	0x200000c4

080051d0 <P2PS_STM_Init>:
 * @brief  Service initialization
 * @param  None
 * @retval None
 */
void P2PS_STM_Init(void)
{
 80051d0:	b580      	push	{r7, lr}
 80051d2:	b08a      	sub	sp, #40	; 0x28
 80051d4:	af06      	add	r7, sp, #24
  Char_UUID_t  uuid16;

  /**
   *	Register the event handler to the BLE controller
   */
  SVCCTL_RegisterSvcHandler(PeerToPeer_Event_Handler);
 80051d6:	484a      	ldr	r0, [pc, #296]	; (8005300 <P2PS_STM_Init+0x130>)
 80051d8:	f000 f94a 	bl	8005470 <SVCCTL_RegisterSvcHandler>
     *                                2 for P2P Write characteristic +
     *                                2 for P2P Notify characteristic +
     *                                1 for client char configuration descriptor +
     *                                
     */
    COPY_P2P_SERVICE_UUID(uuid16.Char_UUID_128);
 80051dc:	238f      	movs	r3, #143	; 0x8f
 80051de:	703b      	strb	r3, [r7, #0]
 80051e0:	23e5      	movs	r3, #229	; 0xe5
 80051e2:	707b      	strb	r3, [r7, #1]
 80051e4:	23b3      	movs	r3, #179	; 0xb3
 80051e6:	70bb      	strb	r3, [r7, #2]
 80051e8:	23d5      	movs	r3, #213	; 0xd5
 80051ea:	70fb      	strb	r3, [r7, #3]
 80051ec:	232e      	movs	r3, #46	; 0x2e
 80051ee:	713b      	strb	r3, [r7, #4]
 80051f0:	237f      	movs	r3, #127	; 0x7f
 80051f2:	717b      	strb	r3, [r7, #5]
 80051f4:	234a      	movs	r3, #74	; 0x4a
 80051f6:	71bb      	strb	r3, [r7, #6]
 80051f8:	2398      	movs	r3, #152	; 0x98
 80051fa:	71fb      	strb	r3, [r7, #7]
 80051fc:	232a      	movs	r3, #42	; 0x2a
 80051fe:	723b      	strb	r3, [r7, #8]
 8005200:	2348      	movs	r3, #72	; 0x48
 8005202:	727b      	strb	r3, [r7, #9]
 8005204:	237a      	movs	r3, #122	; 0x7a
 8005206:	72bb      	strb	r3, [r7, #10]
 8005208:	23cc      	movs	r3, #204	; 0xcc
 800520a:	72fb      	strb	r3, [r7, #11]
 800520c:	2340      	movs	r3, #64	; 0x40
 800520e:	733b      	strb	r3, [r7, #12]
 8005210:	23fe      	movs	r3, #254	; 0xfe
 8005212:	737b      	strb	r3, [r7, #13]
 8005214:	2300      	movs	r3, #0
 8005216:	73bb      	strb	r3, [r7, #14]
 8005218:	2300      	movs	r3, #0
 800521a:	73fb      	strb	r3, [r7, #15]
    aci_gatt_add_service(UUID_TYPE_128,
 800521c:	4639      	mov	r1, r7
 800521e:	4b39      	ldr	r3, [pc, #228]	; (8005304 <P2PS_STM_Init+0x134>)
 8005220:	9300      	str	r3, [sp, #0]
 8005222:	2308      	movs	r3, #8
 8005224:	2201      	movs	r2, #1
 8005226:	2002      	movs	r0, #2
 8005228:	f7ff fb30 	bl	800488c <aci_gatt_add_service>
                      &(aPeerToPeerContext.PeerToPeerSvcHdle));

    /**
     *  Add LED Characteristic
     */
    COPY_P2P_WRITE_CHAR_UUID(uuid16.Char_UUID_128);
 800522c:	2319      	movs	r3, #25
 800522e:	703b      	strb	r3, [r7, #0]
 8005230:	23ed      	movs	r3, #237	; 0xed
 8005232:	707b      	strb	r3, [r7, #1]
 8005234:	2382      	movs	r3, #130	; 0x82
 8005236:	70bb      	strb	r3, [r7, #2]
 8005238:	23ae      	movs	r3, #174	; 0xae
 800523a:	70fb      	strb	r3, [r7, #3]
 800523c:	23ed      	movs	r3, #237	; 0xed
 800523e:	713b      	strb	r3, [r7, #4]
 8005240:	2321      	movs	r3, #33	; 0x21
 8005242:	717b      	strb	r3, [r7, #5]
 8005244:	234c      	movs	r3, #76	; 0x4c
 8005246:	71bb      	strb	r3, [r7, #6]
 8005248:	239d      	movs	r3, #157	; 0x9d
 800524a:	71fb      	strb	r3, [r7, #7]
 800524c:	2341      	movs	r3, #65	; 0x41
 800524e:	723b      	strb	r3, [r7, #8]
 8005250:	2345      	movs	r3, #69	; 0x45
 8005252:	727b      	strb	r3, [r7, #9]
 8005254:	2322      	movs	r3, #34	; 0x22
 8005256:	72bb      	strb	r3, [r7, #10]
 8005258:	238e      	movs	r3, #142	; 0x8e
 800525a:	72fb      	strb	r3, [r7, #11]
 800525c:	2341      	movs	r3, #65	; 0x41
 800525e:	733b      	strb	r3, [r7, #12]
 8005260:	23fe      	movs	r3, #254	; 0xfe
 8005262:	737b      	strb	r3, [r7, #13]
 8005264:	2300      	movs	r3, #0
 8005266:	73bb      	strb	r3, [r7, #14]
 8005268:	2300      	movs	r3, #0
 800526a:	73fb      	strb	r3, [r7, #15]
    aci_gatt_add_char(aPeerToPeerContext.PeerToPeerSvcHdle,
 800526c:	4b25      	ldr	r3, [pc, #148]	; (8005304 <P2PS_STM_Init+0x134>)
 800526e:	8818      	ldrh	r0, [r3, #0]
 8005270:	463a      	mov	r2, r7
 8005272:	4b25      	ldr	r3, [pc, #148]	; (8005308 <P2PS_STM_Init+0x138>)
 8005274:	9305      	str	r3, [sp, #20]
 8005276:	2301      	movs	r3, #1
 8005278:	9304      	str	r3, [sp, #16]
 800527a:	230a      	movs	r3, #10
 800527c:	9303      	str	r3, [sp, #12]
 800527e:	2301      	movs	r3, #1
 8005280:	9302      	str	r3, [sp, #8]
 8005282:	2300      	movs	r3, #0
 8005284:	9301      	str	r3, [sp, #4]
 8005286:	2306      	movs	r3, #6
 8005288:	9300      	str	r3, [sp, #0]
 800528a:	2302      	movs	r3, #2
 800528c:	2102      	movs	r1, #2
 800528e:	f7ff fbac 	bl	80049ea <aci_gatt_add_char>
                      &(aPeerToPeerContext.P2PWriteClientToServerCharHdle));

    /**
     *   Add Button Characteristic
     */
    COPY_P2P_NOTIFY_UUID(uuid16.Char_UUID_128);
 8005292:	2319      	movs	r3, #25
 8005294:	703b      	strb	r3, [r7, #0]
 8005296:	23ed      	movs	r3, #237	; 0xed
 8005298:	707b      	strb	r3, [r7, #1]
 800529a:	2382      	movs	r3, #130	; 0x82
 800529c:	70bb      	strb	r3, [r7, #2]
 800529e:	23ae      	movs	r3, #174	; 0xae
 80052a0:	70fb      	strb	r3, [r7, #3]
 80052a2:	23ed      	movs	r3, #237	; 0xed
 80052a4:	713b      	strb	r3, [r7, #4]
 80052a6:	2321      	movs	r3, #33	; 0x21
 80052a8:	717b      	strb	r3, [r7, #5]
 80052aa:	234c      	movs	r3, #76	; 0x4c
 80052ac:	71bb      	strb	r3, [r7, #6]
 80052ae:	239d      	movs	r3, #157	; 0x9d
 80052b0:	71fb      	strb	r3, [r7, #7]
 80052b2:	2341      	movs	r3, #65	; 0x41
 80052b4:	723b      	strb	r3, [r7, #8]
 80052b6:	2345      	movs	r3, #69	; 0x45
 80052b8:	727b      	strb	r3, [r7, #9]
 80052ba:	2322      	movs	r3, #34	; 0x22
 80052bc:	72bb      	strb	r3, [r7, #10]
 80052be:	238e      	movs	r3, #142	; 0x8e
 80052c0:	72fb      	strb	r3, [r7, #11]
 80052c2:	2342      	movs	r3, #66	; 0x42
 80052c4:	733b      	strb	r3, [r7, #12]
 80052c6:	23fe      	movs	r3, #254	; 0xfe
 80052c8:	737b      	strb	r3, [r7, #13]
 80052ca:	2300      	movs	r3, #0
 80052cc:	73bb      	strb	r3, [r7, #14]
 80052ce:	2300      	movs	r3, #0
 80052d0:	73fb      	strb	r3, [r7, #15]
    aci_gatt_add_char(aPeerToPeerContext.PeerToPeerSvcHdle,
 80052d2:	4b0c      	ldr	r3, [pc, #48]	; (8005304 <P2PS_STM_Init+0x134>)
 80052d4:	8818      	ldrh	r0, [r3, #0]
 80052d6:	463a      	mov	r2, r7
 80052d8:	4b0c      	ldr	r3, [pc, #48]	; (800530c <P2PS_STM_Init+0x13c>)
 80052da:	9305      	str	r3, [sp, #20]
 80052dc:	2301      	movs	r3, #1
 80052de:	9304      	str	r3, [sp, #16]
 80052e0:	230a      	movs	r3, #10
 80052e2:	9303      	str	r3, [sp, #12]
 80052e4:	2301      	movs	r3, #1
 80052e6:	9302      	str	r3, [sp, #8]
 80052e8:	2300      	movs	r3, #0
 80052ea:	9301      	str	r3, [sp, #4]
 80052ec:	2310      	movs	r3, #16
 80052ee:	9300      	str	r3, [sp, #0]
 80052f0:	2302      	movs	r3, #2
 80052f2:	2102      	movs	r1, #2
 80052f4:	f7ff fb79 	bl	80049ea <aci_gatt_add_char>
                      0,
                      &(aPeerToPeerContext.RebootReqCharHdle));
#endif    

    
  return;
 80052f8:	bf00      	nop
}
 80052fa:	3710      	adds	r7, #16
 80052fc:	46bd      	mov	sp, r7
 80052fe:	bd80      	pop	{r7, pc}
 8005300:	08005109 	.word	0x08005109
 8005304:	200000c4 	.word	0x200000c4
 8005308:	200000c6 	.word	0x200000c6
 800530c:	200000c8 	.word	0x200000c8

08005310 <BAS_Init>:
/* Private functions ----------------------------------------------------------*/
/* Weak functions ----------------------------------------------------------*/
void BVOPUS_STM_Init(void);

__weak void BAS_Init( void )
{
 8005310:	b480      	push	{r7}
 8005312:	af00      	add	r7, sp, #0
  return;
 8005314:	bf00      	nop
}
 8005316:	46bd      	mov	sp, r7
 8005318:	f85d 7b04 	ldr.w	r7, [sp], #4
 800531c:	4770      	bx	lr

0800531e <BLS_Init>:

__weak void BLS_Init( void )
{
 800531e:	b480      	push	{r7}
 8005320:	af00      	add	r7, sp, #0
  return;
 8005322:	bf00      	nop
}
 8005324:	46bd      	mov	sp, r7
 8005326:	f85d 7b04 	ldr.w	r7, [sp], #4
 800532a:	4770      	bx	lr

0800532c <CRS_STM_Init>:
__weak void CRS_STM_Init( void )
{
 800532c:	b480      	push	{r7}
 800532e:	af00      	add	r7, sp, #0
  return;
 8005330:	bf00      	nop
}
 8005332:	46bd      	mov	sp, r7
 8005334:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005338:	4770      	bx	lr

0800533a <DIS_Init>:
__weak void DIS_Init( void )
{
 800533a:	b480      	push	{r7}
 800533c:	af00      	add	r7, sp, #0
  return;
 800533e:	bf00      	nop
}
 8005340:	46bd      	mov	sp, r7
 8005342:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005346:	4770      	bx	lr

08005348 <EDS_STM_Init>:
__weak void EDS_STM_Init( void )
{
 8005348:	b480      	push	{r7}
 800534a:	af00      	add	r7, sp, #0
  return;
 800534c:	bf00      	nop
}
 800534e:	46bd      	mov	sp, r7
 8005350:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005354:	4770      	bx	lr

08005356 <HIDS_Init>:
__weak void HIDS_Init( void )
{
 8005356:	b480      	push	{r7}
 8005358:	af00      	add	r7, sp, #0
  return;
 800535a:	bf00      	nop
}
 800535c:	46bd      	mov	sp, r7
 800535e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005362:	4770      	bx	lr

08005364 <HRS_Init>:
__weak void HRS_Init( void )
{
 8005364:	b480      	push	{r7}
 8005366:	af00      	add	r7, sp, #0
  return;
 8005368:	bf00      	nop
}
 800536a:	46bd      	mov	sp, r7
 800536c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005370:	4770      	bx	lr

08005372 <HTS_Init>:
__weak void HTS_Init( void )
{
 8005372:	b480      	push	{r7}
 8005374:	af00      	add	r7, sp, #0
  return;
 8005376:	bf00      	nop
}
 8005378:	46bd      	mov	sp, r7
 800537a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800537e:	4770      	bx	lr

08005380 <IAS_Init>:
__weak void IAS_Init( void )
{
 8005380:	b480      	push	{r7}
 8005382:	af00      	add	r7, sp, #0
  return;
 8005384:	bf00      	nop
}
 8005386:	46bd      	mov	sp, r7
 8005388:	f85d 7b04 	ldr.w	r7, [sp], #4
 800538c:	4770      	bx	lr

0800538e <LLS_Init>:
__weak void LLS_Init( void )
{
 800538e:	b480      	push	{r7}
 8005390:	af00      	add	r7, sp, #0
  return;
 8005392:	bf00      	nop
}
 8005394:	46bd      	mov	sp, r7
 8005396:	f85d 7b04 	ldr.w	r7, [sp], #4
 800539a:	4770      	bx	lr

0800539c <TPS_Init>:
__weak void TPS_Init( void )
{
 800539c:	b480      	push	{r7}
 800539e:	af00      	add	r7, sp, #0
  return;
 80053a0:	bf00      	nop
}
 80053a2:	46bd      	mov	sp, r7
 80053a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053a8:	4770      	bx	lr

080053aa <MOTENV_STM_Init>:
__weak void MOTENV_STM_Init( void )
{
 80053aa:	b480      	push	{r7}
 80053ac:	af00      	add	r7, sp, #0
  return;
 80053ae:	bf00      	nop
}
 80053b0:	46bd      	mov	sp, r7
 80053b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053b6:	4770      	bx	lr

080053b8 <ZDD_STM_Init>:
__weak void P2PS_STM_Init( void )
{
  return;
}
__weak void ZDD_STM_Init( void )
{
 80053b8:	b480      	push	{r7}
 80053ba:	af00      	add	r7, sp, #0
  return;
 80053bc:	bf00      	nop
}
 80053be:	46bd      	mov	sp, r7
 80053c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053c4:	4770      	bx	lr

080053c6 <OTAS_STM_Init>:
__weak void OTAS_STM_Init( void )
{
 80053c6:	b480      	push	{r7}
 80053c8:	af00      	add	r7, sp, #0
  return;
 80053ca:	bf00      	nop
}
 80053cc:	46bd      	mov	sp, r7
 80053ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053d2:	4770      	bx	lr

080053d4 <MESH_Init>:
__weak void MESH_Init( void )
{
 80053d4:	b480      	push	{r7}
 80053d6:	af00      	add	r7, sp, #0
  return;
 80053d8:	bf00      	nop
}
 80053da:	46bd      	mov	sp, r7
 80053dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053e0:	4770      	bx	lr

080053e2 <BVOPUS_STM_Init>:
__weak void BVOPUS_STM_Init( void )
{
 80053e2:	b480      	push	{r7}
 80053e4:	af00      	add	r7, sp, #0
  return;
 80053e6:	bf00      	nop
}
 80053e8:	46bd      	mov	sp, r7
 80053ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053ee:	4770      	bx	lr

080053f0 <SVCCTL_InitCustomSvc>:
__weak void SVCCTL_InitCustomSvc( void )
{
 80053f0:	b480      	push	{r7}
 80053f2:	af00      	add	r7, sp, #0
  return;
 80053f4:	bf00      	nop
}
 80053f6:	46bd      	mov	sp, r7
 80053f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053fc:	4770      	bx	lr
	...

08005400 <SVCCTL_Init>:

/* Functions Definition ------------------------------------------------------*/

void SVCCTL_Init( void )
{
 8005400:	b580      	push	{r7, lr}
 8005402:	af00      	add	r7, sp, #0
 
  /**
   * Initialize the number of registered Handler
   */
  SVCCTL_EvtHandler.NbreOfRegisteredHandler = 0;
 8005404:	4b04      	ldr	r3, [pc, #16]	; (8005418 <SVCCTL_Init+0x18>)
 8005406:	2200      	movs	r2, #0
 8005408:	771a      	strb	r2, [r3, #28]
  SVCCTL_CltHandler.NbreOfRegisteredHandler = 0;
 800540a:	4b04      	ldr	r3, [pc, #16]	; (800541c <SVCCTL_Init+0x1c>)
 800540c:	2200      	movs	r2, #0
 800540e:	701a      	strb	r2, [r3, #0]

  /**
   * Add and Initialize requested services
   */
  SVCCTL_SvcInit();
 8005410:	f000 f806 	bl	8005420 <SVCCTL_SvcInit>

  return;
 8005414:	bf00      	nop
}
 8005416:	bd80      	pop	{r7, pc}
 8005418:	200000cc 	.word	0x200000cc
 800541c:	200000ec 	.word	0x200000ec

08005420 <SVCCTL_SvcInit>:

__weak void SVCCTL_SvcInit(void)
{
 8005420:	b580      	push	{r7, lr}
 8005422:	af00      	add	r7, sp, #0
  BAS_Init();
 8005424:	f7ff ff74 	bl	8005310 <BAS_Init>

  BLS_Init();
 8005428:	f7ff ff79 	bl	800531e <BLS_Init>

  CRS_STM_Init();
 800542c:	f7ff ff7e 	bl	800532c <CRS_STM_Init>

  DIS_Init();
 8005430:	f7ff ff83 	bl	800533a <DIS_Init>

  EDS_STM_Init();
 8005434:	f7ff ff88 	bl	8005348 <EDS_STM_Init>

  HIDS_Init();
 8005438:	f7ff ff8d 	bl	8005356 <HIDS_Init>

  HRS_Init();
 800543c:	f7ff ff92 	bl	8005364 <HRS_Init>

  HTS_Init();
 8005440:	f7ff ff97 	bl	8005372 <HTS_Init>

  IAS_Init();
 8005444:	f7ff ff9c 	bl	8005380 <IAS_Init>

  LLS_Init();
 8005448:	f7ff ffa1 	bl	800538e <LLS_Init>

  TPS_Init();
 800544c:	f7ff ffa6 	bl	800539c <TPS_Init>

  MOTENV_STM_Init();
 8005450:	f7ff ffab 	bl	80053aa <MOTENV_STM_Init>

  P2PS_STM_Init();
 8005454:	f7ff febc 	bl	80051d0 <P2PS_STM_Init>

  ZDD_STM_Init();
 8005458:	f7ff ffae 	bl	80053b8 <ZDD_STM_Init>

  OTAS_STM_Init();
 800545c:	f7ff ffb3 	bl	80053c6 <OTAS_STM_Init>
  
  BVOPUS_STM_Init();
 8005460:	f7ff ffbf 	bl	80053e2 <BVOPUS_STM_Init>

  MESH_Init();
 8005464:	f7ff ffb6 	bl	80053d4 <MESH_Init>

  SVCCTL_InitCustomSvc();
 8005468:	f7ff ffc2 	bl	80053f0 <SVCCTL_InitCustomSvc>
  
  return;
 800546c:	bf00      	nop
}
 800546e:	bd80      	pop	{r7, pc}

08005470 <SVCCTL_RegisterSvcHandler>:
 * @brief  BLE Controller initialization
 * @param  None
 * @retval None
 */
void SVCCTL_RegisterSvcHandler( SVC_CTL_p_EvtHandler_t pfBLE_SVC_Service_Event_Handler )
{
 8005470:	b480      	push	{r7}
 8005472:	b083      	sub	sp, #12
 8005474:	af00      	add	r7, sp, #0
 8005476:	6078      	str	r0, [r7, #4]
#if (BLE_CFG_SVC_MAX_NBR_CB > 0)
  SVCCTL_EvtHandler.SVCCTL__SvcHandlerTab[SVCCTL_EvtHandler.NbreOfRegisteredHandler] = pfBLE_SVC_Service_Event_Handler;
 8005478:	4b09      	ldr	r3, [pc, #36]	; (80054a0 <SVCCTL_RegisterSvcHandler+0x30>)
 800547a:	7f1b      	ldrb	r3, [r3, #28]
 800547c:	4619      	mov	r1, r3
 800547e:	4a08      	ldr	r2, [pc, #32]	; (80054a0 <SVCCTL_RegisterSvcHandler+0x30>)
 8005480:	687b      	ldr	r3, [r7, #4]
 8005482:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
  SVCCTL_EvtHandler.NbreOfRegisteredHandler++;
 8005486:	4b06      	ldr	r3, [pc, #24]	; (80054a0 <SVCCTL_RegisterSvcHandler+0x30>)
 8005488:	7f1b      	ldrb	r3, [r3, #28]
 800548a:	3301      	adds	r3, #1
 800548c:	b2da      	uxtb	r2, r3
 800548e:	4b04      	ldr	r3, [pc, #16]	; (80054a0 <SVCCTL_RegisterSvcHandler+0x30>)
 8005490:	771a      	strb	r2, [r3, #28]
#else
  (void)(pfBLE_SVC_Service_Event_Handler);
#endif

  return;
 8005492:	bf00      	nop
}
 8005494:	370c      	adds	r7, #12
 8005496:	46bd      	mov	sp, r7
 8005498:	f85d 7b04 	ldr.w	r7, [sp], #4
 800549c:	4770      	bx	lr
 800549e:	bf00      	nop
 80054a0:	200000cc 	.word	0x200000cc

080054a4 <SVCCTL_UserEvtRx>:

  return;
}

SVCCTL_UserEvtFlowStatus_t SVCCTL_UserEvtRx( void *pckt )
{
 80054a4:	b580      	push	{r7, lr}
 80054a6:	b086      	sub	sp, #24
 80054a8:	af00      	add	r7, sp, #0
 80054aa:	6078      	str	r0, [r7, #4]
  evt_blecore_aci *blecore_evt;
  SVCCTL_EvtAckStatus_t event_notification_status;
  SVCCTL_UserEvtFlowStatus_t return_status;
  uint8_t index;

  event_pckt = (hci_event_pckt*) ((hci_uart_pckt *) pckt)->data;
 80054ac:	687b      	ldr	r3, [r7, #4]
 80054ae:	3301      	adds	r3, #1
 80054b0:	613b      	str	r3, [r7, #16]
  event_notification_status = SVCCTL_EvtNotAck;
 80054b2:	2300      	movs	r3, #0
 80054b4:	75fb      	strb	r3, [r7, #23]

  switch (event_pckt->evt)
 80054b6:	693b      	ldr	r3, [r7, #16]
 80054b8:	781b      	ldrb	r3, [r3, #0]
 80054ba:	2bff      	cmp	r3, #255	; 0xff
 80054bc:	d125      	bne.n	800550a <SVCCTL_UserEvtRx+0x66>
  {
    case HCI_VENDOR_SPECIFIC_DEBUG_EVT_CODE:
    {
      blecore_evt = (evt_blecore_aci*) event_pckt->data;
 80054be:	693b      	ldr	r3, [r7, #16]
 80054c0:	3302      	adds	r3, #2
 80054c2:	60fb      	str	r3, [r7, #12]

      switch ((blecore_evt->ecode) & SVCCTL_EGID_EVT_MASK)
 80054c4:	68fb      	ldr	r3, [r7, #12]
 80054c6:	881b      	ldrh	r3, [r3, #0]
 80054c8:	b29b      	uxth	r3, r3
 80054ca:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 80054ce:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80054d2:	d118      	bne.n	8005506 <SVCCTL_UserEvtRx+0x62>
      {
        case SVCCTL_GATT_EVT_TYPE:
#if (BLE_CFG_SVC_MAX_NBR_CB > 0)
          /* For Service event handler */
          for (index = 0; index < SVCCTL_EvtHandler.NbreOfRegisteredHandler; index++)
 80054d4:	2300      	movs	r3, #0
 80054d6:	757b      	strb	r3, [r7, #21]
 80054d8:	e00d      	b.n	80054f6 <SVCCTL_UserEvtRx+0x52>
          {
            event_notification_status = SVCCTL_EvtHandler.SVCCTL__SvcHandlerTab[index](pckt);
 80054da:	7d7b      	ldrb	r3, [r7, #21]
 80054dc:	4a1a      	ldr	r2, [pc, #104]	; (8005548 <SVCCTL_UserEvtRx+0xa4>)
 80054de:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80054e2:	6878      	ldr	r0, [r7, #4]
 80054e4:	4798      	blx	r3
 80054e6:	4603      	mov	r3, r0
 80054e8:	75fb      	strb	r3, [r7, #23]
            /**
             * When a GATT event has been acknowledged by a Service, there is no need to call the other registered handlers
             * a GATT event is relevant for only one Service
             */
            if (event_notification_status != SVCCTL_EvtNotAck)
 80054ea:	7dfb      	ldrb	r3, [r7, #23]
 80054ec:	2b00      	cmp	r3, #0
 80054ee:	d108      	bne.n	8005502 <SVCCTL_UserEvtRx+0x5e>
          for (index = 0; index < SVCCTL_EvtHandler.NbreOfRegisteredHandler; index++)
 80054f0:	7d7b      	ldrb	r3, [r7, #21]
 80054f2:	3301      	adds	r3, #1
 80054f4:	757b      	strb	r3, [r7, #21]
 80054f6:	4b14      	ldr	r3, [pc, #80]	; (8005548 <SVCCTL_UserEvtRx+0xa4>)
 80054f8:	7f1b      	ldrb	r3, [r3, #28]
 80054fa:	7d7a      	ldrb	r2, [r7, #21]
 80054fc:	429a      	cmp	r2, r3
 80054fe:	d3ec      	bcc.n	80054da <SVCCTL_UserEvtRx+0x36>
               */
              break;
            }
          }
#endif
          break;
 8005500:	e002      	b.n	8005508 <SVCCTL_UserEvtRx+0x64>
              break;
 8005502:	bf00      	nop
          break;
 8005504:	e000      	b.n	8005508 <SVCCTL_UserEvtRx+0x64>

        default:
          break;
 8005506:	bf00      	nop
      }
    }
      break; /* HCI_HCI_VENDOR_SPECIFIC_DEBUG_EVT_CODE_SPECIFIC */
 8005508:	e000      	b.n	800550c <SVCCTL_UserEvtRx+0x68>

    default:
      break;
 800550a:	bf00      	nop

  /**
   * When no registered handlers (either Service or Client) has acknowledged the GATT event, it is reported to the application
   * a GAP event is always reported to the applicaiton.
   */
  switch (event_notification_status)
 800550c:	7dfb      	ldrb	r3, [r7, #23]
 800550e:	2b02      	cmp	r3, #2
 8005510:	d00f      	beq.n	8005532 <SVCCTL_UserEvtRx+0x8e>
 8005512:	2b02      	cmp	r3, #2
 8005514:	dc10      	bgt.n	8005538 <SVCCTL_UserEvtRx+0x94>
 8005516:	2b00      	cmp	r3, #0
 8005518:	d002      	beq.n	8005520 <SVCCTL_UserEvtRx+0x7c>
 800551a:	2b01      	cmp	r3, #1
 800551c:	d006      	beq.n	800552c <SVCCTL_UserEvtRx+0x88>
 800551e:	e00b      	b.n	8005538 <SVCCTL_UserEvtRx+0x94>
    case SVCCTL_EvtNotAck:
      /**
       *  The event has NOT been managed.
       *  It shall be passed to the application for processing
       */
      return_status = SVCCTL_App_Notification(pckt);
 8005520:	6878      	ldr	r0, [r7, #4]
 8005522:	f000 fef7 	bl	8006314 <SVCCTL_App_Notification>
 8005526:	4603      	mov	r3, r0
 8005528:	75bb      	strb	r3, [r7, #22]
      break;
 800552a:	e008      	b.n	800553e <SVCCTL_UserEvtRx+0x9a>

    case SVCCTL_EvtAckFlowEnable:
      return_status = SVCCTL_UserEvtFlowEnable;
 800552c:	2301      	movs	r3, #1
 800552e:	75bb      	strb	r3, [r7, #22]
      break;
 8005530:	e005      	b.n	800553e <SVCCTL_UserEvtRx+0x9a>

    case SVCCTL_EvtAckFlowDisable:
      return_status = SVCCTL_UserEvtFlowDisable;
 8005532:	2300      	movs	r3, #0
 8005534:	75bb      	strb	r3, [r7, #22]
      break;
 8005536:	e002      	b.n	800553e <SVCCTL_UserEvtRx+0x9a>

    default:
      return_status = SVCCTL_UserEvtFlowEnable;
 8005538:	2301      	movs	r3, #1
 800553a:	75bb      	strb	r3, [r7, #22]
      break;
 800553c:	bf00      	nop
  }

  return (return_status);
 800553e:	7dbb      	ldrb	r3, [r7, #22]
}
 8005540:	4618      	mov	r0, r3
 8005542:	3718      	adds	r7, #24
 8005544:	46bd      	mov	sp, r7
 8005546:	bd80      	pop	{r7, pc}
 8005548:	200000cc 	.word	0x200000cc

0800554c <SHCI_C2_BLE_Init>:

  return (SHCI_CmdStatus_t)(((TL_CcEvt_t*)(p_rsp->evtserial.evt.payload))->payload[0]);
}

SHCI_CmdStatus_t SHCI_C2_BLE_Init( SHCI_C2_Ble_Init_Cmd_Packet_t *pCmdPacket )
{
 800554c:	b580      	push	{r7, lr}
 800554e:	b088      	sub	sp, #32
 8005550:	af00      	add	r7, sp, #0
 8005552:	6078      	str	r0, [r7, #4]
   * Buffer is large enough to hold command complete without payload
   */
  uint8_t local_buffer[TL_BLEEVT_CS_BUFFER_SIZE];
  TL_EvtPacket_t * p_rsp;

  p_rsp = (TL_EvtPacket_t *)local_buffer;
 8005554:	f107 030c 	add.w	r3, r7, #12
 8005558:	61fb      	str	r3, [r7, #28]

 shci_send( SHCI_OPCODE_C2_BLE_INIT,
            sizeof( SHCI_C2_Ble_Init_Cmd_Param_t ),
            (uint8_t*)&pCmdPacket->Param,
 800555a:	687b      	ldr	r3, [r7, #4]
 800555c:	f103 020c 	add.w	r2, r3, #12
 shci_send( SHCI_OPCODE_C2_BLE_INIT,
 8005560:	69fb      	ldr	r3, [r7, #28]
 8005562:	2125      	movs	r1, #37	; 0x25
 8005564:	f64f 4066 	movw	r0, #64614	; 0xfc66
 8005568:	f000 fae2 	bl	8005b30 <shci_send>
            p_rsp );

  return (SHCI_CmdStatus_t)(((TL_CcEvt_t*)(p_rsp->evtserial.evt.payload))->payload[0]);
 800556c:	69fb      	ldr	r3, [r7, #28]
 800556e:	330b      	adds	r3, #11
 8005570:	78db      	ldrb	r3, [r3, #3]
}
 8005572:	4618      	mov	r0, r3
 8005574:	3720      	adds	r7, #32
 8005576:	46bd      	mov	sp, r7
 8005578:	bd80      	pop	{r7, pc}

0800557a <SHCI_C2_DEBUG_Init>:

  return (SHCI_CmdStatus_t)(((TL_CcEvt_t*)(p_rsp->evtserial.evt.payload))->payload[0]);
}

SHCI_CmdStatus_t SHCI_C2_DEBUG_Init( SHCI_C2_DEBUG_Init_Cmd_Packet_t *pCmdPacket  )
{
 800557a:	b580      	push	{r7, lr}
 800557c:	b088      	sub	sp, #32
 800557e:	af00      	add	r7, sp, #0
 8005580:	6078      	str	r0, [r7, #4]
   * Buffer is large enough to hold command complete without payload
   */
  uint8_t local_buffer[TL_BLEEVT_CS_BUFFER_SIZE];
  TL_EvtPacket_t * p_rsp;

  p_rsp = (TL_EvtPacket_t *)local_buffer;
 8005582:	f107 030c 	add.w	r3, r7, #12
 8005586:	61fb      	str	r3, [r7, #28]

  shci_send( SHCI_OPCODE_C2_DEBUG_INIT,
             sizeof( SHCI_C2_DEBUG_init_Cmd_Param_t ),
             (uint8_t*)&pCmdPacket->Param,
 8005588:	687b      	ldr	r3, [r7, #4]
 800558a:	f103 020c 	add.w	r2, r3, #12
  shci_send( SHCI_OPCODE_C2_DEBUG_INIT,
 800558e:	69fb      	ldr	r3, [r7, #28]
 8005590:	210f      	movs	r1, #15
 8005592:	f64f 4068 	movw	r0, #64616	; 0xfc68
 8005596:	f000 facb 	bl	8005b30 <shci_send>
             p_rsp );

  return (SHCI_CmdStatus_t)(((TL_CcEvt_t*)(p_rsp->evtserial.evt.payload))->payload[0]);
 800559a:	69fb      	ldr	r3, [r7, #28]
 800559c:	330b      	adds	r3, #11
 800559e:	78db      	ldrb	r3, [r3, #3]
}
 80055a0:	4618      	mov	r0, r3
 80055a2:	3720      	adds	r7, #32
 80055a4:	46bd      	mov	sp, r7
 80055a6:	bd80      	pop	{r7, pc}

080055a8 <SHCI_C2_Config>:

  return (SHCI_CmdStatus_t)(((TL_CcEvt_t*)(p_rsp->evtserial.evt.payload))->payload[0]);
}

SHCI_CmdStatus_t SHCI_C2_Config(SHCI_C2_CONFIG_Cmd_Param_t *pCmdPacket)
{
 80055a8:	b580      	push	{r7, lr}
 80055aa:	b088      	sub	sp, #32
 80055ac:	af00      	add	r7, sp, #0
 80055ae:	6078      	str	r0, [r7, #4]
   * Buffer is large enough to hold command complete without payload
   */
  uint8_t local_buffer[TL_BLEEVT_CS_BUFFER_SIZE];
  TL_EvtPacket_t * p_rsp;

  p_rsp = (TL_EvtPacket_t *)local_buffer;
 80055b0:	f107 030c 	add.w	r3, r7, #12
 80055b4:	61fb      	str	r3, [r7, #28]

  shci_send( SHCI_OPCODE_C2_CONFIG,
 80055b6:	69fb      	ldr	r3, [r7, #28]
 80055b8:	687a      	ldr	r2, [r7, #4]
 80055ba:	210e      	movs	r1, #14
 80055bc:	f64f 4075 	movw	r0, #64629	; 0xfc75
 80055c0:	f000 fab6 	bl	8005b30 <shci_send>
             sizeof(SHCI_C2_CONFIG_Cmd_Param_t),
             (uint8_t*)pCmdPacket,
             p_rsp );

  return (SHCI_CmdStatus_t)(((TL_CcEvt_t*)(p_rsp->evtserial.evt.payload))->payload[0]);
 80055c4:	69fb      	ldr	r3, [r7, #28]
 80055c6:	330b      	adds	r3, #11
 80055c8:	78db      	ldrb	r3, [r3, #3]
}
 80055ca:	4618      	mov	r0, r3
 80055cc:	3720      	adds	r7, #32
 80055ce:	46bd      	mov	sp, r7
 80055d0:	bd80      	pop	{r7, pc}
	...

080055d4 <SHCI_GetWirelessFwInfo>:
 *  Local System COMMAND
 *  These commands are NOT sent to the CPU2
 */

SHCI_CmdStatus_t SHCI_GetWirelessFwInfo( WirelessFwInfo_t* pWirelessInfo )
{
 80055d4:	b480      	push	{r7}
 80055d6:	b08b      	sub	sp, #44	; 0x2c
 80055d8:	af00      	add	r7, sp, #0
 80055da:	6078      	str	r0, [r7, #4]
  uint32_t ipccdba = 0;
 80055dc:	2300      	movs	r3, #0
 80055de:	613b      	str	r3, [r7, #16]
  MB_RefTable_t * p_RefTable = NULL;
 80055e0:	2300      	movs	r3, #0
 80055e2:	60fb      	str	r3, [r7, #12]
  uint32_t wireless_firmware_version = 0;
 80055e4:	2300      	movs	r3, #0
 80055e6:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t wireless_firmware_memorySize = 0;
 80055e8:	2300      	movs	r3, #0
 80055ea:	623b      	str	r3, [r7, #32]
  uint32_t wireless_firmware_infoStack = 0;
 80055ec:	2300      	movs	r3, #0
 80055ee:	61fb      	str	r3, [r7, #28]
  MB_FUS_DeviceInfoTable_t * p_fus_device_info_table = NULL;
 80055f0:	2300      	movs	r3, #0
 80055f2:	60bb      	str	r3, [r7, #8]
  uint32_t fus_version = 0;
 80055f4:	2300      	movs	r3, #0
 80055f6:	61bb      	str	r3, [r7, #24]
  uint32_t fus_memorySize = 0;
 80055f8:	2300      	movs	r3, #0
 80055fa:	617b      	str	r3, [r7, #20]

  ipccdba = READ_BIT( FLASH->IPCCBR, FLASH_IPCCBR_IPCCDBA );
 80055fc:	4b4a      	ldr	r3, [pc, #296]	; (8005728 <SHCI_GetWirelessFwInfo+0x154>)
 80055fe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005600:	f3c3 030d 	ubfx	r3, r3, #0, #14
 8005604:	613b      	str	r3, [r7, #16]
  /**
   * The Device Info Table mapping depends on which firmware is running on CPU2.
   * If the FUS is running on CPU2, FUS_DEVICE_INFO_TABLE_VALIDITY_KEYWORD shall be written in the table.
   * Otherwise, it means the Wireless Firmware is running on the CPU2
   */
  p_fus_device_info_table = (MB_FUS_DeviceInfoTable_t*)(*(uint32_t*)((ipccdba<<2) + SRAM2A_BASE));
 8005606:	693b      	ldr	r3, [r7, #16]
 8005608:	009b      	lsls	r3, r3, #2
 800560a:	f103 5300 	add.w	r3, r3, #536870912	; 0x20000000
 800560e:	f503 3340 	add.w	r3, r3, #196608	; 0x30000
 8005612:	681b      	ldr	r3, [r3, #0]
 8005614:	60bb      	str	r3, [r7, #8]

  if(p_fus_device_info_table->DeviceInfoTableState == FUS_DEVICE_INFO_TABLE_VALIDITY_KEYWORD)
 8005616:	68bb      	ldr	r3, [r7, #8]
 8005618:	681b      	ldr	r3, [r3, #0]
 800561a:	4a44      	ldr	r2, [pc, #272]	; (800572c <SHCI_GetWirelessFwInfo+0x158>)
 800561c:	4293      	cmp	r3, r2
 800561e:	d10f      	bne.n	8005640 <SHCI_GetWirelessFwInfo+0x6c>
    /* The FUS is running on CPU2 */
    /**
     *  Retrieve the WirelessFwInfoTable
     *  This table is stored in RAM at startup during the TL (transport layer) initialization
     */
    wireless_firmware_version =  p_fus_device_info_table->WirelessStackVersion;
 8005620:	68bb      	ldr	r3, [r7, #8]
 8005622:	695b      	ldr	r3, [r3, #20]
 8005624:	627b      	str	r3, [r7, #36]	; 0x24
    wireless_firmware_memorySize =  p_fus_device_info_table->WirelessStackMemorySize;
 8005626:	68bb      	ldr	r3, [r7, #8]
 8005628:	699b      	ldr	r3, [r3, #24]
 800562a:	623b      	str	r3, [r7, #32]
    wireless_firmware_infoStack =  p_fus_device_info_table->WirelessFirmwareBleInfo;
 800562c:	68bb      	ldr	r3, [r7, #8]
 800562e:	69db      	ldr	r3, [r3, #28]
 8005630:	61fb      	str	r3, [r7, #28]

    /**
     *  Retrieve the FusInfoTable
     *  This table is stored in RAM at startup during the TL (transport layer) initialization
     */
    fus_version =  p_fus_device_info_table->FusVersion;
 8005632:	68bb      	ldr	r3, [r7, #8]
 8005634:	68db      	ldr	r3, [r3, #12]
 8005636:	61bb      	str	r3, [r7, #24]
    fus_memorySize =  p_fus_device_info_table->FusMemorySize;
 8005638:	68bb      	ldr	r3, [r7, #8]
 800563a:	691b      	ldr	r3, [r3, #16]
 800563c:	617b      	str	r3, [r7, #20]
 800563e:	e01a      	b.n	8005676 <SHCI_GetWirelessFwInfo+0xa2>
  }
  else
  {
    /* The Wireless Firmware is running on CPU2 */
    p_RefTable = (MB_RefTable_t*)((ipccdba<<2) + SRAM2A_BASE);
 8005640:	693b      	ldr	r3, [r7, #16]
 8005642:	009b      	lsls	r3, r3, #2
 8005644:	f103 5300 	add.w	r3, r3, #536870912	; 0x20000000
 8005648:	f503 3340 	add.w	r3, r3, #196608	; 0x30000
 800564c:	60fb      	str	r3, [r7, #12]

    /**
     *  Retrieve the WirelessFwInfoTable
     *  This table is stored in RAM at startup during the TL (transport layer) initialization
     */
    wireless_firmware_version =  p_RefTable->p_device_info_table->WirelessFwInfoTable.Version;
 800564e:	68fb      	ldr	r3, [r7, #12]
 8005650:	681b      	ldr	r3, [r3, #0]
 8005652:	691b      	ldr	r3, [r3, #16]
 8005654:	627b      	str	r3, [r7, #36]	; 0x24
    wireless_firmware_memorySize =  p_RefTable->p_device_info_table->WirelessFwInfoTable.MemorySize;
 8005656:	68fb      	ldr	r3, [r7, #12]
 8005658:	681b      	ldr	r3, [r3, #0]
 800565a:	695b      	ldr	r3, [r3, #20]
 800565c:	623b      	str	r3, [r7, #32]
    wireless_firmware_infoStack =  p_RefTable->p_device_info_table->WirelessFwInfoTable.InfoStack;
 800565e:	68fb      	ldr	r3, [r7, #12]
 8005660:	681b      	ldr	r3, [r3, #0]
 8005662:	699b      	ldr	r3, [r3, #24]
 8005664:	61fb      	str	r3, [r7, #28]

    /**
     *  Retrieve the FusInfoTable
     *  This table is stored in RAM at startup during the TL (transport layer) initialization
     */
    fus_version =  p_RefTable->p_device_info_table->FusInfoTable.Version;
 8005666:	68fb      	ldr	r3, [r7, #12]
 8005668:	681b      	ldr	r3, [r3, #0]
 800566a:	685b      	ldr	r3, [r3, #4]
 800566c:	61bb      	str	r3, [r7, #24]
    fus_memorySize =  p_RefTable->p_device_info_table->FusInfoTable.MemorySize;
 800566e:	68fb      	ldr	r3, [r7, #12]
 8005670:	681b      	ldr	r3, [r3, #0]
 8005672:	689b      	ldr	r3, [r3, #8]
 8005674:	617b      	str	r3, [r7, #20]

  /**
   *  Retrieve the WirelessFwInfoTable
   *  This table is stored in RAM at startup during the TL (transport layer) initialization
   */
  pWirelessInfo->VersionMajor       = ((wireless_firmware_version & INFO_VERSION_MAJOR_MASK) >> INFO_VERSION_MAJOR_OFFSET);
 8005676:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005678:	0e1b      	lsrs	r3, r3, #24
 800567a:	b2da      	uxtb	r2, r3
 800567c:	687b      	ldr	r3, [r7, #4]
 800567e:	701a      	strb	r2, [r3, #0]
  pWirelessInfo->VersionMinor       = ((wireless_firmware_version & INFO_VERSION_MINOR_MASK) >> INFO_VERSION_MINOR_OFFSET);
 8005680:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005682:	0c1b      	lsrs	r3, r3, #16
 8005684:	b2da      	uxtb	r2, r3
 8005686:	687b      	ldr	r3, [r7, #4]
 8005688:	705a      	strb	r2, [r3, #1]
  pWirelessInfo->VersionSub         = ((wireless_firmware_version & INFO_VERSION_SUB_MASK) >> INFO_VERSION_SUB_OFFSET);
 800568a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800568c:	0a1b      	lsrs	r3, r3, #8
 800568e:	b2da      	uxtb	r2, r3
 8005690:	687b      	ldr	r3, [r7, #4]
 8005692:	709a      	strb	r2, [r3, #2]
  pWirelessInfo->VersionBranch      = ((wireless_firmware_version & INFO_VERSION_BRANCH_MASK) >> INFO_VERSION_BRANCH_OFFSET);
 8005694:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005696:	091b      	lsrs	r3, r3, #4
 8005698:	b2db      	uxtb	r3, r3
 800569a:	f003 030f 	and.w	r3, r3, #15
 800569e:	b2da      	uxtb	r2, r3
 80056a0:	687b      	ldr	r3, [r7, #4]
 80056a2:	70da      	strb	r2, [r3, #3]
  pWirelessInfo->VersionReleaseType = ((wireless_firmware_version & INFO_VERSION_TYPE_MASK) >> INFO_VERSION_TYPE_OFFSET);
 80056a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80056a6:	b2db      	uxtb	r3, r3
 80056a8:	f003 030f 	and.w	r3, r3, #15
 80056ac:	b2da      	uxtb	r2, r3
 80056ae:	687b      	ldr	r3, [r7, #4]
 80056b0:	711a      	strb	r2, [r3, #4]

  pWirelessInfo->MemorySizeSram2B   = ((wireless_firmware_memorySize & INFO_SIZE_SRAM2B_MASK) >> INFO_SIZE_SRAM2B_OFFSET);
 80056b2:	6a3b      	ldr	r3, [r7, #32]
 80056b4:	0e1b      	lsrs	r3, r3, #24
 80056b6:	b2da      	uxtb	r2, r3
 80056b8:	687b      	ldr	r3, [r7, #4]
 80056ba:	715a      	strb	r2, [r3, #5]
  pWirelessInfo->MemorySizeSram2A   = ((wireless_firmware_memorySize & INFO_SIZE_SRAM2A_MASK) >> INFO_SIZE_SRAM2A_OFFSET);
 80056bc:	6a3b      	ldr	r3, [r7, #32]
 80056be:	0c1b      	lsrs	r3, r3, #16
 80056c0:	b2da      	uxtb	r2, r3
 80056c2:	687b      	ldr	r3, [r7, #4]
 80056c4:	719a      	strb	r2, [r3, #6]
  pWirelessInfo->MemorySizeSram1    = ((wireless_firmware_memorySize & INFO_SIZE_SRAM1_MASK) >> INFO_SIZE_SRAM1_OFFSET);
 80056c6:	6a3b      	ldr	r3, [r7, #32]
 80056c8:	0a1b      	lsrs	r3, r3, #8
 80056ca:	b2da      	uxtb	r2, r3
 80056cc:	687b      	ldr	r3, [r7, #4]
 80056ce:	71da      	strb	r2, [r3, #7]
  pWirelessInfo->MemorySizeFlash    = ((wireless_firmware_memorySize & INFO_SIZE_FLASH_MASK) >> INFO_SIZE_FLASH_OFFSET);
 80056d0:	6a3b      	ldr	r3, [r7, #32]
 80056d2:	b2da      	uxtb	r2, r3
 80056d4:	687b      	ldr	r3, [r7, #4]
 80056d6:	721a      	strb	r2, [r3, #8]

  pWirelessInfo->StackType          = ((wireless_firmware_infoStack & INFO_STACK_TYPE_MASK) >> INFO_STACK_TYPE_OFFSET);
 80056d8:	69fb      	ldr	r3, [r7, #28]
 80056da:	b2da      	uxtb	r2, r3
 80056dc:	687b      	ldr	r3, [r7, #4]
 80056de:	725a      	strb	r2, [r3, #9]

  /**
   *  Retrieve the FusInfoTable
   *  This table is stored in RAM at startup during the TL (transport layer) initialization
   */
  pWirelessInfo->FusVersionMajor       = ((fus_version & INFO_VERSION_MAJOR_MASK) >> INFO_VERSION_MAJOR_OFFSET);
 80056e0:	69bb      	ldr	r3, [r7, #24]
 80056e2:	0e1b      	lsrs	r3, r3, #24
 80056e4:	b2da      	uxtb	r2, r3
 80056e6:	687b      	ldr	r3, [r7, #4]
 80056e8:	729a      	strb	r2, [r3, #10]
  pWirelessInfo->FusVersionMinor       = ((fus_version & INFO_VERSION_MINOR_MASK) >> INFO_VERSION_MINOR_OFFSET);
 80056ea:	69bb      	ldr	r3, [r7, #24]
 80056ec:	0c1b      	lsrs	r3, r3, #16
 80056ee:	b2da      	uxtb	r2, r3
 80056f0:	687b      	ldr	r3, [r7, #4]
 80056f2:	72da      	strb	r2, [r3, #11]
  pWirelessInfo->FusVersionSub         = ((fus_version & INFO_VERSION_SUB_MASK) >> INFO_VERSION_SUB_OFFSET);
 80056f4:	69bb      	ldr	r3, [r7, #24]
 80056f6:	0a1b      	lsrs	r3, r3, #8
 80056f8:	b2da      	uxtb	r2, r3
 80056fa:	687b      	ldr	r3, [r7, #4]
 80056fc:	731a      	strb	r2, [r3, #12]

  pWirelessInfo->FusMemorySizeSram2B   = ((fus_memorySize & INFO_SIZE_SRAM2B_MASK) >> INFO_SIZE_SRAM2B_OFFSET);
 80056fe:	697b      	ldr	r3, [r7, #20]
 8005700:	0e1b      	lsrs	r3, r3, #24
 8005702:	b2da      	uxtb	r2, r3
 8005704:	687b      	ldr	r3, [r7, #4]
 8005706:	735a      	strb	r2, [r3, #13]
  pWirelessInfo->FusMemorySizeSram2A   = ((fus_memorySize & INFO_SIZE_SRAM2A_MASK) >> INFO_SIZE_SRAM2A_OFFSET);
 8005708:	697b      	ldr	r3, [r7, #20]
 800570a:	0c1b      	lsrs	r3, r3, #16
 800570c:	b2da      	uxtb	r2, r3
 800570e:	687b      	ldr	r3, [r7, #4]
 8005710:	739a      	strb	r2, [r3, #14]
  pWirelessInfo->FusMemorySizeFlash    = ((fus_memorySize & INFO_SIZE_FLASH_MASK) >> INFO_SIZE_FLASH_OFFSET);
 8005712:	697b      	ldr	r3, [r7, #20]
 8005714:	b2da      	uxtb	r2, r3
 8005716:	687b      	ldr	r3, [r7, #4]
 8005718:	73da      	strb	r2, [r3, #15]

  return (SHCI_Success);
 800571a:	2300      	movs	r3, #0
}
 800571c:	4618      	mov	r0, r3
 800571e:	372c      	adds	r7, #44	; 0x2c
 8005720:	46bd      	mov	sp, r7
 8005722:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005726:	4770      	bx	lr
 8005728:	58004000 	.word	0x58004000
 800572c:	a94656b9 	.word	0xa94656b9

08005730 <hci_init>:
static void TlEvtReceived(TL_EvtPacket_t *hcievt);
static void TlInit( TL_CmdPacket_t * p_cmdbuffer );

/* Interface ------- ---------------------------------------------------------*/
void hci_init(void(* UserEvtRx)(void* pData), void* pConf)
{
 8005730:	b580      	push	{r7, lr}
 8005732:	b082      	sub	sp, #8
 8005734:	af00      	add	r7, sp, #0
 8005736:	6078      	str	r0, [r7, #4]
 8005738:	6039      	str	r1, [r7, #0]
  StatusNotCallBackFunction = ((HCI_TL_HciInitConf_t *)pConf)->StatusNotCallBack;
 800573a:	683b      	ldr	r3, [r7, #0]
 800573c:	685b      	ldr	r3, [r3, #4]
 800573e:	4a08      	ldr	r2, [pc, #32]	; (8005760 <hci_init+0x30>)
 8005740:	6013      	str	r3, [r2, #0]
  hciContext.UserEvtRx = UserEvtRx;
 8005742:	4a08      	ldr	r2, [pc, #32]	; (8005764 <hci_init+0x34>)
 8005744:	687b      	ldr	r3, [r7, #4]
 8005746:	61d3      	str	r3, [r2, #28]

  hci_register_io_bus (&hciContext.io);
 8005748:	4806      	ldr	r0, [pc, #24]	; (8005764 <hci_init+0x34>)
 800574a:	f000 f973 	bl	8005a34 <hci_register_io_bus>

  TlInit((TL_CmdPacket_t *)(((HCI_TL_HciInitConf_t *)pConf)->p_cmdbuffer));
 800574e:	683b      	ldr	r3, [r7, #0]
 8005750:	681b      	ldr	r3, [r3, #0]
 8005752:	4618      	mov	r0, r3
 8005754:	f000 f8d4 	bl	8005900 <TlInit>

  return;
 8005758:	bf00      	nop
}
 800575a:	3708      	adds	r7, #8
 800575c:	46bd      	mov	sp, r7
 800575e:	bd80      	pop	{r7, pc}
 8005760:	200001f0 	.word	0x200001f0
 8005764:	200001c8 	.word	0x200001c8

08005768 <hci_user_evt_proc>:

void hci_user_evt_proc(void)
{
 8005768:	b580      	push	{r7, lr}
 800576a:	b084      	sub	sp, #16
 800576c:	af00      	add	r7, sp, #0
  /**
   * It is more secure to use LST_remove_head()/LST_insert_head() compare to LST_get_next_node()/LST_remove_node()
   * in case the user overwrite the header where the next/prev pointers are located
   */

  if((LST_is_empty(&HciAsynchEventQueue) == FALSE) && (UserEventFlow != HCI_TL_UserEventFlow_Disable))
 800576e:	4822      	ldr	r0, [pc, #136]	; (80057f8 <hci_user_evt_proc+0x90>)
 8005770:	f000 fc92 	bl	8006098 <LST_is_empty>
 8005774:	4603      	mov	r3, r0
 8005776:	2b00      	cmp	r3, #0
 8005778:	d12b      	bne.n	80057d2 <hci_user_evt_proc+0x6a>
 800577a:	4b20      	ldr	r3, [pc, #128]	; (80057fc <hci_user_evt_proc+0x94>)
 800577c:	781b      	ldrb	r3, [r3, #0]
 800577e:	2b00      	cmp	r3, #0
 8005780:	d027      	beq.n	80057d2 <hci_user_evt_proc+0x6a>
  {
    LST_remove_head ( &HciAsynchEventQueue, (tListNode **)&phcievtbuffer );
 8005782:	f107 030c 	add.w	r3, r7, #12
 8005786:	4619      	mov	r1, r3
 8005788:	481b      	ldr	r0, [pc, #108]	; (80057f8 <hci_user_evt_proc+0x90>)
 800578a:	f000 fd14 	bl	80061b6 <LST_remove_head>

    if (hciContext.UserEvtRx != NULL)
 800578e:	4b1c      	ldr	r3, [pc, #112]	; (8005800 <hci_user_evt_proc+0x98>)
 8005790:	69db      	ldr	r3, [r3, #28]
 8005792:	2b00      	cmp	r3, #0
 8005794:	d00c      	beq.n	80057b0 <hci_user_evt_proc+0x48>
    {
      UserEvtRxParam.pckt = phcievtbuffer;
 8005796:	68fb      	ldr	r3, [r7, #12]
 8005798:	60bb      	str	r3, [r7, #8]
      UserEvtRxParam.status = HCI_TL_UserEventFlow_Enable;
 800579a:	2301      	movs	r3, #1
 800579c:	713b      	strb	r3, [r7, #4]
      hciContext.UserEvtRx((void *)&UserEvtRxParam);
 800579e:	4b18      	ldr	r3, [pc, #96]	; (8005800 <hci_user_evt_proc+0x98>)
 80057a0:	69db      	ldr	r3, [r3, #28]
 80057a2:	1d3a      	adds	r2, r7, #4
 80057a4:	4610      	mov	r0, r2
 80057a6:	4798      	blx	r3
      UserEventFlow = UserEvtRxParam.status;
 80057a8:	793a      	ldrb	r2, [r7, #4]
 80057aa:	4b14      	ldr	r3, [pc, #80]	; (80057fc <hci_user_evt_proc+0x94>)
 80057ac:	701a      	strb	r2, [r3, #0]
 80057ae:	e002      	b.n	80057b6 <hci_user_evt_proc+0x4e>
    }
    else
    {
      UserEventFlow = HCI_TL_UserEventFlow_Enable;
 80057b0:	4b12      	ldr	r3, [pc, #72]	; (80057fc <hci_user_evt_proc+0x94>)
 80057b2:	2201      	movs	r2, #1
 80057b4:	701a      	strb	r2, [r3, #0]
    }

    if(UserEventFlow != HCI_TL_UserEventFlow_Disable)
 80057b6:	4b11      	ldr	r3, [pc, #68]	; (80057fc <hci_user_evt_proc+0x94>)
 80057b8:	781b      	ldrb	r3, [r3, #0]
 80057ba:	2b00      	cmp	r3, #0
 80057bc:	d004      	beq.n	80057c8 <hci_user_evt_proc+0x60>
    {
      TL_MM_EvtDone( phcievtbuffer );
 80057be:	68fb      	ldr	r3, [r7, #12]
 80057c0:	4618      	mov	r0, r3
 80057c2:	f000 fb91 	bl	8005ee8 <TL_MM_EvtDone>
 80057c6:	e004      	b.n	80057d2 <hci_user_evt_proc+0x6a>
    else
    {
      /**
       * put back the event in the queue
       */
      LST_insert_head ( &HciAsynchEventQueue, (tListNode *)phcievtbuffer );
 80057c8:	68fb      	ldr	r3, [r7, #12]
 80057ca:	4619      	mov	r1, r3
 80057cc:	480a      	ldr	r0, [pc, #40]	; (80057f8 <hci_user_evt_proc+0x90>)
 80057ce:	f000 fc85 	bl	80060dc <LST_insert_head>
    }
  }

  if((LST_is_empty(&HciAsynchEventQueue) == FALSE) && (UserEventFlow != HCI_TL_UserEventFlow_Disable))
 80057d2:	4809      	ldr	r0, [pc, #36]	; (80057f8 <hci_user_evt_proc+0x90>)
 80057d4:	f000 fc60 	bl	8006098 <LST_is_empty>
 80057d8:	4603      	mov	r3, r0
 80057da:	2b00      	cmp	r3, #0
 80057dc:	d107      	bne.n	80057ee <hci_user_evt_proc+0x86>
 80057de:	4b07      	ldr	r3, [pc, #28]	; (80057fc <hci_user_evt_proc+0x94>)
 80057e0:	781b      	ldrb	r3, [r3, #0]
 80057e2:	2b00      	cmp	r3, #0
 80057e4:	d003      	beq.n	80057ee <hci_user_evt_proc+0x86>
  {
    hci_notify_asynch_evt((void*) &HciAsynchEventQueue);
 80057e6:	4804      	ldr	r0, [pc, #16]	; (80057f8 <hci_user_evt_proc+0x90>)
 80057e8:	f000 ffe3 	bl	80067b2 <hci_notify_asynch_evt>
  }


  return;
 80057ec:	bf00      	nop
 80057ee:	bf00      	nop
}
 80057f0:	3710      	adds	r7, #16
 80057f2:	46bd      	mov	sp, r7
 80057f4:	bd80      	pop	{r7, pc}
 80057f6:	bf00      	nop
 80057f8:	200000f4 	.word	0x200000f4
 80057fc:	20000100 	.word	0x20000100
 8005800:	200001c8 	.word	0x200001c8

08005804 <hci_send_req>:

  return;
}

int hci_send_req(struct hci_request *p_cmd, uint8_t async)
{
 8005804:	b580      	push	{r7, lr}
 8005806:	b088      	sub	sp, #32
 8005808:	af00      	add	r7, sp, #0
 800580a:	6078      	str	r0, [r7, #4]
 800580c:	460b      	mov	r3, r1
 800580e:	70fb      	strb	r3, [r7, #3]
  TL_CsEvt_t    *pcommand_status_event;
  TL_EvtPacket_t *pevtpacket;
  uint8_t hci_cmd_complete_return_parameters_length;
  HCI_TL_CmdStatus_t local_cmd_status;

  NotifyCmdStatus(HCI_TL_CmdBusy);
 8005810:	2000      	movs	r0, #0
 8005812:	f000 f8cb 	bl	80059ac <NotifyCmdStatus>
  local_cmd_status = HCI_TL_CmdBusy;
 8005816:	2300      	movs	r3, #0
 8005818:	77fb      	strb	r3, [r7, #31]
  opcode = ((p_cmd->ocf) & 0x03ff) | ((p_cmd->ogf) << 10);
 800581a:	687b      	ldr	r3, [r7, #4]
 800581c:	885b      	ldrh	r3, [r3, #2]
 800581e:	b21b      	sxth	r3, r3
 8005820:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005824:	b21a      	sxth	r2, r3
 8005826:	687b      	ldr	r3, [r7, #4]
 8005828:	881b      	ldrh	r3, [r3, #0]
 800582a:	029b      	lsls	r3, r3, #10
 800582c:	b21b      	sxth	r3, r3
 800582e:	4313      	orrs	r3, r2
 8005830:	b21b      	sxth	r3, r3
 8005832:	83bb      	strh	r3, [r7, #28]
  SendCmd(opcode, p_cmd->clen, p_cmd->cparam);
 8005834:	687b      	ldr	r3, [r7, #4]
 8005836:	68db      	ldr	r3, [r3, #12]
 8005838:	b2d9      	uxtb	r1, r3
 800583a:	687b      	ldr	r3, [r7, #4]
 800583c:	689a      	ldr	r2, [r3, #8]
 800583e:	8bbb      	ldrh	r3, [r7, #28]
 8005840:	4618      	mov	r0, r3
 8005842:	f000 f88d 	bl	8005960 <SendCmd>

  while(local_cmd_status == HCI_TL_CmdBusy)
 8005846:	e04e      	b.n	80058e6 <hci_send_req+0xe2>
  {
    hci_cmd_resp_wait(HCI_TL_DEFAULT_TIMEOUT);
 8005848:	f248 00e8 	movw	r0, #33000	; 0x80e8
 800584c:	f000 ffc8 	bl	80067e0 <hci_cmd_resp_wait>

    /**
     * Process Cmd Event
     */
    while(LST_is_empty(&HciCmdEventQueue) == FALSE)
 8005850:	e043      	b.n	80058da <hci_send_req+0xd6>
    {
      LST_remove_head (&HciCmdEventQueue, (tListNode **)&pevtpacket);
 8005852:	f107 030c 	add.w	r3, r7, #12
 8005856:	4619      	mov	r1, r3
 8005858:	4828      	ldr	r0, [pc, #160]	; (80058fc <hci_send_req+0xf8>)
 800585a:	f000 fcac 	bl	80061b6 <LST_remove_head>

      if(pevtpacket->evtserial.evt.evtcode == TL_BLEEVT_CS_OPCODE)
 800585e:	68fb      	ldr	r3, [r7, #12]
 8005860:	7a5b      	ldrb	r3, [r3, #9]
 8005862:	2b0f      	cmp	r3, #15
 8005864:	d114      	bne.n	8005890 <hci_send_req+0x8c>
      {
        pcommand_status_event = (TL_CsEvt_t*)pevtpacket->evtserial.evt.payload;
 8005866:	68fb      	ldr	r3, [r7, #12]
 8005868:	330b      	adds	r3, #11
 800586a:	613b      	str	r3, [r7, #16]
        if(pcommand_status_event->cmdcode == opcode)
 800586c:	693b      	ldr	r3, [r7, #16]
 800586e:	885b      	ldrh	r3, [r3, #2]
 8005870:	b29b      	uxth	r3, r3
 8005872:	8bba      	ldrh	r2, [r7, #28]
 8005874:	429a      	cmp	r2, r3
 8005876:	d104      	bne.n	8005882 <hci_send_req+0x7e>
        {
          *(uint8_t *)(p_cmd->rparam) = pcommand_status_event->status;
 8005878:	687b      	ldr	r3, [r7, #4]
 800587a:	691b      	ldr	r3, [r3, #16]
 800587c:	693a      	ldr	r2, [r7, #16]
 800587e:	7812      	ldrb	r2, [r2, #0]
 8005880:	701a      	strb	r2, [r3, #0]
        }

        if(pcommand_status_event->numcmd != 0)
 8005882:	693b      	ldr	r3, [r7, #16]
 8005884:	785b      	ldrb	r3, [r3, #1]
 8005886:	2b00      	cmp	r3, #0
 8005888:	d027      	beq.n	80058da <hci_send_req+0xd6>
        {
          local_cmd_status = HCI_TL_CmdAvailable;
 800588a:	2301      	movs	r3, #1
 800588c:	77fb      	strb	r3, [r7, #31]
 800588e:	e024      	b.n	80058da <hci_send_req+0xd6>
        }
      }
      else
      {
        pcommand_complete_event = (TL_CcEvt_t*)pevtpacket->evtserial.evt.payload;
 8005890:	68fb      	ldr	r3, [r7, #12]
 8005892:	330b      	adds	r3, #11
 8005894:	61bb      	str	r3, [r7, #24]

        if(pcommand_complete_event->cmdcode == opcode)
 8005896:	69bb      	ldr	r3, [r7, #24]
 8005898:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 800589c:	b29b      	uxth	r3, r3
 800589e:	8bba      	ldrh	r2, [r7, #28]
 80058a0:	429a      	cmp	r2, r3
 80058a2:	d114      	bne.n	80058ce <hci_send_req+0xca>
        {
          hci_cmd_complete_return_parameters_length = pevtpacket->evtserial.evt.plen - TL_EVT_HDR_SIZE;
 80058a4:	68fb      	ldr	r3, [r7, #12]
 80058a6:	7a9b      	ldrb	r3, [r3, #10]
 80058a8:	3b03      	subs	r3, #3
 80058aa:	75fb      	strb	r3, [r7, #23]
          p_cmd->rlen = MIN(hci_cmd_complete_return_parameters_length, p_cmd->rlen);
 80058ac:	687b      	ldr	r3, [r7, #4]
 80058ae:	695a      	ldr	r2, [r3, #20]
 80058b0:	7dfb      	ldrb	r3, [r7, #23]
 80058b2:	429a      	cmp	r2, r3
 80058b4:	bfa8      	it	ge
 80058b6:	461a      	movge	r2, r3
 80058b8:	687b      	ldr	r3, [r7, #4]
 80058ba:	615a      	str	r2, [r3, #20]
          memcpy(p_cmd->rparam, pcommand_complete_event->payload, p_cmd->rlen);
 80058bc:	687b      	ldr	r3, [r7, #4]
 80058be:	6918      	ldr	r0, [r3, #16]
 80058c0:	69bb      	ldr	r3, [r7, #24]
 80058c2:	1cd9      	adds	r1, r3, #3
 80058c4:	687b      	ldr	r3, [r7, #4]
 80058c6:	695b      	ldr	r3, [r3, #20]
 80058c8:	461a      	mov	r2, r3
 80058ca:	f001 fc23 	bl	8007114 <memcpy>
        }

        if(pcommand_complete_event->numcmd != 0)
 80058ce:	69bb      	ldr	r3, [r7, #24]
 80058d0:	781b      	ldrb	r3, [r3, #0]
 80058d2:	2b00      	cmp	r3, #0
 80058d4:	d001      	beq.n	80058da <hci_send_req+0xd6>
        {
          local_cmd_status = HCI_TL_CmdAvailable;
 80058d6:	2301      	movs	r3, #1
 80058d8:	77fb      	strb	r3, [r7, #31]
    while(LST_is_empty(&HciCmdEventQueue) == FALSE)
 80058da:	4808      	ldr	r0, [pc, #32]	; (80058fc <hci_send_req+0xf8>)
 80058dc:	f000 fbdc 	bl	8006098 <LST_is_empty>
 80058e0:	4603      	mov	r3, r0
 80058e2:	2b00      	cmp	r3, #0
 80058e4:	d0b5      	beq.n	8005852 <hci_send_req+0x4e>
  while(local_cmd_status == HCI_TL_CmdBusy)
 80058e6:	7ffb      	ldrb	r3, [r7, #31]
 80058e8:	2b00      	cmp	r3, #0
 80058ea:	d0ad      	beq.n	8005848 <hci_send_req+0x44>
        }
      }
    }
  }

  NotifyCmdStatus(HCI_TL_CmdAvailable);
 80058ec:	2001      	movs	r0, #1
 80058ee:	f000 f85d 	bl	80059ac <NotifyCmdStatus>

  return 0;
 80058f2:	2300      	movs	r3, #0
}
 80058f4:	4618      	mov	r0, r3
 80058f6:	3720      	adds	r7, #32
 80058f8:	46bd      	mov	sp, r7
 80058fa:	bd80      	pop	{r7, pc}
 80058fc:	200001e8 	.word	0x200001e8

08005900 <TlInit>:

/* Private functions ---------------------------------------------------------*/
static void TlInit( TL_CmdPacket_t * p_cmdbuffer )
{
 8005900:	b580      	push	{r7, lr}
 8005902:	b086      	sub	sp, #24
 8005904:	af00      	add	r7, sp, #0
 8005906:	6078      	str	r0, [r7, #4]
  TL_BLE_InitConf_t Conf;

  /**
   * Always initialize the command event queue
   */
  LST_init_head (&HciCmdEventQueue);
 8005908:	480f      	ldr	r0, [pc, #60]	; (8005948 <TlInit+0x48>)
 800590a:	f000 fbb5 	bl	8006078 <LST_init_head>

  pCmdBuffer = p_cmdbuffer;
 800590e:	4a0f      	ldr	r2, [pc, #60]	; (800594c <TlInit+0x4c>)
 8005910:	687b      	ldr	r3, [r7, #4]
 8005912:	6013      	str	r3, [r2, #0]

  LST_init_head (&HciAsynchEventQueue);
 8005914:	480e      	ldr	r0, [pc, #56]	; (8005950 <TlInit+0x50>)
 8005916:	f000 fbaf 	bl	8006078 <LST_init_head>

  UserEventFlow = HCI_TL_UserEventFlow_Enable;
 800591a:	4b0e      	ldr	r3, [pc, #56]	; (8005954 <TlInit+0x54>)
 800591c:	2201      	movs	r2, #1
 800591e:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  if (hciContext.io.Init)
 8005920:	4b0d      	ldr	r3, [pc, #52]	; (8005958 <TlInit+0x58>)
 8005922:	681b      	ldr	r3, [r3, #0]
 8005924:	2b00      	cmp	r3, #0
 8005926:	d00a      	beq.n	800593e <TlInit+0x3e>
  {

    Conf.p_cmdbuffer = (uint8_t *)p_cmdbuffer;
 8005928:	687b      	ldr	r3, [r7, #4]
 800592a:	613b      	str	r3, [r7, #16]
    Conf.IoBusEvtCallBack = TlEvtReceived;
 800592c:	4b0b      	ldr	r3, [pc, #44]	; (800595c <TlInit+0x5c>)
 800592e:	60bb      	str	r3, [r7, #8]
    hciContext.io.Init(&Conf);
 8005930:	4b09      	ldr	r3, [pc, #36]	; (8005958 <TlInit+0x58>)
 8005932:	681b      	ldr	r3, [r3, #0]
 8005934:	f107 0208 	add.w	r2, r7, #8
 8005938:	4610      	mov	r0, r2
 800593a:	4798      	blx	r3
  }

  return;
 800593c:	bf00      	nop
 800593e:	bf00      	nop
}
 8005940:	3718      	adds	r7, #24
 8005942:	46bd      	mov	sp, r7
 8005944:	bd80      	pop	{r7, pc}
 8005946:	bf00      	nop
 8005948:	200001e8 	.word	0x200001e8
 800594c:	200000fc 	.word	0x200000fc
 8005950:	200000f4 	.word	0x200000f4
 8005954:	20000100 	.word	0x20000100
 8005958:	200001c8 	.word	0x200001c8
 800595c:	080059ed 	.word	0x080059ed

08005960 <SendCmd>:

static void SendCmd(uint16_t opcode, uint8_t plen, void *param)
{
 8005960:	b580      	push	{r7, lr}
 8005962:	b082      	sub	sp, #8
 8005964:	af00      	add	r7, sp, #0
 8005966:	4603      	mov	r3, r0
 8005968:	603a      	str	r2, [r7, #0]
 800596a:	80fb      	strh	r3, [r7, #6]
 800596c:	460b      	mov	r3, r1
 800596e:	717b      	strb	r3, [r7, #5]
  pCmdBuffer->cmdserial.cmd.cmdcode = opcode;
 8005970:	4b0c      	ldr	r3, [pc, #48]	; (80059a4 <SendCmd+0x44>)
 8005972:	681b      	ldr	r3, [r3, #0]
 8005974:	88fa      	ldrh	r2, [r7, #6]
 8005976:	f8a3 2009 	strh.w	r2, [r3, #9]
  pCmdBuffer->cmdserial.cmd.plen = plen;
 800597a:	4b0a      	ldr	r3, [pc, #40]	; (80059a4 <SendCmd+0x44>)
 800597c:	681b      	ldr	r3, [r3, #0]
 800597e:	797a      	ldrb	r2, [r7, #5]
 8005980:	72da      	strb	r2, [r3, #11]
  memcpy( pCmdBuffer->cmdserial.cmd.payload, param, plen );
 8005982:	4b08      	ldr	r3, [pc, #32]	; (80059a4 <SendCmd+0x44>)
 8005984:	681b      	ldr	r3, [r3, #0]
 8005986:	330c      	adds	r3, #12
 8005988:	797a      	ldrb	r2, [r7, #5]
 800598a:	6839      	ldr	r1, [r7, #0]
 800598c:	4618      	mov	r0, r3
 800598e:	f001 fbc1 	bl	8007114 <memcpy>

  hciContext.io.Send(0,0);
 8005992:	4b05      	ldr	r3, [pc, #20]	; (80059a8 <SendCmd+0x48>)
 8005994:	691b      	ldr	r3, [r3, #16]
 8005996:	2100      	movs	r1, #0
 8005998:	2000      	movs	r0, #0
 800599a:	4798      	blx	r3

  return;
 800599c:	bf00      	nop
}
 800599e:	3708      	adds	r7, #8
 80059a0:	46bd      	mov	sp, r7
 80059a2:	bd80      	pop	{r7, pc}
 80059a4:	200000fc 	.word	0x200000fc
 80059a8:	200001c8 	.word	0x200001c8

080059ac <NotifyCmdStatus>:

static void NotifyCmdStatus(HCI_TL_CmdStatus_t hcicmdstatus)
{
 80059ac:	b580      	push	{r7, lr}
 80059ae:	b082      	sub	sp, #8
 80059b0:	af00      	add	r7, sp, #0
 80059b2:	4603      	mov	r3, r0
 80059b4:	71fb      	strb	r3, [r7, #7]
  if(hcicmdstatus == HCI_TL_CmdBusy)
 80059b6:	79fb      	ldrb	r3, [r7, #7]
 80059b8:	2b00      	cmp	r3, #0
 80059ba:	d108      	bne.n	80059ce <NotifyCmdStatus+0x22>
  {
    if(StatusNotCallBackFunction != 0)
 80059bc:	4b0a      	ldr	r3, [pc, #40]	; (80059e8 <NotifyCmdStatus+0x3c>)
 80059be:	681b      	ldr	r3, [r3, #0]
 80059c0:	2b00      	cmp	r3, #0
 80059c2:	d00d      	beq.n	80059e0 <NotifyCmdStatus+0x34>
    {
      StatusNotCallBackFunction(HCI_TL_CmdBusy);
 80059c4:	4b08      	ldr	r3, [pc, #32]	; (80059e8 <NotifyCmdStatus+0x3c>)
 80059c6:	681b      	ldr	r3, [r3, #0]
 80059c8:	2000      	movs	r0, #0
 80059ca:	4798      	blx	r3
    {
      StatusNotCallBackFunction(HCI_TL_CmdAvailable);
    }
  }

  return;
 80059cc:	e008      	b.n	80059e0 <NotifyCmdStatus+0x34>
    if(StatusNotCallBackFunction != 0)
 80059ce:	4b06      	ldr	r3, [pc, #24]	; (80059e8 <NotifyCmdStatus+0x3c>)
 80059d0:	681b      	ldr	r3, [r3, #0]
 80059d2:	2b00      	cmp	r3, #0
 80059d4:	d004      	beq.n	80059e0 <NotifyCmdStatus+0x34>
      StatusNotCallBackFunction(HCI_TL_CmdAvailable);
 80059d6:	4b04      	ldr	r3, [pc, #16]	; (80059e8 <NotifyCmdStatus+0x3c>)
 80059d8:	681b      	ldr	r3, [r3, #0]
 80059da:	2001      	movs	r0, #1
 80059dc:	4798      	blx	r3
  return;
 80059de:	bf00      	nop
 80059e0:	bf00      	nop
}
 80059e2:	3708      	adds	r7, #8
 80059e4:	46bd      	mov	sp, r7
 80059e6:	bd80      	pop	{r7, pc}
 80059e8:	200001f0 	.word	0x200001f0

080059ec <TlEvtReceived>:

static void TlEvtReceived(TL_EvtPacket_t *hcievt)
{
 80059ec:	b580      	push	{r7, lr}
 80059ee:	b082      	sub	sp, #8
 80059f0:	af00      	add	r7, sp, #0
 80059f2:	6078      	str	r0, [r7, #4]
  if ( ((hcievt->evtserial.evt.evtcode) == TL_BLEEVT_CS_OPCODE) || ((hcievt->evtserial.evt.evtcode) == TL_BLEEVT_CC_OPCODE ) )
 80059f4:	687b      	ldr	r3, [r7, #4]
 80059f6:	7a5b      	ldrb	r3, [r3, #9]
 80059f8:	2b0f      	cmp	r3, #15
 80059fa:	d003      	beq.n	8005a04 <TlEvtReceived+0x18>
 80059fc:	687b      	ldr	r3, [r7, #4]
 80059fe:	7a5b      	ldrb	r3, [r3, #9]
 8005a00:	2b0e      	cmp	r3, #14
 8005a02:	d107      	bne.n	8005a14 <TlEvtReceived+0x28>
  {
    LST_insert_tail(&HciCmdEventQueue, (tListNode *)hcievt);
 8005a04:	6879      	ldr	r1, [r7, #4]
 8005a06:	4809      	ldr	r0, [pc, #36]	; (8005a2c <TlEvtReceived+0x40>)
 8005a08:	f000 fb8e 	bl	8006128 <LST_insert_tail>
    hci_cmd_resp_release(0); /**< Notify the application a full Cmd Event has been received */
 8005a0c:	2000      	movs	r0, #0
 8005a0e:	f000 fedc 	bl	80067ca <hci_cmd_resp_release>
 8005a12:	e006      	b.n	8005a22 <TlEvtReceived+0x36>
  }
  else
  {
    LST_insert_tail(&HciAsynchEventQueue, (tListNode *)hcievt);
 8005a14:	6879      	ldr	r1, [r7, #4]
 8005a16:	4806      	ldr	r0, [pc, #24]	; (8005a30 <TlEvtReceived+0x44>)
 8005a18:	f000 fb86 	bl	8006128 <LST_insert_tail>
    hci_notify_asynch_evt((void*) &HciAsynchEventQueue); /**< Notify the application a full HCI event has been received */
 8005a1c:	4804      	ldr	r0, [pc, #16]	; (8005a30 <TlEvtReceived+0x44>)
 8005a1e:	f000 fec8 	bl	80067b2 <hci_notify_asynch_evt>
  }

  return;
 8005a22:	bf00      	nop
}
 8005a24:	3708      	adds	r7, #8
 8005a26:	46bd      	mov	sp, r7
 8005a28:	bd80      	pop	{r7, pc}
 8005a2a:	bf00      	nop
 8005a2c:	200001e8 	.word	0x200001e8
 8005a30:	200000f4 	.word	0x200000f4

08005a34 <hci_register_io_bus>:
#include "hci_tl.h"
#include "tl.h"


void hci_register_io_bus(tHciIO* fops)
{
 8005a34:	b480      	push	{r7}
 8005a36:	b083      	sub	sp, #12
 8005a38:	af00      	add	r7, sp, #0
 8005a3a:	6078      	str	r0, [r7, #4]
  /* Register IO bus services */
  fops->Init    = TL_BLE_Init;
 8005a3c:	687b      	ldr	r3, [r7, #4]
 8005a3e:	4a05      	ldr	r2, [pc, #20]	; (8005a54 <hci_register_io_bus+0x20>)
 8005a40:	601a      	str	r2, [r3, #0]
  fops->Send    = TL_BLE_SendCmd;
 8005a42:	687b      	ldr	r3, [r7, #4]
 8005a44:	4a04      	ldr	r2, [pc, #16]	; (8005a58 <hci_register_io_bus+0x24>)
 8005a46:	611a      	str	r2, [r3, #16]

  return;
 8005a48:	bf00      	nop
}
 8005a4a:	370c      	adds	r7, #12
 8005a4c:	46bd      	mov	sp, r7
 8005a4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a52:	4770      	bx	lr
 8005a54:	08005d45 	.word	0x08005d45
 8005a58:	08005dad 	.word	0x08005dad

08005a5c <shci_init>:
static void TlUserEvtReceived(TL_EvtPacket_t *shcievt);
static void TlInit( TL_CmdPacket_t * p_cmdbuffer );

/* Interface ------- ---------------------------------------------------------*/
void shci_init(void(* UserEvtRx)(void* pData), void* pConf)
{
 8005a5c:	b580      	push	{r7, lr}
 8005a5e:	b082      	sub	sp, #8
 8005a60:	af00      	add	r7, sp, #0
 8005a62:	6078      	str	r0, [r7, #4]
 8005a64:	6039      	str	r1, [r7, #0]
  StatusNotCallBackFunction = ((SHCI_TL_HciInitConf_t *)pConf)->StatusNotCallBack;
 8005a66:	683b      	ldr	r3, [r7, #0]
 8005a68:	685b      	ldr	r3, [r3, #4]
 8005a6a:	4a08      	ldr	r2, [pc, #32]	; (8005a8c <shci_init+0x30>)
 8005a6c:	6013      	str	r3, [r2, #0]
  shciContext.UserEvtRx = UserEvtRx;
 8005a6e:	4a08      	ldr	r2, [pc, #32]	; (8005a90 <shci_init+0x34>)
 8005a70:	687b      	ldr	r3, [r7, #4]
 8005a72:	61d3      	str	r3, [r2, #28]

  shci_register_io_bus (&shciContext.io);
 8005a74:	4806      	ldr	r0, [pc, #24]	; (8005a90 <shci_init+0x34>)
 8005a76:	f000 f911 	bl	8005c9c <shci_register_io_bus>

  TlInit((TL_CmdPacket_t *)(((SHCI_TL_HciInitConf_t *)pConf)->p_cmdbuffer));
 8005a7a:	683b      	ldr	r3, [r7, #0]
 8005a7c:	681b      	ldr	r3, [r3, #0]
 8005a7e:	4618      	mov	r0, r3
 8005a80:	f000 f894 	bl	8005bac <TlInit>

  return;
 8005a84:	bf00      	nop
}
 8005a86:	3708      	adds	r7, #8
 8005a88:	46bd      	mov	sp, r7
 8005a8a:	bd80      	pop	{r7, pc}
 8005a8c:	20000214 	.word	0x20000214
 8005a90:	200001f4 	.word	0x200001f4

08005a94 <shci_user_evt_proc>:

void shci_user_evt_proc(void)
{
 8005a94:	b580      	push	{r7, lr}
 8005a96:	b084      	sub	sp, #16
 8005a98:	af00      	add	r7, sp, #0

  /**
   * It is more secure to use LST_remove_head()/LST_insert_head() compare to LST_get_next_node()/LST_remove_node()
   * in case the user overwrite the header where the next/prev pointers are located
   */
  if((LST_is_empty(&SHciAsynchEventQueue) == FALSE) && (SHCI_TL_UserEventFlow != SHCI_TL_UserEventFlow_Disable))
 8005a9a:	4822      	ldr	r0, [pc, #136]	; (8005b24 <shci_user_evt_proc+0x90>)
 8005a9c:	f000 fafc 	bl	8006098 <LST_is_empty>
 8005aa0:	4603      	mov	r3, r0
 8005aa2:	2b00      	cmp	r3, #0
 8005aa4:	d12b      	bne.n	8005afe <shci_user_evt_proc+0x6a>
 8005aa6:	4b20      	ldr	r3, [pc, #128]	; (8005b28 <shci_user_evt_proc+0x94>)
 8005aa8:	781b      	ldrb	r3, [r3, #0]
 8005aaa:	2b00      	cmp	r3, #0
 8005aac:	d027      	beq.n	8005afe <shci_user_evt_proc+0x6a>
  {
    LST_remove_head ( &SHciAsynchEventQueue, (tListNode **)&phcievtbuffer );
 8005aae:	f107 030c 	add.w	r3, r7, #12
 8005ab2:	4619      	mov	r1, r3
 8005ab4:	481b      	ldr	r0, [pc, #108]	; (8005b24 <shci_user_evt_proc+0x90>)
 8005ab6:	f000 fb7e 	bl	80061b6 <LST_remove_head>

    if (shciContext.UserEvtRx != NULL)
 8005aba:	4b1c      	ldr	r3, [pc, #112]	; (8005b2c <shci_user_evt_proc+0x98>)
 8005abc:	69db      	ldr	r3, [r3, #28]
 8005abe:	2b00      	cmp	r3, #0
 8005ac0:	d00c      	beq.n	8005adc <shci_user_evt_proc+0x48>
    {
      UserEvtRxParam.pckt = phcievtbuffer;
 8005ac2:	68fb      	ldr	r3, [r7, #12]
 8005ac4:	60bb      	str	r3, [r7, #8]
      UserEvtRxParam.status = SHCI_TL_UserEventFlow_Enable;
 8005ac6:	2301      	movs	r3, #1
 8005ac8:	713b      	strb	r3, [r7, #4]
      shciContext.UserEvtRx((void *)&UserEvtRxParam);
 8005aca:	4b18      	ldr	r3, [pc, #96]	; (8005b2c <shci_user_evt_proc+0x98>)
 8005acc:	69db      	ldr	r3, [r3, #28]
 8005ace:	1d3a      	adds	r2, r7, #4
 8005ad0:	4610      	mov	r0, r2
 8005ad2:	4798      	blx	r3
      SHCI_TL_UserEventFlow = UserEvtRxParam.status;
 8005ad4:	793a      	ldrb	r2, [r7, #4]
 8005ad6:	4b14      	ldr	r3, [pc, #80]	; (8005b28 <shci_user_evt_proc+0x94>)
 8005ad8:	701a      	strb	r2, [r3, #0]
 8005ada:	e002      	b.n	8005ae2 <shci_user_evt_proc+0x4e>
    }
    else
    {
      SHCI_TL_UserEventFlow = SHCI_TL_UserEventFlow_Enable;
 8005adc:	4b12      	ldr	r3, [pc, #72]	; (8005b28 <shci_user_evt_proc+0x94>)
 8005ade:	2201      	movs	r2, #1
 8005ae0:	701a      	strb	r2, [r3, #0]
    }

    if(SHCI_TL_UserEventFlow != SHCI_TL_UserEventFlow_Disable)
 8005ae2:	4b11      	ldr	r3, [pc, #68]	; (8005b28 <shci_user_evt_proc+0x94>)
 8005ae4:	781b      	ldrb	r3, [r3, #0]
 8005ae6:	2b00      	cmp	r3, #0
 8005ae8:	d004      	beq.n	8005af4 <shci_user_evt_proc+0x60>
    {
      TL_MM_EvtDone( phcievtbuffer );
 8005aea:	68fb      	ldr	r3, [r7, #12]
 8005aec:	4618      	mov	r0, r3
 8005aee:	f000 f9fb 	bl	8005ee8 <TL_MM_EvtDone>
 8005af2:	e004      	b.n	8005afe <shci_user_evt_proc+0x6a>
    else
    {
      /**
       * put back the event in the queue
       */
      LST_insert_head ( &SHciAsynchEventQueue, (tListNode *)phcievtbuffer );
 8005af4:	68fb      	ldr	r3, [r7, #12]
 8005af6:	4619      	mov	r1, r3
 8005af8:	480a      	ldr	r0, [pc, #40]	; (8005b24 <shci_user_evt_proc+0x90>)
 8005afa:	f000 faef 	bl	80060dc <LST_insert_head>
    }
  }

  if((LST_is_empty(&SHciAsynchEventQueue) == FALSE) && (SHCI_TL_UserEventFlow != SHCI_TL_UserEventFlow_Disable))
 8005afe:	4809      	ldr	r0, [pc, #36]	; (8005b24 <shci_user_evt_proc+0x90>)
 8005b00:	f000 faca 	bl	8006098 <LST_is_empty>
 8005b04:	4603      	mov	r3, r0
 8005b06:	2b00      	cmp	r3, #0
 8005b08:	d107      	bne.n	8005b1a <shci_user_evt_proc+0x86>
 8005b0a:	4b07      	ldr	r3, [pc, #28]	; (8005b28 <shci_user_evt_proc+0x94>)
 8005b0c:	781b      	ldrb	r3, [r3, #0]
 8005b0e:	2b00      	cmp	r3, #0
 8005b10:	d003      	beq.n	8005b1a <shci_user_evt_proc+0x86>
  {
    shci_notify_asynch_evt((void*) &SHciAsynchEventQueue);
 8005b12:	4804      	ldr	r0, [pc, #16]	; (8005b24 <shci_user_evt_proc+0x90>)
 8005b14:	f7fa fea0 	bl	8000858 <shci_notify_asynch_evt>
  }


  return;
 8005b18:	bf00      	nop
 8005b1a:	bf00      	nop
}
 8005b1c:	3710      	adds	r7, #16
 8005b1e:	46bd      	mov	sp, r7
 8005b20:	bd80      	pop	{r7, pc}
 8005b22:	bf00      	nop
 8005b24:	20000104 	.word	0x20000104
 8005b28:	20000114 	.word	0x20000114
 8005b2c:	200001f4 	.word	0x200001f4

08005b30 <shci_send>:

  return;
}

void shci_send( uint16_t cmd_code, uint8_t len_cmd_payload, uint8_t * p_cmd_payload, TL_EvtPacket_t * p_rsp )
{
 8005b30:	b580      	push	{r7, lr}
 8005b32:	b084      	sub	sp, #16
 8005b34:	af00      	add	r7, sp, #0
 8005b36:	60ba      	str	r2, [r7, #8]
 8005b38:	607b      	str	r3, [r7, #4]
 8005b3a:	4603      	mov	r3, r0
 8005b3c:	81fb      	strh	r3, [r7, #14]
 8005b3e:	460b      	mov	r3, r1
 8005b40:	737b      	strb	r3, [r7, #13]
  Cmd_SetStatus(SHCI_TL_CmdBusy);
 8005b42:	2000      	movs	r0, #0
 8005b44:	f000 f864 	bl	8005c10 <Cmd_SetStatus>

  pCmdBuffer->cmdserial.cmd.cmdcode = cmd_code;
 8005b48:	4b16      	ldr	r3, [pc, #88]	; (8005ba4 <shci_send+0x74>)
 8005b4a:	681b      	ldr	r3, [r3, #0]
 8005b4c:	89fa      	ldrh	r2, [r7, #14]
 8005b4e:	f8a3 2009 	strh.w	r2, [r3, #9]
  pCmdBuffer->cmdserial.cmd.plen = len_cmd_payload;
 8005b52:	4b14      	ldr	r3, [pc, #80]	; (8005ba4 <shci_send+0x74>)
 8005b54:	681b      	ldr	r3, [r3, #0]
 8005b56:	7b7a      	ldrb	r2, [r7, #13]
 8005b58:	72da      	strb	r2, [r3, #11]

  memcpy(pCmdBuffer->cmdserial.cmd.payload, p_cmd_payload, len_cmd_payload );
 8005b5a:	4b12      	ldr	r3, [pc, #72]	; (8005ba4 <shci_send+0x74>)
 8005b5c:	681b      	ldr	r3, [r3, #0]
 8005b5e:	330c      	adds	r3, #12
 8005b60:	7b7a      	ldrb	r2, [r7, #13]
 8005b62:	68b9      	ldr	r1, [r7, #8]
 8005b64:	4618      	mov	r0, r3
 8005b66:	f001 fad5 	bl	8007114 <memcpy>

  shciContext.io.Send(0,0);
 8005b6a:	4b0f      	ldr	r3, [pc, #60]	; (8005ba8 <shci_send+0x78>)
 8005b6c:	691b      	ldr	r3, [r3, #16]
 8005b6e:	2100      	movs	r1, #0
 8005b70:	2000      	movs	r0, #0
 8005b72:	4798      	blx	r3

  shci_cmd_resp_wait(SHCI_TL_DEFAULT_TIMEOUT);
 8005b74:	f248 00e8 	movw	r0, #33000	; 0x80e8
 8005b78:	f7fa fe85 	bl	8000886 <shci_cmd_resp_wait>

  /**
   * The command complete of a system command does not have the header
   * It starts immediately with the evtserial field
   */
  memcpy( &(p_rsp->evtserial), pCmdBuffer, ((TL_EvtSerial_t*)pCmdBuffer)->evt.plen + TL_EVT_HDR_SIZE );
 8005b7c:	687b      	ldr	r3, [r7, #4]
 8005b7e:	f103 0008 	add.w	r0, r3, #8
 8005b82:	4b08      	ldr	r3, [pc, #32]	; (8005ba4 <shci_send+0x74>)
 8005b84:	6819      	ldr	r1, [r3, #0]
 8005b86:	4b07      	ldr	r3, [pc, #28]	; (8005ba4 <shci_send+0x74>)
 8005b88:	681b      	ldr	r3, [r3, #0]
 8005b8a:	789b      	ldrb	r3, [r3, #2]
 8005b8c:	3303      	adds	r3, #3
 8005b8e:	461a      	mov	r2, r3
 8005b90:	f001 fac0 	bl	8007114 <memcpy>

  Cmd_SetStatus(SHCI_TL_CmdAvailable);
 8005b94:	2001      	movs	r0, #1
 8005b96:	f000 f83b 	bl	8005c10 <Cmd_SetStatus>

  return;
 8005b9a:	bf00      	nop
}
 8005b9c:	3710      	adds	r7, #16
 8005b9e:	46bd      	mov	sp, r7
 8005ba0:	bd80      	pop	{r7, pc}
 8005ba2:	bf00      	nop
 8005ba4:	20000110 	.word	0x20000110
 8005ba8:	200001f4 	.word	0x200001f4

08005bac <TlInit>:

/* Private functions ---------------------------------------------------------*/
static void TlInit( TL_CmdPacket_t * p_cmdbuffer )
{
 8005bac:	b580      	push	{r7, lr}
 8005bae:	b086      	sub	sp, #24
 8005bb0:	af00      	add	r7, sp, #0
 8005bb2:	6078      	str	r0, [r7, #4]
  TL_SYS_InitConf_t Conf;

  pCmdBuffer = p_cmdbuffer;
 8005bb4:	4a10      	ldr	r2, [pc, #64]	; (8005bf8 <TlInit+0x4c>)
 8005bb6:	687b      	ldr	r3, [r7, #4]
 8005bb8:	6013      	str	r3, [r2, #0]

  LST_init_head (&SHciAsynchEventQueue);
 8005bba:	4810      	ldr	r0, [pc, #64]	; (8005bfc <TlInit+0x50>)
 8005bbc:	f000 fa5c 	bl	8006078 <LST_init_head>

  Cmd_SetStatus(SHCI_TL_CmdAvailable);
 8005bc0:	2001      	movs	r0, #1
 8005bc2:	f000 f825 	bl	8005c10 <Cmd_SetStatus>

  SHCI_TL_UserEventFlow = SHCI_TL_UserEventFlow_Enable;
 8005bc6:	4b0e      	ldr	r3, [pc, #56]	; (8005c00 <TlInit+0x54>)
 8005bc8:	2201      	movs	r2, #1
 8005bca:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  if (shciContext.io.Init)
 8005bcc:	4b0d      	ldr	r3, [pc, #52]	; (8005c04 <TlInit+0x58>)
 8005bce:	681b      	ldr	r3, [r3, #0]
 8005bd0:	2b00      	cmp	r3, #0
 8005bd2:	d00c      	beq.n	8005bee <TlInit+0x42>
  {

    Conf.p_cmdbuffer = (uint8_t *)p_cmdbuffer;
 8005bd4:	687b      	ldr	r3, [r7, #4]
 8005bd6:	617b      	str	r3, [r7, #20]
    Conf.IoBusCallBackCmdEvt = TlCmdEvtReceived;
 8005bd8:	4b0b      	ldr	r3, [pc, #44]	; (8005c08 <TlInit+0x5c>)
 8005bda:	60fb      	str	r3, [r7, #12]
    Conf.IoBusCallBackUserEvt = TlUserEvtReceived;
 8005bdc:	4b0b      	ldr	r3, [pc, #44]	; (8005c0c <TlInit+0x60>)
 8005bde:	613b      	str	r3, [r7, #16]
    shciContext.io.Init(&Conf);
 8005be0:	4b08      	ldr	r3, [pc, #32]	; (8005c04 <TlInit+0x58>)
 8005be2:	681b      	ldr	r3, [r3, #0]
 8005be4:	f107 020c 	add.w	r2, r7, #12
 8005be8:	4610      	mov	r0, r2
 8005bea:	4798      	blx	r3
  }

  return;
 8005bec:	bf00      	nop
 8005bee:	bf00      	nop
}
 8005bf0:	3718      	adds	r7, #24
 8005bf2:	46bd      	mov	sp, r7
 8005bf4:	bd80      	pop	{r7, pc}
 8005bf6:	bf00      	nop
 8005bf8:	20000110 	.word	0x20000110
 8005bfc:	20000104 	.word	0x20000104
 8005c00:	20000114 	.word	0x20000114
 8005c04:	200001f4 	.word	0x200001f4
 8005c08:	08005c61 	.word	0x08005c61
 8005c0c:	08005c79 	.word	0x08005c79

08005c10 <Cmd_SetStatus>:

static void Cmd_SetStatus(SHCI_TL_CmdStatus_t shcicmdstatus)
{
 8005c10:	b580      	push	{r7, lr}
 8005c12:	b082      	sub	sp, #8
 8005c14:	af00      	add	r7, sp, #0
 8005c16:	4603      	mov	r3, r0
 8005c18:	71fb      	strb	r3, [r7, #7]
  if(shcicmdstatus == SHCI_TL_CmdBusy)
 8005c1a:	79fb      	ldrb	r3, [r7, #7]
 8005c1c:	2b00      	cmp	r3, #0
 8005c1e:	d10b      	bne.n	8005c38 <Cmd_SetStatus+0x28>
  {
    if(StatusNotCallBackFunction != 0)
 8005c20:	4b0d      	ldr	r3, [pc, #52]	; (8005c58 <Cmd_SetStatus+0x48>)
 8005c22:	681b      	ldr	r3, [r3, #0]
 8005c24:	2b00      	cmp	r3, #0
 8005c26:	d003      	beq.n	8005c30 <Cmd_SetStatus+0x20>
    {
      StatusNotCallBackFunction( SHCI_TL_CmdBusy );
 8005c28:	4b0b      	ldr	r3, [pc, #44]	; (8005c58 <Cmd_SetStatus+0x48>)
 8005c2a:	681b      	ldr	r3, [r3, #0]
 8005c2c:	2000      	movs	r0, #0
 8005c2e:	4798      	blx	r3
    }
    SHCICmdStatus = SHCI_TL_CmdBusy;
 8005c30:	4b0a      	ldr	r3, [pc, #40]	; (8005c5c <Cmd_SetStatus+0x4c>)
 8005c32:	2200      	movs	r2, #0
 8005c34:	701a      	strb	r2, [r3, #0]
    {
      StatusNotCallBackFunction( SHCI_TL_CmdAvailable );
    }
  }

  return;
 8005c36:	e00b      	b.n	8005c50 <Cmd_SetStatus+0x40>
    SHCICmdStatus = SHCI_TL_CmdAvailable;
 8005c38:	4b08      	ldr	r3, [pc, #32]	; (8005c5c <Cmd_SetStatus+0x4c>)
 8005c3a:	2201      	movs	r2, #1
 8005c3c:	701a      	strb	r2, [r3, #0]
    if(StatusNotCallBackFunction != 0)
 8005c3e:	4b06      	ldr	r3, [pc, #24]	; (8005c58 <Cmd_SetStatus+0x48>)
 8005c40:	681b      	ldr	r3, [r3, #0]
 8005c42:	2b00      	cmp	r3, #0
 8005c44:	d004      	beq.n	8005c50 <Cmd_SetStatus+0x40>
      StatusNotCallBackFunction( SHCI_TL_CmdAvailable );
 8005c46:	4b04      	ldr	r3, [pc, #16]	; (8005c58 <Cmd_SetStatus+0x48>)
 8005c48:	681b      	ldr	r3, [r3, #0]
 8005c4a:	2001      	movs	r0, #1
 8005c4c:	4798      	blx	r3
  return;
 8005c4e:	bf00      	nop
 8005c50:	bf00      	nop
}
 8005c52:	3708      	adds	r7, #8
 8005c54:	46bd      	mov	sp, r7
 8005c56:	bd80      	pop	{r7, pc}
 8005c58:	20000214 	.word	0x20000214
 8005c5c:	2000010c 	.word	0x2000010c

08005c60 <TlCmdEvtReceived>:

static void TlCmdEvtReceived(TL_EvtPacket_t *shcievt)
{
 8005c60:	b580      	push	{r7, lr}
 8005c62:	b082      	sub	sp, #8
 8005c64:	af00      	add	r7, sp, #0
 8005c66:	6078      	str	r0, [r7, #4]
  (void)(shcievt);
  shci_cmd_resp_release(0); /**< Notify the application the Cmd response has been received */
 8005c68:	2000      	movs	r0, #0
 8005c6a:	f7fa fe01 	bl	8000870 <shci_cmd_resp_release>

  return;
 8005c6e:	bf00      	nop
}
 8005c70:	3708      	adds	r7, #8
 8005c72:	46bd      	mov	sp, r7
 8005c74:	bd80      	pop	{r7, pc}
	...

08005c78 <TlUserEvtReceived>:

static void TlUserEvtReceived(TL_EvtPacket_t *shcievt)
{
 8005c78:	b580      	push	{r7, lr}
 8005c7a:	b082      	sub	sp, #8
 8005c7c:	af00      	add	r7, sp, #0
 8005c7e:	6078      	str	r0, [r7, #4]
  LST_insert_tail(&SHciAsynchEventQueue, (tListNode *)shcievt);
 8005c80:	6879      	ldr	r1, [r7, #4]
 8005c82:	4805      	ldr	r0, [pc, #20]	; (8005c98 <TlUserEvtReceived+0x20>)
 8005c84:	f000 fa50 	bl	8006128 <LST_insert_tail>
  shci_notify_asynch_evt((void*) &SHciAsynchEventQueue); /**< Notify the application a full HCI event has been received */
 8005c88:	4803      	ldr	r0, [pc, #12]	; (8005c98 <TlUserEvtReceived+0x20>)
 8005c8a:	f7fa fde5 	bl	8000858 <shci_notify_asynch_evt>

  return;
 8005c8e:	bf00      	nop
}
 8005c90:	3708      	adds	r7, #8
 8005c92:	46bd      	mov	sp, r7
 8005c94:	bd80      	pop	{r7, pc}
 8005c96:	bf00      	nop
 8005c98:	20000104 	.word	0x20000104

08005c9c <shci_register_io_bus>:
#include "shci_tl.h"
#include "tl.h"


void shci_register_io_bus(tSHciIO* fops)
{
 8005c9c:	b480      	push	{r7}
 8005c9e:	b083      	sub	sp, #12
 8005ca0:	af00      	add	r7, sp, #0
 8005ca2:	6078      	str	r0, [r7, #4]
  /* Register IO bus services */
  fops->Init    = TL_SYS_Init;
 8005ca4:	687b      	ldr	r3, [r7, #4]
 8005ca6:	4a05      	ldr	r2, [pc, #20]	; (8005cbc <shci_register_io_bus+0x20>)
 8005ca8:	601a      	str	r2, [r3, #0]
  fops->Send    = TL_SYS_SendCmd;
 8005caa:	687b      	ldr	r3, [r7, #4]
 8005cac:	4a04      	ldr	r2, [pc, #16]	; (8005cc0 <shci_register_io_bus+0x24>)
 8005cae:	611a      	str	r2, [r3, #16]

  return;
 8005cb0:	bf00      	nop
}
 8005cb2:	370c      	adds	r7, #12
 8005cb4:	46bd      	mov	sp, r7
 8005cb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cba:	4770      	bx	lr
 8005cbc:	08005de5 	.word	0x08005de5
 8005cc0:	08005e39 	.word	0x08005e39

08005cc4 <TL_Enable>:

/******************************************************************************
 * GENERAL
 ******************************************************************************/
void TL_Enable( void )
{
 8005cc4:	b580      	push	{r7, lr}
 8005cc6:	af00      	add	r7, sp, #0
  HW_IPCC_Enable();
 8005cc8:	f000 fed8 	bl	8006a7c <HW_IPCC_Enable>

  return;
 8005ccc:	bf00      	nop
}
 8005cce:	bd80      	pop	{r7, pc}

08005cd0 <TL_Init>:


void TL_Init( void )
{
 8005cd0:	b580      	push	{r7, lr}
 8005cd2:	af00      	add	r7, sp, #0
  TL_RefTable.p_device_info_table = &TL_DeviceInfoTable;
 8005cd4:	4b10      	ldr	r3, [pc, #64]	; (8005d18 <TL_Init+0x48>)
 8005cd6:	4a11      	ldr	r2, [pc, #68]	; (8005d1c <TL_Init+0x4c>)
 8005cd8:	601a      	str	r2, [r3, #0]
  TL_RefTable.p_ble_table = &TL_BleTable;
 8005cda:	4b0f      	ldr	r3, [pc, #60]	; (8005d18 <TL_Init+0x48>)
 8005cdc:	4a10      	ldr	r2, [pc, #64]	; (8005d20 <TL_Init+0x50>)
 8005cde:	605a      	str	r2, [r3, #4]
  TL_RefTable.p_thread_table = &TL_ThreadTable;
 8005ce0:	4b0d      	ldr	r3, [pc, #52]	; (8005d18 <TL_Init+0x48>)
 8005ce2:	4a10      	ldr	r2, [pc, #64]	; (8005d24 <TL_Init+0x54>)
 8005ce4:	609a      	str	r2, [r3, #8]
  TL_RefTable.p_lld_tests_table = &TL_LldTestsTable;
 8005ce6:	4b0c      	ldr	r3, [pc, #48]	; (8005d18 <TL_Init+0x48>)
 8005ce8:	4a0f      	ldr	r2, [pc, #60]	; (8005d28 <TL_Init+0x58>)
 8005cea:	621a      	str	r2, [r3, #32]
  TL_RefTable.p_ble_lld_table = &TL_BleLldTable;
 8005cec:	4b0a      	ldr	r3, [pc, #40]	; (8005d18 <TL_Init+0x48>)
 8005cee:	4a0f      	ldr	r2, [pc, #60]	; (8005d2c <TL_Init+0x5c>)
 8005cf0:	625a      	str	r2, [r3, #36]	; 0x24
  TL_RefTable.p_sys_table = &TL_SysTable;
 8005cf2:	4b09      	ldr	r3, [pc, #36]	; (8005d18 <TL_Init+0x48>)
 8005cf4:	4a0e      	ldr	r2, [pc, #56]	; (8005d30 <TL_Init+0x60>)
 8005cf6:	60da      	str	r2, [r3, #12]
  TL_RefTable.p_mem_manager_table = &TL_MemManagerTable;
 8005cf8:	4b07      	ldr	r3, [pc, #28]	; (8005d18 <TL_Init+0x48>)
 8005cfa:	4a0e      	ldr	r2, [pc, #56]	; (8005d34 <TL_Init+0x64>)
 8005cfc:	611a      	str	r2, [r3, #16]
  TL_RefTable.p_traces_table = &TL_TracesTable;
 8005cfe:	4b06      	ldr	r3, [pc, #24]	; (8005d18 <TL_Init+0x48>)
 8005d00:	4a0d      	ldr	r2, [pc, #52]	; (8005d38 <TL_Init+0x68>)
 8005d02:	615a      	str	r2, [r3, #20]
  TL_RefTable.p_mac_802_15_4_table = &TL_Mac_802_15_4_Table;
 8005d04:	4b04      	ldr	r3, [pc, #16]	; (8005d18 <TL_Init+0x48>)
 8005d06:	4a0d      	ldr	r2, [pc, #52]	; (8005d3c <TL_Init+0x6c>)
 8005d08:	619a      	str	r2, [r3, #24]
  TL_RefTable.p_zigbee_table = &TL_Zigbee_Table;
 8005d0a:	4b03      	ldr	r3, [pc, #12]	; (8005d18 <TL_Init+0x48>)
 8005d0c:	4a0c      	ldr	r2, [pc, #48]	; (8005d40 <TL_Init+0x70>)
 8005d0e:	61da      	str	r2, [r3, #28]
  HW_IPCC_Init();
 8005d10:	f000 fec8 	bl	8006aa4 <HW_IPCC_Init>

  return;
 8005d14:	bf00      	nop
}
 8005d16:	bd80      	pop	{r7, pc}
 8005d18:	20030000 	.word	0x20030000
 8005d1c:	20030028 	.word	0x20030028
 8005d20:	20030048 	.word	0x20030048
 8005d24:	20030058 	.word	0x20030058
 8005d28:	20030064 	.word	0x20030064
 8005d2c:	2003006c 	.word	0x2003006c
 8005d30:	20030074 	.word	0x20030074
 8005d34:	2003007c 	.word	0x2003007c
 8005d38:	20030098 	.word	0x20030098
 8005d3c:	2003009c 	.word	0x2003009c
 8005d40:	200300a8 	.word	0x200300a8

08005d44 <TL_BLE_Init>:

/******************************************************************************
 * BLE
 ******************************************************************************/
int32_t TL_BLE_Init( void* pConf )
{
 8005d44:	b580      	push	{r7, lr}
 8005d46:	b084      	sub	sp, #16
 8005d48:	af00      	add	r7, sp, #0
 8005d4a:	6078      	str	r0, [r7, #4]
  MB_BleTable_t  * p_bletable;

  TL_BLE_InitConf_t *pInitHciConf = (TL_BLE_InitConf_t *) pConf;
 8005d4c:	687b      	ldr	r3, [r7, #4]
 8005d4e:	60fb      	str	r3, [r7, #12]

  LST_init_head (&EvtQueue);
 8005d50:	4811      	ldr	r0, [pc, #68]	; (8005d98 <TL_BLE_Init+0x54>)
 8005d52:	f000 f991 	bl	8006078 <LST_init_head>

  p_bletable = TL_RefTable.p_ble_table;
 8005d56:	4b11      	ldr	r3, [pc, #68]	; (8005d9c <TL_BLE_Init+0x58>)
 8005d58:	685b      	ldr	r3, [r3, #4]
 8005d5a:	60bb      	str	r3, [r7, #8]

  p_bletable->pcmd_buffer = pInitHciConf->p_cmdbuffer;
 8005d5c:	68fb      	ldr	r3, [r7, #12]
 8005d5e:	689a      	ldr	r2, [r3, #8]
 8005d60:	68bb      	ldr	r3, [r7, #8]
 8005d62:	601a      	str	r2, [r3, #0]
  p_bletable->phci_acl_data_buffer = pInitHciConf->p_AclDataBuffer;
 8005d64:	68fb      	ldr	r3, [r7, #12]
 8005d66:	68da      	ldr	r2, [r3, #12]
 8005d68:	68bb      	ldr	r3, [r7, #8]
 8005d6a:	60da      	str	r2, [r3, #12]
  p_bletable->pcs_buffer  = (uint8_t*)CsBuffer;
 8005d6c:	68bb      	ldr	r3, [r7, #8]
 8005d6e:	4a0c      	ldr	r2, [pc, #48]	; (8005da0 <TL_BLE_Init+0x5c>)
 8005d70:	605a      	str	r2, [r3, #4]
  p_bletable->pevt_queue  = (uint8_t*)&EvtQueue;
 8005d72:	68bb      	ldr	r3, [r7, #8]
 8005d74:	4a08      	ldr	r2, [pc, #32]	; (8005d98 <TL_BLE_Init+0x54>)
 8005d76:	609a      	str	r2, [r3, #8]

  HW_IPCC_BLE_Init();
 8005d78:	f000 feaa 	bl	8006ad0 <HW_IPCC_BLE_Init>

  BLE_IoBusEvtCallBackFunction = pInitHciConf->IoBusEvtCallBack;
 8005d7c:	68fb      	ldr	r3, [r7, #12]
 8005d7e:	681b      	ldr	r3, [r3, #0]
 8005d80:	4a08      	ldr	r2, [pc, #32]	; (8005da4 <TL_BLE_Init+0x60>)
 8005d82:	6013      	str	r3, [r2, #0]
  BLE_IoBusAclDataTxAck = pInitHciConf->IoBusAclDataTxAck;
 8005d84:	68fb      	ldr	r3, [r7, #12]
 8005d86:	685b      	ldr	r3, [r3, #4]
 8005d88:	4a07      	ldr	r2, [pc, #28]	; (8005da8 <TL_BLE_Init+0x64>)
 8005d8a:	6013      	str	r3, [r2, #0]

  return 0;
 8005d8c:	2300      	movs	r3, #0
}
 8005d8e:	4618      	mov	r0, r3
 8005d90:	3710      	adds	r7, #16
 8005d92:	46bd      	mov	sp, r7
 8005d94:	bd80      	pop	{r7, pc}
 8005d96:	bf00      	nop
 8005d98:	200300c4 	.word	0x200300c4
 8005d9c:	20030000 	.word	0x20030000
 8005da0:	20030a48 	.word	0x20030a48
 8005da4:	20000220 	.word	0x20000220
 8005da8:	20000224 	.word	0x20000224

08005dac <TL_BLE_SendCmd>:

int32_t TL_BLE_SendCmd( uint8_t* buffer, uint16_t size )
{
 8005dac:	b580      	push	{r7, lr}
 8005dae:	b082      	sub	sp, #8
 8005db0:	af00      	add	r7, sp, #0
 8005db2:	6078      	str	r0, [r7, #4]
 8005db4:	460b      	mov	r3, r1
 8005db6:	807b      	strh	r3, [r7, #2]
  (void)(buffer);
  (void)(size);

  ((TL_CmdPacket_t*)(TL_RefTable.p_ble_table->pcmd_buffer))->cmdserial.type = TL_BLECMD_PKT_TYPE;
 8005db8:	4b09      	ldr	r3, [pc, #36]	; (8005de0 <TL_BLE_SendCmd+0x34>)
 8005dba:	685b      	ldr	r3, [r3, #4]
 8005dbc:	681b      	ldr	r3, [r3, #0]
 8005dbe:	2201      	movs	r2, #1
 8005dc0:	721a      	strb	r2, [r3, #8]

  OutputDbgTrace(TL_MB_BLE_CMD, TL_RefTable.p_ble_table->pcmd_buffer);
 8005dc2:	4b07      	ldr	r3, [pc, #28]	; (8005de0 <TL_BLE_SendCmd+0x34>)
 8005dc4:	685b      	ldr	r3, [r3, #4]
 8005dc6:	681b      	ldr	r3, [r3, #0]
 8005dc8:	4619      	mov	r1, r3
 8005dca:	2001      	movs	r0, #1
 8005dcc:	f000 f8d6 	bl	8005f7c <OutputDbgTrace>

  HW_IPCC_BLE_SendCmd();
 8005dd0:	f000 fe88 	bl	8006ae4 <HW_IPCC_BLE_SendCmd>

  return 0;
 8005dd4:	2300      	movs	r3, #0
}
 8005dd6:	4618      	mov	r0, r3
 8005dd8:	3708      	adds	r7, #8
 8005dda:	46bd      	mov	sp, r7
 8005ddc:	bd80      	pop	{r7, pc}
 8005dde:	bf00      	nop
 8005de0:	20030000 	.word	0x20030000

08005de4 <TL_SYS_Init>:

/******************************************************************************
 * SYSTEM
 ******************************************************************************/
int32_t TL_SYS_Init( void* pConf  )
{
 8005de4:	b580      	push	{r7, lr}
 8005de6:	b084      	sub	sp, #16
 8005de8:	af00      	add	r7, sp, #0
 8005dea:	6078      	str	r0, [r7, #4]
  MB_SysTable_t  * p_systable;

  TL_SYS_InitConf_t *pInitHciConf = (TL_SYS_InitConf_t *) pConf;
 8005dec:	687b      	ldr	r3, [r7, #4]
 8005dee:	60fb      	str	r3, [r7, #12]

  LST_init_head (&SystemEvtQueue);
 8005df0:	480d      	ldr	r0, [pc, #52]	; (8005e28 <TL_SYS_Init+0x44>)
 8005df2:	f000 f941 	bl	8006078 <LST_init_head>
  p_systable = TL_RefTable.p_sys_table;
 8005df6:	4b0d      	ldr	r3, [pc, #52]	; (8005e2c <TL_SYS_Init+0x48>)
 8005df8:	68db      	ldr	r3, [r3, #12]
 8005dfa:	60bb      	str	r3, [r7, #8]
  p_systable->pcmd_buffer = pInitHciConf->p_cmdbuffer;
 8005dfc:	68fb      	ldr	r3, [r7, #12]
 8005dfe:	689a      	ldr	r2, [r3, #8]
 8005e00:	68bb      	ldr	r3, [r7, #8]
 8005e02:	601a      	str	r2, [r3, #0]
  p_systable->sys_queue = (uint8_t*)&SystemEvtQueue;
 8005e04:	68bb      	ldr	r3, [r7, #8]
 8005e06:	4a08      	ldr	r2, [pc, #32]	; (8005e28 <TL_SYS_Init+0x44>)
 8005e08:	605a      	str	r2, [r3, #4]

  HW_IPCC_SYS_Init();
 8005e0a:	f000 fe75 	bl	8006af8 <HW_IPCC_SYS_Init>

  SYS_CMD_IoBusCallBackFunction = pInitHciConf->IoBusCallBackCmdEvt;
 8005e0e:	68fb      	ldr	r3, [r7, #12]
 8005e10:	681b      	ldr	r3, [r3, #0]
 8005e12:	4a07      	ldr	r2, [pc, #28]	; (8005e30 <TL_SYS_Init+0x4c>)
 8005e14:	6013      	str	r3, [r2, #0]
  SYS_EVT_IoBusCallBackFunction = pInitHciConf->IoBusCallBackUserEvt;
 8005e16:	68fb      	ldr	r3, [r7, #12]
 8005e18:	685b      	ldr	r3, [r3, #4]
 8005e1a:	4a06      	ldr	r2, [pc, #24]	; (8005e34 <TL_SYS_Init+0x50>)
 8005e1c:	6013      	str	r3, [r2, #0]

  return 0;
 8005e1e:	2300      	movs	r3, #0
}
 8005e20:	4618      	mov	r0, r3
 8005e22:	3710      	adds	r7, #16
 8005e24:	46bd      	mov	sp, r7
 8005e26:	bd80      	pop	{r7, pc}
 8005e28:	200300cc 	.word	0x200300cc
 8005e2c:	20030000 	.word	0x20030000
 8005e30:	20000228 	.word	0x20000228
 8005e34:	2000022c 	.word	0x2000022c

08005e38 <TL_SYS_SendCmd>:

int32_t TL_SYS_SendCmd( uint8_t* buffer, uint16_t size )
{
 8005e38:	b580      	push	{r7, lr}
 8005e3a:	b082      	sub	sp, #8
 8005e3c:	af00      	add	r7, sp, #0
 8005e3e:	6078      	str	r0, [r7, #4]
 8005e40:	460b      	mov	r3, r1
 8005e42:	807b      	strh	r3, [r7, #2]
  (void)(buffer);
  (void)(size);

  ((TL_CmdPacket_t *)(TL_RefTable.p_sys_table->pcmd_buffer))->cmdserial.type = TL_SYSCMD_PKT_TYPE;
 8005e44:	4b09      	ldr	r3, [pc, #36]	; (8005e6c <TL_SYS_SendCmd+0x34>)
 8005e46:	68db      	ldr	r3, [r3, #12]
 8005e48:	681b      	ldr	r3, [r3, #0]
 8005e4a:	2210      	movs	r2, #16
 8005e4c:	721a      	strb	r2, [r3, #8]

  OutputDbgTrace(TL_MB_SYS_CMD, TL_RefTable.p_sys_table->pcmd_buffer);
 8005e4e:	4b07      	ldr	r3, [pc, #28]	; (8005e6c <TL_SYS_SendCmd+0x34>)
 8005e50:	68db      	ldr	r3, [r3, #12]
 8005e52:	681b      	ldr	r3, [r3, #0]
 8005e54:	4619      	mov	r1, r3
 8005e56:	2004      	movs	r0, #4
 8005e58:	f000 f890 	bl	8005f7c <OutputDbgTrace>

  HW_IPCC_SYS_SendCmd();
 8005e5c:	f000 fe56 	bl	8006b0c <HW_IPCC_SYS_SendCmd>

  return 0;
 8005e60:	2300      	movs	r3, #0
}
 8005e62:	4618      	mov	r0, r3
 8005e64:	3708      	adds	r7, #8
 8005e66:	46bd      	mov	sp, r7
 8005e68:	bd80      	pop	{r7, pc}
 8005e6a:	bf00      	nop
 8005e6c:	20030000 	.word	0x20030000

08005e70 <TL_MM_Init>:

/******************************************************************************
 * MEMORY MANAGER
 ******************************************************************************/
void TL_MM_Init( TL_MM_Config_t *p_Config )
{
 8005e70:	b580      	push	{r7, lr}
 8005e72:	b082      	sub	sp, #8
 8005e74:	af00      	add	r7, sp, #0
 8005e76:	6078      	str	r0, [r7, #4]
  static MB_MemManagerTable_t  * p_mem_manager_table;

  LST_init_head (&FreeBufQueue);
 8005e78:	4817      	ldr	r0, [pc, #92]	; (8005ed8 <TL_MM_Init+0x68>)
 8005e7a:	f000 f8fd 	bl	8006078 <LST_init_head>
  LST_init_head (&LocalFreeBufQueue);
 8005e7e:	4817      	ldr	r0, [pc, #92]	; (8005edc <TL_MM_Init+0x6c>)
 8005e80:	f000 f8fa 	bl	8006078 <LST_init_head>

  p_mem_manager_table = TL_RefTable.p_mem_manager_table;
 8005e84:	4b16      	ldr	r3, [pc, #88]	; (8005ee0 <TL_MM_Init+0x70>)
 8005e86:	691b      	ldr	r3, [r3, #16]
 8005e88:	4a16      	ldr	r2, [pc, #88]	; (8005ee4 <TL_MM_Init+0x74>)
 8005e8a:	6013      	str	r3, [r2, #0]

  p_mem_manager_table->blepool = p_Config->p_AsynchEvtPool;
 8005e8c:	4b15      	ldr	r3, [pc, #84]	; (8005ee4 <TL_MM_Init+0x74>)
 8005e8e:	681b      	ldr	r3, [r3, #0]
 8005e90:	687a      	ldr	r2, [r7, #4]
 8005e92:	6892      	ldr	r2, [r2, #8]
 8005e94:	609a      	str	r2, [r3, #8]
  p_mem_manager_table->blepoolsize = p_Config->AsynchEvtPoolSize;
 8005e96:	4b13      	ldr	r3, [pc, #76]	; (8005ee4 <TL_MM_Init+0x74>)
 8005e98:	681b      	ldr	r3, [r3, #0]
 8005e9a:	687a      	ldr	r2, [r7, #4]
 8005e9c:	68d2      	ldr	r2, [r2, #12]
 8005e9e:	60da      	str	r2, [r3, #12]
  p_mem_manager_table->pevt_free_buffer_queue = (uint8_t*)&FreeBufQueue;
 8005ea0:	4b10      	ldr	r3, [pc, #64]	; (8005ee4 <TL_MM_Init+0x74>)
 8005ea2:	681b      	ldr	r3, [r3, #0]
 8005ea4:	4a0c      	ldr	r2, [pc, #48]	; (8005ed8 <TL_MM_Init+0x68>)
 8005ea6:	611a      	str	r2, [r3, #16]
  p_mem_manager_table->spare_ble_buffer = p_Config->p_BleSpareEvtBuffer;
 8005ea8:	4b0e      	ldr	r3, [pc, #56]	; (8005ee4 <TL_MM_Init+0x74>)
 8005eaa:	681b      	ldr	r3, [r3, #0]
 8005eac:	687a      	ldr	r2, [r7, #4]
 8005eae:	6812      	ldr	r2, [r2, #0]
 8005eb0:	601a      	str	r2, [r3, #0]
  p_mem_manager_table->spare_sys_buffer = p_Config->p_SystemSpareEvtBuffer;
 8005eb2:	4b0c      	ldr	r3, [pc, #48]	; (8005ee4 <TL_MM_Init+0x74>)
 8005eb4:	681b      	ldr	r3, [r3, #0]
 8005eb6:	687a      	ldr	r2, [r7, #4]
 8005eb8:	6852      	ldr	r2, [r2, #4]
 8005eba:	605a      	str	r2, [r3, #4]
  p_mem_manager_table->traces_evt_pool = p_Config->p_TracesEvtPool;
 8005ebc:	4b09      	ldr	r3, [pc, #36]	; (8005ee4 <TL_MM_Init+0x74>)
 8005ebe:	681b      	ldr	r3, [r3, #0]
 8005ec0:	687a      	ldr	r2, [r7, #4]
 8005ec2:	6912      	ldr	r2, [r2, #16]
 8005ec4:	615a      	str	r2, [r3, #20]
  p_mem_manager_table->tracespoolsize = p_Config->TracesEvtPoolSize;
 8005ec6:	4b07      	ldr	r3, [pc, #28]	; (8005ee4 <TL_MM_Init+0x74>)
 8005ec8:	681b      	ldr	r3, [r3, #0]
 8005eca:	687a      	ldr	r2, [r7, #4]
 8005ecc:	6952      	ldr	r2, [r2, #20]
 8005ece:	619a      	str	r2, [r3, #24]

  return;
 8005ed0:	bf00      	nop
}
 8005ed2:	3708      	adds	r7, #8
 8005ed4:	46bd      	mov	sp, r7
 8005ed6:	bd80      	pop	{r7, pc}
 8005ed8:	200300b4 	.word	0x200300b4
 8005edc:	20000218 	.word	0x20000218
 8005ee0:	20030000 	.word	0x20030000
 8005ee4:	20000230 	.word	0x20000230

08005ee8 <TL_MM_EvtDone>:

void TL_MM_EvtDone(TL_EvtPacket_t * phcievt)
{
 8005ee8:	b580      	push	{r7, lr}
 8005eea:	b082      	sub	sp, #8
 8005eec:	af00      	add	r7, sp, #0
 8005eee:	6078      	str	r0, [r7, #4]
  LST_insert_tail(&LocalFreeBufQueue, (tListNode *)phcievt);
 8005ef0:	6879      	ldr	r1, [r7, #4]
 8005ef2:	4807      	ldr	r0, [pc, #28]	; (8005f10 <TL_MM_EvtDone+0x28>)
 8005ef4:	f000 f918 	bl	8006128 <LST_insert_tail>

  OutputDbgTrace(TL_MB_MM_RELEASE_BUFFER, (uint8_t*)phcievt);
 8005ef8:	6879      	ldr	r1, [r7, #4]
 8005efa:	2000      	movs	r0, #0
 8005efc:	f000 f83e 	bl	8005f7c <OutputDbgTrace>

  HW_IPCC_MM_SendFreeBuf( SendFreeBuf );
 8005f00:	4804      	ldr	r0, [pc, #16]	; (8005f14 <TL_MM_EvtDone+0x2c>)
 8005f02:	f000 fe11 	bl	8006b28 <HW_IPCC_MM_SendFreeBuf>

  return;
 8005f06:	bf00      	nop
}
 8005f08:	3708      	adds	r7, #8
 8005f0a:	46bd      	mov	sp, r7
 8005f0c:	bd80      	pop	{r7, pc}
 8005f0e:	bf00      	nop
 8005f10:	20000218 	.word	0x20000218
 8005f14:	08005f19 	.word	0x08005f19

08005f18 <SendFreeBuf>:

static void SendFreeBuf( void )
{
 8005f18:	b580      	push	{r7, lr}
 8005f1a:	b082      	sub	sp, #8
 8005f1c:	af00      	add	r7, sp, #0
  tListNode *p_node;

  while ( FALSE == LST_is_empty (&LocalFreeBufQueue) )
 8005f1e:	e00c      	b.n	8005f3a <SendFreeBuf+0x22>
  {
    LST_remove_head( &LocalFreeBufQueue, (tListNode **)&p_node );
 8005f20:	1d3b      	adds	r3, r7, #4
 8005f22:	4619      	mov	r1, r3
 8005f24:	480a      	ldr	r0, [pc, #40]	; (8005f50 <SendFreeBuf+0x38>)
 8005f26:	f000 f946 	bl	80061b6 <LST_remove_head>
    LST_insert_tail( (tListNode*)(TL_RefTable.p_mem_manager_table->pevt_free_buffer_queue), p_node );
 8005f2a:	4b0a      	ldr	r3, [pc, #40]	; (8005f54 <SendFreeBuf+0x3c>)
 8005f2c:	691b      	ldr	r3, [r3, #16]
 8005f2e:	691b      	ldr	r3, [r3, #16]
 8005f30:	687a      	ldr	r2, [r7, #4]
 8005f32:	4611      	mov	r1, r2
 8005f34:	4618      	mov	r0, r3
 8005f36:	f000 f8f7 	bl	8006128 <LST_insert_tail>
  while ( FALSE == LST_is_empty (&LocalFreeBufQueue) )
 8005f3a:	4805      	ldr	r0, [pc, #20]	; (8005f50 <SendFreeBuf+0x38>)
 8005f3c:	f000 f8ac 	bl	8006098 <LST_is_empty>
 8005f40:	4603      	mov	r3, r0
 8005f42:	2b00      	cmp	r3, #0
 8005f44:	d0ec      	beq.n	8005f20 <SendFreeBuf+0x8>
  }

  return;
 8005f46:	bf00      	nop
}
 8005f48:	3708      	adds	r7, #8
 8005f4a:	46bd      	mov	sp, r7
 8005f4c:	bd80      	pop	{r7, pc}
 8005f4e:	bf00      	nop
 8005f50:	20000218 	.word	0x20000218
 8005f54:	20030000 	.word	0x20030000

08005f58 <TL_TRACES_Init>:

/******************************************************************************
 * TRACES
 ******************************************************************************/
void TL_TRACES_Init( void )
{
 8005f58:	b580      	push	{r7, lr}
 8005f5a:	af00      	add	r7, sp, #0
  LST_init_head (&TracesEvtQueue);
 8005f5c:	4805      	ldr	r0, [pc, #20]	; (8005f74 <TL_TRACES_Init+0x1c>)
 8005f5e:	f000 f88b 	bl	8006078 <LST_init_head>

  TL_RefTable.p_traces_table->traces_queue = (uint8_t*)&TracesEvtQueue;
 8005f62:	4b05      	ldr	r3, [pc, #20]	; (8005f78 <TL_TRACES_Init+0x20>)
 8005f64:	695b      	ldr	r3, [r3, #20]
 8005f66:	4a03      	ldr	r2, [pc, #12]	; (8005f74 <TL_TRACES_Init+0x1c>)
 8005f68:	601a      	str	r2, [r3, #0]

  HW_IPCC_TRACES_Init();
 8005f6a:	f000 fdff 	bl	8006b6c <HW_IPCC_TRACES_Init>

  return;
 8005f6e:	bf00      	nop
}
 8005f70:	bd80      	pop	{r7, pc}
 8005f72:	bf00      	nop
 8005f74:	200300bc 	.word	0x200300bc
 8005f78:	20030000 	.word	0x20030000

08005f7c <OutputDbgTrace>:

/******************************************************************************
 * DEBUG INFORMATION
 ******************************************************************************/
static void OutputDbgTrace(TL_MB_PacketType_t packet_type, uint8_t* buffer)
{
 8005f7c:	b480      	push	{r7}
 8005f7e:	b085      	sub	sp, #20
 8005f80:	af00      	add	r7, sp, #0
 8005f82:	4603      	mov	r3, r0
 8005f84:	6039      	str	r1, [r7, #0]
 8005f86:	71fb      	strb	r3, [r7, #7]
  TL_EvtPacket_t *p_evt_packet;
  TL_CmdPacket_t *p_cmd_packet;

  switch(packet_type)
 8005f88:	79fb      	ldrb	r3, [r7, #7]
 8005f8a:	2b06      	cmp	r3, #6
 8005f8c:	d845      	bhi.n	800601a <OutputDbgTrace+0x9e>
 8005f8e:	a201      	add	r2, pc, #4	; (adr r2, 8005f94 <OutputDbgTrace+0x18>)
 8005f90:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005f94:	08005fb1 	.word	0x08005fb1
 8005f98:	08005fd5 	.word	0x08005fd5
 8005f9c:	08005fdb 	.word	0x08005fdb
 8005fa0:	08005fef 	.word	0x08005fef
 8005fa4:	08005ffb 	.word	0x08005ffb
 8005fa8:	08006001 	.word	0x08006001
 8005fac:	0800600f 	.word	0x0800600f
  {
    case TL_MB_MM_RELEASE_BUFFER:
      p_evt_packet = (TL_EvtPacket_t*)buffer;
 8005fb0:	683b      	ldr	r3, [r7, #0]
 8005fb2:	60fb      	str	r3, [r7, #12]
      switch(p_evt_packet->evtserial.evt.evtcode)
 8005fb4:	68fb      	ldr	r3, [r7, #12]
 8005fb6:	7a5b      	ldrb	r3, [r3, #9]
 8005fb8:	2bff      	cmp	r3, #255	; 0xff
 8005fba:	d005      	beq.n	8005fc8 <OutputDbgTrace+0x4c>
 8005fbc:	2bff      	cmp	r3, #255	; 0xff
 8005fbe:	dc05      	bgt.n	8005fcc <OutputDbgTrace+0x50>
 8005fc0:	2b0e      	cmp	r3, #14
 8005fc2:	d005      	beq.n	8005fd0 <OutputDbgTrace+0x54>
 8005fc4:	2b0f      	cmp	r3, #15
          break;

        default:
          TL_MM_DBG_MSG("mm evt released: 0x%02X", p_evt_packet->evtserial.evt.evtcode);
          TL_MM_DBG_MSG(" buffer addr: 0x%08X", p_evt_packet);
          break;
 8005fc6:	e001      	b.n	8005fcc <OutputDbgTrace+0x50>
          break;
 8005fc8:	bf00      	nop
 8005fca:	e027      	b.n	800601c <OutputDbgTrace+0xa0>
          break;
 8005fcc:	bf00      	nop
 8005fce:	e025      	b.n	800601c <OutputDbgTrace+0xa0>
          break;
 8005fd0:	bf00      	nop
      }

      TL_MM_DBG_MSG("\r\n");
      break;
 8005fd2:	e023      	b.n	800601c <OutputDbgTrace+0xa0>

    case TL_MB_BLE_CMD:
      p_cmd_packet = (TL_CmdPacket_t*)buffer;
 8005fd4:	683b      	ldr	r3, [r7, #0]
 8005fd6:	60bb      	str	r3, [r7, #8]
        TL_HCI_CMD_DBG_BUF(p_cmd_packet->cmdserial.cmd.payload, p_cmd_packet->cmdserial.cmd.plen, "");
      }
      TL_HCI_CMD_DBG_MSG("\r\n");

      TL_HCI_CMD_DBG_RAW(&p_cmd_packet->cmdserial, p_cmd_packet->cmdserial.cmd.plen+TL_CMD_HDR_SIZE);
      break;
 8005fd8:	e020      	b.n	800601c <OutputDbgTrace+0xa0>

    case TL_MB_BLE_CMD_RSP:
      p_evt_packet = (TL_EvtPacket_t*)buffer;
 8005fda:	683b      	ldr	r3, [r7, #0]
 8005fdc:	60fb      	str	r3, [r7, #12]
      switch(p_evt_packet->evtserial.evt.evtcode)
 8005fde:	68fb      	ldr	r3, [r7, #12]
 8005fe0:	7a5b      	ldrb	r3, [r3, #9]
 8005fe2:	2b0e      	cmp	r3, #14
 8005fe4:	d001      	beq.n	8005fea <OutputDbgTrace+0x6e>
 8005fe6:	2b0f      	cmp	r3, #15
          }
          break;

        default:
          TL_HCI_CMD_DBG_MSG("unknown ble rsp received: %02X", p_evt_packet->evtserial.evt.evtcode);
          break;
 8005fe8:	e000      	b.n	8005fec <OutputDbgTrace+0x70>
          break;
 8005fea:	bf00      	nop
      }

      TL_HCI_CMD_DBG_MSG("\r\n");

      TL_HCI_CMD_DBG_RAW(&p_evt_packet->evtserial, p_evt_packet->evtserial.evt.plen+TL_EVT_HDR_SIZE);
      break;
 8005fec:	e016      	b.n	800601c <OutputDbgTrace+0xa0>

    case TL_MB_BLE_ASYNCH_EVT:
      p_evt_packet = (TL_EvtPacket_t*)buffer;
 8005fee:	683b      	ldr	r3, [r7, #0]
 8005ff0:	60fb      	str	r3, [r7, #12]
      if(p_evt_packet->evtserial.evt.evtcode != TL_BLEEVT_VS_OPCODE)
 8005ff2:	68fb      	ldr	r3, [r7, #12]
 8005ff4:	7a5b      	ldrb	r3, [r3, #9]
 8005ff6:	2bff      	cmp	r3, #255	; 0xff
      }

      TL_HCI_EVT_DBG_MSG("\r\n");

      TL_HCI_EVT_DBG_RAW(&p_evt_packet->evtserial, p_evt_packet->evtserial.evt.plen+TL_EVT_HDR_SIZE);
      break;
 8005ff8:	e010      	b.n	800601c <OutputDbgTrace+0xa0>

    case TL_MB_SYS_CMD:
      p_cmd_packet = (TL_CmdPacket_t*)buffer;
 8005ffa:	683b      	ldr	r3, [r7, #0]
 8005ffc:	60bb      	str	r3, [r7, #8]
        TL_SHCI_CMD_DBG_BUF(p_cmd_packet->cmdserial.cmd.payload, p_cmd_packet->cmdserial.cmd.plen, "");
      }
      TL_SHCI_CMD_DBG_MSG("\r\n");

      TL_SHCI_CMD_DBG_RAW(&p_cmd_packet->cmdserial, p_cmd_packet->cmdserial.cmd.plen+TL_CMD_HDR_SIZE);
      break;
 8005ffe:	e00d      	b.n	800601c <OutputDbgTrace+0xa0>

    case TL_MB_SYS_CMD_RSP:
      p_evt_packet = (TL_EvtPacket_t*)buffer;
 8006000:	683b      	ldr	r3, [r7, #0]
 8006002:	60fb      	str	r3, [r7, #12]
      switch(p_evt_packet->evtserial.evt.evtcode)
 8006004:	68fb      	ldr	r3, [r7, #12]
 8006006:	7a5b      	ldrb	r3, [r3, #9]
 8006008:	2b0e      	cmp	r3, #14
          }
          break;

        default:
          TL_SHCI_CMD_DBG_MSG("unknown sys rsp received: %02X", p_evt_packet->evtserial.evt.evtcode);
          break;
 800600a:	bf00      	nop
      }

      TL_SHCI_CMD_DBG_MSG("\r\n");

      TL_SHCI_CMD_DBG_RAW(&p_evt_packet->evtserial, p_evt_packet->evtserial.evt.plen+TL_EVT_HDR_SIZE);
      break;
 800600c:	e006      	b.n	800601c <OutputDbgTrace+0xa0>

    case  TL_MB_SYS_ASYNCH_EVT:
      p_evt_packet = (TL_EvtPacket_t*)buffer;
 800600e:	683b      	ldr	r3, [r7, #0]
 8006010:	60fb      	str	r3, [r7, #12]
      if(p_evt_packet->evtserial.evt.evtcode != TL_BLEEVT_VS_OPCODE)
 8006012:	68fb      	ldr	r3, [r7, #12]
 8006014:	7a5b      	ldrb	r3, [r3, #9]
 8006016:	2bff      	cmp	r3, #255	; 0xff
      }

      TL_SHCI_EVT_DBG_MSG("\r\n");

      TL_SHCI_EVT_DBG_RAW(&p_evt_packet->evtserial, p_evt_packet->evtserial.evt.plen+TL_EVT_HDR_SIZE);
      break;
 8006018:	e000      	b.n	800601c <OutputDbgTrace+0xa0>

    default:
      break;
 800601a:	bf00      	nop
  }

  return;
 800601c:	bf00      	nop
}
 800601e:	3714      	adds	r7, #20
 8006020:	46bd      	mov	sp, r7
 8006022:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006026:	4770      	bx	lr

08006028 <OTP_Read>:
/* Global variables ----------------------------------------------------------*/
/* Private function prototypes -----------------------------------------------*/
/* Functions Definition ------------------------------------------------------*/

uint8_t * OTP_Read( uint8_t id )
{
 8006028:	b480      	push	{r7}
 800602a:	b085      	sub	sp, #20
 800602c:	af00      	add	r7, sp, #0
 800602e:	4603      	mov	r3, r0
 8006030:	71fb      	strb	r3, [r7, #7]
  uint8_t *p_id;

  p_id = (uint8_t*)(CFG_OTP_END_ADRESS - 7) ;
 8006032:	4b0f      	ldr	r3, [pc, #60]	; (8006070 <OTP_Read+0x48>)
 8006034:	60fb      	str	r3, [r7, #12]

  while( ((*( p_id + 7 )) != id) && ( p_id != (uint8_t*)CFG_OTP_BASE_ADDRESS) )
 8006036:	e002      	b.n	800603e <OTP_Read+0x16>
  {
    p_id -= 8 ;
 8006038:	68fb      	ldr	r3, [r7, #12]
 800603a:	3b08      	subs	r3, #8
 800603c:	60fb      	str	r3, [r7, #12]
  while( ((*( p_id + 7 )) != id) && ( p_id != (uint8_t*)CFG_OTP_BASE_ADDRESS) )
 800603e:	68fb      	ldr	r3, [r7, #12]
 8006040:	3307      	adds	r3, #7
 8006042:	781b      	ldrb	r3, [r3, #0]
 8006044:	79fa      	ldrb	r2, [r7, #7]
 8006046:	429a      	cmp	r2, r3
 8006048:	d003      	beq.n	8006052 <OTP_Read+0x2a>
 800604a:	68fb      	ldr	r3, [r7, #12]
 800604c:	4a09      	ldr	r2, [pc, #36]	; (8006074 <OTP_Read+0x4c>)
 800604e:	4293      	cmp	r3, r2
 8006050:	d1f2      	bne.n	8006038 <OTP_Read+0x10>
  }

  if((*( p_id + 7 )) != id)
 8006052:	68fb      	ldr	r3, [r7, #12]
 8006054:	3307      	adds	r3, #7
 8006056:	781b      	ldrb	r3, [r3, #0]
 8006058:	79fa      	ldrb	r2, [r7, #7]
 800605a:	429a      	cmp	r2, r3
 800605c:	d001      	beq.n	8006062 <OTP_Read+0x3a>
  {
    p_id = 0 ;
 800605e:	2300      	movs	r3, #0
 8006060:	60fb      	str	r3, [r7, #12]
  }

  return p_id ;
 8006062:	68fb      	ldr	r3, [r7, #12]
}
 8006064:	4618      	mov	r0, r3
 8006066:	3714      	adds	r7, #20
 8006068:	46bd      	mov	sp, r7
 800606a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800606e:	4770      	bx	lr
 8006070:	1fff73f8 	.word	0x1fff73f8
 8006074:	1fff7000 	.word	0x1fff7000

08006078 <LST_init_head>:

/******************************************************************************
 * Function Definitions 
 ******************************************************************************/
void LST_init_head (tListNode * listHead)
{
 8006078:	b480      	push	{r7}
 800607a:	b083      	sub	sp, #12
 800607c:	af00      	add	r7, sp, #0
 800607e:	6078      	str	r0, [r7, #4]
  listHead->next = listHead;
 8006080:	687b      	ldr	r3, [r7, #4]
 8006082:	687a      	ldr	r2, [r7, #4]
 8006084:	601a      	str	r2, [r3, #0]
  listHead->prev = listHead;
 8006086:	687b      	ldr	r3, [r7, #4]
 8006088:	687a      	ldr	r2, [r7, #4]
 800608a:	605a      	str	r2, [r3, #4]
}
 800608c:	bf00      	nop
 800608e:	370c      	adds	r7, #12
 8006090:	46bd      	mov	sp, r7
 8006092:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006096:	4770      	bx	lr

08006098 <LST_is_empty>:

uint8_t LST_is_empty (tListNode * listHead)
{
 8006098:	b480      	push	{r7}
 800609a:	b087      	sub	sp, #28
 800609c:	af00      	add	r7, sp, #0
 800609e:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80060a0:	f3ef 8310 	mrs	r3, PRIMASK
 80060a4:	60fb      	str	r3, [r7, #12]
  return(result);
 80060a6:	68fb      	ldr	r3, [r7, #12]
  uint32_t primask_bit;
  uint8_t return_value;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 80060a8:	613b      	str	r3, [r7, #16]
  __ASM volatile ("cpsid i" : : : "memory");
 80060aa:	b672      	cpsid	i
}
 80060ac:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
  if(listHead->next == listHead)
 80060ae:	687b      	ldr	r3, [r7, #4]
 80060b0:	681b      	ldr	r3, [r3, #0]
 80060b2:	687a      	ldr	r2, [r7, #4]
 80060b4:	429a      	cmp	r2, r3
 80060b6:	d102      	bne.n	80060be <LST_is_empty+0x26>
  {
    return_value = TRUE;
 80060b8:	2301      	movs	r3, #1
 80060ba:	75fb      	strb	r3, [r7, #23]
 80060bc:	e001      	b.n	80060c2 <LST_is_empty+0x2a>
  }
  else
  {
    return_value = FALSE;
 80060be:	2300      	movs	r3, #0
 80060c0:	75fb      	strb	r3, [r7, #23]
 80060c2:	693b      	ldr	r3, [r7, #16]
 80060c4:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80060c6:	68bb      	ldr	r3, [r7, #8]
 80060c8:	f383 8810 	msr	PRIMASK, r3
}
 80060cc:	bf00      	nop
  }
  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/

  return return_value;
 80060ce:	7dfb      	ldrb	r3, [r7, #23]
}
 80060d0:	4618      	mov	r0, r3
 80060d2:	371c      	adds	r7, #28
 80060d4:	46bd      	mov	sp, r7
 80060d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060da:	4770      	bx	lr

080060dc <LST_insert_head>:

void LST_insert_head (tListNode * listHead, tListNode * node)
{
 80060dc:	b480      	push	{r7}
 80060de:	b087      	sub	sp, #28
 80060e0:	af00      	add	r7, sp, #0
 80060e2:	6078      	str	r0, [r7, #4]
 80060e4:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80060e6:	f3ef 8310 	mrs	r3, PRIMASK
 80060ea:	60fb      	str	r3, [r7, #12]
  return(result);
 80060ec:	68fb      	ldr	r3, [r7, #12]
  uint32_t primask_bit;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 80060ee:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 80060f0:	b672      	cpsid	i
}
 80060f2:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/

  node->next = listHead->next;
 80060f4:	687b      	ldr	r3, [r7, #4]
 80060f6:	681a      	ldr	r2, [r3, #0]
 80060f8:	683b      	ldr	r3, [r7, #0]
 80060fa:	601a      	str	r2, [r3, #0]
  node->prev = listHead;
 80060fc:	683b      	ldr	r3, [r7, #0]
 80060fe:	687a      	ldr	r2, [r7, #4]
 8006100:	605a      	str	r2, [r3, #4]
  listHead->next = node;
 8006102:	687b      	ldr	r3, [r7, #4]
 8006104:	683a      	ldr	r2, [r7, #0]
 8006106:	601a      	str	r2, [r3, #0]
  (node->next)->prev = node;
 8006108:	683b      	ldr	r3, [r7, #0]
 800610a:	681b      	ldr	r3, [r3, #0]
 800610c:	683a      	ldr	r2, [r7, #0]
 800610e:	605a      	str	r2, [r3, #4]
 8006110:	697b      	ldr	r3, [r7, #20]
 8006112:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006114:	693b      	ldr	r3, [r7, #16]
 8006116:	f383 8810 	msr	PRIMASK, r3
}
 800611a:	bf00      	nop

  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/
}
 800611c:	bf00      	nop
 800611e:	371c      	adds	r7, #28
 8006120:	46bd      	mov	sp, r7
 8006122:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006126:	4770      	bx	lr

08006128 <LST_insert_tail>:


void LST_insert_tail (tListNode * listHead, tListNode * node)
{
 8006128:	b480      	push	{r7}
 800612a:	b087      	sub	sp, #28
 800612c:	af00      	add	r7, sp, #0
 800612e:	6078      	str	r0, [r7, #4]
 8006130:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006132:	f3ef 8310 	mrs	r3, PRIMASK
 8006136:	60fb      	str	r3, [r7, #12]
  return(result);
 8006138:	68fb      	ldr	r3, [r7, #12]
  uint32_t primask_bit;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 800613a:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800613c:	b672      	cpsid	i
}
 800613e:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/

  node->next = listHead;
 8006140:	683b      	ldr	r3, [r7, #0]
 8006142:	687a      	ldr	r2, [r7, #4]
 8006144:	601a      	str	r2, [r3, #0]
  node->prev = listHead->prev;
 8006146:	687b      	ldr	r3, [r7, #4]
 8006148:	685a      	ldr	r2, [r3, #4]
 800614a:	683b      	ldr	r3, [r7, #0]
 800614c:	605a      	str	r2, [r3, #4]
  listHead->prev = node;
 800614e:	687b      	ldr	r3, [r7, #4]
 8006150:	683a      	ldr	r2, [r7, #0]
 8006152:	605a      	str	r2, [r3, #4]
  (node->prev)->next = node;
 8006154:	683b      	ldr	r3, [r7, #0]
 8006156:	685b      	ldr	r3, [r3, #4]
 8006158:	683a      	ldr	r2, [r7, #0]
 800615a:	601a      	str	r2, [r3, #0]
 800615c:	697b      	ldr	r3, [r7, #20]
 800615e:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006160:	693b      	ldr	r3, [r7, #16]
 8006162:	f383 8810 	msr	PRIMASK, r3
}
 8006166:	bf00      	nop

  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/
}
 8006168:	bf00      	nop
 800616a:	371c      	adds	r7, #28
 800616c:	46bd      	mov	sp, r7
 800616e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006172:	4770      	bx	lr

08006174 <LST_remove_node>:


void LST_remove_node (tListNode * node)
{
 8006174:	b480      	push	{r7}
 8006176:	b087      	sub	sp, #28
 8006178:	af00      	add	r7, sp, #0
 800617a:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800617c:	f3ef 8310 	mrs	r3, PRIMASK
 8006180:	60fb      	str	r3, [r7, #12]
  return(result);
 8006182:	68fb      	ldr	r3, [r7, #12]
  uint32_t primask_bit;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 8006184:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8006186:	b672      	cpsid	i
}
 8006188:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/

  (node->prev)->next = node->next;
 800618a:	687b      	ldr	r3, [r7, #4]
 800618c:	685b      	ldr	r3, [r3, #4]
 800618e:	687a      	ldr	r2, [r7, #4]
 8006190:	6812      	ldr	r2, [r2, #0]
 8006192:	601a      	str	r2, [r3, #0]
  (node->next)->prev = node->prev;
 8006194:	687b      	ldr	r3, [r7, #4]
 8006196:	681b      	ldr	r3, [r3, #0]
 8006198:	687a      	ldr	r2, [r7, #4]
 800619a:	6852      	ldr	r2, [r2, #4]
 800619c:	605a      	str	r2, [r3, #4]
 800619e:	697b      	ldr	r3, [r7, #20]
 80061a0:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80061a2:	693b      	ldr	r3, [r7, #16]
 80061a4:	f383 8810 	msr	PRIMASK, r3
}
 80061a8:	bf00      	nop

  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/
}
 80061aa:	bf00      	nop
 80061ac:	371c      	adds	r7, #28
 80061ae:	46bd      	mov	sp, r7
 80061b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061b4:	4770      	bx	lr

080061b6 <LST_remove_head>:


void LST_remove_head (tListNode * listHead, tListNode ** node )
{
 80061b6:	b580      	push	{r7, lr}
 80061b8:	b086      	sub	sp, #24
 80061ba:	af00      	add	r7, sp, #0
 80061bc:	6078      	str	r0, [r7, #4]
 80061be:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80061c0:	f3ef 8310 	mrs	r3, PRIMASK
 80061c4:	60fb      	str	r3, [r7, #12]
  return(result);
 80061c6:	68fb      	ldr	r3, [r7, #12]
  uint32_t primask_bit;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 80061c8:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 80061ca:	b672      	cpsid	i
}
 80061cc:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/

  *node = listHead->next;
 80061ce:	687b      	ldr	r3, [r7, #4]
 80061d0:	681a      	ldr	r2, [r3, #0]
 80061d2:	683b      	ldr	r3, [r7, #0]
 80061d4:	601a      	str	r2, [r3, #0]
  LST_remove_node (listHead->next);
 80061d6:	687b      	ldr	r3, [r7, #4]
 80061d8:	681b      	ldr	r3, [r3, #0]
 80061da:	4618      	mov	r0, r3
 80061dc:	f7ff ffca 	bl	8006174 <LST_remove_node>
 80061e0:	697b      	ldr	r3, [r7, #20]
 80061e2:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80061e4:	693b      	ldr	r3, [r7, #16]
 80061e6:	f383 8810 	msr	PRIMASK, r3
}
 80061ea:	bf00      	nop

  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/
}
 80061ec:	bf00      	nop
 80061ee:	3718      	adds	r7, #24
 80061f0:	46bd      	mov	sp, r7
 80061f2:	bd80      	pop	{r7, pc}

080061f4 <LL_FLASH_GetUDN>:
  * @note   The 64-bit UID64 may be used by Firmware to derive BLE 48-bit Device Address EUI-48 or
  *         802.15.4 64-bit Device Address EUI-64.
  * @retval Values between Min_Data=0x00 and Max_Data=0xFFFF
  */
__STATIC_INLINE uint32_t LL_FLASH_GetUDN(void)
{
 80061f4:	b480      	push	{r7}
 80061f6:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_REG(*((uint32_t *)UID64_BASE)));
 80061f8:	4b03      	ldr	r3, [pc, #12]	; (8006208 <LL_FLASH_GetUDN+0x14>)
 80061fa:	681b      	ldr	r3, [r3, #0]
}
 80061fc:	4618      	mov	r0, r3
 80061fe:	46bd      	mov	sp, r7
 8006200:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006204:	4770      	bx	lr
 8006206:	bf00      	nop
 8006208:	1fff7580 	.word	0x1fff7580

0800620c <LL_FLASH_GetDeviceID>:
  *         802.15.4 64-bit Device Address EUI-64.
  *         For STM32WBxxxx devices, the device ID is 0x26
  * @retval Values between Min_Data=0x00 and Max_Data=0xFF (ex: Device ID is 0x26 for STM32WB55x)
  */
__STATIC_INLINE uint32_t LL_FLASH_GetDeviceID(void)
{
 800620c:	b480      	push	{r7}
 800620e:	af00      	add	r7, sp, #0
  return (uint32_t)((READ_REG(*((uint32_t *)UID64_BASE + 1U))) & 0x000000FFU);
 8006210:	4b03      	ldr	r3, [pc, #12]	; (8006220 <LL_FLASH_GetDeviceID+0x14>)
 8006212:	681b      	ldr	r3, [r3, #0]
 8006214:	b2db      	uxtb	r3, r3
}
 8006216:	4618      	mov	r0, r3
 8006218:	46bd      	mov	sp, r7
 800621a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800621e:	4770      	bx	lr
 8006220:	1fff7584 	.word	0x1fff7584

08006224 <LL_FLASH_GetSTCompanyID>:
  *         802.15.4 64-bit Device Address EUI-64.
  *         For STM32WBxxxx devices, the ST Company ID is 0x0080E1
  * @retval Values between Min_Data=0x00 and Max_Data=0xFFFFFF (ex: ST Company ID is 0x0080E1)
  */
__STATIC_INLINE uint32_t LL_FLASH_GetSTCompanyID(void)
{
 8006224:	b480      	push	{r7}
 8006226:	af00      	add	r7, sp, #0
  return (uint32_t)(((READ_REG(*((uint32_t *)UID64_BASE + 1U))) >> 8U ) & 0x00FFFFFFU);
 8006228:	4b03      	ldr	r3, [pc, #12]	; (8006238 <LL_FLASH_GetSTCompanyID+0x14>)
 800622a:	681b      	ldr	r3, [r3, #0]
 800622c:	0a1b      	lsrs	r3, r3, #8
}
 800622e:	4618      	mov	r0, r3
 8006230:	46bd      	mov	sp, r7
 8006232:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006236:	4770      	bx	lr
 8006238:	1fff7584 	.word	0x1fff7584

0800623c <APP_BLE_Init>:

/* USER CODE END EV */

/* Functions Definition ------------------------------------------------------*/
void APP_BLE_Init( void )
{
 800623c:	b5b0      	push	{r4, r5, r7, lr}
 800623e:	b08e      	sub	sp, #56	; 0x38
 8006240:	af00      	add	r7, sp, #0
/* USER CODE BEGIN APP_BLE_Init_1 */

/* USER CODE END APP_BLE_Init_1 */
  SHCI_C2_Ble_Init_Cmd_Packet_t ble_init_cmd_packet =
 8006242:	4b2a      	ldr	r3, [pc, #168]	; (80062ec <APP_BLE_Init+0xb0>)
 8006244:	1d3c      	adds	r4, r7, #4
 8006246:	461d      	mov	r5, r3
 8006248:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800624a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800624c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800624e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006250:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8006252:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006254:	682b      	ldr	r3, [r5, #0]
 8006256:	7023      	strb	r3, [r4, #0]
  };

  /**
   * Initialize Ble Transport Layer
   */
  Ble_Tl_Init( );
 8006258:	f000 f904 	bl	8006464 <Ble_Tl_Init>

  /**
   * Do not allow standby in the application
   */
  UTIL_LPM_SetOffMode(1 << CFG_LPM_APP_BLE, UTIL_LPM_DISABLE);
 800625c:	2101      	movs	r1, #1
 800625e:	2002      	movs	r0, #2
 8006260:	f000 fca0 	bl	8006ba4 <UTIL_LPM_SetOffMode>

  /**
   * Register the hci transport layer to handle BLE User Asynchronous Events
   */
  UTIL_SEQ_RegTask( 1<<CFG_TASK_HCI_ASYNCH_EVT_ID, UTIL_SEQ_RFU, hci_user_evt_proc);
 8006264:	4a22      	ldr	r2, [pc, #136]	; (80062f0 <APP_BLE_Init+0xb4>)
 8006266:	2100      	movs	r1, #0
 8006268:	2002      	movs	r0, #2
 800626a:	f000 fdeb 	bl	8006e44 <UTIL_SEQ_RegTask>

  /**
   * Starts the BLE Stack on CPU2
   */
  if (SHCI_C2_BLE_Init( &ble_init_cmd_packet ) != SHCI_Success)
 800626e:	1d3b      	adds	r3, r7, #4
 8006270:	4618      	mov	r0, r3
 8006272:	f7ff f96b 	bl	800554c <SHCI_C2_BLE_Init>
 8006276:	4603      	mov	r3, r0
 8006278:	2b00      	cmp	r3, #0
 800627a:	d001      	beq.n	8006280 <APP_BLE_Init+0x44>
  {
    Error_Handler();
 800627c:	f7fb fa06 	bl	800168c <Error_Handler>
  }

  /**
   * Initialization of HCI & GATT & GAP layer
   */
  Ble_Hci_Gap_Gatt_Init();
 8006280:	f000 f906 	bl	8006490 <Ble_Hci_Gap_Gatt_Init>

  /**
   * Initialization of the BLE Services
   */
  SVCCTL_Init();
 8006284:	f7ff f8bc 	bl	8005400 <SVCCTL_Init>

  /**
   * Initialization of the BLE App Context
   */
  BleApplicationContext.Device_Connection_Status = APP_BLE_IDLE;
 8006288:	4b1a      	ldr	r3, [pc, #104]	; (80062f4 <APP_BLE_Init+0xb8>)
 800628a:	2200      	movs	r2, #0
 800628c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
  BleApplicationContext.BleApplicationContext_legacy.connectionHandle = 0xFFFF;
 8006290:	4b18      	ldr	r3, [pc, #96]	; (80062f4 <APP_BLE_Init+0xb8>)
 8006292:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8006296:	82da      	strh	r2, [r3, #22]
  /**
   * From here, all initialization are BLE application specific
   */
  UTIL_SEQ_RegTask( 1<<CFG_TASK_ADV_CANCEL_ID, UTIL_SEQ_RFU, Adv_Cancel);
 8006298:	4a17      	ldr	r2, [pc, #92]	; (80062f8 <APP_BLE_Init+0xbc>)
 800629a:	2100      	movs	r1, #0
 800629c:	2001      	movs	r0, #1
 800629e:	f000 fdd1 	bl	8006e44 <UTIL_SEQ_RegTask>
   */
#if(BLE_CFG_OTA_REBOOT_CHAR != 0)
  manuf_data[sizeof(manuf_data)-8] = CFG_FEATURE_OTA_REBOOT;
#endif
#if(RADIO_ACTIVITY_EVENT != 0)
  aci_hal_set_radio_activity_mask(0x0006);
 80062a2:	2006      	movs	r0, #6
 80062a4:	f7fe fdd2 	bl	8004e4c <aci_hal_set_radio_activity_mask>
  mutex = 1;
#endif
  /**
   * Initialize P2P Server Application
   */
  P2PS_APP_Init();
 80062a8:	f000 fb0c 	bl	80068c4 <P2PS_APP_Init>
/* USER CODE END APP_BLE_Init_3 */

  /**
   * Create timer to handle the Advertising Stop
   */
  HW_TS_Create(CFG_TIM_PROC_ID_ISR, &(BleApplicationContext.Advertising_mgr_timer_Id), hw_ts_SingleShot, Adv_Cancel_Req);
 80062ac:	4b13      	ldr	r3, [pc, #76]	; (80062fc <APP_BLE_Init+0xc0>)
 80062ae:	2200      	movs	r2, #0
 80062b0:	4913      	ldr	r1, [pc, #76]	; (8006300 <APP_BLE_Init+0xc4>)
 80062b2:	2000      	movs	r0, #0
 80062b4:	f7fa ff2e 	bl	8001114 <HW_TS_Create>
  /**
   * Create timer to handle the Led Switch OFF
   */
  HW_TS_Create(CFG_TIM_PROC_ID_ISR, &(BleApplicationContext.SwitchOffGPIO_timer_Id), hw_ts_SingleShot, Switch_OFF_GPIO);
 80062b8:	4b12      	ldr	r3, [pc, #72]	; (8006304 <APP_BLE_Init+0xc8>)
 80062ba:	2200      	movs	r2, #0
 80062bc:	4912      	ldr	r1, [pc, #72]	; (8006308 <APP_BLE_Init+0xcc>)
 80062be:	2000      	movs	r0, #0
 80062c0:	f7fa ff28 	bl	8001114 <HW_TS_Create>

  /**
   * Make device discoverable
   */
  BleApplicationContext.BleApplicationContext_legacy.advtServUUID[0] = NULL;
 80062c4:	4b0b      	ldr	r3, [pc, #44]	; (80062f4 <APP_BLE_Init+0xb8>)
 80062c6:	2200      	movs	r2, #0
 80062c8:	765a      	strb	r2, [r3, #25]
  BleApplicationContext.BleApplicationContext_legacy.advtServUUIDlen = 0;
 80062ca:	4b0a      	ldr	r3, [pc, #40]	; (80062f4 <APP_BLE_Init+0xb8>)
 80062cc:	2200      	movs	r2, #0
 80062ce:	761a      	strb	r2, [r3, #24]

  /* Initialize intervals for reconnexion without intervals update */
  AdvIntervalMin = CFG_FAST_CONN_ADV_INTERVAL_MIN;
 80062d0:	4b0e      	ldr	r3, [pc, #56]	; (800630c <APP_BLE_Init+0xd0>)
 80062d2:	2280      	movs	r2, #128	; 0x80
 80062d4:	801a      	strh	r2, [r3, #0]
  AdvIntervalMax = CFG_FAST_CONN_ADV_INTERVAL_MAX;
 80062d6:	4b0e      	ldr	r3, [pc, #56]	; (8006310 <APP_BLE_Init+0xd4>)
 80062d8:	22a0      	movs	r2, #160	; 0xa0
 80062da:	801a      	strh	r2, [r3, #0]

  /**
   * Start to Advertise to be connected by P2P Client
   */
   Adv_Request(APP_BLE_FAST_ADV);
 80062dc:	2001      	movs	r0, #1
 80062de:	f000 f98b 	bl	80065f8 <Adv_Request>

/* USER CODE BEGIN APP_BLE_Init_2 */

/* USER CODE END APP_BLE_Init_2 */
  return;
 80062e2:	bf00      	nop
}
 80062e4:	3738      	adds	r7, #56	; 0x38
 80062e6:	46bd      	mov	sp, r7
 80062e8:	bdb0      	pop	{r4, r5, r7, pc}
 80062ea:	bf00      	nop
 80062ec:	080071a0 	.word	0x080071a0
 80062f0:	08005769 	.word	0x08005769
 80062f4:	20000118 	.word	0x20000118
 80062f8:	08006761 	.word	0x08006761
 80062fc:	08006795 	.word	0x08006795
 8006300:	20000199 	.word	0x20000199
 8006304:	080067a5 	.word	0x080067a5
 8006308:	2000019a 	.word	0x2000019a
 800630c:	2000019c 	.word	0x2000019c
 8006310:	2000019e 	.word	0x2000019e

08006314 <SVCCTL_App_Notification>:

SVCCTL_UserEvtFlowStatus_t SVCCTL_App_Notification( void *pckt )
{
 8006314:	b580      	push	{r7, lr}
 8006316:	b08a      	sub	sp, #40	; 0x28
 8006318:	af00      	add	r7, sp, #0
 800631a:	6078      	str	r0, [r7, #4]
  hci_event_pckt *event_pckt;
  evt_le_meta_event *meta_evt;
  evt_blecore_aci *blecore_evt;
  hci_le_phy_update_complete_event_rp0 *evt_le_phy_update_complete;
  uint8_t TX_PHY, RX_PHY;
  tBleStatus ret = BLE_STATUS_INVALID_PARAMS;
 800631c:	2392      	movs	r3, #146	; 0x92
 800631e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

  event_pckt = (hci_event_pckt*) ((hci_uart_pckt *) pckt)->data;
 8006322:	687b      	ldr	r3, [r7, #4]
 8006324:	3301      	adds	r3, #1
 8006326:	623b      	str	r3, [r7, #32]

  /* USER CODE BEGIN SVCCTL_App_Notification */

  /* USER CODE END SVCCTL_App_Notification */

  switch (event_pckt->evt)
 8006328:	6a3b      	ldr	r3, [r7, #32]
 800632a:	781b      	ldrb	r3, [r3, #0]
 800632c:	2bff      	cmp	r3, #255	; 0xff
 800632e:	d076      	beq.n	800641e <SVCCTL_App_Notification+0x10a>
 8006330:	2bff      	cmp	r3, #255	; 0xff
 8006332:	f300 808b 	bgt.w	800644c <SVCCTL_App_Notification+0x138>
 8006336:	2b05      	cmp	r3, #5
 8006338:	d002      	beq.n	8006340 <SVCCTL_App_Notification+0x2c>
 800633a:	2b3e      	cmp	r3, #62	; 0x3e
 800633c:	d020      	beq.n	8006380 <SVCCTL_App_Notification+0x6c>

      default:
      /* USER CODE BEGIN ECODE_DEFAULT*/

      /* USER CODE END ECODE_DEFAULT*/
      break;
 800633e:	e085      	b.n	800644c <SVCCTL_App_Notification+0x138>
      disconnection_complete_event = (hci_disconnection_complete_event_rp0 *) event_pckt->data;
 8006340:	6a3b      	ldr	r3, [r7, #32]
 8006342:	3302      	adds	r3, #2
 8006344:	60fb      	str	r3, [r7, #12]
      if (disconnection_complete_event->Connection_Handle == BleApplicationContext.BleApplicationContext_legacy.connectionHandle)
 8006346:	68fb      	ldr	r3, [r7, #12]
 8006348:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 800634c:	b29a      	uxth	r2, r3
 800634e:	4b43      	ldr	r3, [pc, #268]	; (800645c <SVCCTL_App_Notification+0x148>)
 8006350:	8adb      	ldrh	r3, [r3, #22]
 8006352:	429a      	cmp	r2, r3
 8006354:	d106      	bne.n	8006364 <SVCCTL_App_Notification+0x50>
        BleApplicationContext.BleApplicationContext_legacy.connectionHandle = 0;
 8006356:	4b41      	ldr	r3, [pc, #260]	; (800645c <SVCCTL_App_Notification+0x148>)
 8006358:	2200      	movs	r2, #0
 800635a:	82da      	strh	r2, [r3, #22]
        BleApplicationContext.Device_Connection_Status = APP_BLE_IDLE;
 800635c:	4b3f      	ldr	r3, [pc, #252]	; (800645c <SVCCTL_App_Notification+0x148>)
 800635e:	2200      	movs	r2, #0
 8006360:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
      Adv_Request(APP_BLE_FAST_ADV);
 8006364:	2001      	movs	r0, #1
 8006366:	f000 f947 	bl	80065f8 <Adv_Request>
      handleNotification.P2P_Evt_Opcode = PEER_DISCON_HANDLE_EVT;
 800636a:	4b3d      	ldr	r3, [pc, #244]	; (8006460 <SVCCTL_App_Notification+0x14c>)
 800636c:	2201      	movs	r2, #1
 800636e:	701a      	strb	r2, [r3, #0]
      handleNotification.ConnectionHandle = BleApplicationContext.BleApplicationContext_legacy.connectionHandle;
 8006370:	4b3a      	ldr	r3, [pc, #232]	; (800645c <SVCCTL_App_Notification+0x148>)
 8006372:	8ada      	ldrh	r2, [r3, #22]
 8006374:	4b3a      	ldr	r3, [pc, #232]	; (8006460 <SVCCTL_App_Notification+0x14c>)
 8006376:	805a      	strh	r2, [r3, #2]
      P2PS_APP_Notification(&handleNotification);
 8006378:	4839      	ldr	r0, [pc, #228]	; (8006460 <SVCCTL_App_Notification+0x14c>)
 800637a:	f000 fa8f 	bl	800689c <P2PS_APP_Notification>
    break; /* HCI_DISCONNECTION_COMPLETE_EVT_CODE */
 800637e:	e068      	b.n	8006452 <SVCCTL_App_Notification+0x13e>
      meta_evt = (evt_le_meta_event*) event_pckt->data;
 8006380:	6a3b      	ldr	r3, [r7, #32]
 8006382:	3302      	adds	r3, #2
 8006384:	61bb      	str	r3, [r7, #24]
      switch (meta_evt->subevent)
 8006386:	69bb      	ldr	r3, [r7, #24]
 8006388:	781b      	ldrb	r3, [r3, #0]
 800638a:	2b0c      	cmp	r3, #12
 800638c:	d005      	beq.n	800639a <SVCCTL_App_Notification+0x86>
 800638e:	2b0c      	cmp	r3, #12
 8006390:	dc41      	bgt.n	8006416 <SVCCTL_App_Notification+0x102>
 8006392:	2b01      	cmp	r3, #1
 8006394:	d017      	beq.n	80063c6 <SVCCTL_App_Notification+0xb2>
 8006396:	2b03      	cmp	r3, #3
          break;
 8006398:	e03d      	b.n	8006416 <SVCCTL_App_Notification+0x102>
          evt_le_phy_update_complete = (hci_le_phy_update_complete_event_rp0*)meta_evt->data;
 800639a:	69bb      	ldr	r3, [r7, #24]
 800639c:	3301      	adds	r3, #1
 800639e:	617b      	str	r3, [r7, #20]
          ret = hci_le_read_phy(BleApplicationContext.BleApplicationContext_legacy.connectionHandle,&TX_PHY,&RX_PHY);
 80063a0:	4b2e      	ldr	r3, [pc, #184]	; (800645c <SVCCTL_App_Notification+0x148>)
 80063a2:	8adb      	ldrh	r3, [r3, #22]
 80063a4:	f107 020a 	add.w	r2, r7, #10
 80063a8:	f107 010b 	add.w	r1, r7, #11
 80063ac:	4618      	mov	r0, r3
 80063ae:	f7fe fdbb 	bl	8004f28 <hci_le_read_phy>
 80063b2:	4603      	mov	r3, r0
 80063b4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
          if (ret == BLE_STATUS_SUCCESS)
 80063b8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80063bc:	2b00      	cmp	r3, #0
 80063be:	d12c      	bne.n	800641a <SVCCTL_App_Notification+0x106>
            if ((TX_PHY == TX_2M) && (RX_PHY == RX_2M))
 80063c0:	7afb      	ldrb	r3, [r7, #11]
 80063c2:	2b02      	cmp	r3, #2
          break;
 80063c4:	e029      	b.n	800641a <SVCCTL_App_Notification+0x106>
          connection_complete_event = (hci_le_connection_complete_event_rp0 *) meta_evt->data;
 80063c6:	69bb      	ldr	r3, [r7, #24]
 80063c8:	3301      	adds	r3, #1
 80063ca:	613b      	str	r3, [r7, #16]
          HW_TS_Stop(BleApplicationContext.Advertising_mgr_timer_Id);
 80063cc:	4b23      	ldr	r3, [pc, #140]	; (800645c <SVCCTL_App_Notification+0x148>)
 80063ce:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 80063d2:	4618      	mov	r0, r3
 80063d4:	f7fa ff18 	bl	8001208 <HW_TS_Stop>
          if (BleApplicationContext.Device_Connection_Status == APP_BLE_LP_CONNECTING)
 80063d8:	4b20      	ldr	r3, [pc, #128]	; (800645c <SVCCTL_App_Notification+0x148>)
 80063da:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 80063de:	2b04      	cmp	r3, #4
 80063e0:	d104      	bne.n	80063ec <SVCCTL_App_Notification+0xd8>
            BleApplicationContext.Device_Connection_Status = APP_BLE_CONNECTED_CLIENT;
 80063e2:	4b1e      	ldr	r3, [pc, #120]	; (800645c <SVCCTL_App_Notification+0x148>)
 80063e4:	2206      	movs	r2, #6
 80063e6:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
 80063ea:	e003      	b.n	80063f4 <SVCCTL_App_Notification+0xe0>
            BleApplicationContext.Device_Connection_Status = APP_BLE_CONNECTED_SERVER;
 80063ec:	4b1b      	ldr	r3, [pc, #108]	; (800645c <SVCCTL_App_Notification+0x148>)
 80063ee:	2205      	movs	r2, #5
 80063f0:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
          BleApplicationContext.BleApplicationContext_legacy.connectionHandle = connection_complete_event->Connection_Handle;
 80063f4:	693b      	ldr	r3, [r7, #16]
 80063f6:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 80063fa:	b29a      	uxth	r2, r3
 80063fc:	4b17      	ldr	r3, [pc, #92]	; (800645c <SVCCTL_App_Notification+0x148>)
 80063fe:	82da      	strh	r2, [r3, #22]
          handleNotification.P2P_Evt_Opcode = PEER_CONN_HANDLE_EVT;
 8006400:	4b17      	ldr	r3, [pc, #92]	; (8006460 <SVCCTL_App_Notification+0x14c>)
 8006402:	2200      	movs	r2, #0
 8006404:	701a      	strb	r2, [r3, #0]
          handleNotification.ConnectionHandle = BleApplicationContext.BleApplicationContext_legacy.connectionHandle;
 8006406:	4b15      	ldr	r3, [pc, #84]	; (800645c <SVCCTL_App_Notification+0x148>)
 8006408:	8ada      	ldrh	r2, [r3, #22]
 800640a:	4b15      	ldr	r3, [pc, #84]	; (8006460 <SVCCTL_App_Notification+0x14c>)
 800640c:	805a      	strh	r2, [r3, #2]
          P2PS_APP_Notification(&handleNotification);
 800640e:	4814      	ldr	r0, [pc, #80]	; (8006460 <SVCCTL_App_Notification+0x14c>)
 8006410:	f000 fa44 	bl	800689c <P2PS_APP_Notification>
        break; /* HCI_LE_CONNECTION_COMPLETE_SUBEVT_CODE */
 8006414:	e002      	b.n	800641c <SVCCTL_App_Notification+0x108>
          break;
 8006416:	bf00      	nop
 8006418:	e01b      	b.n	8006452 <SVCCTL_App_Notification+0x13e>
          break;
 800641a:	bf00      	nop
    break; /* HCI_LE_META_EVT_CODE */
 800641c:	e019      	b.n	8006452 <SVCCTL_App_Notification+0x13e>
      blecore_evt = (evt_blecore_aci*) event_pckt->data;
 800641e:	6a3b      	ldr	r3, [r7, #32]
 8006420:	3302      	adds	r3, #2
 8006422:	61fb      	str	r3, [r7, #28]
      switch (blecore_evt->ecode)
 8006424:	69fb      	ldr	r3, [r7, #28]
 8006426:	881b      	ldrh	r3, [r3, #0]
 8006428:	b29b      	uxth	r3, r3
 800642a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800642e:	d009      	beq.n	8006444 <SVCCTL_App_Notification+0x130>
 8006430:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006434:	dc0c      	bgt.n	8006450 <SVCCTL_App_Notification+0x13c>
 8006436:	2b04      	cmp	r3, #4
 8006438:	d006      	beq.n	8006448 <SVCCTL_App_Notification+0x134>
 800643a:	f240 4207 	movw	r2, #1031	; 0x407
 800643e:	4293      	cmp	r3, r2
 8006440:	d106      	bne.n	8006450 <SVCCTL_App_Notification+0x13c>
          break; /* ACI_GAP_PROC_COMPLETE_VSEVT_CODE */
 8006442:	e002      	b.n	800644a <SVCCTL_App_Notification+0x136>
      break;
 8006444:	bf00      	nop
 8006446:	e003      	b.n	8006450 <SVCCTL_App_Notification+0x13c>
          break; /* ACI_HAL_END_OF_RADIO_ACTIVITY_VSEVT_CODE */
 8006448:	bf00      	nop
      break; /* HCI_VENDOR_SPECIFIC_DEBUG_EVT_CODE */
 800644a:	e001      	b.n	8006450 <SVCCTL_App_Notification+0x13c>
      break;
 800644c:	bf00      	nop
 800644e:	e000      	b.n	8006452 <SVCCTL_App_Notification+0x13e>
      break; /* HCI_VENDOR_SPECIFIC_DEBUG_EVT_CODE */
 8006450:	bf00      	nop
  }

  return (SVCCTL_UserEvtFlowEnable);
 8006452:	2301      	movs	r3, #1
}
 8006454:	4618      	mov	r0, r3
 8006456:	3728      	adds	r7, #40	; 0x28
 8006458:	46bd      	mov	sp, r7
 800645a:	bd80      	pop	{r7, pc}
 800645c:	20000118 	.word	0x20000118
 8006460:	2000034c 	.word	0x2000034c

08006464 <Ble_Tl_Init>:
 *
 * LOCAL FUNCTIONS
 *
 *************************************************************/
static void Ble_Tl_Init( void )
{
 8006464:	b580      	push	{r7, lr}
 8006466:	b082      	sub	sp, #8
 8006468:	af00      	add	r7, sp, #0
  HCI_TL_HciInitConf_t Hci_Tl_Init_Conf;

  Hci_Tl_Init_Conf.p_cmdbuffer = (uint8_t*)&BleCmdBuffer;
 800646a:	4b06      	ldr	r3, [pc, #24]	; (8006484 <Ble_Tl_Init+0x20>)
 800646c:	603b      	str	r3, [r7, #0]
  Hci_Tl_Init_Conf.StatusNotCallBack = BLE_StatusNot;
 800646e:	4b06      	ldr	r3, [pc, #24]	; (8006488 <Ble_Tl_Init+0x24>)
 8006470:	607b      	str	r3, [r7, #4]
  hci_init(BLE_UserEvtRx, (void*) &Hci_Tl_Init_Conf);
 8006472:	463b      	mov	r3, r7
 8006474:	4619      	mov	r1, r3
 8006476:	4805      	ldr	r0, [pc, #20]	; (800648c <Ble_Tl_Init+0x28>)
 8006478:	f7ff f95a 	bl	8005730 <hci_init>

  return;
 800647c:	bf00      	nop
}
 800647e:	3708      	adds	r7, #8
 8006480:	46bd      	mov	sp, r7
 8006482:	bd80      	pop	{r7, pc}
 8006484:	200300d4 	.word	0x200300d4
 8006488:	0800682f 	.word	0x0800682f
 800648c:	080067f7 	.word	0x080067f7

08006490 <Ble_Hci_Gap_Gatt_Init>:

static void Ble_Hci_Gap_Gatt_Init(void){
 8006490:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006492:	b08d      	sub	sp, #52	; 0x34
 8006494:	af06      	add	r7, sp, #24

  uint8_t role;
  uint16_t gap_service_handle, gap_dev_name_char_handle, gap_appearance_char_handle;
  const uint8_t *bd_addr;
  uint16_t appearance[1] = { BLE_CFG_GAP_APPEARANCE };
 8006496:	2300      	movs	r3, #0
 8006498:	80bb      	strh	r3, [r7, #4]

  /**
   * Initialize HCI layer
   */
  /*HCI Reset to synchronise BLE Stack*/
  hci_reset();
 800649a:	f7fe fd21 	bl	8004ee0 <hci_reset>

  /**
   * Write the BD Address
   */

  bd_addr = BleGetBdAddress();
 800649e:	f000 f91b 	bl	80066d8 <BleGetBdAddress>
 80064a2:	6178      	str	r0, [r7, #20]
  aci_hal_write_config_data(CONFIG_DATA_PUBADDR_OFFSET,
 80064a4:	697a      	ldr	r2, [r7, #20]
 80064a6:	2106      	movs	r1, #6
 80064a8:	2000      	movs	r0, #0
 80064aa:	f7fe fc0f 	bl	8004ccc <aci_hal_write_config_data>
                            CONFIG_DATA_PUBADDR_LEN,
                            (uint8_t*) bd_addr);

#if (CFG_BLE_ADDRESS_TYPE == PUBLIC_ADDR)
  /* BLE MAC in ADV Packet */
  manuf_data[ sizeof(manuf_data)-6] = bd_addr[5];
 80064ae:	697b      	ldr	r3, [r7, #20]
 80064b0:	795a      	ldrb	r2, [r3, #5]
 80064b2:	4b4b      	ldr	r3, [pc, #300]	; (80065e0 <Ble_Hci_Gap_Gatt_Init+0x150>)
 80064b4:	721a      	strb	r2, [r3, #8]
  manuf_data[ sizeof(manuf_data)-5] = bd_addr[4];
 80064b6:	697b      	ldr	r3, [r7, #20]
 80064b8:	791a      	ldrb	r2, [r3, #4]
 80064ba:	4b49      	ldr	r3, [pc, #292]	; (80065e0 <Ble_Hci_Gap_Gatt_Init+0x150>)
 80064bc:	725a      	strb	r2, [r3, #9]
  manuf_data[ sizeof(manuf_data)-4] = bd_addr[3];
 80064be:	697b      	ldr	r3, [r7, #20]
 80064c0:	78da      	ldrb	r2, [r3, #3]
 80064c2:	4b47      	ldr	r3, [pc, #284]	; (80065e0 <Ble_Hci_Gap_Gatt_Init+0x150>)
 80064c4:	729a      	strb	r2, [r3, #10]
  manuf_data[ sizeof(manuf_data)-3] = bd_addr[2];
 80064c6:	697b      	ldr	r3, [r7, #20]
 80064c8:	789a      	ldrb	r2, [r3, #2]
 80064ca:	4b45      	ldr	r3, [pc, #276]	; (80065e0 <Ble_Hci_Gap_Gatt_Init+0x150>)
 80064cc:	72da      	strb	r2, [r3, #11]
  manuf_data[ sizeof(manuf_data)-2] = bd_addr[1];
 80064ce:	697b      	ldr	r3, [r7, #20]
 80064d0:	785a      	ldrb	r2, [r3, #1]
 80064d2:	4b43      	ldr	r3, [pc, #268]	; (80065e0 <Ble_Hci_Gap_Gatt_Init+0x150>)
 80064d4:	731a      	strb	r2, [r3, #12]
  manuf_data[ sizeof(manuf_data)-1] = bd_addr[0];
 80064d6:	697b      	ldr	r3, [r7, #20]
 80064d8:	781a      	ldrb	r2, [r3, #0]
 80064da:	4b41      	ldr	r3, [pc, #260]	; (80065e0 <Ble_Hci_Gap_Gatt_Init+0x150>)
 80064dc:	735a      	strb	r2, [r3, #13]
#endif

  /**
   * Write Identity root key used to derive LTK and CSRK
   */
  aci_hal_write_config_data( CONFIG_DATA_IR_OFFSET, CONFIG_DATA_IR_LEN, (uint8_t*)BLE_CFG_IR_VALUE );
 80064de:	4a41      	ldr	r2, [pc, #260]	; (80065e4 <Ble_Hci_Gap_Gatt_Init+0x154>)
 80064e0:	2110      	movs	r1, #16
 80064e2:	2018      	movs	r0, #24
 80064e4:	f7fe fbf2 	bl	8004ccc <aci_hal_write_config_data>

  /**
   * Write Encryption root key used to derive LTK and CSRK
   */
  aci_hal_write_config_data( CONFIG_DATA_ER_OFFSET, CONFIG_DATA_ER_LEN, (uint8_t*)BLE_CFG_ER_VALUE );
 80064e8:	4a3f      	ldr	r2, [pc, #252]	; (80065e8 <Ble_Hci_Gap_Gatt_Init+0x158>)
 80064ea:	2110      	movs	r1, #16
 80064ec:	2008      	movs	r0, #8
 80064ee:	f7fe fbed 	bl	8004ccc <aci_hal_write_config_data>

  /**
   * Set TX Power to 0dBm.
   */
  aci_hal_set_tx_power_level(1, CFG_TX_POWER);
 80064f2:	2118      	movs	r1, #24
 80064f4:	2001      	movs	r0, #1
 80064f6:	f7fe fc52 	bl	8004d9e <aci_hal_set_tx_power_level>

  /**
   * Initialize GATT interface
   */
  aci_gatt_init();
 80064fa:	f7fe f9a2 	bl	8004842 <aci_gatt_init>

  /**
   * Initialize GAP interface
   */
  role = 0;
 80064fe:	2300      	movs	r3, #0
 8006500:	74fb      	strb	r3, [r7, #19]

#if (BLE_CFG_PERIPHERAL == 1)
  role |= GAP_PERIPHERAL_ROLE;
 8006502:	7cfb      	ldrb	r3, [r7, #19]
 8006504:	f043 0301 	orr.w	r3, r3, #1
 8006508:	74fb      	strb	r3, [r7, #19]

#if (BLE_CFG_CENTRAL == 1)
  role |= GAP_CENTRAL_ROLE;
#endif

  if (role > 0)
 800650a:	7cfb      	ldrb	r3, [r7, #19]
 800650c:	2b00      	cmp	r3, #0
 800650e:	d01d      	beq.n	800654c <Ble_Hci_Gap_Gatt_Init+0xbc>
  {
    const char *name = "P2PSRV1";
 8006510:	4b36      	ldr	r3, [pc, #216]	; (80065ec <Ble_Hci_Gap_Gatt_Init+0x15c>)
 8006512:	60fb      	str	r3, [r7, #12]
    aci_gap_init(role,
 8006514:	f107 020a 	add.w	r2, r7, #10
 8006518:	7cf8      	ldrb	r0, [r7, #19]
 800651a:	1dbb      	adds	r3, r7, #6
 800651c:	9301      	str	r3, [sp, #4]
 800651e:	f107 0308 	add.w	r3, r7, #8
 8006522:	9300      	str	r3, [sp, #0]
 8006524:	4613      	mov	r3, r2
 8006526:	2207      	movs	r2, #7
 8006528:	2100      	movs	r1, #0
 800652a:	f7fe f87f 	bl	800462c <aci_gap_init>
                 APPBLE_GAP_DEVICE_NAME_LENGTH,
                 &gap_service_handle,
                 &gap_dev_name_char_handle,
                 &gap_appearance_char_handle);

    if (aci_gatt_update_char_value(gap_service_handle, gap_dev_name_char_handle, 0, strlen(name), (uint8_t *) name))
 800652e:	897c      	ldrh	r4, [r7, #10]
 8006530:	893d      	ldrh	r5, [r7, #8]
 8006532:	68f8      	ldr	r0, [r7, #12]
 8006534:	f7f9 fe22 	bl	800017c <strlen>
 8006538:	4603      	mov	r3, r0
 800653a:	b2da      	uxtb	r2, r3
 800653c:	68fb      	ldr	r3, [r7, #12]
 800653e:	9300      	str	r3, [sp, #0]
 8006540:	4613      	mov	r3, r2
 8006542:	2200      	movs	r2, #0
 8006544:	4629      	mov	r1, r5
 8006546:	4620      	mov	r0, r4
 8006548:	f7fe fb39 	bl	8004bbe <aci_gatt_update_char_value>
    {
      BLE_DBG_SVCCTL_MSG("Device Name aci_gatt_update_char_value failed.\n");
    }
  }

  if(aci_gatt_update_char_value(gap_service_handle,
 800654c:	8978      	ldrh	r0, [r7, #10]
 800654e:	88f9      	ldrh	r1, [r7, #6]
 8006550:	1d3b      	adds	r3, r7, #4
 8006552:	9300      	str	r3, [sp, #0]
 8006554:	2302      	movs	r3, #2
 8006556:	2200      	movs	r2, #0
 8006558:	f7fe fb31 	bl	8004bbe <aci_gatt_update_char_value>
    BLE_DBG_SVCCTL_MSG("Appearance aci_gatt_update_char_value failed.\n");
  }
  /**
   * Initialize Default PHY
   */
  hci_le_set_default_phy(ALL_PHYS_PREFERENCE,TX_2M_PREFERRED,RX_2M_PREFERRED);
 800655c:	2202      	movs	r2, #2
 800655e:	2102      	movs	r1, #2
 8006560:	2000      	movs	r0, #0
 8006562:	f7fe fd49 	bl	8004ff8 <hci_le_set_default_phy>

  /**
   * Initialize IO capability
   */
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.ioCapability = CFG_IO_CAPABILITY;
 8006566:	4b22      	ldr	r3, [pc, #136]	; (80065f0 <Ble_Hci_Gap_Gatt_Init+0x160>)
 8006568:	2201      	movs	r2, #1
 800656a:	701a      	strb	r2, [r3, #0]
  aci_gap_set_io_capability(BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.ioCapability);
 800656c:	4b20      	ldr	r3, [pc, #128]	; (80065f0 <Ble_Hci_Gap_Gatt_Init+0x160>)
 800656e:	781b      	ldrb	r3, [r3, #0]
 8006570:	4618      	mov	r0, r3
 8006572:	f7fd ff69 	bl	8004448 <aci_gap_set_io_capability>

  /**
   * Initialize authentication
   */
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.mitm_mode = CFG_MITM_PROTECTION;
 8006576:	4b1e      	ldr	r3, [pc, #120]	; (80065f0 <Ble_Hci_Gap_Gatt_Init+0x160>)
 8006578:	2201      	movs	r2, #1
 800657a:	705a      	strb	r2, [r3, #1]
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.encryptionKeySizeMin = CFG_ENCRYPTION_KEY_SIZE_MIN;
 800657c:	4b1c      	ldr	r3, [pc, #112]	; (80065f0 <Ble_Hci_Gap_Gatt_Init+0x160>)
 800657e:	2208      	movs	r2, #8
 8006580:	711a      	strb	r2, [r3, #4]
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.encryptionKeySizeMax = CFG_ENCRYPTION_KEY_SIZE_MAX;
 8006582:	4b1b      	ldr	r3, [pc, #108]	; (80065f0 <Ble_Hci_Gap_Gatt_Init+0x160>)
 8006584:	2210      	movs	r2, #16
 8006586:	715a      	strb	r2, [r3, #5]
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.Use_Fixed_Pin = CFG_USED_FIXED_PIN;
 8006588:	4b19      	ldr	r3, [pc, #100]	; (80065f0 <Ble_Hci_Gap_Gatt_Init+0x160>)
 800658a:	2200      	movs	r2, #0
 800658c:	70da      	strb	r2, [r3, #3]
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.Fixed_Pin = CFG_FIXED_PIN;
 800658e:	4b18      	ldr	r3, [pc, #96]	; (80065f0 <Ble_Hci_Gap_Gatt_Init+0x160>)
 8006590:	4a18      	ldr	r2, [pc, #96]	; (80065f4 <Ble_Hci_Gap_Gatt_Init+0x164>)
 8006592:	609a      	str	r2, [r3, #8]
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.bonding_mode = CFG_BONDING_MODE;
 8006594:	4b16      	ldr	r3, [pc, #88]	; (80065f0 <Ble_Hci_Gap_Gatt_Init+0x160>)
 8006596:	2201      	movs	r2, #1
 8006598:	709a      	strb	r2, [r3, #2]

  aci_gap_set_authentication_requirement(BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.bonding_mode,
 800659a:	4b15      	ldr	r3, [pc, #84]	; (80065f0 <Ble_Hci_Gap_Gatt_Init+0x160>)
 800659c:	789c      	ldrb	r4, [r3, #2]
 800659e:	4b14      	ldr	r3, [pc, #80]	; (80065f0 <Ble_Hci_Gap_Gatt_Init+0x160>)
 80065a0:	785d      	ldrb	r5, [r3, #1]
 80065a2:	4b13      	ldr	r3, [pc, #76]	; (80065f0 <Ble_Hci_Gap_Gatt_Init+0x160>)
 80065a4:	791b      	ldrb	r3, [r3, #4]
 80065a6:	4a12      	ldr	r2, [pc, #72]	; (80065f0 <Ble_Hci_Gap_Gatt_Init+0x160>)
 80065a8:	7952      	ldrb	r2, [r2, #5]
 80065aa:	4911      	ldr	r1, [pc, #68]	; (80065f0 <Ble_Hci_Gap_Gatt_Init+0x160>)
 80065ac:	78c9      	ldrb	r1, [r1, #3]
 80065ae:	4810      	ldr	r0, [pc, #64]	; (80065f0 <Ble_Hci_Gap_Gatt_Init+0x160>)
 80065b0:	6880      	ldr	r0, [r0, #8]
 80065b2:	2600      	movs	r6, #0
 80065b4:	9604      	str	r6, [sp, #16]
 80065b6:	9003      	str	r0, [sp, #12]
 80065b8:	9102      	str	r1, [sp, #8]
 80065ba:	9201      	str	r2, [sp, #4]
 80065bc:	9300      	str	r3, [sp, #0]
 80065be:	2300      	movs	r3, #0
 80065c0:	2201      	movs	r2, #1
 80065c2:	4629      	mov	r1, r5
 80065c4:	4620      	mov	r0, r4
 80065c6:	f7fd ff89 	bl	80044dc <aci_gap_set_authentication_requirement>
                                         );

  /**
   * Initialize whitelist
   */
   if (BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.bonding_mode)
 80065ca:	4b09      	ldr	r3, [pc, #36]	; (80065f0 <Ble_Hci_Gap_Gatt_Init+0x160>)
 80065cc:	789b      	ldrb	r3, [r3, #2]
 80065ce:	2b00      	cmp	r3, #0
 80065d0:	d001      	beq.n	80065d6 <Ble_Hci_Gap_Gatt_Init+0x146>
   {
     aci_gap_configure_whitelist();
 80065d2:	f7fe f912 	bl	80047fa <aci_gap_configure_whitelist>
   }
}
 80065d6:	bf00      	nop
 80065d8:	371c      	adds	r7, #28
 80065da:	46bd      	mov	sp, r7
 80065dc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80065de:	bf00      	nop
 80065e0:	20000010 	.word	0x20000010
 80065e4:	080073ac 	.word	0x080073ac
 80065e8:	080073bc 	.word	0x080073bc
 80065ec:	080071d4 	.word	0x080071d4
 80065f0:	20000118 	.word	0x20000118
 80065f4:	0001b207 	.word	0x0001b207

080065f8 <Adv_Request>:

static void Adv_Request(APP_BLE_ConnStatus_t New_Status)
{
 80065f8:	b580      	push	{r7, lr}
 80065fa:	b08c      	sub	sp, #48	; 0x30
 80065fc:	af08      	add	r7, sp, #32
 80065fe:	4603      	mov	r3, r0
 8006600:	71fb      	strb	r3, [r7, #7]
  tBleStatus ret = BLE_STATUS_INVALID_PARAMS;
 8006602:	2392      	movs	r3, #146	; 0x92
 8006604:	72fb      	strb	r3, [r7, #11]
  uint16_t Min_Inter, Max_Inter;

  if (New_Status == APP_BLE_FAST_ADV)
 8006606:	79fb      	ldrb	r3, [r7, #7]
 8006608:	2b01      	cmp	r3, #1
 800660a:	d106      	bne.n	800661a <Adv_Request+0x22>
  {
    Min_Inter = AdvIntervalMin;
 800660c:	4b2b      	ldr	r3, [pc, #172]	; (80066bc <Adv_Request+0xc4>)
 800660e:	881b      	ldrh	r3, [r3, #0]
 8006610:	81fb      	strh	r3, [r7, #14]
    Max_Inter = AdvIntervalMax;
 8006612:	4b2b      	ldr	r3, [pc, #172]	; (80066c0 <Adv_Request+0xc8>)
 8006614:	881b      	ldrh	r3, [r3, #0]
 8006616:	81bb      	strh	r3, [r7, #12]
 8006618:	e005      	b.n	8006626 <Adv_Request+0x2e>
  }
  else
  {
    Min_Inter = CFG_LP_CONN_ADV_INTERVAL_MIN;
 800661a:	f44f 63c8 	mov.w	r3, #1600	; 0x640
 800661e:	81fb      	strh	r3, [r7, #14]
    Max_Inter = CFG_LP_CONN_ADV_INTERVAL_MAX;
 8006620:	f44f 637a 	mov.w	r3, #4000	; 0xfa0
 8006624:	81bb      	strh	r3, [r7, #12]

    /**
     * Stop the timer, it will be restarted for a new shot
     * It does not hurt if the timer was not running
     */
    HW_TS_Stop(BleApplicationContext.Advertising_mgr_timer_Id);
 8006626:	4b27      	ldr	r3, [pc, #156]	; (80066c4 <Adv_Request+0xcc>)
 8006628:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800662c:	4618      	mov	r0, r3
 800662e:	f7fa fdeb 	bl	8001208 <HW_TS_Stop>

    APP_DBG_MSG("First index in %d state \n", BleApplicationContext.Device_Connection_Status);

    if ((New_Status == APP_BLE_LP_ADV)
 8006632:	79fb      	ldrb	r3, [r7, #7]
 8006634:	2b02      	cmp	r3, #2
 8006636:	d10d      	bne.n	8006654 <Adv_Request+0x5c>
        && ((BleApplicationContext.Device_Connection_Status == APP_BLE_FAST_ADV)
 8006638:	4b22      	ldr	r3, [pc, #136]	; (80066c4 <Adv_Request+0xcc>)
 800663a:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800663e:	2b01      	cmp	r3, #1
 8006640:	d004      	beq.n	800664c <Adv_Request+0x54>
            || (BleApplicationContext.Device_Connection_Status == APP_BLE_LP_ADV)))
 8006642:	4b20      	ldr	r3, [pc, #128]	; (80066c4 <Adv_Request+0xcc>)
 8006644:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8006648:	2b02      	cmp	r3, #2
 800664a:	d103      	bne.n	8006654 <Adv_Request+0x5c>
    {
      /* Connection in ADVERTISE mode have to stop the current advertising */
      ret = aci_gap_set_non_discoverable();
 800664c:	f7fd fdfa 	bl	8004244 <aci_gap_set_non_discoverable>
 8006650:	4603      	mov	r3, r0
 8006652:	72fb      	strb	r3, [r7, #11]
      {
        APP_DBG_MSG("Stop Advertising Failed , result: %d \n", ret);
      }
    }

    BleApplicationContext.Device_Connection_Status = New_Status;
 8006654:	4a1b      	ldr	r2, [pc, #108]	; (80066c4 <Adv_Request+0xcc>)
 8006656:	79fb      	ldrb	r3, [r7, #7]
 8006658:	f882 3080 	strb.w	r3, [r2, #128]	; 0x80
    /* Start Fast or Low Power Advertising */
    ret = aci_gap_set_discoverable(
 800665c:	4b19      	ldr	r3, [pc, #100]	; (80066c4 <Adv_Request+0xcc>)
 800665e:	7e1b      	ldrb	r3, [r3, #24]
 8006660:	89ba      	ldrh	r2, [r7, #12]
 8006662:	89f9      	ldrh	r1, [r7, #14]
 8006664:	2000      	movs	r0, #0
 8006666:	9006      	str	r0, [sp, #24]
 8006668:	2000      	movs	r0, #0
 800666a:	9005      	str	r0, [sp, #20]
 800666c:	4816      	ldr	r0, [pc, #88]	; (80066c8 <Adv_Request+0xd0>)
 800666e:	9004      	str	r0, [sp, #16]
 8006670:	9303      	str	r3, [sp, #12]
 8006672:	4b16      	ldr	r3, [pc, #88]	; (80066cc <Adv_Request+0xd4>)
 8006674:	9302      	str	r3, [sp, #8]
 8006676:	2308      	movs	r3, #8
 8006678:	9301      	str	r3, [sp, #4]
 800667a:	2300      	movs	r3, #0
 800667c:	9300      	str	r3, [sp, #0]
 800667e:	2300      	movs	r3, #0
 8006680:	2000      	movs	r0, #0
 8006682:	f7fd fe03 	bl	800428c <aci_gap_set_discoverable>
 8006686:	4603      	mov	r3, r0
 8006688:	72fb      	strb	r3, [r7, #11]
        BleApplicationContext.BleApplicationContext_legacy.advtServUUID,
        0,
        0);

    /* Update Advertising data */
    ret = aci_gap_update_adv_data(sizeof(manuf_data), (uint8_t*) manuf_data);
 800668a:	4911      	ldr	r1, [pc, #68]	; (80066d0 <Adv_Request+0xd8>)
 800668c:	200e      	movs	r0, #14
 800668e:	f7fe f858 	bl	8004742 <aci_gap_update_adv_data>
 8006692:	4603      	mov	r3, r0
 8006694:	72fb      	strb	r3, [r7, #11]
    if (ret == BLE_STATUS_SUCCESS)
 8006696:	7afb      	ldrb	r3, [r7, #11]
 8006698:	2b00      	cmp	r3, #0
 800669a:	d10a      	bne.n	80066b2 <Adv_Request+0xba>
    {
      if (New_Status == APP_BLE_FAST_ADV)
 800669c:	79fb      	ldrb	r3, [r7, #7]
 800669e:	2b01      	cmp	r3, #1
 80066a0:	d107      	bne.n	80066b2 <Adv_Request+0xba>
      {
        APP_DBG_MSG("Successfully Start Fast Advertising \n" );
        /* Start Timer to STOP ADV - TIMEOUT */
        HW_TS_Start(BleApplicationContext.Advertising_mgr_timer_Id, INITIAL_ADV_TIMEOUT);
 80066a2:	4b08      	ldr	r3, [pc, #32]	; (80066c4 <Adv_Request+0xcc>)
 80066a4:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 80066a8:	490a      	ldr	r1, [pc, #40]	; (80066d4 <Adv_Request+0xdc>)
 80066aa:	4618      	mov	r0, r3
 80066ac:	f7fa fe38 	bl	8001320 <HW_TS_Start>
      {
        APP_DBG_MSG("Start Low Power Advertising Failed , result: %d \n", ret);
      }
    }

  return;
 80066b0:	bf00      	nop
 80066b2:	bf00      	nop
}
 80066b4:	3710      	adds	r7, #16
 80066b6:	46bd      	mov	sp, r7
 80066b8:	bd80      	pop	{r7, pc}
 80066ba:	bf00      	nop
 80066bc:	2000019c 	.word	0x2000019c
 80066c0:	2000019e 	.word	0x2000019e
 80066c4:	20000118 	.word	0x20000118
 80066c8:	20000131 	.word	0x20000131
 80066cc:	080073cc 	.word	0x080073cc
 80066d0:	20000010 	.word	0x20000010
 80066d4:	0001e046 	.word	0x0001e046

080066d8 <BleGetBdAddress>:

const uint8_t* BleGetBdAddress( void )
{
 80066d8:	b580      	push	{r7, lr}
 80066da:	b086      	sub	sp, #24
 80066dc:	af00      	add	r7, sp, #0
  const uint8_t *bd_addr;
  uint32_t udn;
  uint32_t company_id;
  uint32_t device_id;

  udn = LL_FLASH_GetUDN();
 80066de:	f7ff fd89 	bl	80061f4 <LL_FLASH_GetUDN>
 80066e2:	6138      	str	r0, [r7, #16]

  if(udn != 0xFFFFFFFF)
 80066e4:	693b      	ldr	r3, [r7, #16]
 80066e6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80066ea:	d023      	beq.n	8006734 <BleGetBdAddress+0x5c>
  {
    company_id = LL_FLASH_GetSTCompanyID();
 80066ec:	f7ff fd9a 	bl	8006224 <LL_FLASH_GetSTCompanyID>
 80066f0:	60b8      	str	r0, [r7, #8]
    device_id = LL_FLASH_GetDeviceID();
 80066f2:	f7ff fd8b 	bl	800620c <LL_FLASH_GetDeviceID>
 80066f6:	6078      	str	r0, [r7, #4]
 * bit[23:16] : Device ID.
 * bit[15:0] : The last 16bits from the UDN
 * Note: In order to use the Public Address in a final product, a dedicated
 * 24bits company ID (OUI) shall be bought.
 */
    bd_addr_udn[0] = (uint8_t)(udn & 0x000000FF);
 80066f8:	693b      	ldr	r3, [r7, #16]
 80066fa:	b2da      	uxtb	r2, r3
 80066fc:	4b16      	ldr	r3, [pc, #88]	; (8006758 <BleGetBdAddress+0x80>)
 80066fe:	701a      	strb	r2, [r3, #0]
    bd_addr_udn[1] = (uint8_t)( (udn & 0x0000FF00) >> 8 );
 8006700:	693b      	ldr	r3, [r7, #16]
 8006702:	0a1b      	lsrs	r3, r3, #8
 8006704:	b2da      	uxtb	r2, r3
 8006706:	4b14      	ldr	r3, [pc, #80]	; (8006758 <BleGetBdAddress+0x80>)
 8006708:	705a      	strb	r2, [r3, #1]
    bd_addr_udn[2] = (uint8_t)device_id;
 800670a:	687b      	ldr	r3, [r7, #4]
 800670c:	b2da      	uxtb	r2, r3
 800670e:	4b12      	ldr	r3, [pc, #72]	; (8006758 <BleGetBdAddress+0x80>)
 8006710:	709a      	strb	r2, [r3, #2]
    bd_addr_udn[3] = (uint8_t)(company_id & 0x000000FF);
 8006712:	68bb      	ldr	r3, [r7, #8]
 8006714:	b2da      	uxtb	r2, r3
 8006716:	4b10      	ldr	r3, [pc, #64]	; (8006758 <BleGetBdAddress+0x80>)
 8006718:	70da      	strb	r2, [r3, #3]
    bd_addr_udn[4] = (uint8_t)( (company_id & 0x0000FF00) >> 8 );
 800671a:	68bb      	ldr	r3, [r7, #8]
 800671c:	0a1b      	lsrs	r3, r3, #8
 800671e:	b2da      	uxtb	r2, r3
 8006720:	4b0d      	ldr	r3, [pc, #52]	; (8006758 <BleGetBdAddress+0x80>)
 8006722:	711a      	strb	r2, [r3, #4]
    bd_addr_udn[5] = (uint8_t)( (company_id & 0x00FF0000) >> 16 );
 8006724:	68bb      	ldr	r3, [r7, #8]
 8006726:	0c1b      	lsrs	r3, r3, #16
 8006728:	b2da      	uxtb	r2, r3
 800672a:	4b0b      	ldr	r3, [pc, #44]	; (8006758 <BleGetBdAddress+0x80>)
 800672c:	715a      	strb	r2, [r3, #5]

    bd_addr = (const uint8_t *)bd_addr_udn;
 800672e:	4b0a      	ldr	r3, [pc, #40]	; (8006758 <BleGetBdAddress+0x80>)
 8006730:	617b      	str	r3, [r7, #20]
 8006732:	e00b      	b.n	800674c <BleGetBdAddress+0x74>
  }
  else
  {
    otp_addr = OTP_Read(0);
 8006734:	2000      	movs	r0, #0
 8006736:	f7ff fc77 	bl	8006028 <OTP_Read>
 800673a:	60f8      	str	r0, [r7, #12]
    if(otp_addr)
 800673c:	68fb      	ldr	r3, [r7, #12]
 800673e:	2b00      	cmp	r3, #0
 8006740:	d002      	beq.n	8006748 <BleGetBdAddress+0x70>
    {
      bd_addr = ((OTP_ID0_t*)otp_addr)->bd_address;
 8006742:	68fb      	ldr	r3, [r7, #12]
 8006744:	617b      	str	r3, [r7, #20]
 8006746:	e001      	b.n	800674c <BleGetBdAddress+0x74>
    }
    else
    {
      bd_addr = M_bd_addr;
 8006748:	4b04      	ldr	r3, [pc, #16]	; (800675c <BleGetBdAddress+0x84>)
 800674a:	617b      	str	r3, [r7, #20]
    }
  }

  return bd_addr;
 800674c:	697b      	ldr	r3, [r7, #20]
}
 800674e:	4618      	mov	r0, r3
 8006750:	3718      	adds	r7, #24
 8006752:	46bd      	mov	sp, r7
 8006754:	bd80      	pop	{r7, pc}
 8006756:	bf00      	nop
 8006758:	20000234 	.word	0x20000234
 800675c:	080073a4 	.word	0x080073a4

08006760 <Adv_Cancel>:
 *
 *SPECIFIC FUNCTIONS FOR P2P SERVER
 *
 *************************************************************/
static void Adv_Cancel( void )
{
 8006760:	b580      	push	{r7, lr}
 8006762:	b082      	sub	sp, #8
 8006764:	af00      	add	r7, sp, #0
/* USER CODE BEGIN Adv_Cancel_1 */

/* USER CODE END Adv_Cancel_1 */

  if (BleApplicationContext.Device_Connection_Status != APP_BLE_CONNECTED_SERVER)
 8006766:	4b0a      	ldr	r3, [pc, #40]	; (8006790 <Adv_Cancel+0x30>)
 8006768:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800676c:	2b05      	cmp	r3, #5
 800676e:	d00a      	beq.n	8006786 <Adv_Cancel+0x26>

  {

    tBleStatus result = 0x00;
 8006770:	2300      	movs	r3, #0
 8006772:	71fb      	strb	r3, [r7, #7]

    result = aci_gap_set_non_discoverable();
 8006774:	f7fd fd66 	bl	8004244 <aci_gap_set_non_discoverable>
 8006778:	4603      	mov	r3, r0
 800677a:	71fb      	strb	r3, [r7, #7]

    BleApplicationContext.Device_Connection_Status = APP_BLE_IDLE;
 800677c:	4b04      	ldr	r3, [pc, #16]	; (8006790 <Adv_Cancel+0x30>)
 800677e:	2200      	movs	r2, #0
 8006780:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
  }

/* USER CODE BEGIN Adv_Cancel_2 */

/* USER CODE END Adv_Cancel_2 */
  return;
 8006784:	bf00      	nop
 8006786:	bf00      	nop
}
 8006788:	3708      	adds	r7, #8
 800678a:	46bd      	mov	sp, r7
 800678c:	bd80      	pop	{r7, pc}
 800678e:	bf00      	nop
 8006790:	20000118 	.word	0x20000118

08006794 <Adv_Cancel_Req>:

static void Adv_Cancel_Req( void )
{
 8006794:	b580      	push	{r7, lr}
 8006796:	af00      	add	r7, sp, #0
/* USER CODE BEGIN Adv_Cancel_Req_1 */

/* USER CODE END Adv_Cancel_Req_1 */
  UTIL_SEQ_SetTask(1 << CFG_TASK_ADV_CANCEL_ID, CFG_SCH_PRIO_0);
 8006798:	2100      	movs	r1, #0
 800679a:	2001      	movs	r0, #1
 800679c:	f000 fb74 	bl	8006e88 <UTIL_SEQ_SetTask>
/* USER CODE BEGIN Adv_Cancel_Req_2 */

/* USER CODE END Adv_Cancel_Req_2 */
  return;
 80067a0:	bf00      	nop
}
 80067a2:	bd80      	pop	{r7, pc}

080067a4 <Switch_OFF_GPIO>:

static void Switch_OFF_GPIO(){
 80067a4:	b480      	push	{r7}
 80067a6:	af00      	add	r7, sp, #0
/* USER CODE BEGIN Switch_OFF_GPIO */

/* USER CODE END Switch_OFF_GPIO */
}
 80067a8:	bf00      	nop
 80067aa:	46bd      	mov	sp, r7
 80067ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067b0:	4770      	bx	lr

080067b2 <hci_notify_asynch_evt>:
 *
 * WRAP FUNCTIONS
 *
 *************************************************************/
void hci_notify_asynch_evt(void* pdata)
{
 80067b2:	b580      	push	{r7, lr}
 80067b4:	b082      	sub	sp, #8
 80067b6:	af00      	add	r7, sp, #0
 80067b8:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_SetTask(1 << CFG_TASK_HCI_ASYNCH_EVT_ID, CFG_SCH_PRIO_0);
 80067ba:	2100      	movs	r1, #0
 80067bc:	2002      	movs	r0, #2
 80067be:	f000 fb63 	bl	8006e88 <UTIL_SEQ_SetTask>
  return;
 80067c2:	bf00      	nop
}
 80067c4:	3708      	adds	r7, #8
 80067c6:	46bd      	mov	sp, r7
 80067c8:	bd80      	pop	{r7, pc}

080067ca <hci_cmd_resp_release>:

void hci_cmd_resp_release(uint32_t flag)
{
 80067ca:	b580      	push	{r7, lr}
 80067cc:	b082      	sub	sp, #8
 80067ce:	af00      	add	r7, sp, #0
 80067d0:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_SetEvt(1 << CFG_IDLEEVT_HCI_CMD_EVT_RSP_ID);
 80067d2:	2001      	movs	r0, #1
 80067d4:	f000 fbc4 	bl	8006f60 <UTIL_SEQ_SetEvt>
  return;
 80067d8:	bf00      	nop
}
 80067da:	3708      	adds	r7, #8
 80067dc:	46bd      	mov	sp, r7
 80067de:	bd80      	pop	{r7, pc}

080067e0 <hci_cmd_resp_wait>:

void hci_cmd_resp_wait(uint32_t timeout)
{
 80067e0:	b580      	push	{r7, lr}
 80067e2:	b082      	sub	sp, #8
 80067e4:	af00      	add	r7, sp, #0
 80067e6:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_WaitEvt(1 << CFG_IDLEEVT_HCI_CMD_EVT_RSP_ID);
 80067e8:	2001      	movs	r0, #1
 80067ea:	f000 fbd9 	bl	8006fa0 <UTIL_SEQ_WaitEvt>
  return;
 80067ee:	bf00      	nop
}
 80067f0:	3708      	adds	r7, #8
 80067f2:	46bd      	mov	sp, r7
 80067f4:	bd80      	pop	{r7, pc}

080067f6 <BLE_UserEvtRx>:

static void BLE_UserEvtRx( void * pPayload )
{
 80067f6:	b580      	push	{r7, lr}
 80067f8:	b084      	sub	sp, #16
 80067fa:	af00      	add	r7, sp, #0
 80067fc:	6078      	str	r0, [r7, #4]
  SVCCTL_UserEvtFlowStatus_t svctl_return_status;
  tHCI_UserEvtRxParam *pParam;

  pParam = (tHCI_UserEvtRxParam *)pPayload;
 80067fe:	687b      	ldr	r3, [r7, #4]
 8006800:	60fb      	str	r3, [r7, #12]

  svctl_return_status = SVCCTL_UserEvtRx((void *)&(pParam->pckt->evtserial));
 8006802:	68fb      	ldr	r3, [r7, #12]
 8006804:	685b      	ldr	r3, [r3, #4]
 8006806:	3308      	adds	r3, #8
 8006808:	4618      	mov	r0, r3
 800680a:	f7fe fe4b 	bl	80054a4 <SVCCTL_UserEvtRx>
 800680e:	4603      	mov	r3, r0
 8006810:	72fb      	strb	r3, [r7, #11]
  if (svctl_return_status != SVCCTL_UserEvtFlowDisable)
 8006812:	7afb      	ldrb	r3, [r7, #11]
 8006814:	2b00      	cmp	r3, #0
 8006816:	d003      	beq.n	8006820 <BLE_UserEvtRx+0x2a>
  {
    pParam->status = HCI_TL_UserEventFlow_Enable;
 8006818:	68fb      	ldr	r3, [r7, #12]
 800681a:	2201      	movs	r2, #1
 800681c:	701a      	strb	r2, [r3, #0]
  else
  {
    pParam->status = HCI_TL_UserEventFlow_Disable;
  }

  return;
 800681e:	e003      	b.n	8006828 <BLE_UserEvtRx+0x32>
    pParam->status = HCI_TL_UserEventFlow_Disable;
 8006820:	68fb      	ldr	r3, [r7, #12]
 8006822:	2200      	movs	r2, #0
 8006824:	701a      	strb	r2, [r3, #0]
  return;
 8006826:	bf00      	nop
}
 8006828:	3710      	adds	r7, #16
 800682a:	46bd      	mov	sp, r7
 800682c:	bd80      	pop	{r7, pc}

0800682e <BLE_StatusNot>:

static void BLE_StatusNot( HCI_TL_CmdStatus_t status )
{
 800682e:	b580      	push	{r7, lr}
 8006830:	b084      	sub	sp, #16
 8006832:	af00      	add	r7, sp, #0
 8006834:	4603      	mov	r3, r0
 8006836:	71fb      	strb	r3, [r7, #7]
  uint32_t task_id_list;
  switch (status)
 8006838:	79fb      	ldrb	r3, [r7, #7]
 800683a:	2b00      	cmp	r3, #0
 800683c:	d002      	beq.n	8006844 <BLE_StatusNot+0x16>
 800683e:	2b01      	cmp	r3, #1
 8006840:	d006      	beq.n	8006850 <BLE_StatusNot+0x22>
      UTIL_SEQ_ResumeTask(task_id_list);

      break;

    default:
      break;
 8006842:	e00b      	b.n	800685c <BLE_StatusNot+0x2e>
      task_id_list = (1 << CFG_LAST_TASK_ID_WITH_HCICMD) - 1;
 8006844:	2303      	movs	r3, #3
 8006846:	60fb      	str	r3, [r7, #12]
      UTIL_SEQ_PauseTask(task_id_list);
 8006848:	68f8      	ldr	r0, [r7, #12]
 800684a:	f000 fb49 	bl	8006ee0 <UTIL_SEQ_PauseTask>
      break;
 800684e:	e005      	b.n	800685c <BLE_StatusNot+0x2e>
      task_id_list = (1 << CFG_LAST_TASK_ID_WITH_HCICMD) - 1;
 8006850:	2303      	movs	r3, #3
 8006852:	60fb      	str	r3, [r7, #12]
      UTIL_SEQ_ResumeTask(task_id_list);
 8006854:	68f8      	ldr	r0, [r7, #12]
 8006856:	f000 fb63 	bl	8006f20 <UTIL_SEQ_ResumeTask>
      break;
 800685a:	bf00      	nop
  }
  return;
 800685c:	bf00      	nop
}
 800685e:	3710      	adds	r7, #16
 8006860:	46bd      	mov	sp, r7
 8006862:	bd80      	pop	{r7, pc}

08006864 <P2PS_STM_App_Notification>:

/* USER CODE END PFP */

/* Functions Definition ------------------------------------------------------*/
void P2PS_STM_App_Notification(P2PS_STM_App_Notification_evt_t *pNotification)
{
 8006864:	b480      	push	{r7}
 8006866:	b083      	sub	sp, #12
 8006868:	af00      	add	r7, sp, #0
 800686a:	6078      	str	r0, [r7, #4]
/* USER CODE BEGIN P2PS_STM_App_Notification_1 */

/* USER CODE END P2PS_STM_App_Notification_1 */
  switch(pNotification->P2P_Evt_Opcode)
 800686c:	687b      	ldr	r3, [r7, #4]
 800686e:	781b      	ldrb	r3, [r3, #0]
 8006870:	2b03      	cmp	r3, #3
 8006872:	d006      	beq.n	8006882 <P2PS_STM_App_Notification+0x1e>
 8006874:	2b03      	cmp	r3, #3
 8006876:	dc06      	bgt.n	8006886 <P2PS_STM_App_Notification+0x22>
 8006878:	2b00      	cmp	r3, #0
 800687a:	d006      	beq.n	800688a <P2PS_STM_App_Notification+0x26>
 800687c:	2b01      	cmp	r3, #1
 800687e:	d006      	beq.n	800688e <P2PS_STM_App_Notification+0x2a>

    default:
/* USER CODE BEGIN P2PS_STM_App_Notification_default */

/* USER CODE END P2PS_STM_App_Notification_default */
      break;
 8006880:	e001      	b.n	8006886 <P2PS_STM_App_Notification+0x22>
      break;
 8006882:	bf00      	nop
 8006884:	e004      	b.n	8006890 <P2PS_STM_App_Notification+0x2c>
      break;
 8006886:	bf00      	nop
 8006888:	e002      	b.n	8006890 <P2PS_STM_App_Notification+0x2c>
      break;
 800688a:	bf00      	nop
 800688c:	e000      	b.n	8006890 <P2PS_STM_App_Notification+0x2c>
      break;
 800688e:	bf00      	nop
  }
/* USER CODE BEGIN P2PS_STM_App_Notification_2 */

/* USER CODE END P2PS_STM_App_Notification_2 */
  return;
 8006890:	bf00      	nop
}
 8006892:	370c      	adds	r7, #12
 8006894:	46bd      	mov	sp, r7
 8006896:	f85d 7b04 	ldr.w	r7, [sp], #4
 800689a:	4770      	bx	lr

0800689c <P2PS_APP_Notification>:

void P2PS_APP_Notification(P2PS_APP_ConnHandle_Not_evt_t *pNotification)
{
 800689c:	b480      	push	{r7}
 800689e:	b083      	sub	sp, #12
 80068a0:	af00      	add	r7, sp, #0
 80068a2:	6078      	str	r0, [r7, #4]
/* USER CODE BEGIN P2PS_APP_Notification_1 */

/* USER CODE END P2PS_APP_Notification_1 */
  switch(pNotification->P2P_Evt_Opcode)
 80068a4:	687b      	ldr	r3, [r7, #4]
 80068a6:	781b      	ldrb	r3, [r3, #0]
 80068a8:	2b00      	cmp	r3, #0
 80068aa:	d002      	beq.n	80068b2 <P2PS_APP_Notification+0x16>
 80068ac:	2b01      	cmp	r3, #1
 80068ae:	d002      	beq.n	80068b6 <P2PS_APP_Notification+0x1a>

    default:
/* USER CODE BEGIN P2PS_APP_Notification_default */

/* USER CODE END P2PS_APP_Notification_default */
      break;
 80068b0:	e002      	b.n	80068b8 <P2PS_APP_Notification+0x1c>
    break;
 80068b2:	bf00      	nop
 80068b4:	e000      	b.n	80068b8 <P2PS_APP_Notification+0x1c>
    break;
 80068b6:	bf00      	nop
  }
/* USER CODE BEGIN P2PS_APP_Notification_2 */

/* USER CODE END P2PS_APP_Notification_2 */
  return;
 80068b8:	bf00      	nop
}
 80068ba:	370c      	adds	r7, #12
 80068bc:	46bd      	mov	sp, r7
 80068be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068c2:	4770      	bx	lr

080068c4 <P2PS_APP_Init>:

void P2PS_APP_Init(void)
{
 80068c4:	b480      	push	{r7}
 80068c6:	af00      	add	r7, sp, #0
/* USER CODE BEGIN P2PS_APP_Init */

/* USER CODE END P2PS_APP_Init */
  return;
 80068c8:	bf00      	nop
}
 80068ca:	46bd      	mov	sp, r7
 80068cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068d0:	4770      	bx	lr
	...

080068d4 <LL_PWR_EnableBootC2>:
{
 80068d4:	b480      	push	{r7}
 80068d6:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR4, PWR_CR4_C2BOOT);
 80068d8:	4b05      	ldr	r3, [pc, #20]	; (80068f0 <LL_PWR_EnableBootC2+0x1c>)
 80068da:	68db      	ldr	r3, [r3, #12]
 80068dc:	4a04      	ldr	r2, [pc, #16]	; (80068f0 <LL_PWR_EnableBootC2+0x1c>)
 80068de:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80068e2:	60d3      	str	r3, [r2, #12]
}
 80068e4:	bf00      	nop
 80068e6:	46bd      	mov	sp, r7
 80068e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068ec:	4770      	bx	lr
 80068ee:	bf00      	nop
 80068f0:	58000400 	.word	0x58000400

080068f4 <LL_C2_EXTI_EnableEvent_32_63>:
{
 80068f4:	b480      	push	{r7}
 80068f6:	b083      	sub	sp, #12
 80068f8:	af00      	add	r7, sp, #0
 80068fa:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->C2EMR2, ExtiLine);
 80068fc:	4b06      	ldr	r3, [pc, #24]	; (8006918 <LL_C2_EXTI_EnableEvent_32_63+0x24>)
 80068fe:	f8d3 20d4 	ldr.w	r2, [r3, #212]	; 0xd4
 8006902:	4905      	ldr	r1, [pc, #20]	; (8006918 <LL_C2_EXTI_EnableEvent_32_63+0x24>)
 8006904:	687b      	ldr	r3, [r7, #4]
 8006906:	4313      	orrs	r3, r2
 8006908:	f8c1 30d4 	str.w	r3, [r1, #212]	; 0xd4
}
 800690c:	bf00      	nop
 800690e:	370c      	adds	r7, #12
 8006910:	46bd      	mov	sp, r7
 8006912:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006916:	4770      	bx	lr
 8006918:	58000800 	.word	0x58000800

0800691c <LL_EXTI_EnableRisingTrig_32_63>:
  *         @arg @ref LL_EXTI_LINE_41
  *         (*) value not defined in all devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableRisingTrig_32_63(uint32_t ExtiLine)
{
 800691c:	b480      	push	{r7}
 800691e:	b083      	sub	sp, #12
 8006920:	af00      	add	r7, sp, #0
 8006922:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->RTSR2, ExtiLine);
 8006924:	4b05      	ldr	r3, [pc, #20]	; (800693c <LL_EXTI_EnableRisingTrig_32_63+0x20>)
 8006926:	6a1a      	ldr	r2, [r3, #32]
 8006928:	4904      	ldr	r1, [pc, #16]	; (800693c <LL_EXTI_EnableRisingTrig_32_63+0x20>)
 800692a:	687b      	ldr	r3, [r7, #4]
 800692c:	4313      	orrs	r3, r2
 800692e:	620b      	str	r3, [r1, #32]
}
 8006930:	bf00      	nop
 8006932:	370c      	adds	r7, #12
 8006934:	46bd      	mov	sp, r7
 8006936:	f85d 7b04 	ldr.w	r7, [sp], #4
 800693a:	4770      	bx	lr
 800693c:	58000800 	.word	0x58000800

08006940 <LL_AHB3_GRP1_EnableClock>:
{
 8006940:	b480      	push	{r7}
 8006942:	b085      	sub	sp, #20
 8006944:	af00      	add	r7, sp, #0
 8006946:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB3ENR, Periphs);
 8006948:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800694c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800694e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8006952:	687b      	ldr	r3, [r7, #4]
 8006954:	4313      	orrs	r3, r2
 8006956:	650b      	str	r3, [r1, #80]	; 0x50
  tmpreg = READ_BIT(RCC->AHB3ENR, Periphs);
 8006958:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800695c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800695e:	687b      	ldr	r3, [r7, #4]
 8006960:	4013      	ands	r3, r2
 8006962:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8006964:	68fb      	ldr	r3, [r7, #12]
}
 8006966:	bf00      	nop
 8006968:	3714      	adds	r7, #20
 800696a:	46bd      	mov	sp, r7
 800696c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006970:	4770      	bx	lr

08006972 <LL_C2_AHB3_GRP1_EnableClock>:
  *         @arg @ref LL_C2_AHB3_GRP1_PERIPH_IPCC
  *         @arg @ref LL_C2_AHB3_GRP1_PERIPH_FLASH
  * @retval None
  */
__STATIC_INLINE void LL_C2_AHB3_GRP1_EnableClock(uint32_t Periphs)
{
 8006972:	b480      	push	{r7}
 8006974:	b085      	sub	sp, #20
 8006976:	af00      	add	r7, sp, #0
 8006978:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->C2AHB3ENR, Periphs);
 800697a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800697e:	f8d3 2150 	ldr.w	r2, [r3, #336]	; 0x150
 8006982:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8006986:	687b      	ldr	r3, [r7, #4]
 8006988:	4313      	orrs	r3, r2
 800698a:	f8c1 3150 	str.w	r3, [r1, #336]	; 0x150
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->C2AHB3ENR, Periphs);
 800698e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006992:	f8d3 2150 	ldr.w	r2, [r3, #336]	; 0x150
 8006996:	687b      	ldr	r3, [r7, #4]
 8006998:	4013      	ands	r3, r2
 800699a:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800699c:	68fb      	ldr	r3, [r7, #12]
}
 800699e:	bf00      	nop
 80069a0:	3714      	adds	r7, #20
 80069a2:	46bd      	mov	sp, r7
 80069a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069a8:	4770      	bx	lr

080069aa <LL_C1_IPCC_EnableIT_TXF>:
{
 80069aa:	b480      	push	{r7}
 80069ac:	b083      	sub	sp, #12
 80069ae:	af00      	add	r7, sp, #0
 80069b0:	6078      	str	r0, [r7, #4]
  SET_BIT(IPCCx->C1CR, IPCC_C1CR_TXFIE);
 80069b2:	687b      	ldr	r3, [r7, #4]
 80069b4:	681b      	ldr	r3, [r3, #0]
 80069b6:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80069ba:	687b      	ldr	r3, [r7, #4]
 80069bc:	601a      	str	r2, [r3, #0]
}
 80069be:	bf00      	nop
 80069c0:	370c      	adds	r7, #12
 80069c2:	46bd      	mov	sp, r7
 80069c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069c8:	4770      	bx	lr

080069ca <LL_C1_IPCC_EnableIT_RXO>:
{
 80069ca:	b480      	push	{r7}
 80069cc:	b083      	sub	sp, #12
 80069ce:	af00      	add	r7, sp, #0
 80069d0:	6078      	str	r0, [r7, #4]
  SET_BIT(IPCCx->C1CR, IPCC_C1CR_RXOIE);
 80069d2:	687b      	ldr	r3, [r7, #4]
 80069d4:	681b      	ldr	r3, [r3, #0]
 80069d6:	f043 0201 	orr.w	r2, r3, #1
 80069da:	687b      	ldr	r3, [r7, #4]
 80069dc:	601a      	str	r2, [r3, #0]
}
 80069de:	bf00      	nop
 80069e0:	370c      	adds	r7, #12
 80069e2:	46bd      	mov	sp, r7
 80069e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069e8:	4770      	bx	lr

080069ea <LL_C1_IPCC_EnableTransmitChannel>:
{
 80069ea:	b480      	push	{r7}
 80069ec:	b083      	sub	sp, #12
 80069ee:	af00      	add	r7, sp, #0
 80069f0:	6078      	str	r0, [r7, #4]
 80069f2:	6039      	str	r1, [r7, #0]
  CLEAR_BIT(IPCCx->C1MR, Channel << IPCC_C1MR_CH1FM_Pos);
 80069f4:	687b      	ldr	r3, [r7, #4]
 80069f6:	685a      	ldr	r2, [r3, #4]
 80069f8:	683b      	ldr	r3, [r7, #0]
 80069fa:	041b      	lsls	r3, r3, #16
 80069fc:	43db      	mvns	r3, r3
 80069fe:	401a      	ands	r2, r3
 8006a00:	687b      	ldr	r3, [r7, #4]
 8006a02:	605a      	str	r2, [r3, #4]
}
 8006a04:	bf00      	nop
 8006a06:	370c      	adds	r7, #12
 8006a08:	46bd      	mov	sp, r7
 8006a0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a0e:	4770      	bx	lr

08006a10 <LL_C1_IPCC_EnableReceiveChannel>:
{
 8006a10:	b480      	push	{r7}
 8006a12:	b083      	sub	sp, #12
 8006a14:	af00      	add	r7, sp, #0
 8006a16:	6078      	str	r0, [r7, #4]
 8006a18:	6039      	str	r1, [r7, #0]
  CLEAR_BIT(IPCCx->C1MR, Channel);
 8006a1a:	687b      	ldr	r3, [r7, #4]
 8006a1c:	685a      	ldr	r2, [r3, #4]
 8006a1e:	683b      	ldr	r3, [r7, #0]
 8006a20:	43db      	mvns	r3, r3
 8006a22:	401a      	ands	r2, r3
 8006a24:	687b      	ldr	r3, [r7, #4]
 8006a26:	605a      	str	r2, [r3, #4]
}
 8006a28:	bf00      	nop
 8006a2a:	370c      	adds	r7, #12
 8006a2c:	46bd      	mov	sp, r7
 8006a2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a32:	4770      	bx	lr

08006a34 <LL_C1_IPCC_SetFlag_CHx>:
{
 8006a34:	b480      	push	{r7}
 8006a36:	b083      	sub	sp, #12
 8006a38:	af00      	add	r7, sp, #0
 8006a3a:	6078      	str	r0, [r7, #4]
 8006a3c:	6039      	str	r1, [r7, #0]
  WRITE_REG(IPCCx->C1SCR, Channel << IPCC_C1SCR_CH1S_Pos);
 8006a3e:	683b      	ldr	r3, [r7, #0]
 8006a40:	041a      	lsls	r2, r3, #16
 8006a42:	687b      	ldr	r3, [r7, #4]
 8006a44:	609a      	str	r2, [r3, #8]
}
 8006a46:	bf00      	nop
 8006a48:	370c      	adds	r7, #12
 8006a4a:	46bd      	mov	sp, r7
 8006a4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a50:	4770      	bx	lr

08006a52 <LL_C1_IPCC_IsActiveFlag_CHx>:
{
 8006a52:	b480      	push	{r7}
 8006a54:	b083      	sub	sp, #12
 8006a56:	af00      	add	r7, sp, #0
 8006a58:	6078      	str	r0, [r7, #4]
 8006a5a:	6039      	str	r1, [r7, #0]
  return ((READ_BIT(IPCCx->C1TOC2SR, Channel) == (Channel)) ? 1UL : 0UL);
 8006a5c:	687b      	ldr	r3, [r7, #4]
 8006a5e:	68da      	ldr	r2, [r3, #12]
 8006a60:	683b      	ldr	r3, [r7, #0]
 8006a62:	4013      	ands	r3, r2
 8006a64:	683a      	ldr	r2, [r7, #0]
 8006a66:	429a      	cmp	r2, r3
 8006a68:	d101      	bne.n	8006a6e <LL_C1_IPCC_IsActiveFlag_CHx+0x1c>
 8006a6a:	2301      	movs	r3, #1
 8006a6c:	e000      	b.n	8006a70 <LL_C1_IPCC_IsActiveFlag_CHx+0x1e>
 8006a6e:	2300      	movs	r3, #0
}
 8006a70:	4618      	mov	r0, r3
 8006a72:	370c      	adds	r7, #12
 8006a74:	46bd      	mov	sp, r7
 8006a76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a7a:	4770      	bx	lr

08006a7c <HW_IPCC_Enable>:
}
/******************************************************************************
 * GENERAL
 ******************************************************************************/
void HW_IPCC_Enable( void )
{
 8006a7c:	b580      	push	{r7, lr}
 8006a7e:	af00      	add	r7, sp, #0
  /**
  * Such as IPCC IP available to the CPU2, it is required to keep the IPCC clock running
    when FUS is running on CPU2 and CPU1 enters deep sleep mode
  */
  LL_C2_AHB3_GRP1_EnableClock(LL_C2_AHB3_GRP1_PERIPH_IPCC);
 8006a80:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8006a84:	f7ff ff75 	bl	8006972 <LL_C2_AHB3_GRP1_EnableClock>

   /**
   * When the device is out of standby, it is required to use the EXTI mechanism to wakeup CPU2
   */
  LL_C2_EXTI_EnableEvent_32_63( LL_EXTI_LINE_41 );
 8006a88:	f44f 7000 	mov.w	r0, #512	; 0x200
 8006a8c:	f7ff ff32 	bl	80068f4 <LL_C2_EXTI_EnableEvent_32_63>
  LL_EXTI_EnableRisingTrig_32_63( LL_EXTI_LINE_41 );
 8006a90:	f44f 7000 	mov.w	r0, #512	; 0x200
 8006a94:	f7ff ff42 	bl	800691c <LL_EXTI_EnableRisingTrig_32_63>
   * When the CPU2 receives that command, it waits for its event input to be set to restart the CPU2 firmware.
   * This is required because once C2BOOT has been set once, a clear/set on C2BOOT has no effect.
   * When SHCI_C2_Reinit( ) is not called, generating an event to the CPU2 does not have any effect
   * So, by default, the application shall both set the event flag and set the C2BOOT bit.
   */
  __SEV( );       /* Set the internal event flag and send an event to the CPU2 */
 8006a98:	bf40      	sev
  __WFE( );       /* Clear the internal event flag */
 8006a9a:	bf20      	wfe
  LL_PWR_EnableBootC2( );
 8006a9c:	f7ff ff1a 	bl	80068d4 <LL_PWR_EnableBootC2>

  return;
 8006aa0:	bf00      	nop
}
 8006aa2:	bd80      	pop	{r7, pc}

08006aa4 <HW_IPCC_Init>:

void HW_IPCC_Init( void )
{
 8006aa4:	b580      	push	{r7, lr}
 8006aa6:	af00      	add	r7, sp, #0
  LL_AHB3_GRP1_EnableClock( LL_AHB3_GRP1_PERIPH_IPCC );
 8006aa8:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8006aac:	f7ff ff48 	bl	8006940 <LL_AHB3_GRP1_EnableClock>

  LL_C1_IPCC_EnableIT_RXO( IPCC );
 8006ab0:	4806      	ldr	r0, [pc, #24]	; (8006acc <HW_IPCC_Init+0x28>)
 8006ab2:	f7ff ff8a 	bl	80069ca <LL_C1_IPCC_EnableIT_RXO>
  LL_C1_IPCC_EnableIT_TXF( IPCC );
 8006ab6:	4805      	ldr	r0, [pc, #20]	; (8006acc <HW_IPCC_Init+0x28>)
 8006ab8:	f7ff ff77 	bl	80069aa <LL_C1_IPCC_EnableIT_TXF>

  HAL_NVIC_EnableIRQ(IPCC_C1_RX_IRQn);
 8006abc:	202c      	movs	r0, #44	; 0x2c
 8006abe:	f7fb fab8 	bl	8002032 <HAL_NVIC_EnableIRQ>
  HAL_NVIC_EnableIRQ(IPCC_C1_TX_IRQn);
 8006ac2:	202d      	movs	r0, #45	; 0x2d
 8006ac4:	f7fb fab5 	bl	8002032 <HAL_NVIC_EnableIRQ>

  return;
 8006ac8:	bf00      	nop
}
 8006aca:	bd80      	pop	{r7, pc}
 8006acc:	58000c00 	.word	0x58000c00

08006ad0 <HW_IPCC_BLE_Init>:

/******************************************************************************
 * BLE
 ******************************************************************************/
void HW_IPCC_BLE_Init( void )
{
 8006ad0:	b580      	push	{r7, lr}
 8006ad2:	af00      	add	r7, sp, #0
  LL_C1_IPCC_EnableReceiveChannel( IPCC, HW_IPCC_BLE_EVENT_CHANNEL );
 8006ad4:	2101      	movs	r1, #1
 8006ad6:	4802      	ldr	r0, [pc, #8]	; (8006ae0 <HW_IPCC_BLE_Init+0x10>)
 8006ad8:	f7ff ff9a 	bl	8006a10 <LL_C1_IPCC_EnableReceiveChannel>

  return;
 8006adc:	bf00      	nop
}
 8006ade:	bd80      	pop	{r7, pc}
 8006ae0:	58000c00 	.word	0x58000c00

08006ae4 <HW_IPCC_BLE_SendCmd>:

void HW_IPCC_BLE_SendCmd( void )
{
 8006ae4:	b580      	push	{r7, lr}
 8006ae6:	af00      	add	r7, sp, #0
  LL_C1_IPCC_SetFlag_CHx( IPCC, HW_IPCC_BLE_CMD_CHANNEL );
 8006ae8:	2101      	movs	r1, #1
 8006aea:	4802      	ldr	r0, [pc, #8]	; (8006af4 <HW_IPCC_BLE_SendCmd+0x10>)
 8006aec:	f7ff ffa2 	bl	8006a34 <LL_C1_IPCC_SetFlag_CHx>

  return;
 8006af0:	bf00      	nop
}
 8006af2:	bd80      	pop	{r7, pc}
 8006af4:	58000c00 	.word	0x58000c00

08006af8 <HW_IPCC_SYS_Init>:

/******************************************************************************
 * SYSTEM
 ******************************************************************************/
void HW_IPCC_SYS_Init( void )
{
 8006af8:	b580      	push	{r7, lr}
 8006afa:	af00      	add	r7, sp, #0
  LL_C1_IPCC_EnableReceiveChannel( IPCC, HW_IPCC_SYSTEM_EVENT_CHANNEL );
 8006afc:	2102      	movs	r1, #2
 8006afe:	4802      	ldr	r0, [pc, #8]	; (8006b08 <HW_IPCC_SYS_Init+0x10>)
 8006b00:	f7ff ff86 	bl	8006a10 <LL_C1_IPCC_EnableReceiveChannel>

  return;
 8006b04:	bf00      	nop
}
 8006b06:	bd80      	pop	{r7, pc}
 8006b08:	58000c00 	.word	0x58000c00

08006b0c <HW_IPCC_SYS_SendCmd>:

void HW_IPCC_SYS_SendCmd( void )
{
 8006b0c:	b580      	push	{r7, lr}
 8006b0e:	af00      	add	r7, sp, #0
  LL_C1_IPCC_SetFlag_CHx( IPCC, HW_IPCC_SYSTEM_CMD_RSP_CHANNEL );
 8006b10:	2102      	movs	r1, #2
 8006b12:	4804      	ldr	r0, [pc, #16]	; (8006b24 <HW_IPCC_SYS_SendCmd+0x18>)
 8006b14:	f7ff ff8e 	bl	8006a34 <LL_C1_IPCC_SetFlag_CHx>
  LL_C1_IPCC_EnableTransmitChannel( IPCC, HW_IPCC_SYSTEM_CMD_RSP_CHANNEL );
 8006b18:	2102      	movs	r1, #2
 8006b1a:	4802      	ldr	r0, [pc, #8]	; (8006b24 <HW_IPCC_SYS_SendCmd+0x18>)
 8006b1c:	f7ff ff65 	bl	80069ea <LL_C1_IPCC_EnableTransmitChannel>

  return;
 8006b20:	bf00      	nop
}
 8006b22:	bd80      	pop	{r7, pc}
 8006b24:	58000c00 	.word	0x58000c00

08006b28 <HW_IPCC_MM_SendFreeBuf>:

/******************************************************************************
 * MEMORY MANAGER
 ******************************************************************************/
void HW_IPCC_MM_SendFreeBuf( void (*cb)( void ) )
{
 8006b28:	b580      	push	{r7, lr}
 8006b2a:	b082      	sub	sp, #8
 8006b2c:	af00      	add	r7, sp, #0
 8006b2e:	6078      	str	r0, [r7, #4]
  if ( LL_C1_IPCC_IsActiveFlag_CHx( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL ) )
 8006b30:	2108      	movs	r1, #8
 8006b32:	480c      	ldr	r0, [pc, #48]	; (8006b64 <HW_IPCC_MM_SendFreeBuf+0x3c>)
 8006b34:	f7ff ff8d 	bl	8006a52 <LL_C1_IPCC_IsActiveFlag_CHx>
 8006b38:	4603      	mov	r3, r0
 8006b3a:	2b00      	cmp	r3, #0
 8006b3c:	d007      	beq.n	8006b4e <HW_IPCC_MM_SendFreeBuf+0x26>
  {
    FreeBufCb = cb;
 8006b3e:	4a0a      	ldr	r2, [pc, #40]	; (8006b68 <HW_IPCC_MM_SendFreeBuf+0x40>)
 8006b40:	687b      	ldr	r3, [r7, #4]
 8006b42:	6013      	str	r3, [r2, #0]
    LL_C1_IPCC_EnableTransmitChannel( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL );
 8006b44:	2108      	movs	r1, #8
 8006b46:	4807      	ldr	r0, [pc, #28]	; (8006b64 <HW_IPCC_MM_SendFreeBuf+0x3c>)
 8006b48:	f7ff ff4f 	bl	80069ea <LL_C1_IPCC_EnableTransmitChannel>
    cb();

    LL_C1_IPCC_SetFlag_CHx( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL );
  }

  return;
 8006b4c:	e006      	b.n	8006b5c <HW_IPCC_MM_SendFreeBuf+0x34>
    cb();
 8006b4e:	687b      	ldr	r3, [r7, #4]
 8006b50:	4798      	blx	r3
    LL_C1_IPCC_SetFlag_CHx( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL );
 8006b52:	2108      	movs	r1, #8
 8006b54:	4803      	ldr	r0, [pc, #12]	; (8006b64 <HW_IPCC_MM_SendFreeBuf+0x3c>)
 8006b56:	f7ff ff6d 	bl	8006a34 <LL_C1_IPCC_SetFlag_CHx>
  return;
 8006b5a:	bf00      	nop
}
 8006b5c:	3708      	adds	r7, #8
 8006b5e:	46bd      	mov	sp, r7
 8006b60:	bd80      	pop	{r7, pc}
 8006b62:	bf00      	nop
 8006b64:	58000c00 	.word	0x58000c00
 8006b68:	2000023c 	.word	0x2000023c

08006b6c <HW_IPCC_TRACES_Init>:

/******************************************************************************
 * TRACES
 ******************************************************************************/
void HW_IPCC_TRACES_Init( void )
{
 8006b6c:	b580      	push	{r7, lr}
 8006b6e:	af00      	add	r7, sp, #0
  LL_C1_IPCC_EnableReceiveChannel( IPCC, HW_IPCC_TRACES_CHANNEL );
 8006b70:	2108      	movs	r1, #8
 8006b72:	4802      	ldr	r0, [pc, #8]	; (8006b7c <HW_IPCC_TRACES_Init+0x10>)
 8006b74:	f7ff ff4c 	bl	8006a10 <LL_C1_IPCC_EnableReceiveChannel>

  return;
 8006b78:	bf00      	nop
}
 8006b7a:	bd80      	pop	{r7, pc}
 8006b7c:	58000c00 	.word	0x58000c00

08006b80 <UTIL_LPM_Init>:

/** @addtogroup TINY_LPM_Exported_function
  * @{
  */
void UTIL_LPM_Init( void )
{
 8006b80:	b480      	push	{r7}
 8006b82:	af00      	add	r7, sp, #0
  StopModeDisable = UTIL_LPM_NO_BIT_SET;
 8006b84:	4b05      	ldr	r3, [pc, #20]	; (8006b9c <UTIL_LPM_Init+0x1c>)
 8006b86:	2200      	movs	r2, #0
 8006b88:	601a      	str	r2, [r3, #0]
  OffModeDisable = UTIL_LPM_NO_BIT_SET;
 8006b8a:	4b05      	ldr	r3, [pc, #20]	; (8006ba0 <UTIL_LPM_Init+0x20>)
 8006b8c:	2200      	movs	r2, #0
 8006b8e:	601a      	str	r2, [r3, #0]
  UTIL_LPM_INIT_CRITICAL_SECTION( );
}
 8006b90:	bf00      	nop
 8006b92:	46bd      	mov	sp, r7
 8006b94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b98:	4770      	bx	lr
 8006b9a:	bf00      	nop
 8006b9c:	20000240 	.word	0x20000240
 8006ba0:	20000244 	.word	0x20000244

08006ba4 <UTIL_LPM_SetOffMode>:
  
  UTIL_LPM_EXIT_CRITICAL_SECTION( );
}

void UTIL_LPM_SetOffMode( UTIL_LPM_bm_t lpm_id_bm, UTIL_LPM_State_t state )
{
 8006ba4:	b480      	push	{r7}
 8006ba6:	b087      	sub	sp, #28
 8006ba8:	af00      	add	r7, sp, #0
 8006baa:	6078      	str	r0, [r7, #4]
 8006bac:	460b      	mov	r3, r1
 8006bae:	70fb      	strb	r3, [r7, #3]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006bb0:	f3ef 8310 	mrs	r3, PRIMASK
 8006bb4:	613b      	str	r3, [r7, #16]
  return(result);
 8006bb6:	693b      	ldr	r3, [r7, #16]
  UTIL_LPM_ENTER_CRITICAL_SECTION( );
 8006bb8:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8006bba:	b672      	cpsid	i
}
 8006bbc:	bf00      	nop
  
  switch(state)
 8006bbe:	78fb      	ldrb	r3, [r7, #3]
 8006bc0:	2b00      	cmp	r3, #0
 8006bc2:	d008      	beq.n	8006bd6 <UTIL_LPM_SetOffMode+0x32>
 8006bc4:	2b01      	cmp	r3, #1
 8006bc6:	d10e      	bne.n	8006be6 <UTIL_LPM_SetOffMode+0x42>
  {
  case UTIL_LPM_DISABLE:
    {
      OffModeDisable |= lpm_id_bm;
 8006bc8:	4b0d      	ldr	r3, [pc, #52]	; (8006c00 <UTIL_LPM_SetOffMode+0x5c>)
 8006bca:	681a      	ldr	r2, [r3, #0]
 8006bcc:	687b      	ldr	r3, [r7, #4]
 8006bce:	4313      	orrs	r3, r2
 8006bd0:	4a0b      	ldr	r2, [pc, #44]	; (8006c00 <UTIL_LPM_SetOffMode+0x5c>)
 8006bd2:	6013      	str	r3, [r2, #0]
      break;
 8006bd4:	e008      	b.n	8006be8 <UTIL_LPM_SetOffMode+0x44>
    }
  case UTIL_LPM_ENABLE:
    {
      OffModeDisable &= ( ~lpm_id_bm );
 8006bd6:	687b      	ldr	r3, [r7, #4]
 8006bd8:	43da      	mvns	r2, r3
 8006bda:	4b09      	ldr	r3, [pc, #36]	; (8006c00 <UTIL_LPM_SetOffMode+0x5c>)
 8006bdc:	681b      	ldr	r3, [r3, #0]
 8006bde:	4013      	ands	r3, r2
 8006be0:	4a07      	ldr	r2, [pc, #28]	; (8006c00 <UTIL_LPM_SetOffMode+0x5c>)
 8006be2:	6013      	str	r3, [r2, #0]
      break;
 8006be4:	e000      	b.n	8006be8 <UTIL_LPM_SetOffMode+0x44>
    }
  default :
    {
      break;
 8006be6:	bf00      	nop
 8006be8:	697b      	ldr	r3, [r7, #20]
 8006bea:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006bec:	68fb      	ldr	r3, [r7, #12]
 8006bee:	f383 8810 	msr	PRIMASK, r3
}
 8006bf2:	bf00      	nop
    }
  }
  
  UTIL_LPM_EXIT_CRITICAL_SECTION( );
}
 8006bf4:	bf00      	nop
 8006bf6:	371c      	adds	r7, #28
 8006bf8:	46bd      	mov	sp, r7
 8006bfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bfe:	4770      	bx	lr
 8006c00:	20000244 	.word	0x20000244

08006c04 <UTIL_LPM_EnterLowPower>:

  return mode_selected;
}

void UTIL_LPM_EnterLowPower( void )
{
 8006c04:	b580      	push	{r7, lr}
 8006c06:	b084      	sub	sp, #16
 8006c08:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006c0a:	f3ef 8310 	mrs	r3, PRIMASK
 8006c0e:	60bb      	str	r3, [r7, #8]
  return(result);
 8006c10:	68bb      	ldr	r3, [r7, #8]
  UTIL_LPM_ENTER_CRITICAL_SECTION_ELP( );
 8006c12:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("cpsid i" : : : "memory");
 8006c14:	b672      	cpsid	i
}
 8006c16:	bf00      	nop

  if( StopModeDisable != UTIL_LPM_NO_BIT_SET )
 8006c18:	4b12      	ldr	r3, [pc, #72]	; (8006c64 <UTIL_LPM_EnterLowPower+0x60>)
 8006c1a:	681b      	ldr	r3, [r3, #0]
 8006c1c:	2b00      	cmp	r3, #0
 8006c1e:	d006      	beq.n	8006c2e <UTIL_LPM_EnterLowPower+0x2a>
  {
    /**
     * At least one user disallows Stop Mode
     * SLEEP mode is required
     */
      UTIL_PowerDriver.EnterSleepMode( );
 8006c20:	4b11      	ldr	r3, [pc, #68]	; (8006c68 <UTIL_LPM_EnterLowPower+0x64>)
 8006c22:	681b      	ldr	r3, [r3, #0]
 8006c24:	4798      	blx	r3
      UTIL_PowerDriver.ExitSleepMode( );
 8006c26:	4b10      	ldr	r3, [pc, #64]	; (8006c68 <UTIL_LPM_EnterLowPower+0x64>)
 8006c28:	685b      	ldr	r3, [r3, #4]
 8006c2a:	4798      	blx	r3
 8006c2c:	e010      	b.n	8006c50 <UTIL_LPM_EnterLowPower+0x4c>
  }
  else
  { 
    if( OffModeDisable != UTIL_LPM_NO_BIT_SET )
 8006c2e:	4b0f      	ldr	r3, [pc, #60]	; (8006c6c <UTIL_LPM_EnterLowPower+0x68>)
 8006c30:	681b      	ldr	r3, [r3, #0]
 8006c32:	2b00      	cmp	r3, #0
 8006c34:	d006      	beq.n	8006c44 <UTIL_LPM_EnterLowPower+0x40>
    {
      /**
       * At least one user disallows Off Mode
       * STOP mode is required
       */
        UTIL_PowerDriver.EnterStopMode( );
 8006c36:	4b0c      	ldr	r3, [pc, #48]	; (8006c68 <UTIL_LPM_EnterLowPower+0x64>)
 8006c38:	689b      	ldr	r3, [r3, #8]
 8006c3a:	4798      	blx	r3
        UTIL_PowerDriver.ExitStopMode( );
 8006c3c:	4b0a      	ldr	r3, [pc, #40]	; (8006c68 <UTIL_LPM_EnterLowPower+0x64>)
 8006c3e:	68db      	ldr	r3, [r3, #12]
 8006c40:	4798      	blx	r3
 8006c42:	e005      	b.n	8006c50 <UTIL_LPM_EnterLowPower+0x4c>
    else
    {
      /**
       * OFF mode is required
       */
      UTIL_PowerDriver.EnterOffMode( );
 8006c44:	4b08      	ldr	r3, [pc, #32]	; (8006c68 <UTIL_LPM_EnterLowPower+0x64>)
 8006c46:	691b      	ldr	r3, [r3, #16]
 8006c48:	4798      	blx	r3
      UTIL_PowerDriver.ExitOffMode( );
 8006c4a:	4b07      	ldr	r3, [pc, #28]	; (8006c68 <UTIL_LPM_EnterLowPower+0x64>)
 8006c4c:	695b      	ldr	r3, [r3, #20]
 8006c4e:	4798      	blx	r3
 8006c50:	68fb      	ldr	r3, [r7, #12]
 8006c52:	607b      	str	r3, [r7, #4]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006c54:	687b      	ldr	r3, [r7, #4]
 8006c56:	f383 8810 	msr	PRIMASK, r3
}
 8006c5a:	bf00      	nop
    }
  }
  
  UTIL_LPM_EXIT_CRITICAL_SECTION_ELP( );
}
 8006c5c:	bf00      	nop
 8006c5e:	3710      	adds	r7, #16
 8006c60:	46bd      	mov	sp, r7
 8006c62:	bd80      	pop	{r7, pc}
 8006c64:	20000240 	.word	0x20000240
 8006c68:	0800730c 	.word	0x0800730c
 8006c6c:	20000244 	.word	0x20000244

08006c70 <UTIL_SEQ_Run>:
 * This function can be nested.
 * That is the reason why many variables that are used only in that function are declared static.
 * Note: These variables could have been declared static in the function.
 */
void UTIL_SEQ_Run( UTIL_SEQ_bm_t Mask_bm )
{
 8006c70:	b580      	push	{r7, lr}
 8006c72:	b08c      	sub	sp, #48	; 0x30
 8006c74:	af00      	add	r7, sp, #0
 8006c76:	6078      	str	r0, [r7, #4]
  /**
   *  When this function is nested, the mask to be applied cannot be larger than the first call
   *  The mask is always getting smaller and smaller
   *  A copy is made of the mask set by UTIL_SEQ_Run() in case it is called again in the task
   */
  super_mask_backup = SuperMask;
 8006c78:	4b6a      	ldr	r3, [pc, #424]	; (8006e24 <UTIL_SEQ_Run+0x1b4>)
 8006c7a:	681b      	ldr	r3, [r3, #0]
 8006c7c:	627b      	str	r3, [r7, #36]	; 0x24
  SuperMask &= Mask_bm;
 8006c7e:	4b69      	ldr	r3, [pc, #420]	; (8006e24 <UTIL_SEQ_Run+0x1b4>)
 8006c80:	681a      	ldr	r2, [r3, #0]
 8006c82:	687b      	ldr	r3, [r7, #4]
 8006c84:	4013      	ands	r3, r2
 8006c86:	4a67      	ldr	r2, [pc, #412]	; (8006e24 <UTIL_SEQ_Run+0x1b4>)
 8006c88:	6013      	str	r3, [r2, #0]
   * TaskMask that comes from UTIL_SEQ_PauseTask() / UTIL_SEQ_ResumeTask
   * SuperMask that comes from UTIL_SEQ_Run
   * If the waited event is there, exit from  UTIL_SEQ_Run() to return to the
   * waiting task
   */
  local_taskset = TaskSet;
 8006c8a:	4b67      	ldr	r3, [pc, #412]	; (8006e28 <UTIL_SEQ_Run+0x1b8>)
 8006c8c:	681b      	ldr	r3, [r3, #0]
 8006c8e:	62bb      	str	r3, [r7, #40]	; 0x28
  while(((local_taskset & TaskMask & SuperMask) != 0U) && ((EvtSet & EvtWaited)==0U))
 8006c90:	e086      	b.n	8006da0 <UTIL_SEQ_Run+0x130>
  {
    counter = 0U;
 8006c92:	2300      	movs	r3, #0
 8006c94:	62fb      	str	r3, [r7, #44]	; 0x2c
    /**
     * When a flag is set, the associated bit is set in TaskPrio[counter].priority mask depending
     * on the priority parameter given from UTIL_SEQ_SetTask()
     * The while loop is looking for a flag set from the highest priority maskr to the lower
     */
    while((TaskPrio[counter].priority & TaskMask & SuperMask)== 0U)
 8006c96:	e002      	b.n	8006c9e <UTIL_SEQ_Run+0x2e>
    {
      counter++;
 8006c98:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006c9a:	3301      	adds	r3, #1
 8006c9c:	62fb      	str	r3, [r7, #44]	; 0x2c
    while((TaskPrio[counter].priority & TaskMask & SuperMask)== 0U)
 8006c9e:	4a63      	ldr	r2, [pc, #396]	; (8006e2c <UTIL_SEQ_Run+0x1bc>)
 8006ca0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006ca2:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 8006ca6:	4b62      	ldr	r3, [pc, #392]	; (8006e30 <UTIL_SEQ_Run+0x1c0>)
 8006ca8:	681b      	ldr	r3, [r3, #0]
 8006caa:	401a      	ands	r2, r3
 8006cac:	4b5d      	ldr	r3, [pc, #372]	; (8006e24 <UTIL_SEQ_Run+0x1b4>)
 8006cae:	681b      	ldr	r3, [r3, #0]
 8006cb0:	4013      	ands	r3, r2
 8006cb2:	2b00      	cmp	r3, #0
 8006cb4:	d0f0      	beq.n	8006c98 <UTIL_SEQ_Run+0x28>
    }

    current_task_set = TaskPrio[counter].priority & TaskMask & SuperMask;
 8006cb6:	4a5d      	ldr	r2, [pc, #372]	; (8006e2c <UTIL_SEQ_Run+0x1bc>)
 8006cb8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006cba:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 8006cbe:	4b5c      	ldr	r3, [pc, #368]	; (8006e30 <UTIL_SEQ_Run+0x1c0>)
 8006cc0:	681b      	ldr	r3, [r3, #0]
 8006cc2:	401a      	ands	r2, r3
 8006cc4:	4b57      	ldr	r3, [pc, #348]	; (8006e24 <UTIL_SEQ_Run+0x1b4>)
 8006cc6:	681b      	ldr	r3, [r3, #0]
 8006cc8:	4013      	ands	r3, r2
 8006cca:	623b      	str	r3, [r7, #32]
     * so that the second one can be executed.
     * Note that the first flag is not removed from the list of pending task but just masked by the round_robin mask
     *
     * In the check below, the round_robin mask is reitialize in case all pending tasks haven been executed at least once
     */
    if ((TaskPrio[counter].round_robin & current_task_set) == 0U)
 8006ccc:	4a57      	ldr	r2, [pc, #348]	; (8006e2c <UTIL_SEQ_Run+0x1bc>)
 8006cce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006cd0:	00db      	lsls	r3, r3, #3
 8006cd2:	4413      	add	r3, r2
 8006cd4:	685a      	ldr	r2, [r3, #4]
 8006cd6:	6a3b      	ldr	r3, [r7, #32]
 8006cd8:	4013      	ands	r3, r2
 8006cda:	2b00      	cmp	r3, #0
 8006cdc:	d106      	bne.n	8006cec <UTIL_SEQ_Run+0x7c>
    {
      TaskPrio[counter].round_robin = UTIL_SEQ_ALL_BIT_SET;
 8006cde:	4a53      	ldr	r2, [pc, #332]	; (8006e2c <UTIL_SEQ_Run+0x1bc>)
 8006ce0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006ce2:	00db      	lsls	r3, r3, #3
 8006ce4:	4413      	add	r3, r2
 8006ce6:	f04f 32ff 	mov.w	r2, #4294967295
 8006cea:	605a      	str	r2, [r3, #4]

    /** Read the flag index of the task to be executed
	 *  Once the index is read, the associated task will be executed even though a higher priority stack is requested
	 *  before task execution.
	 */
    CurrentTaskIdx = (SEQ_BitPosition(current_task_set & TaskPrio[counter].round_robin));
 8006cec:	4a4f      	ldr	r2, [pc, #316]	; (8006e2c <UTIL_SEQ_Run+0x1bc>)
 8006cee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006cf0:	00db      	lsls	r3, r3, #3
 8006cf2:	4413      	add	r3, r2
 8006cf4:	685a      	ldr	r2, [r3, #4]
 8006cf6:	6a3b      	ldr	r3, [r7, #32]
 8006cf8:	4013      	ands	r3, r2
 8006cfa:	4618      	mov	r0, r3
 8006cfc:	f000 f9ac 	bl	8007058 <SEQ_BitPosition>
 8006d00:	4603      	mov	r3, r0
 8006d02:	461a      	mov	r2, r3
 8006d04:	4b4b      	ldr	r3, [pc, #300]	; (8006e34 <UTIL_SEQ_Run+0x1c4>)
 8006d06:	601a      	str	r2, [r3, #0]

    /** remove from the roun_robin mask the task that has been selected to be executed */
    TaskPrio[counter].round_robin &= ~(1U << CurrentTaskIdx);
 8006d08:	4a48      	ldr	r2, [pc, #288]	; (8006e2c <UTIL_SEQ_Run+0x1bc>)
 8006d0a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006d0c:	00db      	lsls	r3, r3, #3
 8006d0e:	4413      	add	r3, r2
 8006d10:	685a      	ldr	r2, [r3, #4]
 8006d12:	4b48      	ldr	r3, [pc, #288]	; (8006e34 <UTIL_SEQ_Run+0x1c4>)
 8006d14:	681b      	ldr	r3, [r3, #0]
 8006d16:	2101      	movs	r1, #1
 8006d18:	fa01 f303 	lsl.w	r3, r1, r3
 8006d1c:	43db      	mvns	r3, r3
 8006d1e:	401a      	ands	r2, r3
 8006d20:	4942      	ldr	r1, [pc, #264]	; (8006e2c <UTIL_SEQ_Run+0x1bc>)
 8006d22:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006d24:	00db      	lsls	r3, r3, #3
 8006d26:	440b      	add	r3, r1
 8006d28:	605a      	str	r2, [r3, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006d2a:	f3ef 8310 	mrs	r3, PRIMASK
 8006d2e:	617b      	str	r3, [r7, #20]
  return(result);
 8006d30:	697b      	ldr	r3, [r7, #20]

    UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 8006d32:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("cpsid i" : : : "memory");
 8006d34:	b672      	cpsid	i
}
 8006d36:	bf00      	nop
    /** remove from the list or pending task the one that has been selected to be executed */
    TaskSet &= ~(1U << CurrentTaskIdx);
 8006d38:	4b3e      	ldr	r3, [pc, #248]	; (8006e34 <UTIL_SEQ_Run+0x1c4>)
 8006d3a:	681b      	ldr	r3, [r3, #0]
 8006d3c:	2201      	movs	r2, #1
 8006d3e:	fa02 f303 	lsl.w	r3, r2, r3
 8006d42:	43da      	mvns	r2, r3
 8006d44:	4b38      	ldr	r3, [pc, #224]	; (8006e28 <UTIL_SEQ_Run+0x1b8>)
 8006d46:	681b      	ldr	r3, [r3, #0]
 8006d48:	4013      	ands	r3, r2
 8006d4a:	4a37      	ldr	r2, [pc, #220]	; (8006e28 <UTIL_SEQ_Run+0x1b8>)
 8006d4c:	6013      	str	r3, [r2, #0]
    /** remove from all priority mask the task that has been selected to be executed */
    for (counter = UTIL_SEQ_CONF_PRIO_NBR; counter != 0U; counter--)
 8006d4e:	2302      	movs	r3, #2
 8006d50:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006d52:	e013      	b.n	8006d7c <UTIL_SEQ_Run+0x10c>
    {
      TaskPrio[counter - 1U].priority &= ~(1U << CurrentTaskIdx);
 8006d54:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006d56:	3b01      	subs	r3, #1
 8006d58:	4a34      	ldr	r2, [pc, #208]	; (8006e2c <UTIL_SEQ_Run+0x1bc>)
 8006d5a:	f852 1033 	ldr.w	r1, [r2, r3, lsl #3]
 8006d5e:	4b35      	ldr	r3, [pc, #212]	; (8006e34 <UTIL_SEQ_Run+0x1c4>)
 8006d60:	681b      	ldr	r3, [r3, #0]
 8006d62:	2201      	movs	r2, #1
 8006d64:	fa02 f303 	lsl.w	r3, r2, r3
 8006d68:	43da      	mvns	r2, r3
 8006d6a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006d6c:	3b01      	subs	r3, #1
 8006d6e:	400a      	ands	r2, r1
 8006d70:	492e      	ldr	r1, [pc, #184]	; (8006e2c <UTIL_SEQ_Run+0x1bc>)
 8006d72:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
    for (counter = UTIL_SEQ_CONF_PRIO_NBR; counter != 0U; counter--)
 8006d76:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006d78:	3b01      	subs	r3, #1
 8006d7a:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006d7c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006d7e:	2b00      	cmp	r3, #0
 8006d80:	d1e8      	bne.n	8006d54 <UTIL_SEQ_Run+0xe4>
 8006d82:	69fb      	ldr	r3, [r7, #28]
 8006d84:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006d86:	693b      	ldr	r3, [r7, #16]
 8006d88:	f383 8810 	msr	PRIMASK, r3
}
 8006d8c:	bf00      	nop
    }
    UTIL_SEQ_EXIT_CRITICAL_SECTION( );
    /** Execute the task */
    TaskCb[CurrentTaskIdx]( );
 8006d8e:	4b29      	ldr	r3, [pc, #164]	; (8006e34 <UTIL_SEQ_Run+0x1c4>)
 8006d90:	681b      	ldr	r3, [r3, #0]
 8006d92:	4a29      	ldr	r2, [pc, #164]	; (8006e38 <UTIL_SEQ_Run+0x1c8>)
 8006d94:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006d98:	4798      	blx	r3
    
    local_taskset = TaskSet;
 8006d9a:	4b23      	ldr	r3, [pc, #140]	; (8006e28 <UTIL_SEQ_Run+0x1b8>)
 8006d9c:	681b      	ldr	r3, [r3, #0]
 8006d9e:	62bb      	str	r3, [r7, #40]	; 0x28
  while(((local_taskset & TaskMask & SuperMask) != 0U) && ((EvtSet & EvtWaited)==0U))
 8006da0:	4b23      	ldr	r3, [pc, #140]	; (8006e30 <UTIL_SEQ_Run+0x1c0>)
 8006da2:	681a      	ldr	r2, [r3, #0]
 8006da4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006da6:	401a      	ands	r2, r3
 8006da8:	4b1e      	ldr	r3, [pc, #120]	; (8006e24 <UTIL_SEQ_Run+0x1b4>)
 8006daa:	681b      	ldr	r3, [r3, #0]
 8006dac:	4013      	ands	r3, r2
 8006dae:	2b00      	cmp	r3, #0
 8006db0:	d007      	beq.n	8006dc2 <UTIL_SEQ_Run+0x152>
 8006db2:	4b22      	ldr	r3, [pc, #136]	; (8006e3c <UTIL_SEQ_Run+0x1cc>)
 8006db4:	681a      	ldr	r2, [r3, #0]
 8006db6:	4b22      	ldr	r3, [pc, #136]	; (8006e40 <UTIL_SEQ_Run+0x1d0>)
 8006db8:	681b      	ldr	r3, [r3, #0]
 8006dba:	4013      	ands	r3, r2
 8006dbc:	2b00      	cmp	r3, #0
 8006dbe:	f43f af68 	beq.w	8006c92 <UTIL_SEQ_Run+0x22>
  }

  /* the set of CurrentTaskIdx to no task running allows to call WaitEvt in the Pre/Post ilde context */
  CurrentTaskIdx = UTIL_SEQ_NOTASKRUNNING;
 8006dc2:	4b1c      	ldr	r3, [pc, #112]	; (8006e34 <UTIL_SEQ_Run+0x1c4>)
 8006dc4:	f04f 32ff 	mov.w	r2, #4294967295
 8006dc8:	601a      	str	r2, [r3, #0]
  UTIL_SEQ_PreIdle( );
 8006dca:	f000 f937 	bl	800703c <UTIL_SEQ_PreIdle>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006dce:	f3ef 8310 	mrs	r3, PRIMASK
 8006dd2:	60fb      	str	r3, [r7, #12]
  return(result);
 8006dd4:	68fb      	ldr	r3, [r7, #12]
  
  UTIL_SEQ_ENTER_CRITICAL_SECTION_IDLE( );
 8006dd6:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("cpsid i" : : : "memory");
 8006dd8:	b672      	cpsid	i
}
 8006dda:	bf00      	nop
  local_taskset = TaskSet;
 8006ddc:	4b12      	ldr	r3, [pc, #72]	; (8006e28 <UTIL_SEQ_Run+0x1b8>)
 8006dde:	681b      	ldr	r3, [r3, #0]
 8006de0:	62bb      	str	r3, [r7, #40]	; 0x28
  if (!(((local_taskset & TaskMask & SuperMask) != 0U) || ((EvtSet & EvtWaited)!= 0U))) 
 8006de2:	4b13      	ldr	r3, [pc, #76]	; (8006e30 <UTIL_SEQ_Run+0x1c0>)
 8006de4:	681a      	ldr	r2, [r3, #0]
 8006de6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006de8:	401a      	ands	r2, r3
 8006dea:	4b0e      	ldr	r3, [pc, #56]	; (8006e24 <UTIL_SEQ_Run+0x1b4>)
 8006dec:	681b      	ldr	r3, [r3, #0]
 8006dee:	4013      	ands	r3, r2
 8006df0:	2b00      	cmp	r3, #0
 8006df2:	d108      	bne.n	8006e06 <UTIL_SEQ_Run+0x196>
 8006df4:	4b11      	ldr	r3, [pc, #68]	; (8006e3c <UTIL_SEQ_Run+0x1cc>)
 8006df6:	681a      	ldr	r2, [r3, #0]
 8006df8:	4b11      	ldr	r3, [pc, #68]	; (8006e40 <UTIL_SEQ_Run+0x1d0>)
 8006dfa:	681b      	ldr	r3, [r3, #0]
 8006dfc:	4013      	ands	r3, r2
 8006dfe:	2b00      	cmp	r3, #0
 8006e00:	d101      	bne.n	8006e06 <UTIL_SEQ_Run+0x196>
  {
	UTIL_SEQ_Idle( );
 8006e02:	f7f9 fd16 	bl	8000832 <UTIL_SEQ_Idle>
 8006e06:	69bb      	ldr	r3, [r7, #24]
 8006e08:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006e0a:	68bb      	ldr	r3, [r7, #8]
 8006e0c:	f383 8810 	msr	PRIMASK, r3
}
 8006e10:	bf00      	nop
  }
  UTIL_SEQ_EXIT_CRITICAL_SECTION_IDLE( );
  
  UTIL_SEQ_PostIdle( );
 8006e12:	f000 f91a 	bl	800704a <UTIL_SEQ_PostIdle>

  /** restore the mask from UTIL_SEQ_Run() */
  SuperMask = super_mask_backup;
 8006e16:	4a03      	ldr	r2, [pc, #12]	; (8006e24 <UTIL_SEQ_Run+0x1b4>)
 8006e18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e1a:	6013      	str	r3, [r2, #0]

  return;
 8006e1c:	bf00      	nop
}
 8006e1e:	3730      	adds	r7, #48	; 0x30
 8006e20:	46bd      	mov	sp, r7
 8006e22:	bd80      	pop	{r7, pc}
 8006e24:	20000024 	.word	0x20000024
 8006e28:	20000248 	.word	0x20000248
 8006e2c:	200002d8 	.word	0x200002d8
 8006e30:	20000020 	.word	0x20000020
 8006e34:	20000254 	.word	0x20000254
 8006e38:	20000258 	.word	0x20000258
 8006e3c:	2000024c 	.word	0x2000024c
 8006e40:	20000250 	.word	0x20000250

08006e44 <UTIL_SEQ_RegTask>:

void UTIL_SEQ_RegTask(UTIL_SEQ_bm_t TaskId_bm, uint32_t Flags, void (*Task)( void ))
{
 8006e44:	b580      	push	{r7, lr}
 8006e46:	b088      	sub	sp, #32
 8006e48:	af00      	add	r7, sp, #0
 8006e4a:	60f8      	str	r0, [r7, #12]
 8006e4c:	60b9      	str	r1, [r7, #8]
 8006e4e:	607a      	str	r2, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006e50:	f3ef 8310 	mrs	r3, PRIMASK
 8006e54:	617b      	str	r3, [r7, #20]
  return(result);
 8006e56:	697b      	ldr	r3, [r7, #20]
  UTIL_SEQ_ENTER_CRITICAL_SECTION();
 8006e58:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("cpsid i" : : : "memory");
 8006e5a:	b672      	cpsid	i
}
 8006e5c:	bf00      	nop

  TaskCb[SEQ_BitPosition(TaskId_bm)] = Task;
 8006e5e:	68f8      	ldr	r0, [r7, #12]
 8006e60:	f000 f8fa 	bl	8007058 <SEQ_BitPosition>
 8006e64:	4603      	mov	r3, r0
 8006e66:	4619      	mov	r1, r3
 8006e68:	4a06      	ldr	r2, [pc, #24]	; (8006e84 <UTIL_SEQ_RegTask+0x40>)
 8006e6a:	687b      	ldr	r3, [r7, #4]
 8006e6c:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
 8006e70:	69fb      	ldr	r3, [r7, #28]
 8006e72:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006e74:	69bb      	ldr	r3, [r7, #24]
 8006e76:	f383 8810 	msr	PRIMASK, r3
}
 8006e7a:	bf00      	nop

  UTIL_SEQ_EXIT_CRITICAL_SECTION();

  return;
 8006e7c:	bf00      	nop
}
 8006e7e:	3720      	adds	r7, #32
 8006e80:	46bd      	mov	sp, r7
 8006e82:	bd80      	pop	{r7, pc}
 8006e84:	20000258 	.word	0x20000258

08006e88 <UTIL_SEQ_SetTask>:

void UTIL_SEQ_SetTask( UTIL_SEQ_bm_t TaskId_bm , uint32_t Task_Prio )
{
 8006e88:	b480      	push	{r7}
 8006e8a:	b087      	sub	sp, #28
 8006e8c:	af00      	add	r7, sp, #0
 8006e8e:	6078      	str	r0, [r7, #4]
 8006e90:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006e92:	f3ef 8310 	mrs	r3, PRIMASK
 8006e96:	60fb      	str	r3, [r7, #12]
  return(result);
 8006e98:	68fb      	ldr	r3, [r7, #12]
  UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 8006e9a:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8006e9c:	b672      	cpsid	i
}
 8006e9e:	bf00      	nop

  TaskSet |= TaskId_bm;
 8006ea0:	4b0d      	ldr	r3, [pc, #52]	; (8006ed8 <UTIL_SEQ_SetTask+0x50>)
 8006ea2:	681a      	ldr	r2, [r3, #0]
 8006ea4:	687b      	ldr	r3, [r7, #4]
 8006ea6:	4313      	orrs	r3, r2
 8006ea8:	4a0b      	ldr	r2, [pc, #44]	; (8006ed8 <UTIL_SEQ_SetTask+0x50>)
 8006eaa:	6013      	str	r3, [r2, #0]
  TaskPrio[Task_Prio].priority |= TaskId_bm;
 8006eac:	4a0b      	ldr	r2, [pc, #44]	; (8006edc <UTIL_SEQ_SetTask+0x54>)
 8006eae:	683b      	ldr	r3, [r7, #0]
 8006eb0:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 8006eb4:	687b      	ldr	r3, [r7, #4]
 8006eb6:	431a      	orrs	r2, r3
 8006eb8:	4908      	ldr	r1, [pc, #32]	; (8006edc <UTIL_SEQ_SetTask+0x54>)
 8006eba:	683b      	ldr	r3, [r7, #0]
 8006ebc:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
 8006ec0:	697b      	ldr	r3, [r7, #20]
 8006ec2:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006ec4:	693b      	ldr	r3, [r7, #16]
 8006ec6:	f383 8810 	msr	PRIMASK, r3
}
 8006eca:	bf00      	nop

  UTIL_SEQ_EXIT_CRITICAL_SECTION( );

  return;
 8006ecc:	bf00      	nop
}
 8006ece:	371c      	adds	r7, #28
 8006ed0:	46bd      	mov	sp, r7
 8006ed2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ed6:	4770      	bx	lr
 8006ed8:	20000248 	.word	0x20000248
 8006edc:	200002d8 	.word	0x200002d8

08006ee0 <UTIL_SEQ_PauseTask>:
  UTIL_SEQ_EXIT_CRITICAL_SECTION();
  return _status;
}

void UTIL_SEQ_PauseTask( UTIL_SEQ_bm_t TaskId_bm )
{
 8006ee0:	b480      	push	{r7}
 8006ee2:	b087      	sub	sp, #28
 8006ee4:	af00      	add	r7, sp, #0
 8006ee6:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006ee8:	f3ef 8310 	mrs	r3, PRIMASK
 8006eec:	60fb      	str	r3, [r7, #12]
  return(result);
 8006eee:	68fb      	ldr	r3, [r7, #12]
  UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 8006ef0:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8006ef2:	b672      	cpsid	i
}
 8006ef4:	bf00      	nop

  TaskMask &= (~TaskId_bm);
 8006ef6:	687b      	ldr	r3, [r7, #4]
 8006ef8:	43da      	mvns	r2, r3
 8006efa:	4b08      	ldr	r3, [pc, #32]	; (8006f1c <UTIL_SEQ_PauseTask+0x3c>)
 8006efc:	681b      	ldr	r3, [r3, #0]
 8006efe:	4013      	ands	r3, r2
 8006f00:	4a06      	ldr	r2, [pc, #24]	; (8006f1c <UTIL_SEQ_PauseTask+0x3c>)
 8006f02:	6013      	str	r3, [r2, #0]
 8006f04:	697b      	ldr	r3, [r7, #20]
 8006f06:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006f08:	693b      	ldr	r3, [r7, #16]
 8006f0a:	f383 8810 	msr	PRIMASK, r3
}
 8006f0e:	bf00      	nop

  UTIL_SEQ_EXIT_CRITICAL_SECTION( );

  return;
 8006f10:	bf00      	nop
}
 8006f12:	371c      	adds	r7, #28
 8006f14:	46bd      	mov	sp, r7
 8006f16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f1a:	4770      	bx	lr
 8006f1c:	20000020 	.word	0x20000020

08006f20 <UTIL_SEQ_ResumeTask>:
  UTIL_SEQ_EXIT_CRITICAL_SECTION( );
  return _status;
}

void UTIL_SEQ_ResumeTask( UTIL_SEQ_bm_t TaskId_bm )
{
 8006f20:	b480      	push	{r7}
 8006f22:	b087      	sub	sp, #28
 8006f24:	af00      	add	r7, sp, #0
 8006f26:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006f28:	f3ef 8310 	mrs	r3, PRIMASK
 8006f2c:	60fb      	str	r3, [r7, #12]
  return(result);
 8006f2e:	68fb      	ldr	r3, [r7, #12]
  UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 8006f30:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8006f32:	b672      	cpsid	i
}
 8006f34:	bf00      	nop

  TaskMask |= TaskId_bm;
 8006f36:	4b09      	ldr	r3, [pc, #36]	; (8006f5c <UTIL_SEQ_ResumeTask+0x3c>)
 8006f38:	681a      	ldr	r2, [r3, #0]
 8006f3a:	687b      	ldr	r3, [r7, #4]
 8006f3c:	4313      	orrs	r3, r2
 8006f3e:	4a07      	ldr	r2, [pc, #28]	; (8006f5c <UTIL_SEQ_ResumeTask+0x3c>)
 8006f40:	6013      	str	r3, [r2, #0]
 8006f42:	697b      	ldr	r3, [r7, #20]
 8006f44:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006f46:	693b      	ldr	r3, [r7, #16]
 8006f48:	f383 8810 	msr	PRIMASK, r3
}
 8006f4c:	bf00      	nop

  UTIL_SEQ_EXIT_CRITICAL_SECTION( );

  return;
 8006f4e:	bf00      	nop
}
 8006f50:	371c      	adds	r7, #28
 8006f52:	46bd      	mov	sp, r7
 8006f54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f58:	4770      	bx	lr
 8006f5a:	bf00      	nop
 8006f5c:	20000020 	.word	0x20000020

08006f60 <UTIL_SEQ_SetEvt>:

void UTIL_SEQ_SetEvt( UTIL_SEQ_bm_t EvtId_bm )
{
 8006f60:	b480      	push	{r7}
 8006f62:	b087      	sub	sp, #28
 8006f64:	af00      	add	r7, sp, #0
 8006f66:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006f68:	f3ef 8310 	mrs	r3, PRIMASK
 8006f6c:	60fb      	str	r3, [r7, #12]
  return(result);
 8006f6e:	68fb      	ldr	r3, [r7, #12]
  UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 8006f70:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8006f72:	b672      	cpsid	i
}
 8006f74:	bf00      	nop

  EvtSet |= EvtId_bm;
 8006f76:	4b09      	ldr	r3, [pc, #36]	; (8006f9c <UTIL_SEQ_SetEvt+0x3c>)
 8006f78:	681a      	ldr	r2, [r3, #0]
 8006f7a:	687b      	ldr	r3, [r7, #4]
 8006f7c:	4313      	orrs	r3, r2
 8006f7e:	4a07      	ldr	r2, [pc, #28]	; (8006f9c <UTIL_SEQ_SetEvt+0x3c>)
 8006f80:	6013      	str	r3, [r2, #0]
 8006f82:	697b      	ldr	r3, [r7, #20]
 8006f84:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006f86:	693b      	ldr	r3, [r7, #16]
 8006f88:	f383 8810 	msr	PRIMASK, r3
}
 8006f8c:	bf00      	nop

  UTIL_SEQ_EXIT_CRITICAL_SECTION( );

  return;
 8006f8e:	bf00      	nop
}
 8006f90:	371c      	adds	r7, #28
 8006f92:	46bd      	mov	sp, r7
 8006f94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f98:	4770      	bx	lr
 8006f9a:	bf00      	nop
 8006f9c:	2000024c 	.word	0x2000024c

08006fa0 <UTIL_SEQ_WaitEvt>:

  return;
}

void UTIL_SEQ_WaitEvt(UTIL_SEQ_bm_t EvtId_bm)
{
 8006fa0:	b580      	push	{r7, lr}
 8006fa2:	b088      	sub	sp, #32
 8006fa4:	af00      	add	r7, sp, #0
 8006fa6:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_bm_t current_task_idx;
  UTIL_SEQ_bm_t wait_task_idx;
  /** store in local the current_task_id_bm as the global variable CurrentTaskIdx
   *  may be overwritten in case there are nested call of UTIL_SEQ_Run()
   */
  current_task_idx = CurrentTaskIdx;
 8006fa8:	4b21      	ldr	r3, [pc, #132]	; (8007030 <UTIL_SEQ_WaitEvt+0x90>)
 8006faa:	681b      	ldr	r3, [r3, #0]
 8006fac:	61bb      	str	r3, [r7, #24]
  if(UTIL_SEQ_NOTASKRUNNING == CurrentTaskIdx)
 8006fae:	4b20      	ldr	r3, [pc, #128]	; (8007030 <UTIL_SEQ_WaitEvt+0x90>)
 8006fb0:	681b      	ldr	r3, [r3, #0]
 8006fb2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006fb6:	d102      	bne.n	8006fbe <UTIL_SEQ_WaitEvt+0x1e>
  {
    wait_task_idx = 0;
 8006fb8:	2300      	movs	r3, #0
 8006fba:	61fb      	str	r3, [r7, #28]
 8006fbc:	e005      	b.n	8006fca <UTIL_SEQ_WaitEvt+0x2a>
  }
  else
  {
    wait_task_idx = 1 << CurrentTaskIdx;
 8006fbe:	4b1c      	ldr	r3, [pc, #112]	; (8007030 <UTIL_SEQ_WaitEvt+0x90>)
 8006fc0:	681b      	ldr	r3, [r3, #0]
 8006fc2:	2201      	movs	r2, #1
 8006fc4:	fa02 f303 	lsl.w	r3, r2, r3
 8006fc8:	61fb      	str	r3, [r7, #28]
  }

  /** backup the event id that was currently waited */
  event_waited_id_backup = EvtWaited;
 8006fca:	4b1a      	ldr	r3, [pc, #104]	; (8007034 <UTIL_SEQ_WaitEvt+0x94>)
 8006fcc:	681b      	ldr	r3, [r3, #0]
 8006fce:	617b      	str	r3, [r7, #20]
  EvtWaited = EvtId_bm;
 8006fd0:	4a18      	ldr	r2, [pc, #96]	; (8007034 <UTIL_SEQ_WaitEvt+0x94>)
 8006fd2:	687b      	ldr	r3, [r7, #4]
 8006fd4:	6013      	str	r3, [r2, #0]
   *  the while loop below.
   *  The system is waiting only for the last waited event.
   *  When it will go out, it will wait again from the previous one.
   *  It case it occurs while waiting for the second one, the while loop will exit immediately
   */
  while ((EvtSet & EvtWaited) == 0U)
 8006fd6:	e005      	b.n	8006fe4 <UTIL_SEQ_WaitEvt+0x44>
  {
    UTIL_SEQ_EvtIdle(wait_task_idx, EvtWaited);
 8006fd8:	4b16      	ldr	r3, [pc, #88]	; (8007034 <UTIL_SEQ_WaitEvt+0x94>)
 8006fda:	681b      	ldr	r3, [r3, #0]
 8006fdc:	4619      	mov	r1, r3
 8006fde:	69f8      	ldr	r0, [r7, #28]
 8006fe0:	f7f9 fc2d 	bl	800083e <UTIL_SEQ_EvtIdle>
  while ((EvtSet & EvtWaited) == 0U)
 8006fe4:	4b14      	ldr	r3, [pc, #80]	; (8007038 <UTIL_SEQ_WaitEvt+0x98>)
 8006fe6:	681a      	ldr	r2, [r3, #0]
 8006fe8:	4b12      	ldr	r3, [pc, #72]	; (8007034 <UTIL_SEQ_WaitEvt+0x94>)
 8006fea:	681b      	ldr	r3, [r3, #0]
 8006fec:	4013      	ands	r3, r2
 8006fee:	2b00      	cmp	r3, #0
 8006ff0:	d0f2      	beq.n	8006fd8 <UTIL_SEQ_WaitEvt+0x38>
  /**
   * Restore the CurrentTaskIdx that may have been modified by call of UTIL_SEQ_Run() from UTIL_SEQ_EvtIdle()
   * This is required so that a second call of UTIL_SEQ_WaitEvt() in the same process pass the correct current_task_id_bm
   * in the call of UTIL_SEQ_EvtIdle()
   */
  CurrentTaskIdx = current_task_idx;
 8006ff2:	4a0f      	ldr	r2, [pc, #60]	; (8007030 <UTIL_SEQ_WaitEvt+0x90>)
 8006ff4:	69bb      	ldr	r3, [r7, #24]
 8006ff6:	6013      	str	r3, [r2, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006ff8:	f3ef 8310 	mrs	r3, PRIMASK
 8006ffc:	60bb      	str	r3, [r7, #8]
  return(result);
 8006ffe:	68bb      	ldr	r3, [r7, #8]

  UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 8007000:	613b      	str	r3, [r7, #16]
  __ASM volatile ("cpsid i" : : : "memory");
 8007002:	b672      	cpsid	i
}
 8007004:	bf00      	nop

  EvtSet &= (~EvtWaited);
 8007006:	4b0b      	ldr	r3, [pc, #44]	; (8007034 <UTIL_SEQ_WaitEvt+0x94>)
 8007008:	681b      	ldr	r3, [r3, #0]
 800700a:	43da      	mvns	r2, r3
 800700c:	4b0a      	ldr	r3, [pc, #40]	; (8007038 <UTIL_SEQ_WaitEvt+0x98>)
 800700e:	681b      	ldr	r3, [r3, #0]
 8007010:	4013      	ands	r3, r2
 8007012:	4a09      	ldr	r2, [pc, #36]	; (8007038 <UTIL_SEQ_WaitEvt+0x98>)
 8007014:	6013      	str	r3, [r2, #0]
 8007016:	693b      	ldr	r3, [r7, #16]
 8007018:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800701a:	68fb      	ldr	r3, [r7, #12]
 800701c:	f383 8810 	msr	PRIMASK, r3
}
 8007020:	bf00      	nop

  UTIL_SEQ_EXIT_CRITICAL_SECTION( );

  EvtWaited = event_waited_id_backup;
 8007022:	4a04      	ldr	r2, [pc, #16]	; (8007034 <UTIL_SEQ_WaitEvt+0x94>)
 8007024:	697b      	ldr	r3, [r7, #20]
 8007026:	6013      	str	r3, [r2, #0]

  return;
 8007028:	bf00      	nop
}
 800702a:	3720      	adds	r7, #32
 800702c:	46bd      	mov	sp, r7
 800702e:	bd80      	pop	{r7, pc}
 8007030:	20000254 	.word	0x20000254
 8007034:	20000250 	.word	0x20000250
 8007038:	2000024c 	.word	0x2000024c

0800703c <UTIL_SEQ_PreIdle>:
{
  return;
}

__WEAK void UTIL_SEQ_PreIdle( void )
{
 800703c:	b480      	push	{r7}
 800703e:	af00      	add	r7, sp, #0
  /**
   * Unless specified by the application, there is nothing to be done
   */
  return;
 8007040:	bf00      	nop
}
 8007042:	46bd      	mov	sp, r7
 8007044:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007048:	4770      	bx	lr

0800704a <UTIL_SEQ_PostIdle>:

__WEAK void UTIL_SEQ_PostIdle( void )
{
 800704a:	b480      	push	{r7}
 800704c:	af00      	add	r7, sp, #0
  /**
   * Unless specified by the application, there is nothing to be done
   */
  return;
 800704e:	bf00      	nop
}
 8007050:	46bd      	mov	sp, r7
 8007052:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007056:	4770      	bx	lr

08007058 <SEQ_BitPosition>:
 * @brief return the position of the first bit set to 1
 * @param Value 32 bit value
 * @retval bit position
 */
uint8_t SEQ_BitPosition(uint32_t Value)
{
 8007058:	b480      	push	{r7}
 800705a:	b085      	sub	sp, #20
 800705c:	af00      	add	r7, sp, #0
 800705e:	6078      	str	r0, [r7, #4]
  uint8_t n = 0U;
 8007060:	2300      	movs	r3, #0
 8007062:	73fb      	strb	r3, [r7, #15]

  if ((Value & 0xFFFF0000U) == 0U)  { n  = 16U; Value <<= 16U;  }
 8007064:	687b      	ldr	r3, [r7, #4]
 8007066:	0c1b      	lsrs	r3, r3, #16
 8007068:	041b      	lsls	r3, r3, #16
 800706a:	2b00      	cmp	r3, #0
 800706c:	d104      	bne.n	8007078 <SEQ_BitPosition+0x20>
 800706e:	2310      	movs	r3, #16
 8007070:	73fb      	strb	r3, [r7, #15]
 8007072:	687b      	ldr	r3, [r7, #4]
 8007074:	041b      	lsls	r3, r3, #16
 8007076:	607b      	str	r3, [r7, #4]
  if ((Value & 0xFF000000U) == 0U)  { n +=  8U; Value <<=  8U;  }
 8007078:	687b      	ldr	r3, [r7, #4]
 800707a:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 800707e:	2b00      	cmp	r3, #0
 8007080:	d105      	bne.n	800708e <SEQ_BitPosition+0x36>
 8007082:	7bfb      	ldrb	r3, [r7, #15]
 8007084:	3308      	adds	r3, #8
 8007086:	73fb      	strb	r3, [r7, #15]
 8007088:	687b      	ldr	r3, [r7, #4]
 800708a:	021b      	lsls	r3, r3, #8
 800708c:	607b      	str	r3, [r7, #4]
  if ((Value & 0xF0000000U) == 0U)  { n +=  4U; Value <<=  4U;  }
 800708e:	687b      	ldr	r3, [r7, #4]
 8007090:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 8007094:	2b00      	cmp	r3, #0
 8007096:	d105      	bne.n	80070a4 <SEQ_BitPosition+0x4c>
 8007098:	7bfb      	ldrb	r3, [r7, #15]
 800709a:	3304      	adds	r3, #4
 800709c:	73fb      	strb	r3, [r7, #15]
 800709e:	687b      	ldr	r3, [r7, #4]
 80070a0:	011b      	lsls	r3, r3, #4
 80070a2:	607b      	str	r3, [r7, #4]

  n += SEQ_clz_table_4bit[Value >> (32-4)];
 80070a4:	687b      	ldr	r3, [r7, #4]
 80070a6:	0f1b      	lsrs	r3, r3, #28
 80070a8:	4a07      	ldr	r2, [pc, #28]	; (80070c8 <SEQ_BitPosition+0x70>)
 80070aa:	5cd2      	ldrb	r2, [r2, r3]
 80070ac:	7bfb      	ldrb	r3, [r7, #15]
 80070ae:	4413      	add	r3, r2
 80070b0:	73fb      	strb	r3, [r7, #15]

  return (uint8_t)(31U-n);
 80070b2:	7bfb      	ldrb	r3, [r7, #15]
 80070b4:	f1c3 031f 	rsb	r3, r3, #31
 80070b8:	b2db      	uxtb	r3, r3
}
 80070ba:	4618      	mov	r0, r3
 80070bc:	3714      	adds	r7, #20
 80070be:	46bd      	mov	sp, r7
 80070c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070c4:	4770      	bx	lr
 80070c6:	bf00      	nop
 80070c8:	080073d4 	.word	0x080073d4

080070cc <__libc_init_array>:
 80070cc:	b570      	push	{r4, r5, r6, lr}
 80070ce:	4d0d      	ldr	r5, [pc, #52]	; (8007104 <__libc_init_array+0x38>)
 80070d0:	4c0d      	ldr	r4, [pc, #52]	; (8007108 <__libc_init_array+0x3c>)
 80070d2:	1b64      	subs	r4, r4, r5
 80070d4:	10a4      	asrs	r4, r4, #2
 80070d6:	2600      	movs	r6, #0
 80070d8:	42a6      	cmp	r6, r4
 80070da:	d109      	bne.n	80070f0 <__libc_init_array+0x24>
 80070dc:	4d0b      	ldr	r5, [pc, #44]	; (800710c <__libc_init_array+0x40>)
 80070de:	4c0c      	ldr	r4, [pc, #48]	; (8007110 <__libc_init_array+0x44>)
 80070e0:	f000 f82e 	bl	8007140 <_init>
 80070e4:	1b64      	subs	r4, r4, r5
 80070e6:	10a4      	asrs	r4, r4, #2
 80070e8:	2600      	movs	r6, #0
 80070ea:	42a6      	cmp	r6, r4
 80070ec:	d105      	bne.n	80070fa <__libc_init_array+0x2e>
 80070ee:	bd70      	pop	{r4, r5, r6, pc}
 80070f0:	f855 3b04 	ldr.w	r3, [r5], #4
 80070f4:	4798      	blx	r3
 80070f6:	3601      	adds	r6, #1
 80070f8:	e7ee      	b.n	80070d8 <__libc_init_array+0xc>
 80070fa:	f855 3b04 	ldr.w	r3, [r5], #4
 80070fe:	4798      	blx	r3
 8007100:	3601      	adds	r6, #1
 8007102:	e7f2      	b.n	80070ea <__libc_init_array+0x1e>
 8007104:	080073e4 	.word	0x080073e4
 8007108:	080073e4 	.word	0x080073e4
 800710c:	080073e4 	.word	0x080073e4
 8007110:	080073e8 	.word	0x080073e8

08007114 <memcpy>:
 8007114:	440a      	add	r2, r1
 8007116:	4291      	cmp	r1, r2
 8007118:	f100 33ff 	add.w	r3, r0, #4294967295
 800711c:	d100      	bne.n	8007120 <memcpy+0xc>
 800711e:	4770      	bx	lr
 8007120:	b510      	push	{r4, lr}
 8007122:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007126:	f803 4f01 	strb.w	r4, [r3, #1]!
 800712a:	4291      	cmp	r1, r2
 800712c:	d1f9      	bne.n	8007122 <memcpy+0xe>
 800712e:	bd10      	pop	{r4, pc}

08007130 <memset>:
 8007130:	4402      	add	r2, r0
 8007132:	4603      	mov	r3, r0
 8007134:	4293      	cmp	r3, r2
 8007136:	d100      	bne.n	800713a <memset+0xa>
 8007138:	4770      	bx	lr
 800713a:	f803 1b01 	strb.w	r1, [r3], #1
 800713e:	e7f9      	b.n	8007134 <memset+0x4>

08007140 <_init>:
 8007140:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007142:	bf00      	nop
 8007144:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007146:	bc08      	pop	{r3}
 8007148:	469e      	mov	lr, r3
 800714a:	4770      	bx	lr

0800714c <_fini>:
 800714c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800714e:	bf00      	nop
 8007150:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007152:	bc08      	pop	{r3}
 8007154:	469e      	mov	lr, r3
 8007156:	4770      	bx	lr
