
Version0.1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000013c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008110  08000140  08000140  00010140  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000850  08008250  08008250  00018250  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08008aa0  08008aa0  00018aa0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  08008aa8  08008aa8  00018aa8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  08008aac  08008aac  00018aac  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         0000008c  20000004  08008ab0  00020004  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 TIMERSERVER_CONTEXT 00000099  20000090  08008b3c  00020090  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 BLE_DRIVER_CONTEXT 0000003e  2000012c  08008bd5  0002012c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 SYSTEM_DRIVER_CONTEXT 00000011  2000016c  08008c13  0002016c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 BLE_APP_CONTEXT 00000084  20000180  08008c24  00020180  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 11 .bss          00001430  20000204  08008ca8  00020204  2**2
                  ALLOC
 12 ._user_heap_stack 00001404  20001634  08008ca8  00021634  2**0
                  ALLOC
 13 .ARM.attributes 00000030  00000000  00000000  00020204  2**0
                  CONTENTS, READONLY
 14 MAPPING_TABLE 00000028  20030000  20030000  00030000  2**2
                  ALLOC
 15 MB_MEM1       000001b7  20030028  20030028  00030000  2**2
                  ALLOC
 16 MB_MEM2       00000877  200301e0  200301e0  00030000  2**2
                  ALLOC
 17 .debug_info   0005d8be  00000000  00000000  00020234  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_abbrev 00008f62  00000000  00000000  0007daf2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_loc    00029cf4  00000000  00000000  00086a54  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_aranges 000025f8  00000000  00000000  000b0748  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_ranges 00002b68  00000000  00000000  000b2d40  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_macro  00030d22  00000000  00000000  000b58a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 23 .debug_line   00042840  00000000  00000000  000e65ca  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 24 .debug_str    001113bb  00000000  00000000  00128e0a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 25 .comment      00000053  00000000  00000000  0023a1c5  2**0
                  CONTENTS, READONLY
 26 .debug_frame  00007694  00000000  00000000  0023a218  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000140 <__do_global_dtors_aux>:
 8000140:	b510      	push	{r4, lr}
 8000142:	4c05      	ldr	r4, [pc, #20]	; (8000158 <__do_global_dtors_aux+0x18>)
 8000144:	7823      	ldrb	r3, [r4, #0]
 8000146:	b933      	cbnz	r3, 8000156 <__do_global_dtors_aux+0x16>
 8000148:	4b04      	ldr	r3, [pc, #16]	; (800015c <__do_global_dtors_aux+0x1c>)
 800014a:	b113      	cbz	r3, 8000152 <__do_global_dtors_aux+0x12>
 800014c:	4804      	ldr	r0, [pc, #16]	; (8000160 <__do_global_dtors_aux+0x20>)
 800014e:	f3af 8000 	nop.w
 8000152:	2301      	movs	r3, #1
 8000154:	7023      	strb	r3, [r4, #0]
 8000156:	bd10      	pop	{r4, pc}
 8000158:	20000204 	.word	0x20000204
 800015c:	00000000 	.word	0x00000000
 8000160:	08008238 	.word	0x08008238

08000164 <frame_dummy>:
 8000164:	b508      	push	{r3, lr}
 8000166:	4b03      	ldr	r3, [pc, #12]	; (8000174 <frame_dummy+0x10>)
 8000168:	b11b      	cbz	r3, 8000172 <frame_dummy+0xe>
 800016a:	4903      	ldr	r1, [pc, #12]	; (8000178 <frame_dummy+0x14>)
 800016c:	4803      	ldr	r0, [pc, #12]	; (800017c <frame_dummy+0x18>)
 800016e:	f3af 8000 	nop.w
 8000172:	bd08      	pop	{r3, pc}
 8000174:	00000000 	.word	0x00000000
 8000178:	20000208 	.word	0x20000208
 800017c:	08008238 	.word	0x08008238

08000180 <memchr>:
 8000180:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000184:	2a10      	cmp	r2, #16
 8000186:	db2b      	blt.n	80001e0 <memchr+0x60>
 8000188:	f010 0f07 	tst.w	r0, #7
 800018c:	d008      	beq.n	80001a0 <memchr+0x20>
 800018e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000192:	3a01      	subs	r2, #1
 8000194:	428b      	cmp	r3, r1
 8000196:	d02d      	beq.n	80001f4 <memchr+0x74>
 8000198:	f010 0f07 	tst.w	r0, #7
 800019c:	b342      	cbz	r2, 80001f0 <memchr+0x70>
 800019e:	d1f6      	bne.n	800018e <memchr+0xe>
 80001a0:	b4f0      	push	{r4, r5, r6, r7}
 80001a2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001a6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001aa:	f022 0407 	bic.w	r4, r2, #7
 80001ae:	f07f 0700 	mvns.w	r7, #0
 80001b2:	2300      	movs	r3, #0
 80001b4:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 80001b8:	3c08      	subs	r4, #8
 80001ba:	ea85 0501 	eor.w	r5, r5, r1
 80001be:	ea86 0601 	eor.w	r6, r6, r1
 80001c2:	fa85 f547 	uadd8	r5, r5, r7
 80001c6:	faa3 f587 	sel	r5, r3, r7
 80001ca:	fa86 f647 	uadd8	r6, r6, r7
 80001ce:	faa5 f687 	sel	r6, r5, r7
 80001d2:	b98e      	cbnz	r6, 80001f8 <memchr+0x78>
 80001d4:	d1ee      	bne.n	80001b4 <memchr+0x34>
 80001d6:	bcf0      	pop	{r4, r5, r6, r7}
 80001d8:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001dc:	f002 0207 	and.w	r2, r2, #7
 80001e0:	b132      	cbz	r2, 80001f0 <memchr+0x70>
 80001e2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e6:	3a01      	subs	r2, #1
 80001e8:	ea83 0301 	eor.w	r3, r3, r1
 80001ec:	b113      	cbz	r3, 80001f4 <memchr+0x74>
 80001ee:	d1f8      	bne.n	80001e2 <memchr+0x62>
 80001f0:	2000      	movs	r0, #0
 80001f2:	4770      	bx	lr
 80001f4:	3801      	subs	r0, #1
 80001f6:	4770      	bx	lr
 80001f8:	2d00      	cmp	r5, #0
 80001fa:	bf06      	itte	eq
 80001fc:	4635      	moveq	r5, r6
 80001fe:	3803      	subeq	r0, #3
 8000200:	3807      	subne	r0, #7
 8000202:	f015 0f01 	tst.w	r5, #1
 8000206:	d107      	bne.n	8000218 <memchr+0x98>
 8000208:	3001      	adds	r0, #1
 800020a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800020e:	bf02      	ittt	eq
 8000210:	3001      	addeq	r0, #1
 8000212:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000216:	3001      	addeq	r0, #1
 8000218:	bcf0      	pop	{r4, r5, r6, r7}
 800021a:	3801      	subs	r0, #1
 800021c:	4770      	bx	lr
 800021e:	bf00      	nop

08000220 <__aeabi_uldivmod>:
 8000220:	b953      	cbnz	r3, 8000238 <__aeabi_uldivmod+0x18>
 8000222:	b94a      	cbnz	r2, 8000238 <__aeabi_uldivmod+0x18>
 8000224:	2900      	cmp	r1, #0
 8000226:	bf08      	it	eq
 8000228:	2800      	cmpeq	r0, #0
 800022a:	bf1c      	itt	ne
 800022c:	f04f 31ff 	movne.w	r1, #4294967295
 8000230:	f04f 30ff 	movne.w	r0, #4294967295
 8000234:	f000 b96e 	b.w	8000514 <__aeabi_idiv0>
 8000238:	f1ad 0c08 	sub.w	ip, sp, #8
 800023c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000240:	f000 f806 	bl	8000250 <__udivmoddi4>
 8000244:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000248:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800024c:	b004      	add	sp, #16
 800024e:	4770      	bx	lr

08000250 <__udivmoddi4>:
 8000250:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000254:	9d08      	ldr	r5, [sp, #32]
 8000256:	4604      	mov	r4, r0
 8000258:	468c      	mov	ip, r1
 800025a:	2b00      	cmp	r3, #0
 800025c:	f040 8083 	bne.w	8000366 <__udivmoddi4+0x116>
 8000260:	428a      	cmp	r2, r1
 8000262:	4617      	mov	r7, r2
 8000264:	d947      	bls.n	80002f6 <__udivmoddi4+0xa6>
 8000266:	fab2 f282 	clz	r2, r2
 800026a:	b142      	cbz	r2, 800027e <__udivmoddi4+0x2e>
 800026c:	f1c2 0020 	rsb	r0, r2, #32
 8000270:	fa24 f000 	lsr.w	r0, r4, r0
 8000274:	4091      	lsls	r1, r2
 8000276:	4097      	lsls	r7, r2
 8000278:	ea40 0c01 	orr.w	ip, r0, r1
 800027c:	4094      	lsls	r4, r2
 800027e:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000282:	0c23      	lsrs	r3, r4, #16
 8000284:	fbbc f6f8 	udiv	r6, ip, r8
 8000288:	fa1f fe87 	uxth.w	lr, r7
 800028c:	fb08 c116 	mls	r1, r8, r6, ip
 8000290:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000294:	fb06 f10e 	mul.w	r1, r6, lr
 8000298:	4299      	cmp	r1, r3
 800029a:	d909      	bls.n	80002b0 <__udivmoddi4+0x60>
 800029c:	18fb      	adds	r3, r7, r3
 800029e:	f106 30ff 	add.w	r0, r6, #4294967295
 80002a2:	f080 8119 	bcs.w	80004d8 <__udivmoddi4+0x288>
 80002a6:	4299      	cmp	r1, r3
 80002a8:	f240 8116 	bls.w	80004d8 <__udivmoddi4+0x288>
 80002ac:	3e02      	subs	r6, #2
 80002ae:	443b      	add	r3, r7
 80002b0:	1a5b      	subs	r3, r3, r1
 80002b2:	b2a4      	uxth	r4, r4
 80002b4:	fbb3 f0f8 	udiv	r0, r3, r8
 80002b8:	fb08 3310 	mls	r3, r8, r0, r3
 80002bc:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80002c0:	fb00 fe0e 	mul.w	lr, r0, lr
 80002c4:	45a6      	cmp	lr, r4
 80002c6:	d909      	bls.n	80002dc <__udivmoddi4+0x8c>
 80002c8:	193c      	adds	r4, r7, r4
 80002ca:	f100 33ff 	add.w	r3, r0, #4294967295
 80002ce:	f080 8105 	bcs.w	80004dc <__udivmoddi4+0x28c>
 80002d2:	45a6      	cmp	lr, r4
 80002d4:	f240 8102 	bls.w	80004dc <__udivmoddi4+0x28c>
 80002d8:	3802      	subs	r0, #2
 80002da:	443c      	add	r4, r7
 80002dc:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80002e0:	eba4 040e 	sub.w	r4, r4, lr
 80002e4:	2600      	movs	r6, #0
 80002e6:	b11d      	cbz	r5, 80002f0 <__udivmoddi4+0xa0>
 80002e8:	40d4      	lsrs	r4, r2
 80002ea:	2300      	movs	r3, #0
 80002ec:	e9c5 4300 	strd	r4, r3, [r5]
 80002f0:	4631      	mov	r1, r6
 80002f2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002f6:	b902      	cbnz	r2, 80002fa <__udivmoddi4+0xaa>
 80002f8:	deff      	udf	#255	; 0xff
 80002fa:	fab2 f282 	clz	r2, r2
 80002fe:	2a00      	cmp	r2, #0
 8000300:	d150      	bne.n	80003a4 <__udivmoddi4+0x154>
 8000302:	1bcb      	subs	r3, r1, r7
 8000304:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000308:	fa1f f887 	uxth.w	r8, r7
 800030c:	2601      	movs	r6, #1
 800030e:	fbb3 fcfe 	udiv	ip, r3, lr
 8000312:	0c21      	lsrs	r1, r4, #16
 8000314:	fb0e 331c 	mls	r3, lr, ip, r3
 8000318:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800031c:	fb08 f30c 	mul.w	r3, r8, ip
 8000320:	428b      	cmp	r3, r1
 8000322:	d907      	bls.n	8000334 <__udivmoddi4+0xe4>
 8000324:	1879      	adds	r1, r7, r1
 8000326:	f10c 30ff 	add.w	r0, ip, #4294967295
 800032a:	d202      	bcs.n	8000332 <__udivmoddi4+0xe2>
 800032c:	428b      	cmp	r3, r1
 800032e:	f200 80e9 	bhi.w	8000504 <__udivmoddi4+0x2b4>
 8000332:	4684      	mov	ip, r0
 8000334:	1ac9      	subs	r1, r1, r3
 8000336:	b2a3      	uxth	r3, r4
 8000338:	fbb1 f0fe 	udiv	r0, r1, lr
 800033c:	fb0e 1110 	mls	r1, lr, r0, r1
 8000340:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000344:	fb08 f800 	mul.w	r8, r8, r0
 8000348:	45a0      	cmp	r8, r4
 800034a:	d907      	bls.n	800035c <__udivmoddi4+0x10c>
 800034c:	193c      	adds	r4, r7, r4
 800034e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000352:	d202      	bcs.n	800035a <__udivmoddi4+0x10a>
 8000354:	45a0      	cmp	r8, r4
 8000356:	f200 80d9 	bhi.w	800050c <__udivmoddi4+0x2bc>
 800035a:	4618      	mov	r0, r3
 800035c:	eba4 0408 	sub.w	r4, r4, r8
 8000360:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000364:	e7bf      	b.n	80002e6 <__udivmoddi4+0x96>
 8000366:	428b      	cmp	r3, r1
 8000368:	d909      	bls.n	800037e <__udivmoddi4+0x12e>
 800036a:	2d00      	cmp	r5, #0
 800036c:	f000 80b1 	beq.w	80004d2 <__udivmoddi4+0x282>
 8000370:	2600      	movs	r6, #0
 8000372:	e9c5 0100 	strd	r0, r1, [r5]
 8000376:	4630      	mov	r0, r6
 8000378:	4631      	mov	r1, r6
 800037a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800037e:	fab3 f683 	clz	r6, r3
 8000382:	2e00      	cmp	r6, #0
 8000384:	d14a      	bne.n	800041c <__udivmoddi4+0x1cc>
 8000386:	428b      	cmp	r3, r1
 8000388:	d302      	bcc.n	8000390 <__udivmoddi4+0x140>
 800038a:	4282      	cmp	r2, r0
 800038c:	f200 80b8 	bhi.w	8000500 <__udivmoddi4+0x2b0>
 8000390:	1a84      	subs	r4, r0, r2
 8000392:	eb61 0103 	sbc.w	r1, r1, r3
 8000396:	2001      	movs	r0, #1
 8000398:	468c      	mov	ip, r1
 800039a:	2d00      	cmp	r5, #0
 800039c:	d0a8      	beq.n	80002f0 <__udivmoddi4+0xa0>
 800039e:	e9c5 4c00 	strd	r4, ip, [r5]
 80003a2:	e7a5      	b.n	80002f0 <__udivmoddi4+0xa0>
 80003a4:	f1c2 0320 	rsb	r3, r2, #32
 80003a8:	fa20 f603 	lsr.w	r6, r0, r3
 80003ac:	4097      	lsls	r7, r2
 80003ae:	fa01 f002 	lsl.w	r0, r1, r2
 80003b2:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80003b6:	40d9      	lsrs	r1, r3
 80003b8:	4330      	orrs	r0, r6
 80003ba:	0c03      	lsrs	r3, r0, #16
 80003bc:	fbb1 f6fe 	udiv	r6, r1, lr
 80003c0:	fa1f f887 	uxth.w	r8, r7
 80003c4:	fb0e 1116 	mls	r1, lr, r6, r1
 80003c8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80003cc:	fb06 f108 	mul.w	r1, r6, r8
 80003d0:	4299      	cmp	r1, r3
 80003d2:	fa04 f402 	lsl.w	r4, r4, r2
 80003d6:	d909      	bls.n	80003ec <__udivmoddi4+0x19c>
 80003d8:	18fb      	adds	r3, r7, r3
 80003da:	f106 3cff 	add.w	ip, r6, #4294967295
 80003de:	f080 808d 	bcs.w	80004fc <__udivmoddi4+0x2ac>
 80003e2:	4299      	cmp	r1, r3
 80003e4:	f240 808a 	bls.w	80004fc <__udivmoddi4+0x2ac>
 80003e8:	3e02      	subs	r6, #2
 80003ea:	443b      	add	r3, r7
 80003ec:	1a5b      	subs	r3, r3, r1
 80003ee:	b281      	uxth	r1, r0
 80003f0:	fbb3 f0fe 	udiv	r0, r3, lr
 80003f4:	fb0e 3310 	mls	r3, lr, r0, r3
 80003f8:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80003fc:	fb00 f308 	mul.w	r3, r0, r8
 8000400:	428b      	cmp	r3, r1
 8000402:	d907      	bls.n	8000414 <__udivmoddi4+0x1c4>
 8000404:	1879      	adds	r1, r7, r1
 8000406:	f100 3cff 	add.w	ip, r0, #4294967295
 800040a:	d273      	bcs.n	80004f4 <__udivmoddi4+0x2a4>
 800040c:	428b      	cmp	r3, r1
 800040e:	d971      	bls.n	80004f4 <__udivmoddi4+0x2a4>
 8000410:	3802      	subs	r0, #2
 8000412:	4439      	add	r1, r7
 8000414:	1acb      	subs	r3, r1, r3
 8000416:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 800041a:	e778      	b.n	800030e <__udivmoddi4+0xbe>
 800041c:	f1c6 0c20 	rsb	ip, r6, #32
 8000420:	fa03 f406 	lsl.w	r4, r3, r6
 8000424:	fa22 f30c 	lsr.w	r3, r2, ip
 8000428:	431c      	orrs	r4, r3
 800042a:	fa20 f70c 	lsr.w	r7, r0, ip
 800042e:	fa01 f306 	lsl.w	r3, r1, r6
 8000432:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000436:	fa21 f10c 	lsr.w	r1, r1, ip
 800043a:	431f      	orrs	r7, r3
 800043c:	0c3b      	lsrs	r3, r7, #16
 800043e:	fbb1 f9fe 	udiv	r9, r1, lr
 8000442:	fa1f f884 	uxth.w	r8, r4
 8000446:	fb0e 1119 	mls	r1, lr, r9, r1
 800044a:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 800044e:	fb09 fa08 	mul.w	sl, r9, r8
 8000452:	458a      	cmp	sl, r1
 8000454:	fa02 f206 	lsl.w	r2, r2, r6
 8000458:	fa00 f306 	lsl.w	r3, r0, r6
 800045c:	d908      	bls.n	8000470 <__udivmoddi4+0x220>
 800045e:	1861      	adds	r1, r4, r1
 8000460:	f109 30ff 	add.w	r0, r9, #4294967295
 8000464:	d248      	bcs.n	80004f8 <__udivmoddi4+0x2a8>
 8000466:	458a      	cmp	sl, r1
 8000468:	d946      	bls.n	80004f8 <__udivmoddi4+0x2a8>
 800046a:	f1a9 0902 	sub.w	r9, r9, #2
 800046e:	4421      	add	r1, r4
 8000470:	eba1 010a 	sub.w	r1, r1, sl
 8000474:	b2bf      	uxth	r7, r7
 8000476:	fbb1 f0fe 	udiv	r0, r1, lr
 800047a:	fb0e 1110 	mls	r1, lr, r0, r1
 800047e:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000482:	fb00 f808 	mul.w	r8, r0, r8
 8000486:	45b8      	cmp	r8, r7
 8000488:	d907      	bls.n	800049a <__udivmoddi4+0x24a>
 800048a:	19e7      	adds	r7, r4, r7
 800048c:	f100 31ff 	add.w	r1, r0, #4294967295
 8000490:	d22e      	bcs.n	80004f0 <__udivmoddi4+0x2a0>
 8000492:	45b8      	cmp	r8, r7
 8000494:	d92c      	bls.n	80004f0 <__udivmoddi4+0x2a0>
 8000496:	3802      	subs	r0, #2
 8000498:	4427      	add	r7, r4
 800049a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800049e:	eba7 0708 	sub.w	r7, r7, r8
 80004a2:	fba0 8902 	umull	r8, r9, r0, r2
 80004a6:	454f      	cmp	r7, r9
 80004a8:	46c6      	mov	lr, r8
 80004aa:	4649      	mov	r1, r9
 80004ac:	d31a      	bcc.n	80004e4 <__udivmoddi4+0x294>
 80004ae:	d017      	beq.n	80004e0 <__udivmoddi4+0x290>
 80004b0:	b15d      	cbz	r5, 80004ca <__udivmoddi4+0x27a>
 80004b2:	ebb3 020e 	subs.w	r2, r3, lr
 80004b6:	eb67 0701 	sbc.w	r7, r7, r1
 80004ba:	fa07 fc0c 	lsl.w	ip, r7, ip
 80004be:	40f2      	lsrs	r2, r6
 80004c0:	ea4c 0202 	orr.w	r2, ip, r2
 80004c4:	40f7      	lsrs	r7, r6
 80004c6:	e9c5 2700 	strd	r2, r7, [r5]
 80004ca:	2600      	movs	r6, #0
 80004cc:	4631      	mov	r1, r6
 80004ce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004d2:	462e      	mov	r6, r5
 80004d4:	4628      	mov	r0, r5
 80004d6:	e70b      	b.n	80002f0 <__udivmoddi4+0xa0>
 80004d8:	4606      	mov	r6, r0
 80004da:	e6e9      	b.n	80002b0 <__udivmoddi4+0x60>
 80004dc:	4618      	mov	r0, r3
 80004de:	e6fd      	b.n	80002dc <__udivmoddi4+0x8c>
 80004e0:	4543      	cmp	r3, r8
 80004e2:	d2e5      	bcs.n	80004b0 <__udivmoddi4+0x260>
 80004e4:	ebb8 0e02 	subs.w	lr, r8, r2
 80004e8:	eb69 0104 	sbc.w	r1, r9, r4
 80004ec:	3801      	subs	r0, #1
 80004ee:	e7df      	b.n	80004b0 <__udivmoddi4+0x260>
 80004f0:	4608      	mov	r0, r1
 80004f2:	e7d2      	b.n	800049a <__udivmoddi4+0x24a>
 80004f4:	4660      	mov	r0, ip
 80004f6:	e78d      	b.n	8000414 <__udivmoddi4+0x1c4>
 80004f8:	4681      	mov	r9, r0
 80004fa:	e7b9      	b.n	8000470 <__udivmoddi4+0x220>
 80004fc:	4666      	mov	r6, ip
 80004fe:	e775      	b.n	80003ec <__udivmoddi4+0x19c>
 8000500:	4630      	mov	r0, r6
 8000502:	e74a      	b.n	800039a <__udivmoddi4+0x14a>
 8000504:	f1ac 0c02 	sub.w	ip, ip, #2
 8000508:	4439      	add	r1, r7
 800050a:	e713      	b.n	8000334 <__udivmoddi4+0xe4>
 800050c:	3802      	subs	r0, #2
 800050e:	443c      	add	r4, r7
 8000510:	e724      	b.n	800035c <__udivmoddi4+0x10c>
 8000512:	bf00      	nop

08000514 <__aeabi_idiv0>:
 8000514:	4770      	bx	lr
 8000516:	bf00      	nop

08000518 <APPD_SetCPU2GpioConfig>:
 *
 * LOCAL FUNCTIONS
 *
 *************************************************************/
static void APPD_SetCPU2GpioConfig( void )
{
 8000518:	b570      	push	{r4, r5, r6, lr}
 800051a:	b08c      	sub	sp, #48	; 0x30
/* USER CODE BEGIN APPD_SetCPU2GpioConfig */
  GPIO_InitTypeDef gpio_config = {0};
 800051c:	2300      	movs	r3, #0
 800051e:	930b      	str	r3, [sp, #44]	; 0x2c
  uint16_t gpiob_pin_list;
  uint16_t gpioc_pin_list;

  gpioa_pin_list = 0;
  gpiob_pin_list = 0;
  gpioc_pin_list = 0;
 8000520:	461c      	mov	r4, r3
  gpiob_pin_list = 0;
 8000522:	461d      	mov	r5, r3
  gpioa_pin_list = 0;
 8000524:	461e      	mov	r6, r3

  for(local_loop = 0 ; local_loop < GPIO_CFG_NBR_OF_FEATURES; local_loop++)
 8000526:	e006      	b.n	8000536 <APPD_SetCPU2GpioConfig+0x1e>
        case (uint32_t)GPIOA:
            gpioa_pin_list |= aGpioConfigList[local_loop].pin;
          break;

        case (uint32_t)GPIOB:
            gpiob_pin_list |= aGpioConfigList[local_loop].pin;
 8000528:	4a4e      	ldr	r2, [pc, #312]	; (8000664 <APPD_SetCPU2GpioConfig+0x14c>)
 800052a:	eb02 01c3 	add.w	r1, r2, r3, lsl #3
 800052e:	888a      	ldrh	r2, [r1, #4]
 8000530:	4315      	orrs	r5, r2
  for(local_loop = 0 ; local_loop < GPIO_CFG_NBR_OF_FEATURES; local_loop++)
 8000532:	3301      	adds	r3, #1
 8000534:	b2db      	uxtb	r3, r3
 8000536:	2b25      	cmp	r3, #37	; 0x25
 8000538:	d81e      	bhi.n	8000578 <APPD_SetCPU2GpioConfig+0x60>
    if( aGpioConfigList[local_loop].enable != 0)
 800053a:	4a4a      	ldr	r2, [pc, #296]	; (8000664 <APPD_SetCPU2GpioConfig+0x14c>)
 800053c:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
 8000540:	7992      	ldrb	r2, [r2, #6]
 8000542:	2a00      	cmp	r2, #0
 8000544:	d0f5      	beq.n	8000532 <APPD_SetCPU2GpioConfig+0x1a>
      switch((uint32_t)aGpioConfigList[local_loop].port)
 8000546:	4a47      	ldr	r2, [pc, #284]	; (8000664 <APPD_SetCPU2GpioConfig+0x14c>)
 8000548:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 800054c:	4846      	ldr	r0, [pc, #280]	; (8000668 <APPD_SetCPU2GpioConfig+0x150>)
 800054e:	4282      	cmp	r2, r0
 8000550:	d0ea      	beq.n	8000528 <APPD_SetCPU2GpioConfig+0x10>
 8000552:	f500 6080 	add.w	r0, r0, #1024	; 0x400
 8000556:	4282      	cmp	r2, r0
 8000558:	d008      	beq.n	800056c <APPD_SetCPU2GpioConfig+0x54>
 800055a:	f1b2 4f90 	cmp.w	r2, #1207959552	; 0x48000000
 800055e:	d1e8      	bne.n	8000532 <APPD_SetCPU2GpioConfig+0x1a>
            gpioa_pin_list |= aGpioConfigList[local_loop].pin;
 8000560:	4a40      	ldr	r2, [pc, #256]	; (8000664 <APPD_SetCPU2GpioConfig+0x14c>)
 8000562:	eb02 01c3 	add.w	r1, r2, r3, lsl #3
 8000566:	888a      	ldrh	r2, [r1, #4]
 8000568:	4316      	orrs	r6, r2
          break;
 800056a:	e7e2      	b.n	8000532 <APPD_SetCPU2GpioConfig+0x1a>
          break;

        case (uint32_t)GPIOC:
            gpioc_pin_list |= aGpioConfigList[local_loop].pin;
 800056c:	4a3d      	ldr	r2, [pc, #244]	; (8000664 <APPD_SetCPU2GpioConfig+0x14c>)
 800056e:	eb02 01c3 	add.w	r1, r2, r3, lsl #3
 8000572:	888a      	ldrh	r2, [r1, #4]
 8000574:	4314      	orrs	r4, r2
          break;
 8000576:	e7dc      	b.n	8000532 <APPD_SetCPU2GpioConfig+0x1a>
          break;
      }
    }
  }

  gpio_config.Pull = GPIO_NOPULL;
 8000578:	2300      	movs	r3, #0
 800057a:	9309      	str	r3, [sp, #36]	; 0x24
  gpio_config.Mode = GPIO_MODE_OUTPUT_PP;
 800057c:	2301      	movs	r3, #1
 800057e:	9308      	str	r3, [sp, #32]
  gpio_config.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000580:	2303      	movs	r3, #3
 8000582:	930a      	str	r3, [sp, #40]	; 0x28

  if(gpioa_pin_list != 0)
 8000584:	b926      	cbnz	r6, 8000590 <APPD_SetCPU2GpioConfig+0x78>
    __HAL_RCC_C2GPIOA_CLK_ENABLE();
    HAL_GPIO_Init(GPIOA, &gpio_config);
    HAL_GPIO_WritePin(GPIOA, gpioa_pin_list, GPIO_PIN_RESET);
  }

  if(gpiob_pin_list != 0)
 8000586:	bb3d      	cbnz	r5, 80005d8 <APPD_SetCPU2GpioConfig+0xc0>
    __HAL_RCC_C2GPIOB_CLK_ENABLE();
    HAL_GPIO_Init(GPIOB, &gpio_config);
    HAL_GPIO_WritePin(GPIOB, gpiob_pin_list, GPIO_PIN_RESET);
  }

  if(gpioc_pin_list != 0)
 8000588:	2c00      	cmp	r4, #0
 800058a:	d148      	bne.n	800061e <APPD_SetCPU2GpioConfig+0x106>
    HAL_GPIO_WritePin(GPIOC, gpioc_pin_list, GPIO_PIN_RESET);
  }

/* USER CODE END APPD_SetCPU2GpioConfig */
  return;
}
 800058c:	b00c      	add	sp, #48	; 0x30
 800058e:	bd70      	pop	{r4, r5, r6, pc}
    gpio_config.Pin = gpioa_pin_list;
 8000590:	9607      	str	r6, [sp, #28]
  * @retval None
  */
__STATIC_INLINE void LL_AHB2_GRP1_EnableClock(uint32_t Periphs)
{
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB2ENR, Periphs);
 8000592:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000596:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8000598:	f042 0201 	orr.w	r2, r2, #1
 800059c:	64da      	str	r2, [r3, #76]	; 0x4c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 800059e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80005a0:	f002 0201 	and.w	r2, r2, #1
 80005a4:	9202      	str	r2, [sp, #8]
  (void)tmpreg;
 80005a6:	9a02      	ldr	r2, [sp, #8]
  * @retval None
  */
__STATIC_INLINE void LL_C2_AHB2_GRP1_EnableClock(uint32_t Periphs)
{
  __IO uint32_t tmpreg;
  SET_BIT(RCC->C2AHB2ENR, Periphs);
 80005a8:	f8d3 214c 	ldr.w	r2, [r3, #332]	; 0x14c
 80005ac:	f042 0201 	orr.w	r2, r2, #1
 80005b0:	f8c3 214c 	str.w	r2, [r3, #332]	; 0x14c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->C2AHB2ENR, Periphs);
 80005b4:	f8d3 314c 	ldr.w	r3, [r3, #332]	; 0x14c
 80005b8:	f003 0301 	and.w	r3, r3, #1
 80005bc:	9301      	str	r3, [sp, #4]
  (void)tmpreg;
 80005be:	9b01      	ldr	r3, [sp, #4]
    HAL_GPIO_Init(GPIOA, &gpio_config);
 80005c0:	a907      	add	r1, sp, #28
 80005c2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80005c6:	f002 fd3b 	bl	8003040 <HAL_GPIO_Init>
    HAL_GPIO_WritePin(GPIOA, gpioa_pin_list, GPIO_PIN_RESET);
 80005ca:	2200      	movs	r2, #0
 80005cc:	4631      	mov	r1, r6
 80005ce:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80005d2:	f002 fdf9 	bl	80031c8 <HAL_GPIO_WritePin>
 80005d6:	e7d6      	b.n	8000586 <APPD_SetCPU2GpioConfig+0x6e>
    gpio_config.Pin = gpiob_pin_list;
 80005d8:	9507      	str	r5, [sp, #28]
  SET_BIT(RCC->AHB2ENR, Periphs);
 80005da:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80005de:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80005e0:	f042 0202 	orr.w	r2, r2, #2
 80005e4:	64da      	str	r2, [r3, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 80005e6:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80005e8:	f002 0202 	and.w	r2, r2, #2
 80005ec:	9204      	str	r2, [sp, #16]
  (void)tmpreg;
 80005ee:	9a04      	ldr	r2, [sp, #16]
  SET_BIT(RCC->C2AHB2ENR, Periphs);
 80005f0:	f8d3 214c 	ldr.w	r2, [r3, #332]	; 0x14c
 80005f4:	f042 0202 	orr.w	r2, r2, #2
 80005f8:	f8c3 214c 	str.w	r2, [r3, #332]	; 0x14c
  tmpreg = READ_BIT(RCC->C2AHB2ENR, Periphs);
 80005fc:	f8d3 314c 	ldr.w	r3, [r3, #332]	; 0x14c
 8000600:	f003 0302 	and.w	r3, r3, #2
 8000604:	9303      	str	r3, [sp, #12]
  (void)tmpreg;
 8000606:	9b03      	ldr	r3, [sp, #12]
    HAL_GPIO_Init(GPIOB, &gpio_config);
 8000608:	4e17      	ldr	r6, [pc, #92]	; (8000668 <APPD_SetCPU2GpioConfig+0x150>)
 800060a:	a907      	add	r1, sp, #28
 800060c:	4630      	mov	r0, r6
 800060e:	f002 fd17 	bl	8003040 <HAL_GPIO_Init>
    HAL_GPIO_WritePin(GPIOB, gpiob_pin_list, GPIO_PIN_RESET);
 8000612:	2200      	movs	r2, #0
 8000614:	4629      	mov	r1, r5
 8000616:	4630      	mov	r0, r6
 8000618:	f002 fdd6 	bl	80031c8 <HAL_GPIO_WritePin>
 800061c:	e7b4      	b.n	8000588 <APPD_SetCPU2GpioConfig+0x70>
    gpio_config.Pin = gpioc_pin_list;
 800061e:	9407      	str	r4, [sp, #28]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8000620:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000624:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8000626:	f042 0204 	orr.w	r2, r2, #4
 800062a:	64da      	str	r2, [r3, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 800062c:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800062e:	f002 0204 	and.w	r2, r2, #4
 8000632:	9206      	str	r2, [sp, #24]
  (void)tmpreg;
 8000634:	9a06      	ldr	r2, [sp, #24]
  SET_BIT(RCC->C2AHB2ENR, Periphs);
 8000636:	f8d3 214c 	ldr.w	r2, [r3, #332]	; 0x14c
 800063a:	f042 0204 	orr.w	r2, r2, #4
 800063e:	f8c3 214c 	str.w	r2, [r3, #332]	; 0x14c
  tmpreg = READ_BIT(RCC->C2AHB2ENR, Periphs);
 8000642:	f8d3 314c 	ldr.w	r3, [r3, #332]	; 0x14c
 8000646:	f003 0304 	and.w	r3, r3, #4
 800064a:	9305      	str	r3, [sp, #20]
  (void)tmpreg;
 800064c:	9b05      	ldr	r3, [sp, #20]
    HAL_GPIO_Init(GPIOC, &gpio_config);
 800064e:	4d07      	ldr	r5, [pc, #28]	; (800066c <APPD_SetCPU2GpioConfig+0x154>)
 8000650:	a907      	add	r1, sp, #28
 8000652:	4628      	mov	r0, r5
 8000654:	f002 fcf4 	bl	8003040 <HAL_GPIO_Init>
    HAL_GPIO_WritePin(GPIOC, gpioc_pin_list, GPIO_PIN_RESET);
 8000658:	2200      	movs	r2, #0
 800065a:	4621      	mov	r1, r4
 800065c:	4628      	mov	r0, r5
 800065e:	f002 fdb3 	bl	80031c8 <HAL_GPIO_WritePin>
  return;
 8000662:	e793      	b.n	800058c <APPD_SetCPU2GpioConfig+0x74>
 8000664:	080082cc 	.word	0x080082cc
 8000668:	48000400 	.word	0x48000400
 800066c:	48000800 	.word	0x48000800

08000670 <APPD_Init>:
{
 8000670:	b508      	push	{r3, lr}
  HAL_DBGMCU_EnableDBGSleepMode();
 8000672:	f001 fb5d 	bl	8001d30 <HAL_DBGMCU_EnableDBGSleepMode>
  HAL_DBGMCU_EnableDBGStopMode();
 8000676:	f001 fb63 	bl	8001d40 <HAL_DBGMCU_EnableDBGStopMode>
  *         (*) value not defined in all devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableIT_32_63(uint32_t ExtiLine)
{
  SET_BIT(EXTI->IMR2, ExtiLine);
 800067a:	4a06      	ldr	r2, [pc, #24]	; (8000694 <APPD_Init+0x24>)
 800067c:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 8000680:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000684:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  DbgTraceInit();
 8000688:	f005 fde2 	bl	8006250 <DbgTraceInit>
  APPD_SetCPU2GpioConfig( );
 800068c:	f7ff ff44 	bl	8000518 <APPD_SetCPU2GpioConfig>
}
 8000690:	bd08      	pop	{r3, pc}
 8000692:	bf00      	nop
 8000694:	58000800 	.word	0x58000800

08000698 <APPD_EnableCPU2>:
{
 8000698:	b530      	push	{r4, r5, lr}
 800069a:	b089      	sub	sp, #36	; 0x24
  SHCI_C2_DEBUG_Init_Cmd_Packet_t DebugCmdPacket =
 800069c:	ac01      	add	r4, sp, #4
 800069e:	4d08      	ldr	r5, [pc, #32]	; (80006c0 <APPD_EnableCPU2+0x28>)
 80006a0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80006a2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80006a4:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80006a8:	c403      	stmia	r4!, {r0, r1}
 80006aa:	f824 2b02 	strh.w	r2, [r4], #2
 80006ae:	0c12      	lsrs	r2, r2, #16
 80006b0:	7022      	strb	r2, [r4, #0]
  TL_TRACES_Init( );
 80006b2:	f005 fd81 	bl	80061b8 <TL_TRACES_Init>
  SHCI_C2_DEBUG_Init( &DebugCmdPacket  );
 80006b6:	a801      	add	r0, sp, #4
 80006b8:	f005 fa29 	bl	8005b0e <SHCI_C2_DEBUG_Init>
}
 80006bc:	b009      	add	sp, #36	; 0x24
 80006be:	bd30      	pop	{r4, r5, pc}
 80006c0:	08008250 	.word	0x08008250

080006c4 <DbgOutputInit>:
 * WRAP FUNCTIONS
 *
*************************************************************/
#if(CFG_DEBUG_TRACE != 0)
void DbgOutputInit( void )
{
 80006c4:	b508      	push	{r3, lr}
#endif
}
else if (CFG_DEBUG_TRACE_UART == hw_uart1)
{
#if(CFG_HW_USART1_ENABLED == 1)
    MX_USART1_UART_Init();
 80006c6:	f000 ffab 	bl	8001620 <MX_USART1_UART_Init>
}
#endif

/* USER CODE END DbgOutputInit */
  return;
}
 80006ca:	bd08      	pop	{r3, pc}

080006cc <DbgOutputTraces>:

void DbgOutputTraces(  uint8_t *p_data, uint16_t size, void (*cb)(void) )
{
 80006cc:	b508      	push	{r3, lr}
 80006ce:	4613      	mov	r3, r2
/* USER CODE END DbgOutputTraces */
  HW_UART_Transmit_DMA(CFG_DEBUG_TRACE_UART, p_data, size, cb);
 80006d0:	460a      	mov	r2, r1
 80006d2:	4601      	mov	r1, r0
 80006d4:	2000      	movs	r0, #0
 80006d6:	f000 fdf5 	bl	80012c4 <HW_UART_Transmit_DMA>

/* USER CODE END DbgOutputTraces */
  return;
}
 80006da:	bd08      	pop	{r3, pc}

080006dc <Reset_IPCC>:

  return;
}

static void Reset_IPCC( void )
{
 80006dc:	b082      	sub	sp, #8
  SET_BIT(RCC->AHB3ENR, Periphs);
 80006de:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80006e2:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80006e4:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 80006e8:	651a      	str	r2, [r3, #80]	; 0x50
  tmpreg = READ_BIT(RCC->AHB3ENR, Periphs);
 80006ea:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80006ec:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80006f0:	9301      	str	r3, [sp, #4]
  (void)tmpreg;
 80006f2:	9b01      	ldr	r3, [sp, #4]
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C1_IPCC_ClearFlag_CHx(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
  WRITE_REG(IPCCx->C1SCR, Channel);
 80006f4:	4b0a      	ldr	r3, [pc, #40]	; (8000720 <Reset_IPCC+0x44>)
 80006f6:	223f      	movs	r2, #63	; 0x3f
 80006f8:	609a      	str	r2, [r3, #8]
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C2_IPCC_ClearFlag_CHx(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
  WRITE_REG(IPCCx->C2SCR, Channel);
 80006fa:	619a      	str	r2, [r3, #24]
  SET_BIT(IPCCx->C1MR, Channel << IPCC_C1MR_CH1FM_Pos);
 80006fc:	685a      	ldr	r2, [r3, #4]
 80006fe:	f442 127c 	orr.w	r2, r2, #4128768	; 0x3f0000
 8000702:	605a      	str	r2, [r3, #4]
  SET_BIT(IPCCx->C2MR, Channel << (IPCC_C2MR_CH1FM_Pos));
 8000704:	695a      	ldr	r2, [r3, #20]
 8000706:	f442 127c 	orr.w	r2, r2, #4128768	; 0x3f0000
 800070a:	615a      	str	r2, [r3, #20]
  SET_BIT(IPCCx->C1MR, Channel);
 800070c:	685a      	ldr	r2, [r3, #4]
 800070e:	f042 023f 	orr.w	r2, r2, #63	; 0x3f
 8000712:	605a      	str	r2, [r3, #4]
  SET_BIT(IPCCx->C2MR, Channel);
 8000714:	695a      	ldr	r2, [r3, #20]
 8000716:	f042 023f 	orr.w	r2, r2, #63	; 0x3f
 800071a:	615a      	str	r2, [r3, #20]
      IPCC,
      LL_IPCC_CHANNEL_1 | LL_IPCC_CHANNEL_2 | LL_IPCC_CHANNEL_3 | LL_IPCC_CHANNEL_4
      | LL_IPCC_CHANNEL_5 | LL_IPCC_CHANNEL_6);

  return;
}
 800071c:	b002      	add	sp, #8
 800071e:	4770      	bx	lr
 8000720:	58000c00 	.word	0x58000c00

08000724 <Init_Rtc>:
  * @param  RTCx RTC Instance
  * @retval None
  */
__STATIC_INLINE void LL_RTC_DisableWriteProtection(RTC_TypeDef *RTCx)
{
  WRITE_REG(RTCx->WPR, RTC_WRITE_PROTECTION_ENABLE_1);
 8000724:	4b05      	ldr	r3, [pc, #20]	; (800073c <Init_Rtc+0x18>)
 8000726:	22ca      	movs	r2, #202	; 0xca
 8000728:	625a      	str	r2, [r3, #36]	; 0x24
  WRITE_REG(RTCx->WPR, RTC_WRITE_PROTECTION_ENABLE_2);
 800072a:	2253      	movs	r2, #83	; 0x53
 800072c:	625a      	str	r2, [r3, #36]	; 0x24
  *         @arg @ref LL_RTC_WAKEUPCLOCK_CKSPRE_WUT
  * @retval None
  */
__STATIC_INLINE void LL_RTC_WAKEUP_SetClock(RTC_TypeDef *RTCx, uint32_t WakeupClock)
{
  MODIFY_REG(RTCx->CR, RTC_CR_WUCKSEL, WakeupClock);
 800072e:	689a      	ldr	r2, [r3, #8]
 8000730:	f022 0207 	bic.w	r2, r2, #7
 8000734:	609a      	str	r2, [r3, #8]
  WRITE_REG(RTCx->WPR, RTC_WRITE_PROTECTION_DISABLE);
 8000736:	22ff      	movs	r2, #255	; 0xff
 8000738:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enable RTC registers write protection */
  LL_RTC_EnableWriteProtection(RTC);

  return;
}
 800073a:	4770      	bx	lr
 800073c:	40002800 	.word	0x40002800

08000740 <APPE_SysStatusNot>:

static void APPE_SysStatusNot( SHCI_TL_CmdStatus_t status )
{
  UNUSED(status);
  return;
}
 8000740:	4770      	bx	lr

08000742 <Reset_BackupDomain>:
{
 8000742:	b508      	push	{r3, lr}
  * @rmtoll CSR          PINRSTF       LL_RCC_IsActiveFlag_PINRST
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PINRST(void)
{
  return ((READ_BIT(RCC->CSR, RCC_CSR_PINRSTF) == (RCC_CSR_PINRSTF)) ? 1UL : 0UL);
 8000744:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000748:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800074c:	f013 6f80 	tst.w	r3, #67108864	; 0x4000000
 8000750:	d018      	beq.n	8000784 <Reset_BackupDomain+0x42>
  * @rmtoll CSR          SFTRSTF       LL_RCC_IsActiveFlag_SFTRST
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_SFTRST(void)
{
  return ((READ_BIT(RCC->CSR, RCC_CSR_SFTRSTF) == (RCC_CSR_SFTRSTF)) ? 1UL : 0UL);
 8000752:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000756:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800075a:	f013 5f80 	tst.w	r3, #268435456	; 0x10000000
 800075e:	d111      	bne.n	8000784 <Reset_BackupDomain+0x42>
    HAL_PWR_EnableBkUpAccess(); /**< Enable access to the RTC registers */
 8000760:	f002 fd82 	bl	8003268 <HAL_PWR_EnableBkUpAccess>
    HAL_PWR_EnableBkUpAccess();
 8000764:	f002 fd80 	bl	8003268 <HAL_PWR_EnableBkUpAccess>
  SET_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 8000768:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800076c:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 8000770:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8000774:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 8000778:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 800077c:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8000780:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
}
 8000784:	bd08      	pop	{r3, pc}

08000786 <Reset_Device>:
{
 8000786:	b508      	push	{r3, lr}
  Reset_BackupDomain();
 8000788:	f7ff ffdb 	bl	8000742 <Reset_BackupDomain>
  Reset_IPCC();
 800078c:	f7ff ffa6 	bl	80006dc <Reset_IPCC>
}
 8000790:	bd08      	pop	{r3, pc}
	...

08000794 <Config_HSE>:
{
 8000794:	b508      	push	{r3, lr}
  p_otp = (OTP_ID0_t *) OTP_Read(0);
 8000796:	2000      	movs	r0, #0
 8000798:	f005 fda4 	bl	80062e4 <OTP_Read>
  if (p_otp)
 800079c:	b168      	cbz	r0, 80007ba <Config_HSE+0x26>
    LL_RCC_HSE_SetCapacitorTuning(p_otp->hse_tuning);
 800079e:	7981      	ldrb	r1, [r0, #6]
  WRITE_REG(RCC->HSECR, HSE_CONTROL_UNLOCK_KEY);
 80007a0:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80007a4:	4b05      	ldr	r3, [pc, #20]	; (80007bc <Config_HSE+0x28>)
 80007a6:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
  MODIFY_REG(RCC->HSECR, RCC_HSECR_HSETUNE, Value << RCC_HSECR_HSETUNE_Pos);
 80007aa:	f8d2 309c 	ldr.w	r3, [r2, #156]	; 0x9c
 80007ae:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 80007b2:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 80007b6:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
}
 80007ba:	bd08      	pop	{r3, pc}
 80007bc:	cafecafe 	.word	0xcafecafe

080007c0 <SystemPower_Config>:
{
 80007c0:	b508      	push	{r3, lr}
  MODIFY_REG(RCC->CFGR, RCC_CFGR_STOPWUCK, Clock);
 80007c2:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80007c6:	6893      	ldr	r3, [r2, #8]
 80007c8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80007cc:	6093      	str	r3, [r2, #8]
  UTIL_LPM_Init();
 80007ce:	f006 fbc7 	bl	8006f60 <UTIL_LPM_Init>
  *         (*) Not available on devices STM32WB15xx, STM32WB10xx
  * @retval None
  */
__STATIC_INLINE void LL_C2_PWR_SetPowerMode(uint32_t LowPowerMode)
{
  MODIFY_REG(PWR->C2CR1, PWR_C2CR1_LPMS, LowPowerMode);
 80007d2:	4a05      	ldr	r2, [pc, #20]	; (80007e8 <SystemPower_Config+0x28>)
 80007d4:	f8d2 3080 	ldr.w	r3, [r2, #128]	; 0x80
 80007d8:	f023 0307 	bic.w	r3, r3, #7
 80007dc:	f043 0304 	orr.w	r3, r3, #4
 80007e0:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
}
 80007e4:	bd08      	pop	{r3, pc}
 80007e6:	bf00      	nop
 80007e8:	58000400 	.word	0x58000400

080007ec <appe_Tl_Init>:
{
 80007ec:	b510      	push	{r4, lr}
 80007ee:	b088      	sub	sp, #32
  TL_Init();
 80007f0:	f005 fbee 	bl	8005fd0 <TL_Init>
  UTIL_SEQ_RegTask( 1<< CFG_TASK_SYSTEM_HCI_ASYNCH_EVT_ID, UTIL_SEQ_RFU, shci_user_evt_proc );
 80007f4:	4a0f      	ldr	r2, [pc, #60]	; (8000834 <appe_Tl_Init+0x48>)
 80007f6:	2100      	movs	r1, #0
 80007f8:	2010      	movs	r0, #16
 80007fa:	f006 fd01 	bl	8007200 <UTIL_SEQ_RegTask>
  SHci_Tl_Init_Conf.p_cmdbuffer = (uint8_t*)&SystemCmdBuffer;
 80007fe:	4c0e      	ldr	r4, [pc, #56]	; (8000838 <appe_Tl_Init+0x4c>)
 8000800:	9400      	str	r4, [sp, #0]
  SHci_Tl_Init_Conf.StatusNotCallBack = APPE_SysStatusNot;
 8000802:	4b0e      	ldr	r3, [pc, #56]	; (800083c <appe_Tl_Init+0x50>)
 8000804:	9301      	str	r3, [sp, #4]
  shci_init(APPE_SysUserEvtRx, (void*) &SHci_Tl_Init_Conf);
 8000806:	4669      	mov	r1, sp
 8000808:	480d      	ldr	r0, [pc, #52]	; (8000840 <appe_Tl_Init+0x54>)
 800080a:	f005 fb33 	bl	8005e74 <shci_init>
  tl_mm_config.p_BleSpareEvtBuffer = BleSpareEvtBuffer;
 800080e:	f504 7386 	add.w	r3, r4, #268	; 0x10c
 8000812:	9302      	str	r3, [sp, #8]
  tl_mm_config.p_SystemSpareEvtBuffer = SystemSpareEvtBuffer;
 8000814:	f504 7306 	add.w	r3, r4, #536	; 0x218
 8000818:	9303      	str	r3, [sp, #12]
  tl_mm_config.p_AsynchEvtPool = EvtPool;
 800081a:	f504 7449 	add.w	r4, r4, #804	; 0x324
 800081e:	9404      	str	r4, [sp, #16]
  tl_mm_config.AsynchEvtPoolSize = POOL_SIZE;
 8000820:	f240 533c 	movw	r3, #1340	; 0x53c
 8000824:	9305      	str	r3, [sp, #20]
  TL_MM_Init( &tl_mm_config );
 8000826:	a802      	add	r0, sp, #8
 8000828:	f005 fc98 	bl	800615c <TL_MM_Init>
  TL_Enable();
 800082c:	f005 fbcc 	bl	8005fc8 <TL_Enable>
}
 8000830:	b008      	add	sp, #32
 8000832:	bd10      	pop	{r4, pc}
 8000834:	08005e99 	.word	0x08005e99
 8000838:	200301e8 	.word	0x200301e8
 800083c:	08000741 	.word	0x08000741
 8000840:	080008f5 	.word	0x080008f5

08000844 <APPE_SysEvtError>:
 * @param  ErrorCode  : errorCode detected by the M0 firmware
 *
 * @retval None
 */
static void APPE_SysEvtError( void * pPayload)
{
 8000844:	b510      	push	{r4, lr}
  TL_AsynchEvt_t *p_sys_event;
  SCHI_SystemErrCode_t *p_sys_error_code;

  p_sys_event = (TL_AsynchEvt_t*)(((tSHCI_UserEvtRxParam*)pPayload)->pckt->evtserial.evt.payload);
 8000846:	6844      	ldr	r4, [r0, #4]
  p_sys_error_code = (SCHI_SystemErrCode_t*) p_sys_event->payload;

  APP_DBG_MSG("SHCI_SUB_EVT_ERROR_NOTIF WITH REASON %x \n",(*p_sys_error_code));
 8000848:	7b61      	ldrb	r1, [r4, #13]
 800084a:	4806      	ldr	r0, [pc, #24]	; (8000864 <APPE_SysEvtError+0x20>)
 800084c:	f006 fd28 	bl	80072a0 <iprintf>

  if ((*p_sys_error_code) == ERR_BLE_INIT)
 8000850:	7b63      	ldrb	r3, [r4, #13]
 8000852:	b91b      	cbnz	r3, 800085c <APPE_SysEvtError+0x18>
  {
    /* Error during BLE stack initialization */
    APP_DBG_MSG("SHCI_SUB_EVT_ERROR_NOTIF WITH REASON - ERR_BLE_INIT \n");
 8000854:	4804      	ldr	r0, [pc, #16]	; (8000868 <APPE_SysEvtError+0x24>)
 8000856:	f006 fda9 	bl	80073ac <puts>
  else
  {
    APP_DBG_MSG("SHCI_SUB_EVT_ERROR_NOTIF WITH REASON - BLE ERROR \n");
  }
  return;
}
 800085a:	bd10      	pop	{r4, pc}
    APP_DBG_MSG("SHCI_SUB_EVT_ERROR_NOTIF WITH REASON - BLE ERROR \n");
 800085c:	4803      	ldr	r0, [pc, #12]	; (800086c <APPE_SysEvtError+0x28>)
 800085e:	f006 fda5 	bl	80073ac <puts>
  return;
 8000862:	e7fa      	b.n	800085a <APPE_SysEvtError+0x16>
 8000864:	080083fc 	.word	0x080083fc
 8000868:	08008428 	.word	0x08008428
 800086c:	08008460 	.word	0x08008460

08000870 <APPE_SysEvtReadyProcessing>:

static void APPE_SysEvtReadyProcessing( void * pPayload )
{
 8000870:	b510      	push	{r4, lr}
 8000872:	b084      	sub	sp, #16
  TL_AsynchEvt_t *p_sys_event;
  SHCI_C2_Ready_Evt_t *p_sys_ready_event;

  SHCI_C2_CONFIG_Cmd_Param_t config_param = {0};
 8000874:	2300      	movs	r3, #0
 8000876:	9300      	str	r3, [sp, #0]
 8000878:	9301      	str	r3, [sp, #4]
 800087a:	9302      	str	r3, [sp, #8]
 800087c:	f8ad 300c 	strh.w	r3, [sp, #12]
  uint32_t RevisionID=0;

  p_sys_event = (TL_AsynchEvt_t*)(((tSHCI_UserEvtRxParam*)pPayload)->pckt->evtserial.evt.payload);
 8000880:	6843      	ldr	r3, [r0, #4]
  p_sys_ready_event = (SHCI_C2_Ready_Evt_t*) p_sys_event->payload;

  if(p_sys_ready_event->sysevt_ready_rsp == WIRELESS_FW_RUNNING)
 8000882:	7b5b      	ldrb	r3, [r3, #13]
 8000884:	b13b      	cbz	r3, 8000896 <APPE_SysEvtReadyProcessing+0x26>
 8000886:	4604      	mov	r4, r0
    (void)SHCI_C2_Config(&config_param);

    APP_BLE_Init( );
    UTIL_LPM_SetOffMode(1U << CFG_LPM_APP, UTIL_LPM_ENABLE);
  }
  else if (p_sys_ready_event->sysevt_ready_rsp == FUS_FW_RUNNING)
 8000888:	2b01      	cmp	r3, #1
 800088a:	d022      	beq.n	80008d2 <APPE_SysEvtReadyProcessing+0x62>
    /* The packet shall not be released as this is not supported by the FUS */
    ((tSHCI_UserEvtRxParam*)pPayload)->status = SHCI_TL_UserEventFlow_Disable;
  }
  else
  {
    APP_DBG_MSG("SHCI_SUB_EVT_CODE_READY - UNEXPECTED CASE \n");
 800088c:	4814      	ldr	r0, [pc, #80]	; (80008e0 <APPE_SysEvtReadyProcessing+0x70>)
 800088e:	f006 fd8d 	bl	80073ac <puts>
  }

  return;
}
 8000892:	b004      	add	sp, #16
 8000894:	bd10      	pop	{r4, pc}
    APP_DBG_MSG("SHCI_SUB_EVT_CODE_READY - WIRELESS_FW_RUNNING \n");
 8000896:	4813      	ldr	r0, [pc, #76]	; (80008e4 <APPE_SysEvtReadyProcessing+0x74>)
 8000898:	f006 fd88 	bl	80073ac <puts>
    APPD_EnableCPU2( );
 800089c:	f7ff fefc 	bl	8000698 <APPD_EnableCPU2>
    config_param.PayloadCmdSize = SHCI_C2_CONFIG_PAYLOAD_CMD_SIZE;
 80008a0:	230d      	movs	r3, #13
 80008a2:	f88d 3000 	strb.w	r3, [sp]
    config_param.EvtMask1 = SHCI_C2_CONFIG_EVTMASK1_BIT0_ERROR_NOTIF_ENABLE
 80008a6:	237f      	movs	r3, #127	; 0x7f
 80008a8:	f88d 3002 	strb.w	r3, [sp, #2]
  * @rmtoll DBGMCU_IDCODE REV_ID        LL_DBGMCU_GetRevisionID
  * @retval Values between Min_Data=0x00 and Max_Data=0xFFFF
  */
__STATIC_INLINE uint32_t LL_DBGMCU_GetRevisionID(void)
{
  return (uint32_t)(READ_BIT(DBGMCU->IDCODE, DBGMCU_IDCODE_REV_ID) >> DBGMCU_IDCODE_REV_ID_Pos);
 80008ac:	4b0e      	ldr	r3, [pc, #56]	; (80008e8 <APPE_SysEvtReadyProcessing+0x78>)
 80008ae:	681c      	ldr	r4, [r3, #0]
 80008b0:	0c24      	lsrs	r4, r4, #16
    APP_DBG_MSG("DBGMCU_GetRevisionID= %lx \n\n", RevisionID);
 80008b2:	4621      	mov	r1, r4
 80008b4:	480d      	ldr	r0, [pc, #52]	; (80008ec <APPE_SysEvtReadyProcessing+0x7c>)
 80008b6:	f006 fcf3 	bl	80072a0 <iprintf>
    config_param.RevisionID = RevisionID;
 80008ba:	f8ad 400c 	strh.w	r4, [sp, #12]
    (void)SHCI_C2_Config(&config_param);
 80008be:	4668      	mov	r0, sp
 80008c0:	f005 f934 	bl	8005b2c <SHCI_C2_Config>
    APP_BLE_Init( );
 80008c4:	f006 f862 	bl	800698c <APP_BLE_Init>
    UTIL_LPM_SetOffMode(1U << CFG_LPM_APP, UTIL_LPM_ENABLE);
 80008c8:	2100      	movs	r1, #0
 80008ca:	2001      	movs	r0, #1
 80008cc:	f006 fb68 	bl	8006fa0 <UTIL_LPM_SetOffMode>
 80008d0:	e7df      	b.n	8000892 <APPE_SysEvtReadyProcessing+0x22>
    APP_DBG_MSG("SHCI_SUB_EVT_CODE_READY - FUS_FW_RUNNING \n");
 80008d2:	4807      	ldr	r0, [pc, #28]	; (80008f0 <APPE_SysEvtReadyProcessing+0x80>)
 80008d4:	f006 fd6a 	bl	80073ac <puts>
    ((tSHCI_UserEvtRxParam*)pPayload)->status = SHCI_TL_UserEventFlow_Disable;
 80008d8:	2300      	movs	r3, #0
 80008da:	7023      	strb	r3, [r4, #0]
 80008dc:	e7d9      	b.n	8000892 <APPE_SysEvtReadyProcessing+0x22>
 80008de:	bf00      	nop
 80008e0:	08008510 	.word	0x08008510
 80008e4:	08008494 	.word	0x08008494
 80008e8:	e0042000 	.word	0xe0042000
 80008ec:	080084c4 	.word	0x080084c4
 80008f0:	080084e4 	.word	0x080084e4

080008f4 <APPE_SysUserEvtRx>:
{
 80008f4:	b530      	push	{r4, r5, lr}
 80008f6:	b085      	sub	sp, #20
 80008f8:	4604      	mov	r4, r0
  p_sys_event = (TL_AsynchEvt_t*)(((tSHCI_UserEvtRxParam*)pPayload)->pckt->evtserial.evt.payload);
 80008fa:	6845      	ldr	r5, [r0, #4]
  SHCI_GetWirelessFwInfo( &WirelessInfo );
 80008fc:	4668      	mov	r0, sp
 80008fe:	f005 f923 	bl	8005b48 <SHCI_GetWirelessFwInfo>
  APP_DBG_MSG("Wireless Firmware version %d.%d.%d\n", WirelessInfo.VersionMajor, WirelessInfo.VersionMinor, WirelessInfo.VersionSub);
 8000902:	f89d 3002 	ldrb.w	r3, [sp, #2]
 8000906:	f89d 2001 	ldrb.w	r2, [sp, #1]
 800090a:	f89d 1000 	ldrb.w	r1, [sp]
 800090e:	4822      	ldr	r0, [pc, #136]	; (8000998 <APPE_SysUserEvtRx+0xa4>)
 8000910:	f006 fcc6 	bl	80072a0 <iprintf>
  APP_DBG_MSG("Wireless Firmware build %d\n", WirelessInfo.VersionReleaseType);
 8000914:	f89d 1004 	ldrb.w	r1, [sp, #4]
 8000918:	4820      	ldr	r0, [pc, #128]	; (800099c <APPE_SysUserEvtRx+0xa8>)
 800091a:	f006 fcc1 	bl	80072a0 <iprintf>
  APP_DBG_MSG("FUS version %d.%d.%d\n\n", WirelessInfo.FusVersionMajor, WirelessInfo.FusVersionMinor, WirelessInfo.FusVersionSub);
 800091e:	f89d 300c 	ldrb.w	r3, [sp, #12]
 8000922:	f89d 200b 	ldrb.w	r2, [sp, #11]
 8000926:	f89d 100a 	ldrb.w	r1, [sp, #10]
 800092a:	481d      	ldr	r0, [pc, #116]	; (80009a0 <APPE_SysUserEvtRx+0xac>)
 800092c:	f006 fcb8 	bl	80072a0 <iprintf>
  switch(p_sys_event->subevtcode)
 8000930:	f8b5 300b 	ldrh.w	r3, [r5, #11]
 8000934:	f5a3 4312 	sub.w	r3, r3, #37376	; 0x9200
 8000938:	2b07      	cmp	r3, #7
 800093a:	d808      	bhi.n	800094e <APPE_SysUserEvtRx+0x5a>
 800093c:	e8df f003 	tbb	[pc, r3]
 8000940:	070d0904 	.word	0x070d0904
 8000944:	28221e18 	.word	0x28221e18
    APPE_SysEvtReadyProcessing(pPayload);
 8000948:	4620      	mov	r0, r4
 800094a:	f7ff ff91 	bl	8000870 <APPE_SysEvtReadyProcessing>
}
 800094e:	b005      	add	sp, #20
 8000950:	bd30      	pop	{r4, r5, pc}
    APPE_SysEvtError(pPayload);
 8000952:	4620      	mov	r0, r4
 8000954:	f7ff ff76 	bl	8000844 <APPE_SysEvtError>
    break;
 8000958:	e7f9      	b.n	800094e <APPE_SysUserEvtRx+0x5a>
    APP_DBG_MSG("-- BLE NVM RAM HAS BEEN UPDATED BY CMO+ \n");
 800095a:	4812      	ldr	r0, [pc, #72]	; (80009a4 <APPE_SysUserEvtRx+0xb0>)
 800095c:	f006 fd26 	bl	80073ac <puts>
    APP_DBG_MSG("SHCI_SUB_EVT_BLE_NVM_RAM_UPDATE : StartAddress = %lx , Size = %ld\n",
 8000960:	f8d5 2011 	ldr.w	r2, [r5, #17]
 8000964:	f8d5 100d 	ldr.w	r1, [r5, #13]
 8000968:	480f      	ldr	r0, [pc, #60]	; (80009a8 <APPE_SysUserEvtRx+0xb4>)
 800096a:	f006 fc99 	bl	80072a0 <iprintf>
    break;
 800096e:	e7ee      	b.n	800094e <APPE_SysUserEvtRx+0x5a>
    APP_DBG_MSG("SHCI_SUB_EVT_NVM_START_WRITE : NumberOfWords = %ld\n",
 8000970:	f8d5 100d 	ldr.w	r1, [r5, #13]
 8000974:	480d      	ldr	r0, [pc, #52]	; (80009ac <APPE_SysUserEvtRx+0xb8>)
 8000976:	f006 fc93 	bl	80072a0 <iprintf>
    break;
 800097a:	e7e8      	b.n	800094e <APPE_SysUserEvtRx+0x5a>
    APP_DBG_MSG("SHCI_SUB_EVT_NVM_END_WRITE\n");
 800097c:	480c      	ldr	r0, [pc, #48]	; (80009b0 <APPE_SysUserEvtRx+0xbc>)
 800097e:	f006 fd15 	bl	80073ac <puts>
    break;
 8000982:	e7e4      	b.n	800094e <APPE_SysUserEvtRx+0x5a>
    APP_DBG_MSG("SHCI_SUB_EVT_NVM_START_ERASE : NumberOfSectors = %ld\n",
 8000984:	f8d5 100d 	ldr.w	r1, [r5, #13]
 8000988:	480a      	ldr	r0, [pc, #40]	; (80009b4 <APPE_SysUserEvtRx+0xc0>)
 800098a:	f006 fc89 	bl	80072a0 <iprintf>
    break;
 800098e:	e7de      	b.n	800094e <APPE_SysUserEvtRx+0x5a>
    APP_DBG_MSG("SHCI_SUB_EVT_NVM_END_ERASE\n");
 8000990:	4809      	ldr	r0, [pc, #36]	; (80009b8 <APPE_SysUserEvtRx+0xc4>)
 8000992:	f006 fd0b 	bl	80073ac <puts>
  return;
 8000996:	e7da      	b.n	800094e <APPE_SysUserEvtRx+0x5a>
 8000998:	0800853c 	.word	0x0800853c
 800099c:	08008560 	.word	0x08008560
 80009a0:	0800857c 	.word	0x0800857c
 80009a4:	08008594 	.word	0x08008594
 80009a8:	080085c0 	.word	0x080085c0
 80009ac:	08008604 	.word	0x08008604
 80009b0:	08008638 	.word	0x08008638
 80009b4:	08008654 	.word	0x08008654
 80009b8:	0800868c 	.word	0x0800868c

080009bc <MX_APPE_Config>:
{
 80009bc:	b508      	push	{r3, lr}
  __HAL_FLASH_CLEAR_FLAG( FLASH_FLAG_OPTVERR );
 80009be:	4b04      	ldr	r3, [pc, #16]	; (80009d0 <MX_APPE_Config+0x14>)
 80009c0:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 80009c4:	611a      	str	r2, [r3, #16]
  Reset_Device( );
 80009c6:	f7ff fede 	bl	8000786 <Reset_Device>
  Config_HSE();
 80009ca:	f7ff fee3 	bl	8000794 <Config_HSE>
}
 80009ce:	bd08      	pop	{r3, pc}
 80009d0:	58004000 	.word	0x58004000

080009d4 <Init_Smps>:
{
 80009d4:	b082      	sub	sp, #8
  MODIFY_REG(PWR->CR5, PWR_CR5_SMPSSC, StartupCurrent);
 80009d6:	4a14      	ldr	r2, [pc, #80]	; (8000a28 <Init_Smps+0x54>)
 80009d8:	69d3      	ldr	r3, [r2, #28]
 80009da:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80009de:	61d3      	str	r3, [r2, #28]
  __IO const uint32_t OutputVoltageLevel_calibration = (((*SMPS_VOLTAGE_CAL_ADDR) & SMPS_VOLTAGE_CAL) >> SMPS_VOLTAGE_CAL_POS);  /* SMPS output voltage level calibrated in production */
 80009e0:	4b12      	ldr	r3, [pc, #72]	; (8000a2c <Init_Smps+0x58>)
 80009e2:	681b      	ldr	r3, [r3, #0]
 80009e4:	f3c3 2303 	ubfx	r3, r3, #8, #4
 80009e8:	9301      	str	r3, [sp, #4]
  if(OutputVoltageLevel_calibration == 0UL)
 80009ea:	9b01      	ldr	r3, [sp, #4]
 80009ec:	b963      	cbnz	r3, 8000a08 <Init_Smps+0x34>
    MODIFY_REG(PWR->CR5, PWR_CR5_SMPSVOS, OutputVoltageLevel);
 80009ee:	69d3      	ldr	r3, [r2, #28]
 80009f0:	f023 030f 	bic.w	r3, r3, #15
 80009f4:	f043 0304 	orr.w	r3, r3, #4
 80009f8:	61d3      	str	r3, [r2, #28]
  SET_BIT(PWR->CR5, PWR_CR5_SMPSEN);
 80009fa:	4a0b      	ldr	r2, [pc, #44]	; (8000a28 <Init_Smps+0x54>)
 80009fc:	69d3      	ldr	r3, [r2, #28]
 80009fe:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000a02:	61d3      	str	r3, [r2, #28]
}
 8000a04:	b002      	add	sp, #8
 8000a06:	4770      	bx	lr
    TrimmingSteps = ((int32_t)OutputVoltageLevel_calibration - (int32_t)(LL_PWR_SMPS_OUTPUT_VOLTAGE_1V50 >> PWR_CR5_SMPSVOS_Pos));
 8000a08:	9b01      	ldr	r3, [sp, #4]
    if(OutputVoltageLevelTrimmed < 0)
 8000a0a:	3b02      	subs	r3, #2
 8000a0c:	d403      	bmi.n	8000a16 <Init_Smps+0x42>
      if(OutputVoltageLevelTrimmed > (int32_t)PWR_CR5_SMPSVOS)
 8000a0e:	2b0f      	cmp	r3, #15
 8000a10:	dd02      	ble.n	8000a18 <Init_Smps+0x44>
        OutputVoltageLevelTrimmed = (int32_t)PWR_CR5_SMPSVOS;
 8000a12:	230f      	movs	r3, #15
 8000a14:	e000      	b.n	8000a18 <Init_Smps+0x44>
      OutputVoltageLevelTrimmed = 0;
 8000a16:	2300      	movs	r3, #0
    MODIFY_REG(PWR->CR5, PWR_CR5_SMPSVOS, (uint32_t)OutputVoltageLevelTrimmed);
 8000a18:	4903      	ldr	r1, [pc, #12]	; (8000a28 <Init_Smps+0x54>)
 8000a1a:	69ca      	ldr	r2, [r1, #28]
 8000a1c:	f022 020f 	bic.w	r2, r2, #15
 8000a20:	4313      	orrs	r3, r2
 8000a22:	61cb      	str	r3, [r1, #28]
 8000a24:	e7e9      	b.n	80009fa <Init_Smps+0x26>
 8000a26:	bf00      	nop
 8000a28:	58000400 	.word	0x58000400
 8000a2c:	1fff7558 	.word	0x1fff7558

08000a30 <Init_Exti>:
 8000a30:	4b02      	ldr	r3, [pc, #8]	; (8000a3c <Init_Exti+0xc>)
 8000a32:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 8000a36:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
}
 8000a3a:	4770      	bx	lr
 8000a3c:	58000800 	.word	0x58000800

08000a40 <System_Init>:
{
 8000a40:	b508      	push	{r3, lr}
  Init_Smps( );
 8000a42:	f7ff ffc7 	bl	80009d4 <Init_Smps>
  Init_Exti( );
 8000a46:	f7ff fff3 	bl	8000a30 <Init_Exti>
  Init_Rtc( );
 8000a4a:	f7ff fe6b 	bl	8000724 <Init_Rtc>
}
 8000a4e:	bd08      	pop	{r3, pc}

08000a50 <MX_APPE_Init>:
{
 8000a50:	b508      	push	{r3, lr}
  System_Init( );       /**< System initialization */
 8000a52:	f7ff fff5 	bl	8000a40 <System_Init>
  SystemPower_Config(); /**< Configure the system Power Mode */
 8000a56:	f7ff feb3 	bl	80007c0 <SystemPower_Config>
  HW_TS_Init(hw_ts_InitMode_Full, &hrtc); /**< Initialize the TimerServer */
 8000a5a:	4906      	ldr	r1, [pc, #24]	; (8000a74 <MX_APPE_Init+0x24>)
 8000a5c:	2000      	movs	r0, #0
 8000a5e:	f000 fa27 	bl	8000eb0 <HW_TS_Init>
  APPD_Init();
 8000a62:	f7ff fe05 	bl	8000670 <APPD_Init>
  UTIL_LPM_SetOffMode(1 << CFG_LPM_APP, UTIL_LPM_DISABLE);
 8000a66:	2101      	movs	r1, #1
 8000a68:	4608      	mov	r0, r1
 8000a6a:	f006 fa99 	bl	8006fa0 <UTIL_LPM_SetOffMode>
  appe_Tl_Init();	/* Initialize all transport layers */
 8000a6e:	f7ff febd 	bl	80007ec <appe_Tl_Init>
}
 8000a72:	bd08      	pop	{r3, pc}
 8000a74:	20001598 	.word	0x20001598

08000a78 <MX_APPE_Process>:
    __WFI( );
  }
}

void MX_APPE_Process(void)
{
 8000a78:	b508      	push	{r3, lr}
  /* USER CODE BEGIN MX_APPE_Process_1 */

  /* USER CODE END MX_APPE_Process_1 */
  UTIL_SEQ_Run(UTIL_SEQ_DEFAULT);
 8000a7a:	f04f 30ff 	mov.w	r0, #4294967295
 8000a7e:	f006 fb03 	bl	8007088 <UTIL_SEQ_Run>
  /* USER CODE BEGIN MX_APPE_Process_2 */

  /* USER CODE END MX_APPE_Process_2 */
}
 8000a82:	bd08      	pop	{r3, pc}

08000a84 <UTIL_SEQ_Idle>:
{
#if ( CFG_LPM_SUPPORTED == 1)
  UTIL_LPM_EnterLowPower( );
#endif
  return;
}
 8000a84:	4770      	bx	lr

08000a86 <UTIL_SEQ_EvtIdle>:
  *
  * @param  evt_waited_bm : Event pending.
  * @retval None
  */
void UTIL_SEQ_EvtIdle( UTIL_SEQ_bm_t task_id_bm, UTIL_SEQ_bm_t evt_waited_bm )
{
 8000a86:	b508      	push	{r3, lr}
  UTIL_SEQ_Run( UTIL_SEQ_DEFAULT );
 8000a88:	f04f 30ff 	mov.w	r0, #4294967295
 8000a8c:	f006 fafc 	bl	8007088 <UTIL_SEQ_Run>

  return;
}
 8000a90:	bd08      	pop	{r3, pc}

08000a92 <shci_notify_asynch_evt>:

void shci_notify_asynch_evt(void* pdata)
{
 8000a92:	b508      	push	{r3, lr}
  UTIL_SEQ_SetTask( 1<<CFG_TASK_SYSTEM_HCI_ASYNCH_EVT_ID, CFG_SCH_PRIO_0);
 8000a94:	2100      	movs	r1, #0
 8000a96:	2010      	movs	r0, #16
 8000a98:	f006 fa98 	bl	8006fcc <UTIL_SEQ_SetTask>
  return;
}
 8000a9c:	bd08      	pop	{r3, pc}

08000a9e <shci_cmd_resp_release>:

void shci_cmd_resp_release(uint32_t flag)
{
 8000a9e:	b508      	push	{r3, lr}
  UTIL_SEQ_SetEvt( 1<< CFG_IDLEEVT_SYSTEM_HCI_CMD_EVT_RSP_ID );
 8000aa0:	2002      	movs	r0, #2
 8000aa2:	f006 fac5 	bl	8007030 <UTIL_SEQ_SetEvt>
  return;
}
 8000aa6:	bd08      	pop	{r3, pc}

08000aa8 <shci_cmd_resp_wait>:

void shci_cmd_resp_wait(uint32_t timeout)
{
 8000aa8:	b508      	push	{r3, lr}
  UTIL_SEQ_WaitEvt( 1<< CFG_IDLEEVT_SYSTEM_HCI_CMD_EVT_RSP_ID );
 8000aaa:	2002      	movs	r0, #2
 8000aac:	f006 fb7c 	bl	80071a8 <UTIL_SEQ_WaitEvt>
  return;
}
 8000ab0:	bd08      	pop	{r3, pc}
	...

08000ab4 <ReadRtcSsrValue>:
static uint32_t ReadRtcSsrValue(void)
{
  uint32_t first_read;
  uint32_t second_read;

  first_read = (uint32_t)(READ_BIT(RTC->SSR, RTC_SSR_SS));
 8000ab4:	4a06      	ldr	r2, [pc, #24]	; (8000ad0 <ReadRtcSsrValue+0x1c>)
 8000ab6:	6a93      	ldr	r3, [r2, #40]	; 0x28
 8000ab8:	b29b      	uxth	r3, r3

  second_read = (uint32_t)(READ_BIT(RTC->SSR, RTC_SSR_SS));
 8000aba:	6a90      	ldr	r0, [r2, #40]	; 0x28
 8000abc:	b280      	uxth	r0, r0

  while(first_read != second_read)
 8000abe:	4283      	cmp	r3, r0
 8000ac0:	d004      	beq.n	8000acc <ReadRtcSsrValue+0x18>
  {
    first_read = second_read;

    second_read = (uint32_t)(READ_BIT(RTC->SSR, RTC_SSR_SS));
 8000ac2:	4b03      	ldr	r3, [pc, #12]	; (8000ad0 <ReadRtcSsrValue+0x1c>)
 8000ac4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    first_read = second_read;
 8000ac6:	4603      	mov	r3, r0
    second_read = (uint32_t)(READ_BIT(RTC->SSR, RTC_SSR_SS));
 8000ac8:	b290      	uxth	r0, r2
 8000aca:	e7f8      	b.n	8000abe <ReadRtcSsrValue+0xa>
  }

  return second_read;
}
 8000acc:	4770      	bx	lr
 8000ace:	bf00      	nop
 8000ad0:	40002800 	.word	0x40002800

08000ad4 <LinkTimerAfter>:
 * @param  TimerID:   The ID of the Timer
 * @param  RefTimerID: The ID of the Timer to be linked after
 * @retval None
 */
static void LinkTimerAfter(uint8_t TimerID, uint8_t RefTimerID)
{
 8000ad4:	b410      	push	{r4}
  uint8_t next_id;

  next_id = aTimerContext[RefTimerID].NextID;
 8000ad6:	eb01 0241 	add.w	r2, r1, r1, lsl #1
 8000ada:	4b0e      	ldr	r3, [pc, #56]	; (8000b14 <LinkTimerAfter+0x40>)
 8000adc:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8000ae0:	7d5b      	ldrb	r3, [r3, #21]
 8000ae2:	b2db      	uxtb	r3, r3

  if(next_id != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 8000ae4:	2b06      	cmp	r3, #6
 8000ae6:	d005      	beq.n	8000af4 <LinkTimerAfter+0x20>
  {
    aTimerContext[next_id].PreviousID = TimerID;
 8000ae8:	eb03 0243 	add.w	r2, r3, r3, lsl #1
 8000aec:	4c09      	ldr	r4, [pc, #36]	; (8000b14 <LinkTimerAfter+0x40>)
 8000aee:	eb04 02c2 	add.w	r2, r4, r2, lsl #3
 8000af2:	7510      	strb	r0, [r2, #20]
  }
  aTimerContext[TimerID].NextID = next_id;
 8000af4:	4a07      	ldr	r2, [pc, #28]	; (8000b14 <LinkTimerAfter+0x40>)
 8000af6:	eb00 0440 	add.w	r4, r0, r0, lsl #1
 8000afa:	eb02 04c4 	add.w	r4, r2, r4, lsl #3
 8000afe:	7563      	strb	r3, [r4, #21]
  aTimerContext[TimerID].PreviousID = RefTimerID ;
 8000b00:	7521      	strb	r1, [r4, #20]
  aTimerContext[RefTimerID].NextID = TimerID;
 8000b02:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 8000b06:	eb02 01c1 	add.w	r1, r2, r1, lsl #3
 8000b0a:	7548      	strb	r0, [r1, #21]

  return;
}
 8000b0c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8000b10:	4770      	bx	lr
 8000b12:	bf00      	nop
 8000b14:	20000090 	.word	0x20000090

08000b18 <LinkTimerBefore>:
 */
static void LinkTimerBefore(uint8_t TimerID, uint8_t RefTimerID)
{
  uint8_t previous_id;

  if(RefTimerID != CurrentRunningTimerID)
 8000b18:	4b18      	ldr	r3, [pc, #96]	; (8000b7c <LinkTimerBefore+0x64>)
 8000b1a:	f893 3090 	ldrb.w	r3, [r3, #144]	; 0x90
 8000b1e:	b2db      	uxtb	r3, r3
 8000b20:	428b      	cmp	r3, r1
 8000b22:	d01e      	beq.n	8000b62 <LinkTimerBefore+0x4a>
{
 8000b24:	b410      	push	{r4}
  {
    previous_id = aTimerContext[RefTimerID].PreviousID;
 8000b26:	4b15      	ldr	r3, [pc, #84]	; (8000b7c <LinkTimerBefore+0x64>)
 8000b28:	eb01 0241 	add.w	r2, r1, r1, lsl #1
 8000b2c:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
 8000b30:	7d12      	ldrb	r2, [r2, #20]
 8000b32:	b2d4      	uxtb	r4, r2

    aTimerContext[previous_id].NextID = TimerID;
 8000b34:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8000b38:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
 8000b3c:	7550      	strb	r0, [r2, #21]
    aTimerContext[TimerID].NextID = RefTimerID;
 8000b3e:	eb00 0240 	add.w	r2, r0, r0, lsl #1
 8000b42:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
 8000b46:	7551      	strb	r1, [r2, #21]
    aTimerContext[TimerID].PreviousID = previous_id ;
 8000b48:	eb00 0240 	add.w	r2, r0, r0, lsl #1
 8000b4c:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
 8000b50:	7514      	strb	r4, [r2, #20]
    aTimerContext[RefTimerID].PreviousID = TimerID;
 8000b52:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 8000b56:	eb03 03c1 	add.w	r3, r3, r1, lsl #3
 8000b5a:	7518      	strb	r0, [r3, #20]
    aTimerContext[TimerID].NextID = RefTimerID;
    aTimerContext[RefTimerID].PreviousID = TimerID;
  }

  return;
}
 8000b5c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8000b60:	4770      	bx	lr
    aTimerContext[TimerID].NextID = RefTimerID;
 8000b62:	4b06      	ldr	r3, [pc, #24]	; (8000b7c <LinkTimerBefore+0x64>)
 8000b64:	eb00 0240 	add.w	r2, r0, r0, lsl #1
 8000b68:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
 8000b6c:	7551      	strb	r1, [r2, #21]
    aTimerContext[RefTimerID].PreviousID = TimerID;
 8000b6e:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 8000b72:	eb03 01c1 	add.w	r1, r3, r1, lsl #3
 8000b76:	7508      	strb	r0, [r1, #20]
  return;
 8000b78:	4770      	bx	lr
 8000b7a:	bf00      	nop
 8000b7c:	20000090 	.word	0x20000090

08000b80 <UnlinkTimer>:
 * @param  TimerID:   The ID of the Timer
 * @param  RequestReadSSR: Request to read the SSR register or not
 * @retval None
 */
static void UnlinkTimer(uint8_t TimerID, RequestReadSSR_t RequestReadSSR)
{
 8000b80:	b430      	push	{r4, r5}
  uint8_t previous_id;
  uint8_t next_id;

  if(TimerID == CurrentRunningTimerID)
 8000b82:	4b24      	ldr	r3, [pc, #144]	; (8000c14 <UnlinkTimer+0x94>)
 8000b84:	f893 3090 	ldrb.w	r3, [r3, #144]	; 0x90
 8000b88:	b2db      	uxtb	r3, r3
 8000b8a:	4283      	cmp	r3, r0
 8000b8c:	d02a      	beq.n	8000be4 <UnlinkTimer+0x64>
    PreviousRunningTimerID = CurrentRunningTimerID;
    CurrentRunningTimerID = aTimerContext[TimerID].NextID;
  }
  else
  {
    previous_id = aTimerContext[TimerID].PreviousID;
 8000b8e:	4c21      	ldr	r4, [pc, #132]	; (8000c14 <UnlinkTimer+0x94>)
 8000b90:	eb00 0240 	add.w	r2, r0, r0, lsl #1
 8000b94:	eb04 02c2 	add.w	r2, r4, r2, lsl #3
 8000b98:	7d15      	ldrb	r5, [r2, #20]
    next_id = aTimerContext[TimerID].NextID;
 8000b9a:	7d53      	ldrb	r3, [r2, #21]
 8000b9c:	b2db      	uxtb	r3, r3

    aTimerContext[previous_id].NextID = aTimerContext[TimerID].NextID;
 8000b9e:	7d52      	ldrb	r2, [r2, #21]
 8000ba0:	b2d2      	uxtb	r2, r2
 8000ba2:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8000ba6:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 8000baa:	7562      	strb	r2, [r4, #21]
    if(next_id != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 8000bac:	2b06      	cmp	r3, #6
 8000bae:	d00b      	beq.n	8000bc8 <UnlinkTimer+0x48>
    {
      aTimerContext[next_id].PreviousID = aTimerContext[TimerID].PreviousID;
 8000bb0:	4a18      	ldr	r2, [pc, #96]	; (8000c14 <UnlinkTimer+0x94>)
 8000bb2:	eb00 0440 	add.w	r4, r0, r0, lsl #1
 8000bb6:	eb02 04c4 	add.w	r4, r2, r4, lsl #3
 8000bba:	7d24      	ldrb	r4, [r4, #20]
 8000bbc:	b2e4      	uxtb	r4, r4
 8000bbe:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8000bc2:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8000bc6:	751c      	strb	r4, [r3, #20]
  }

  /**
   * Timer is out of the list
   */
  aTimerContext[TimerID].TimerIDStatus = TimerID_Created;
 8000bc8:	4b12      	ldr	r3, [pc, #72]	; (8000c14 <UnlinkTimer+0x94>)
 8000bca:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 8000bce:	eb03 00c0 	add.w	r0, r3, r0, lsl #3
 8000bd2:	2201      	movs	r2, #1
 8000bd4:	7302      	strb	r2, [r0, #12]

  if((CurrentRunningTimerID == CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER) && (RequestReadSSR == SSR_Read_Requested))
 8000bd6:	f893 3090 	ldrb.w	r3, [r3, #144]	; 0x90
 8000bda:	b2db      	uxtb	r3, r3
 8000bdc:	2b06      	cmp	r3, #6
 8000bde:	d010      	beq.n	8000c02 <UnlinkTimer+0x82>
  {
    SSRValueOnLastSetup = SSR_FORBIDDEN_VALUE;
  }

  return;
}
 8000be0:	bc30      	pop	{r4, r5}
 8000be2:	4770      	bx	lr
    PreviousRunningTimerID = CurrentRunningTimerID;
 8000be4:	4b0b      	ldr	r3, [pc, #44]	; (8000c14 <UnlinkTimer+0x94>)
 8000be6:	f893 2090 	ldrb.w	r2, [r3, #144]	; 0x90
 8000bea:	b2d2      	uxtb	r2, r2
 8000bec:	f883 2091 	strb.w	r2, [r3, #145]	; 0x91
    CurrentRunningTimerID = aTimerContext[TimerID].NextID;
 8000bf0:	eb00 0240 	add.w	r2, r0, r0, lsl #1
 8000bf4:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
 8000bf8:	7d52      	ldrb	r2, [r2, #21]
 8000bfa:	b2d2      	uxtb	r2, r2
 8000bfc:	f883 2090 	strb.w	r2, [r3, #144]	; 0x90
 8000c00:	e7e2      	b.n	8000bc8 <UnlinkTimer+0x48>
  if((CurrentRunningTimerID == CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER) && (RequestReadSSR == SSR_Read_Requested))
 8000c02:	2900      	cmp	r1, #0
 8000c04:	d1ec      	bne.n	8000be0 <UnlinkTimer+0x60>
    SSRValueOnLastSetup = SSR_FORBIDDEN_VALUE;
 8000c06:	4b03      	ldr	r3, [pc, #12]	; (8000c14 <UnlinkTimer+0x94>)
 8000c08:	f04f 32ff 	mov.w	r2, #4294967295
 8000c0c:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
  return;
 8000c10:	e7e6      	b.n	8000be0 <UnlinkTimer+0x60>
 8000c12:	bf00      	nop
 8000c14:	20000090 	.word	0x20000090

08000c18 <ReturnTimeElapsed>:
 *        since the time the timer has been started
 * @param  None
 * @retval Time expired in Ticks
 */
static uint16_t ReturnTimeElapsed(void)
{
 8000c18:	b508      	push	{r3, lr}
  uint32_t  return_value;
  uint32_t  wrap_counter;

  if(SSRValueOnLastSetup != SSR_FORBIDDEN_VALUE)
 8000c1a:	4b12      	ldr	r3, [pc, #72]	; (8000c64 <ReturnTimeElapsed+0x4c>)
 8000c1c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8000c20:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000c24:	d102      	bne.n	8000c2c <ReturnTimeElapsed+0x14>
    return_value = return_value*AsynchPrescalerUserConfig;
    return_value = return_value >> WakeupTimerDivider;
  }
  else
  {
    return_value = 0;
 8000c26:	2000      	movs	r0, #0
  }

  return (uint16_t)return_value;
}
 8000c28:	b280      	uxth	r0, r0
 8000c2a:	bd08      	pop	{r3, pc}
    return_value = ReadRtcSsrValue(); /**< Read SSR register first */
 8000c2c:	f7ff ff42 	bl	8000ab4 <ReadRtcSsrValue>
    if (SSRValueOnLastSetup >= return_value)
 8000c30:	4b0c      	ldr	r3, [pc, #48]	; (8000c64 <ReturnTimeElapsed+0x4c>)
 8000c32:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8000c36:	4283      	cmp	r3, r0
 8000c38:	d30b      	bcc.n	8000c52 <ReturnTimeElapsed+0x3a>
      return_value = SSRValueOnLastSetup - return_value;
 8000c3a:	4b0a      	ldr	r3, [pc, #40]	; (8000c64 <ReturnTimeElapsed+0x4c>)
 8000c3c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8000c40:	1a18      	subs	r0, r3, r0
    return_value = return_value*AsynchPrescalerUserConfig;
 8000c42:	4b09      	ldr	r3, [pc, #36]	; (8000c68 <ReturnTimeElapsed+0x50>)
 8000c44:	781b      	ldrb	r3, [r3, #0]
 8000c46:	fb00 f003 	mul.w	r0, r0, r3
    return_value = return_value >> WakeupTimerDivider;
 8000c4a:	4b08      	ldr	r3, [pc, #32]	; (8000c6c <ReturnTimeElapsed+0x54>)
 8000c4c:	781b      	ldrb	r3, [r3, #0]
 8000c4e:	40d8      	lsrs	r0, r3
 8000c50:	e7ea      	b.n	8000c28 <ReturnTimeElapsed+0x10>
      wrap_counter = SynchPrescalerUserConfig - return_value;
 8000c52:	4b07      	ldr	r3, [pc, #28]	; (8000c70 <ReturnTimeElapsed+0x58>)
 8000c54:	881b      	ldrh	r3, [r3, #0]
 8000c56:	1a1b      	subs	r3, r3, r0
      return_value = SSRValueOnLastSetup + wrap_counter;
 8000c58:	4a02      	ldr	r2, [pc, #8]	; (8000c64 <ReturnTimeElapsed+0x4c>)
 8000c5a:	f8d2 0094 	ldr.w	r0, [r2, #148]	; 0x94
 8000c5e:	4418      	add	r0, r3
 8000c60:	e7ef      	b.n	8000c42 <ReturnTimeElapsed+0x2a>
 8000c62:	bf00      	nop
 8000c64:	20000090 	.word	0x20000090
 8000c68:	20000220 	.word	0x20000220
 8000c6c:	20000226 	.word	0x20000226
 8000c70:	20000224 	.word	0x20000224

08000c74 <linkTimer>:
{
 8000c74:	b570      	push	{r4, r5, r6, lr}
 8000c76:	4604      	mov	r4, r0
  if(CurrentRunningTimerID == CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 8000c78:	4b33      	ldr	r3, [pc, #204]	; (8000d48 <linkTimer+0xd4>)
 8000c7a:	f893 3090 	ldrb.w	r3, [r3, #144]	; 0x90
 8000c7e:	b2db      	uxtb	r3, r3
 8000c80:	2b06      	cmp	r3, #6
 8000c82:	d114      	bne.n	8000cae <linkTimer+0x3a>
    PreviousRunningTimerID = CurrentRunningTimerID;
 8000c84:	4b30      	ldr	r3, [pc, #192]	; (8000d48 <linkTimer+0xd4>)
 8000c86:	f893 2090 	ldrb.w	r2, [r3, #144]	; 0x90
 8000c8a:	b2d2      	uxtb	r2, r2
 8000c8c:	f883 2091 	strb.w	r2, [r3, #145]	; 0x91
    CurrentRunningTimerID = TimerID;
 8000c90:	f883 0090 	strb.w	r0, [r3, #144]	; 0x90
    aTimerContext[TimerID].NextID = CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER;
 8000c94:	eb00 0440 	add.w	r4, r0, r0, lsl #1
 8000c98:	eb03 04c4 	add.w	r4, r3, r4, lsl #3
 8000c9c:	2206      	movs	r2, #6
 8000c9e:	7562      	strb	r2, [r4, #21]
    SSRValueOnLastSetup = SSR_FORBIDDEN_VALUE;
 8000ca0:	f04f 32ff 	mov.w	r2, #4294967295
 8000ca4:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
    time_elapsed = 0;
 8000ca8:	2500      	movs	r5, #0
}
 8000caa:	4628      	mov	r0, r5
 8000cac:	bd70      	pop	{r4, r5, r6, pc}
    time_elapsed = ReturnTimeElapsed();
 8000cae:	f7ff ffb3 	bl	8000c18 <ReturnTimeElapsed>
 8000cb2:	4605      	mov	r5, r0
    aTimerContext[TimerID].CountLeft += time_elapsed;
 8000cb4:	4b24      	ldr	r3, [pc, #144]	; (8000d48 <linkTimer+0xd4>)
 8000cb6:	eb04 0244 	add.w	r2, r4, r4, lsl #1
 8000cba:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
 8000cbe:	6891      	ldr	r1, [r2, #8]
 8000cc0:	4401      	add	r1, r0
 8000cc2:	6091      	str	r1, [r2, #8]
    time_left = aTimerContext[TimerID].CountLeft;
 8000cc4:	eb04 0244 	add.w	r2, r4, r4, lsl #1
 8000cc8:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
 8000ccc:	6890      	ldr	r0, [r2, #8]
    if(aTimerContext[CurrentRunningTimerID].CountLeft <= time_left)
 8000cce:	f893 2090 	ldrb.w	r2, [r3, #144]	; 0x90
 8000cd2:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8000cd6:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8000cda:	689b      	ldr	r3, [r3, #8]
 8000cdc:	4283      	cmp	r3, r0
 8000cde:	d825      	bhi.n	8000d2c <linkTimer+0xb8>
      timer_id_lookup = CurrentRunningTimerID;
 8000ce0:	4a19      	ldr	r2, [pc, #100]	; (8000d48 <linkTimer+0xd4>)
 8000ce2:	f892 3090 	ldrb.w	r3, [r2, #144]	; 0x90
 8000ce6:	b2d9      	uxtb	r1, r3
      next_id = aTimerContext[timer_id_lookup].NextID;
 8000ce8:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8000cec:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8000cf0:	7d5b      	ldrb	r3, [r3, #21]
 8000cf2:	b2db      	uxtb	r3, r3
      while((next_id != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER) && (aTimerContext[next_id].CountLeft <= time_left))
 8000cf4:	2b06      	cmp	r3, #6
 8000cf6:	d015      	beq.n	8000d24 <linkTimer+0xb0>
 8000cf8:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8000cfc:	4a12      	ldr	r2, [pc, #72]	; (8000d48 <linkTimer+0xd4>)
 8000cfe:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8000d02:	689b      	ldr	r3, [r3, #8]
 8000d04:	4283      	cmp	r3, r0
 8000d06:	d80d      	bhi.n	8000d24 <linkTimer+0xb0>
        timer_id_lookup = aTimerContext[timer_id_lookup].NextID;
 8000d08:	4a0f      	ldr	r2, [pc, #60]	; (8000d48 <linkTimer+0xd4>)
 8000d0a:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 8000d0e:	eb02 01c1 	add.w	r1, r2, r1, lsl #3
 8000d12:	7d4b      	ldrb	r3, [r1, #21]
 8000d14:	b2d9      	uxtb	r1, r3
        next_id = aTimerContext[timer_id_lookup].NextID;
 8000d16:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8000d1a:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8000d1e:	7d5b      	ldrb	r3, [r3, #21]
 8000d20:	b2db      	uxtb	r3, r3
 8000d22:	e7e7      	b.n	8000cf4 <linkTimer+0x80>
      LinkTimerAfter(TimerID, timer_id_lookup);
 8000d24:	4620      	mov	r0, r4
 8000d26:	f7ff fed5 	bl	8000ad4 <LinkTimerAfter>
 8000d2a:	e7be      	b.n	8000caa <linkTimer+0x36>
      LinkTimerBefore(TimerID, CurrentRunningTimerID);
 8000d2c:	4e06      	ldr	r6, [pc, #24]	; (8000d48 <linkTimer+0xd4>)
 8000d2e:	f896 1090 	ldrb.w	r1, [r6, #144]	; 0x90
 8000d32:	4620      	mov	r0, r4
 8000d34:	f7ff fef0 	bl	8000b18 <LinkTimerBefore>
      PreviousRunningTimerID = CurrentRunningTimerID;
 8000d38:	f896 3090 	ldrb.w	r3, [r6, #144]	; 0x90
 8000d3c:	b2db      	uxtb	r3, r3
 8000d3e:	f886 3091 	strb.w	r3, [r6, #145]	; 0x91
      CurrentRunningTimerID = TimerID;
 8000d42:	f886 4090 	strb.w	r4, [r6, #144]	; 0x90
 8000d46:	e7b0      	b.n	8000caa <linkTimer+0x36>
 8000d48:	20000090 	.word	0x20000090

08000d4c <RestartWakeupCounter>:
 *    It assumes all condition are met to be allowed to write the wakeup counter
 * @param  Value: Value to be written in the counter
 * @retval None
 */
static void RestartWakeupCounter(uint16_t Value)
{
 8000d4c:	b510      	push	{r4, lr}
   * The wakeuptimer has been disabled in the calling function to reduce the time to poll the WUTWF
   * FLAG when the new value will have to be written
   *  __HAL_RTC_WAKEUPTIMER_DISABLE(phrtc);
   */

  if(Value == 0)
 8000d4e:	b360      	cbz	r0, 8000daa <RestartWakeupCounter+0x5e>
 8000d50:	4604      	mov	r4, r0
     */
    HAL_NVIC_SetPendingIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);
  }
  else
  {
    if((Value > 1) ||(WakeupTimerDivider != 1))
 8000d52:	2801      	cmp	r0, #1
 8000d54:	d932      	bls.n	8000dbc <RestartWakeupCounter+0x70>
    {
      Value -= 1;
 8000d56:	3c01      	subs	r4, #1
 8000d58:	b2a4      	uxth	r4, r4
    }

    while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(phrtc, RTC_FLAG_WUTWF) == RESET);
 8000d5a:	4b1b      	ldr	r3, [pc, #108]	; (8000dc8 <RestartWakeupCounter+0x7c>)
 8000d5c:	681b      	ldr	r3, [r3, #0]
 8000d5e:	681b      	ldr	r3, [r3, #0]
 8000d60:	68da      	ldr	r2, [r3, #12]
 8000d62:	f012 0f04 	tst.w	r2, #4
 8000d66:	d0f8      	beq.n	8000d5a <RestartWakeupCounter+0xe>
     * It takes 2 RTCCLK between the time the WUTE bit is disabled and the
     * time the timer is disabled. The WUTWF bit somehow guarantee the system is stable
     * Otherwise, when the timer is periodic with 1 Tick, it may generate an extra interrupt in between
     * due to the autoreload feature
     */
    __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(phrtc, RTC_FLAG_WUTF);   /**<  Clear flag in RTC module */
 8000d68:	68da      	ldr	r2, [r3, #12]
 8000d6a:	b2d2      	uxtb	r2, r2
 8000d6c:	f462 6290 	orn	r2, r2, #1152	; 0x480
 8000d70:	60da      	str	r2, [r3, #12]
    __HAL_RTC_WAKEUPTIMER_EXTI_CLEAR_FLAG(); /**<  Clear flag in EXTI module */
 8000d72:	4b16      	ldr	r3, [pc, #88]	; (8000dcc <RestartWakeupCounter+0x80>)
 8000d74:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8000d78:	60da      	str	r2, [r3, #12]
    HAL_NVIC_ClearPendingIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);   /**<  Clear pending bit in NVIC */
 8000d7a:	2003      	movs	r0, #3
 8000d7c:	f001 ff64 	bl	8002c48 <HAL_NVIC_ClearPendingIRQ>

    MODIFY_REG(RTC->WUTR, RTC_WUTR_WUT, Value);
 8000d80:	4a13      	ldr	r2, [pc, #76]	; (8000dd0 <RestartWakeupCounter+0x84>)
 8000d82:	6953      	ldr	r3, [r2, #20]
 8000d84:	0c1b      	lsrs	r3, r3, #16
 8000d86:	041b      	lsls	r3, r3, #16
 8000d88:	431c      	orrs	r4, r3
 8000d8a:	6154      	str	r4, [r2, #20]

    /**
     * Update the value here after the WUTWF polling that may take some time
     */
    SSRValueOnLastSetup = ReadRtcSsrValue();
 8000d8c:	f7ff fe92 	bl	8000ab4 <ReadRtcSsrValue>
 8000d90:	4b10      	ldr	r3, [pc, #64]	; (8000dd4 <RestartWakeupCounter+0x88>)
 8000d92:	f8c3 0094 	str.w	r0, [r3, #148]	; 0x94

    __HAL_RTC_WAKEUPTIMER_ENABLE(phrtc);    /**<  Enable the Wakeup Timer */
 8000d96:	4b0c      	ldr	r3, [pc, #48]	; (8000dc8 <RestartWakeupCounter+0x7c>)
 8000d98:	681b      	ldr	r3, [r3, #0]
 8000d9a:	681a      	ldr	r2, [r3, #0]
 8000d9c:	6893      	ldr	r3, [r2, #8]
 8000d9e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000da2:	6093      	str	r3, [r2, #8]

    HW_TS_RTC_CountUpdated_AppNot();
 8000da4:	f3af 8000 	nop.w
  }

  return ;
}
 8000da8:	bd10      	pop	{r4, pc}
    SSRValueOnLastSetup = ReadRtcSsrValue();
 8000daa:	f7ff fe83 	bl	8000ab4 <ReadRtcSsrValue>
 8000dae:	4b09      	ldr	r3, [pc, #36]	; (8000dd4 <RestartWakeupCounter+0x88>)
 8000db0:	f8c3 0094 	str.w	r0, [r3, #148]	; 0x94
    HAL_NVIC_SetPendingIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);
 8000db4:	2003      	movs	r0, #3
 8000db6:	f001 ff39 	bl	8002c2c <HAL_NVIC_SetPendingIRQ>
 8000dba:	e7f5      	b.n	8000da8 <RestartWakeupCounter+0x5c>
    if((Value > 1) ||(WakeupTimerDivider != 1))
 8000dbc:	4b06      	ldr	r3, [pc, #24]	; (8000dd8 <RestartWakeupCounter+0x8c>)
 8000dbe:	781b      	ldrb	r3, [r3, #0]
 8000dc0:	2b01      	cmp	r3, #1
 8000dc2:	d1c8      	bne.n	8000d56 <RestartWakeupCounter+0xa>
 8000dc4:	e7c9      	b.n	8000d5a <RestartWakeupCounter+0xe>
 8000dc6:	bf00      	nop
 8000dc8:	20000228 	.word	0x20000228
 8000dcc:	58000800 	.word	0x58000800
 8000dd0:	40002800 	.word	0x40002800
 8000dd4:	20000090 	.word	0x20000090
 8000dd8:	20000226 	.word	0x20000226

08000ddc <RescheduleTimerList>:
 *    2) Setup the wakeuptimer
 * @param  None
 * @retval None
 */
static void RescheduleTimerList(void)
{
 8000ddc:	b570      	push	{r4, r5, r6, lr}

  /**
   * The wakeuptimer is disabled now to reduce the time to poll the WUTWF
   * FLAG when the new value will have to be written
   */
  if((READ_BIT(RTC->CR, RTC_CR_WUTE) == (RTC_CR_WUTE)) == SET)
 8000dde:	4b30      	ldr	r3, [pc, #192]	; (8000ea0 <RescheduleTimerList+0xc4>)
 8000de0:	689b      	ldr	r3, [r3, #8]
 8000de2:	f413 6f80 	tst.w	r3, #1024	; 0x400
 8000de6:	d006      	beq.n	8000df6 <RescheduleTimerList+0x1a>
  {
    /**
     * Wait for the flag to be back to 0 when the wakeup timer is enabled
     */
    while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(phrtc, RTC_FLAG_WUTWF) == SET);
 8000de8:	4b2e      	ldr	r3, [pc, #184]	; (8000ea4 <RescheduleTimerList+0xc8>)
 8000dea:	681b      	ldr	r3, [r3, #0]
 8000dec:	681b      	ldr	r3, [r3, #0]
 8000dee:	68db      	ldr	r3, [r3, #12]
 8000df0:	f013 0f04 	tst.w	r3, #4
 8000df4:	d1f8      	bne.n	8000de8 <RescheduleTimerList+0xc>
  }
  __HAL_RTC_WAKEUPTIMER_DISABLE(phrtc);   /**<  Disable the Wakeup Timer */
 8000df6:	4b2b      	ldr	r3, [pc, #172]	; (8000ea4 <RescheduleTimerList+0xc8>)
 8000df8:	681b      	ldr	r3, [r3, #0]
 8000dfa:	681a      	ldr	r2, [r3, #0]
 8000dfc:	6893      	ldr	r3, [r2, #8]
 8000dfe:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8000e02:	6093      	str	r3, [r2, #8]

  localTimerID = CurrentRunningTimerID;
 8000e04:	4a28      	ldr	r2, [pc, #160]	; (8000ea8 <RescheduleTimerList+0xcc>)
 8000e06:	f892 3090 	ldrb.w	r3, [r2, #144]	; 0x90
 8000e0a:	b2dc      	uxtb	r4, r3

  /**
   * Calculate what will be the value to write in the wakeuptimer
   */
  timecountleft = aTimerContext[localTimerID].CountLeft;
 8000e0c:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8000e10:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8000e14:	689e      	ldr	r6, [r3, #8]

  /**
   * Read how much has been counted
   */
  time_elapsed = ReturnTimeElapsed();
 8000e16:	f7ff feff 	bl	8000c18 <ReturnTimeElapsed>

  if(timecountleft < time_elapsed )
 8000e1a:	4605      	mov	r5, r0
 8000e1c:	42b0      	cmp	r0, r6
 8000e1e:	d905      	bls.n	8000e2c <RescheduleTimerList+0x50>
  {
    /**
     * There is no tick left to count
     */
    wakeup_timer_value = 0;
    WakeupTimerLimitation = WakeupTimerValue_LargeEnough;
 8000e20:	4b21      	ldr	r3, [pc, #132]	; (8000ea8 <RescheduleTimerList+0xcc>)
 8000e22:	2201      	movs	r2, #1
 8000e24:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
    wakeup_timer_value = 0;
 8000e28:	2000      	movs	r0, #0
 8000e2a:	e024      	b.n	8000e76 <RescheduleTimerList+0x9a>
  }
  else
  {
    if(timecountleft > (time_elapsed + MaxWakeupTimerSetup))
 8000e2c:	4b1f      	ldr	r3, [pc, #124]	; (8000eac <RescheduleTimerList+0xd0>)
 8000e2e:	881b      	ldrh	r3, [r3, #0]
 8000e30:	fa10 f383 	uxtah	r3, r0, r3
 8000e34:	42b3      	cmp	r3, r6
 8000e36:	d207      	bcs.n	8000e48 <RescheduleTimerList+0x6c>
    {
      /**
       * The number of tick left is greater than the Wakeuptimer maximum value
       */
      wakeup_timer_value = MaxWakeupTimerSetup;
 8000e38:	4b1c      	ldr	r3, [pc, #112]	; (8000eac <RescheduleTimerList+0xd0>)
 8000e3a:	8818      	ldrh	r0, [r3, #0]
 8000e3c:	b280      	uxth	r0, r0

      WakeupTimerLimitation = WakeupTimerValue_Overpassed;
 8000e3e:	4b1a      	ldr	r3, [pc, #104]	; (8000ea8 <RescheduleTimerList+0xcc>)
 8000e40:	2200      	movs	r2, #0
 8000e42:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
 8000e46:	e016      	b.n	8000e76 <RescheduleTimerList+0x9a>
    }
    else
    {
      wakeup_timer_value = timecountleft - time_elapsed;
 8000e48:	b2b6      	uxth	r6, r6
 8000e4a:	1a30      	subs	r0, r6, r0
 8000e4c:	b280      	uxth	r0, r0
      WakeupTimerLimitation = WakeupTimerValue_LargeEnough;
 8000e4e:	4b16      	ldr	r3, [pc, #88]	; (8000ea8 <RescheduleTimerList+0xcc>)
 8000e50:	2201      	movs	r2, #1
 8000e52:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
 8000e56:	e00e      	b.n	8000e76 <RescheduleTimerList+0x9a>
    {
      aTimerContext[localTimerID].CountLeft = 0;
    }
    else
    {
      aTimerContext[localTimerID].CountLeft -= time_elapsed;
 8000e58:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 8000e5c:	4a12      	ldr	r2, [pc, #72]	; (8000ea8 <RescheduleTimerList+0xcc>)
 8000e5e:	eb02 04c4 	add.w	r4, r2, r4, lsl #3
 8000e62:	68a2      	ldr	r2, [r4, #8]
 8000e64:	1b52      	subs	r2, r2, r5
 8000e66:	60a2      	str	r2, [r4, #8]
    }
    localTimerID = aTimerContext[localTimerID].NextID;
 8000e68:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8000e6c:	4a0e      	ldr	r2, [pc, #56]	; (8000ea8 <RescheduleTimerList+0xcc>)
 8000e6e:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8000e72:	7d5c      	ldrb	r4, [r3, #21]
 8000e74:	b2e4      	uxtb	r4, r4
  while(localTimerID != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 8000e76:	2c06      	cmp	r4, #6
 8000e78:	d00f      	beq.n	8000e9a <RescheduleTimerList+0xbe>
    if (aTimerContext[localTimerID].CountLeft < time_elapsed)
 8000e7a:	4623      	mov	r3, r4
 8000e7c:	eb04 0244 	add.w	r2, r4, r4, lsl #1
 8000e80:	4909      	ldr	r1, [pc, #36]	; (8000ea8 <RescheduleTimerList+0xcc>)
 8000e82:	eb01 02c2 	add.w	r2, r1, r2, lsl #3
 8000e86:	6892      	ldr	r2, [r2, #8]
 8000e88:	4295      	cmp	r5, r2
 8000e8a:	d9e5      	bls.n	8000e58 <RescheduleTimerList+0x7c>
      aTimerContext[localTimerID].CountLeft = 0;
 8000e8c:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 8000e90:	eb01 04c4 	add.w	r4, r1, r4, lsl #3
 8000e94:	2200      	movs	r2, #0
 8000e96:	60a2      	str	r2, [r4, #8]
 8000e98:	e7e6      	b.n	8000e68 <RescheduleTimerList+0x8c>
  }

  /**
   * Write next count
   */
  RestartWakeupCounter(wakeup_timer_value);
 8000e9a:	f7ff ff57 	bl	8000d4c <RestartWakeupCounter>

  return ;
}
 8000e9e:	bd70      	pop	{r4, r5, r6, pc}
 8000ea0:	40002800 	.word	0x40002800
 8000ea4:	20000228 	.word	0x20000228
 8000ea8:	20000090 	.word	0x20000090
 8000eac:	20000222 	.word	0x20000222

08000eb0 <HW_TS_Init>:

  return;
}

void HW_TS_Init(HW_TS_InitMode_t TimerInitMode, RTC_HandleTypeDef *hrtc)
{
 8000eb0:	b510      	push	{r4, lr}
  uint32_t localmaxwakeuptimersetup;

  /**
   * Get RTC handler
   */
  phrtc = hrtc;
 8000eb2:	4b4c      	ldr	r3, [pc, #304]	; (8000fe4 <HW_TS_Init+0x134>)
 8000eb4:	6019      	str	r1, [r3, #0]

 /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE( phrtc );
 8000eb6:	680b      	ldr	r3, [r1, #0]
 8000eb8:	22ca      	movs	r2, #202	; 0xca
 8000eba:	625a      	str	r2, [r3, #36]	; 0x24
 8000ebc:	680b      	ldr	r3, [r1, #0]
 8000ebe:	2253      	movs	r2, #83	; 0x53
 8000ec0:	625a      	str	r2, [r3, #36]	; 0x24

  SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 8000ec2:	4a49      	ldr	r2, [pc, #292]	; (8000fe8 <HW_TS_Init+0x138>)
 8000ec4:	6893      	ldr	r3, [r2, #8]
 8000ec6:	f043 0320 	orr.w	r3, r3, #32
 8000eca:	6093      	str	r3, [r2, #8]

  /**
   * Readout the user config
   */
  WakeupTimerDivider = (4 - ((uint32_t)(READ_BIT(RTC->CR, RTC_CR_WUCKSEL))));
 8000ecc:	6893      	ldr	r3, [r2, #8]
 8000ece:	f003 0307 	and.w	r3, r3, #7
 8000ed2:	f1c3 0304 	rsb	r3, r3, #4
 8000ed6:	b2d9      	uxtb	r1, r3
 8000ed8:	4b44      	ldr	r3, [pc, #272]	; (8000fec <HW_TS_Init+0x13c>)
 8000eda:	7019      	strb	r1, [r3, #0]

  AsynchPrescalerUserConfig = (uint8_t)(READ_BIT(RTC->PRER, RTC_PRER_PREDIV_A) >> (uint32_t)POSITION_VAL(RTC_PRER_PREDIV_A)) + 1;
 8000edc:	6913      	ldr	r3, [r2, #16]
 8000ede:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000ee2:	f44f 02fe 	mov.w	r2, #8323072	; 0x7f0000
 8000ee6:	fa92 f2a2 	rbit	r2, r2
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8000eea:	2a00      	cmp	r2, #0
 8000eec:	d03d      	beq.n	8000f6a <HW_TS_Init+0xba>
  {
    return 32U;
  }
  return __builtin_clz(value);
 8000eee:	fab2 f282 	clz	r2, r2
 8000ef2:	40d3      	lsrs	r3, r2
 8000ef4:	b2db      	uxtb	r3, r3
 8000ef6:	3301      	adds	r3, #1
 8000ef8:	b2da      	uxtb	r2, r3
 8000efa:	4b3d      	ldr	r3, [pc, #244]	; (8000ff0 <HW_TS_Init+0x140>)
 8000efc:	701a      	strb	r2, [r3, #0]

  SynchPrescalerUserConfig = (uint16_t)(READ_BIT(RTC->PRER, RTC_PRER_PREDIV_S)) + 1;
 8000efe:	4b3a      	ldr	r3, [pc, #232]	; (8000fe8 <HW_TS_Init+0x138>)
 8000f00:	691b      	ldr	r3, [r3, #16]
 8000f02:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8000f06:	3301      	adds	r3, #1
 8000f08:	4c3a      	ldr	r4, [pc, #232]	; (8000ff4 <HW_TS_Init+0x144>)
 8000f0a:	8023      	strh	r3, [r4, #0]

  /**
   *  Margin is taken to avoid wrong calculation when the wrap around is there and some
   *  application interrupts may have delayed the reading
   */
  localmaxwakeuptimersetup = ((((SynchPrescalerUserConfig - 1)*AsynchPrescalerUserConfig) - CFG_HW_TS_RTC_HANDLER_MAX_DELAY) >> WakeupTimerDivider);
 8000f0c:	3b01      	subs	r3, #1
 8000f0e:	fb03 f302 	mul.w	r3, r3, r2
 8000f12:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 8000f16:	40cb      	lsrs	r3, r1

  if(localmaxwakeuptimersetup >= 0xFFFF)
 8000f18:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8000f1c:	4293      	cmp	r3, r2
 8000f1e:	d926      	bls.n	8000f6e <HW_TS_Init+0xbe>
  {
    MaxWakeupTimerSetup = 0xFFFF;
 8000f20:	4b35      	ldr	r3, [pc, #212]	; (8000ff8 <HW_TS_Init+0x148>)
 8000f22:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000f26:	801a      	strh	r2, [r3, #0]
  *         (*) value not defined in all devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableRisingTrig_0_31(uint32_t ExtiLine)
{
  SET_BIT(EXTI->RTSR1, ExtiLine);
 8000f28:	4b34      	ldr	r3, [pc, #208]	; (8000ffc <HW_TS_Init+0x14c>)
 8000f2a:	681a      	ldr	r2, [r3, #0]
 8000f2c:	f442 2200 	orr.w	r2, r2, #524288	; 0x80000
 8000f30:	601a      	str	r2, [r3, #0]
  SET_BIT(EXTI->IMR1, ExtiLine);
 8000f32:	f8d3 2080 	ldr.w	r2, [r3, #128]	; 0x80
 8000f36:	f442 2200 	orr.w	r2, r2, #524288	; 0x80000
 8000f3a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
   * Configure EXTI module
   */
  LL_EXTI_EnableRisingTrig_0_31(RTC_EXTI_LINE_WAKEUPTIMER_EVENT);
  LL_EXTI_EnableIT_0_31(RTC_EXTI_LINE_WAKEUPTIMER_EVENT);

  if(TimerInitMode == hw_ts_InitMode_Full)
 8000f3e:	2800      	cmp	r0, #0
 8000f40:	d145      	bne.n	8000fce <HW_TS_Init+0x11e>
  {
    WakeupTimerLimitation = WakeupTimerValue_LargeEnough;
 8000f42:	4b2f      	ldr	r3, [pc, #188]	; (8001000 <HW_TS_Init+0x150>)
 8000f44:	2201      	movs	r2, #1
 8000f46:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
    SSRValueOnLastSetup = SSR_FORBIDDEN_VALUE;
 8000f4a:	f04f 32ff 	mov.w	r2, #4294967295
 8000f4e:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94

    /**
     * Initialize the timer server
     */
    for(loop = 0; loop < CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER; loop++)
 8000f52:	2805      	cmp	r0, #5
 8000f54:	d80f      	bhi.n	8000f76 <HW_TS_Init+0xc6>
    {
      aTimerContext[loop].TimerIDStatus = TimerID_Free;
 8000f56:	eb00 0240 	add.w	r2, r0, r0, lsl #1
 8000f5a:	4b29      	ldr	r3, [pc, #164]	; (8001000 <HW_TS_Init+0x150>)
 8000f5c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8000f60:	2200      	movs	r2, #0
 8000f62:	731a      	strb	r2, [r3, #12]
    for(loop = 0; loop < CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER; loop++)
 8000f64:	3001      	adds	r0, #1
 8000f66:	b2c0      	uxtb	r0, r0
 8000f68:	e7f3      	b.n	8000f52 <HW_TS_Init+0xa2>
    return 32U;
 8000f6a:	2220      	movs	r2, #32
 8000f6c:	e7c1      	b.n	8000ef2 <HW_TS_Init+0x42>
    MaxWakeupTimerSetup = (uint16_t)localmaxwakeuptimersetup;
 8000f6e:	b29b      	uxth	r3, r3
 8000f70:	4a21      	ldr	r2, [pc, #132]	; (8000ff8 <HW_TS_Init+0x148>)
 8000f72:	8013      	strh	r3, [r2, #0]
 8000f74:	e7d8      	b.n	8000f28 <HW_TS_Init+0x78>
    }

    CurrentRunningTimerID = CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER;   /**<  Set ID to non valid value */
 8000f76:	4b22      	ldr	r3, [pc, #136]	; (8001000 <HW_TS_Init+0x150>)
 8000f78:	2206      	movs	r2, #6
 8000f7a:	f883 2090 	strb.w	r2, [r3, #144]	; 0x90

    __HAL_RTC_WAKEUPTIMER_DISABLE(phrtc);                       /**<  Disable the Wakeup Timer */
 8000f7e:	4c19      	ldr	r4, [pc, #100]	; (8000fe4 <HW_TS_Init+0x134>)
 8000f80:	6822      	ldr	r2, [r4, #0]
 8000f82:	6811      	ldr	r1, [r2, #0]
 8000f84:	688b      	ldr	r3, [r1, #8]
 8000f86:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8000f8a:	608b      	str	r3, [r1, #8]
    __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(phrtc, RTC_FLAG_WUTF);     /**<  Clear flag in RTC module */
 8000f8c:	6812      	ldr	r2, [r2, #0]
 8000f8e:	68d3      	ldr	r3, [r2, #12]
 8000f90:	b2db      	uxtb	r3, r3
 8000f92:	f463 6390 	orn	r3, r3, #1152	; 0x480
 8000f96:	60d3      	str	r3, [r2, #12]
    __HAL_RTC_WAKEUPTIMER_EXTI_CLEAR_FLAG(); /**<  Clear flag in EXTI module  */
 8000f98:	4b18      	ldr	r3, [pc, #96]	; (8000ffc <HW_TS_Init+0x14c>)
 8000f9a:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8000f9e:	60da      	str	r2, [r3, #12]
    HAL_NVIC_ClearPendingIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);       /**<  Clear pending bit in NVIC  */
 8000fa0:	2003      	movs	r0, #3
 8000fa2:	f001 fe51 	bl	8002c48 <HAL_NVIC_ClearPendingIRQ>
    __HAL_RTC_WAKEUPTIMER_ENABLE_IT(phrtc, RTC_IT_WUT);         /**<  Enable interrupt in RTC module  */
 8000fa6:	6823      	ldr	r3, [r4, #0]
 8000fa8:	681a      	ldr	r2, [r3, #0]
 8000faa:	6893      	ldr	r3, [r2, #8]
 8000fac:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000fb0:	6093      	str	r3, [r2, #8]
      HAL_NVIC_SetPendingIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);
    }
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE( phrtc );
 8000fb2:	4b0c      	ldr	r3, [pc, #48]	; (8000fe4 <HW_TS_Init+0x134>)
 8000fb4:	681b      	ldr	r3, [r3, #0]
 8000fb6:	681b      	ldr	r3, [r3, #0]
 8000fb8:	22ff      	movs	r2, #255	; 0xff
 8000fba:	625a      	str	r2, [r3, #36]	; 0x24

  HAL_NVIC_SetPriority(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID, CFG_HW_TS_NVIC_RTC_WAKEUP_IT_PREEMPTPRIO, CFG_HW_TS_NVIC_RTC_WAKEUP_IT_SUBPRIO);   /**<  Set NVIC priority */
 8000fbc:	2200      	movs	r2, #0
 8000fbe:	2103      	movs	r1, #3
 8000fc0:	4608      	mov	r0, r1
 8000fc2:	f001 fdc9 	bl	8002b58 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID); /**<  Enable NVIC */
 8000fc6:	2003      	movs	r0, #3
 8000fc8:	f001 fdfa 	bl	8002bc0 <HAL_NVIC_EnableIRQ>

  return;
}
 8000fcc:	bd10      	pop	{r4, pc}
    if(__HAL_RTC_WAKEUPTIMER_GET_FLAG(phrtc, RTC_FLAG_WUTF) != RESET)
 8000fce:	4b05      	ldr	r3, [pc, #20]	; (8000fe4 <HW_TS_Init+0x134>)
 8000fd0:	681b      	ldr	r3, [r3, #0]
 8000fd2:	681b      	ldr	r3, [r3, #0]
 8000fd4:	68db      	ldr	r3, [r3, #12]
 8000fd6:	f413 6f80 	tst.w	r3, #1024	; 0x400
 8000fda:	d0ea      	beq.n	8000fb2 <HW_TS_Init+0x102>
      HAL_NVIC_SetPendingIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);
 8000fdc:	2003      	movs	r0, #3
 8000fde:	f001 fe25 	bl	8002c2c <HAL_NVIC_SetPendingIRQ>
 8000fe2:	e7e6      	b.n	8000fb2 <HW_TS_Init+0x102>
 8000fe4:	20000228 	.word	0x20000228
 8000fe8:	40002800 	.word	0x40002800
 8000fec:	20000226 	.word	0x20000226
 8000ff0:	20000220 	.word	0x20000220
 8000ff4:	20000224 	.word	0x20000224
 8000ff8:	20000222 	.word	0x20000222
 8000ffc:	58000800 	.word	0x58000800
 8001000:	20000090 	.word	0x20000090

08001004 <HW_TS_Create>:

HW_TS_ReturnStatus_t HW_TS_Create(uint32_t TimerProcessID, uint8_t *pTimerId, HW_TS_Mode_t TimerMode, HW_TS_pTimerCb_t pftimeout_handler)
{
 8001004:	b5f0      	push	{r4, r5, r6, r7, lr}
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8001006:	f3ef 8710 	mrs	r7, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 800100a:	b672      	cpsid	i
  HW_TS_ReturnStatus_t localreturnstatus;
  uint8_t loop = 0;
 800100c:	2400      	movs	r4, #0
}
 800100e:	e001      	b.n	8001014 <HW_TS_Create+0x10>
  __disable_irq();          /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
#endif

  while((loop < CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER) && (aTimerContext[loop].TimerIDStatus != TimerID_Free))
  {
    loop++;
 8001010:	3401      	adds	r4, #1
 8001012:	b2e4      	uxtb	r4, r4
  while((loop < CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER) && (aTimerContext[loop].TimerIDStatus != TimerID_Free))
 8001014:	2c05      	cmp	r4, #5
 8001016:	d807      	bhi.n	8001028 <HW_TS_Create+0x24>
 8001018:	eb04 0544 	add.w	r5, r4, r4, lsl #1
 800101c:	4e10      	ldr	r6, [pc, #64]	; (8001060 <HW_TS_Create+0x5c>)
 800101e:	eb06 05c5 	add.w	r5, r6, r5, lsl #3
 8001022:	7b2d      	ldrb	r5, [r5, #12]
 8001024:	2d00      	cmp	r5, #0
 8001026:	d1f3      	bne.n	8001010 <HW_TS_Create+0xc>
  }

  if(loop != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 8001028:	2c06      	cmp	r4, #6
 800102a:	d015      	beq.n	8001058 <HW_TS_Create+0x54>
  {
    aTimerContext[loop].TimerIDStatus = TimerID_Created;
 800102c:	f8df c030 	ldr.w	ip, [pc, #48]	; 8001060 <HW_TS_Create+0x5c>
 8001030:	0065      	lsls	r5, r4, #1
 8001032:	eb04 0644 	add.w	r6, r4, r4, lsl #1
 8001036:	eb0c 06c6 	add.w	r6, ip, r6, lsl #3
 800103a:	f04f 0e01 	mov.w	lr, #1
 800103e:	f886 e00c 	strb.w	lr, [r6, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8001042:	f387 8810 	msr	PRIMASK, r7

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
    __set_PRIMASK(primask_bit); /**< Restore PRIMASK bit*/
#endif

    aTimerContext[loop].TimerProcessID = TimerProcessID;
 8001046:	6130      	str	r0, [r6, #16]
    aTimerContext[loop].TimerMode = TimerMode;
 8001048:	7372      	strb	r2, [r6, #13]
    aTimerContext[loop].pTimerCallBack = pftimeout_handler;
 800104a:	192a      	adds	r2, r5, r4
 800104c:	00d2      	lsls	r2, r2, #3
 800104e:	f84c 3002 	str.w	r3, [ip, r2]
    *pTimerId = loop;
 8001052:	700c      	strb	r4, [r1, #0]

    localreturnstatus = hw_ts_Successful;
 8001054:	2000      	movs	r0, #0

    localreturnstatus = hw_ts_Failed;
  }

  return(localreturnstatus);
}
 8001056:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001058:	f387 8810 	msr	PRIMASK, r7
    localreturnstatus = hw_ts_Failed;
 800105c:	2001      	movs	r0, #1
 800105e:	e7fa      	b.n	8001056 <HW_TS_Create+0x52>
 8001060:	20000090 	.word	0x20000090

08001064 <HW_TS_Stop>:

  return;
}

void HW_TS_Stop(uint8_t timer_id)
{
 8001064:	b538      	push	{r3, r4, r5, lr}
 8001066:	4604      	mov	r4, r0
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8001068:	f3ef 8510 	mrs	r5, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 800106c:	b672      	cpsid	i
#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
  __disable_irq();          /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
#endif

  HAL_NVIC_DisableIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);    /**<  Disable NVIC */
 800106e:	2003      	movs	r0, #3
 8001070:	f001 fdb4 	bl	8002bdc <HAL_NVIC_DisableIRQ>

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE( phrtc );
 8001074:	4b29      	ldr	r3, [pc, #164]	; (800111c <HW_TS_Stop+0xb8>)
 8001076:	681b      	ldr	r3, [r3, #0]
 8001078:	681a      	ldr	r2, [r3, #0]
 800107a:	21ca      	movs	r1, #202	; 0xca
 800107c:	6251      	str	r1, [r2, #36]	; 0x24
 800107e:	681b      	ldr	r3, [r3, #0]
 8001080:	2253      	movs	r2, #83	; 0x53
 8001082:	625a      	str	r2, [r3, #36]	; 0x24

  if(aTimerContext[timer_id].TimerIDStatus == TimerID_Running)
 8001084:	eb04 0244 	add.w	r2, r4, r4, lsl #1
 8001088:	4b25      	ldr	r3, [pc, #148]	; (8001120 <HW_TS_Stop+0xbc>)
 800108a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800108e:	7b1b      	ldrb	r3, [r3, #12]
 8001090:	b2db      	uxtb	r3, r3
 8001092:	2b02      	cmp	r3, #2
 8001094:	d00a      	beq.n	80010ac <HW_TS_Stop+0x48>
      RescheduleTimerList();
    }
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE( phrtc );
 8001096:	4b21      	ldr	r3, [pc, #132]	; (800111c <HW_TS_Stop+0xb8>)
 8001098:	681b      	ldr	r3, [r3, #0]
 800109a:	681b      	ldr	r3, [r3, #0]
 800109c:	22ff      	movs	r2, #255	; 0xff
 800109e:	625a      	str	r2, [r3, #36]	; 0x24

  HAL_NVIC_EnableIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID); /**<  Enable NVIC */
 80010a0:	2003      	movs	r0, #3
 80010a2:	f001 fd8d 	bl	8002bc0 <HAL_NVIC_EnableIRQ>
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80010a6:	f385 8810 	msr	PRIMASK, r5
#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  __set_PRIMASK(primask_bit); /**< Restore PRIMASK bit*/
#endif

  return;
}
 80010aa:	bd38      	pop	{r3, r4, r5, pc}
    UnlinkTimer(timer_id, SSR_Read_Requested);
 80010ac:	2100      	movs	r1, #0
 80010ae:	4620      	mov	r0, r4
 80010b0:	f7ff fd66 	bl	8000b80 <UnlinkTimer>
    localcurrentrunningtimerid = CurrentRunningTimerID;
 80010b4:	4b1a      	ldr	r3, [pc, #104]	; (8001120 <HW_TS_Stop+0xbc>)
 80010b6:	f893 3090 	ldrb.w	r3, [r3, #144]	; 0x90
 80010ba:	b2db      	uxtb	r3, r3
    if(localcurrentrunningtimerid == CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 80010bc:	2b06      	cmp	r3, #6
 80010be:	d008      	beq.n	80010d2 <HW_TS_Stop+0x6e>
    else if(PreviousRunningTimerID != localcurrentrunningtimerid)
 80010c0:	4a17      	ldr	r2, [pc, #92]	; (8001120 <HW_TS_Stop+0xbc>)
 80010c2:	f892 2091 	ldrb.w	r2, [r2, #145]	; 0x91
 80010c6:	b2d2      	uxtb	r2, r2
 80010c8:	429a      	cmp	r2, r3
 80010ca:	d0e4      	beq.n	8001096 <HW_TS_Stop+0x32>
      RescheduleTimerList();
 80010cc:	f7ff fe86 	bl	8000ddc <RescheduleTimerList>
 80010d0:	e7e1      	b.n	8001096 <HW_TS_Stop+0x32>
      if((READ_BIT(RTC->CR, RTC_CR_WUTE) == (RTC_CR_WUTE)) == SET)
 80010d2:	4b14      	ldr	r3, [pc, #80]	; (8001124 <HW_TS_Stop+0xc0>)
 80010d4:	689b      	ldr	r3, [r3, #8]
 80010d6:	f413 6f80 	tst.w	r3, #1024	; 0x400
 80010da:	d006      	beq.n	80010ea <HW_TS_Stop+0x86>
        while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(phrtc, RTC_FLAG_WUTWF) == SET);
 80010dc:	4b0f      	ldr	r3, [pc, #60]	; (800111c <HW_TS_Stop+0xb8>)
 80010de:	681b      	ldr	r3, [r3, #0]
 80010e0:	681b      	ldr	r3, [r3, #0]
 80010e2:	68db      	ldr	r3, [r3, #12]
 80010e4:	f013 0f04 	tst.w	r3, #4
 80010e8:	d1f8      	bne.n	80010dc <HW_TS_Stop+0x78>
      __HAL_RTC_WAKEUPTIMER_DISABLE(phrtc);   /**<  Disable the Wakeup Timer */
 80010ea:	4b0c      	ldr	r3, [pc, #48]	; (800111c <HW_TS_Stop+0xb8>)
 80010ec:	6819      	ldr	r1, [r3, #0]
 80010ee:	680a      	ldr	r2, [r1, #0]
 80010f0:	6893      	ldr	r3, [r2, #8]
 80010f2:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80010f6:	6093      	str	r3, [r2, #8]
      while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(phrtc, RTC_FLAG_WUTWF) == RESET);
 80010f8:	680b      	ldr	r3, [r1, #0]
 80010fa:	68da      	ldr	r2, [r3, #12]
 80010fc:	f012 0f04 	tst.w	r2, #4
 8001100:	d0fa      	beq.n	80010f8 <HW_TS_Stop+0x94>
      __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(phrtc, RTC_FLAG_WUTF);   /**<  Clear flag in RTC module */
 8001102:	68da      	ldr	r2, [r3, #12]
 8001104:	b2d2      	uxtb	r2, r2
 8001106:	f462 6290 	orn	r2, r2, #1152	; 0x480
 800110a:	60da      	str	r2, [r3, #12]
      __HAL_RTC_WAKEUPTIMER_EXTI_CLEAR_FLAG(); /**<  Clear flag in EXTI module */
 800110c:	4b06      	ldr	r3, [pc, #24]	; (8001128 <HW_TS_Stop+0xc4>)
 800110e:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8001112:	60da      	str	r2, [r3, #12]
      HAL_NVIC_ClearPendingIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);   /**<  Clear pending bit in NVIC */
 8001114:	2003      	movs	r0, #3
 8001116:	f001 fd97 	bl	8002c48 <HAL_NVIC_ClearPendingIRQ>
 800111a:	e7bc      	b.n	8001096 <HW_TS_Stop+0x32>
 800111c:	20000228 	.word	0x20000228
 8001120:	20000090 	.word	0x20000090
 8001124:	40002800 	.word	0x40002800
 8001128:	58000800 	.word	0x58000800

0800112c <HW_TS_Start>:

void HW_TS_Start(uint8_t timer_id, uint32_t timeout_ticks)
{
 800112c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800112e:	4604      	mov	r4, r0
 8001130:	460d      	mov	r5, r1

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  uint32_t primask_bit;
#endif

  if(aTimerContext[timer_id].TimerIDStatus == TimerID_Running)
 8001132:	eb00 0240 	add.w	r2, r0, r0, lsl #1
 8001136:	4b23      	ldr	r3, [pc, #140]	; (80011c4 <HW_TS_Start+0x98>)
 8001138:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800113c:	7b1b      	ldrb	r3, [r3, #12]
 800113e:	b2db      	uxtb	r3, r3
 8001140:	2b02      	cmp	r3, #2
 8001142:	d038      	beq.n	80011b6 <HW_TS_Start+0x8a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8001144:	f3ef 8610 	mrs	r6, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 8001148:	b672      	cpsid	i
#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
  __disable_irq();          /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
#endif

  HAL_NVIC_DisableIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);    /**<  Disable NVIC */
 800114a:	2003      	movs	r0, #3
 800114c:	f001 fd46 	bl	8002bdc <HAL_NVIC_DisableIRQ>

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE( phrtc );
 8001150:	4b1d      	ldr	r3, [pc, #116]	; (80011c8 <HW_TS_Start+0x9c>)
 8001152:	681b      	ldr	r3, [r3, #0]
 8001154:	681a      	ldr	r2, [r3, #0]
 8001156:	21ca      	movs	r1, #202	; 0xca
 8001158:	6251      	str	r1, [r2, #36]	; 0x24
 800115a:	681b      	ldr	r3, [r3, #0]
 800115c:	2253      	movs	r2, #83	; 0x53
 800115e:	625a      	str	r2, [r3, #36]	; 0x24

  aTimerContext[timer_id].TimerIDStatus = TimerID_Running;
 8001160:	4f18      	ldr	r7, [pc, #96]	; (80011c4 <HW_TS_Start+0x98>)
 8001162:	eb04 0344 	add.w	r3, r4, r4, lsl #1
 8001166:	eb07 03c3 	add.w	r3, r7, r3, lsl #3
 800116a:	2202      	movs	r2, #2
 800116c:	731a      	strb	r2, [r3, #12]

  aTimerContext[timer_id].CountLeft = timeout_ticks;
 800116e:	609d      	str	r5, [r3, #8]
  aTimerContext[timer_id].CounterInit = timeout_ticks;
 8001170:	605d      	str	r5, [r3, #4]

  time_elapsed =  linkTimer(timer_id);
 8001172:	4620      	mov	r0, r4
 8001174:	f7ff fd7e 	bl	8000c74 <linkTimer>

  localcurrentrunningtimerid = CurrentRunningTimerID;
 8001178:	f897 3090 	ldrb.w	r3, [r7, #144]	; 0x90
 800117c:	b2db      	uxtb	r3, r3

  if(PreviousRunningTimerID != localcurrentrunningtimerid)
 800117e:	f897 2091 	ldrb.w	r2, [r7, #145]	; 0x91
 8001182:	b2d2      	uxtb	r2, r2
 8001184:	429a      	cmp	r2, r3
 8001186:	d119      	bne.n	80011bc <HW_TS_Start+0x90>
  {
    RescheduleTimerList();
  }
  else
  {
    aTimerContext[timer_id].CountLeft -= time_elapsed;
 8001188:	4b0e      	ldr	r3, [pc, #56]	; (80011c4 <HW_TS_Start+0x98>)
 800118a:	eb04 0244 	add.w	r2, r4, r4, lsl #1
 800118e:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
 8001192:	6892      	ldr	r2, [r2, #8]
 8001194:	1a10      	subs	r0, r2, r0
 8001196:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 800119a:	eb03 04c4 	add.w	r4, r3, r4, lsl #3
 800119e:	60a0      	str	r0, [r4, #8]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE( phrtc );
 80011a0:	4b09      	ldr	r3, [pc, #36]	; (80011c8 <HW_TS_Start+0x9c>)
 80011a2:	681b      	ldr	r3, [r3, #0]
 80011a4:	681b      	ldr	r3, [r3, #0]
 80011a6:	22ff      	movs	r2, #255	; 0xff
 80011a8:	625a      	str	r2, [r3, #36]	; 0x24

  HAL_NVIC_EnableIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID); /**<  Enable NVIC */
 80011aa:	2003      	movs	r0, #3
 80011ac:	f001 fd08 	bl	8002bc0 <HAL_NVIC_EnableIRQ>
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80011b0:	f386 8810 	msr	PRIMASK, r6
#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  __set_PRIMASK(primask_bit); /**< Restore PRIMASK bit*/
#endif

  return;
}
 80011b4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    HW_TS_Stop( timer_id );
 80011b6:	f7ff ff55 	bl	8001064 <HW_TS_Stop>
 80011ba:	e7c3      	b.n	8001144 <HW_TS_Start+0x18>
    RescheduleTimerList();
 80011bc:	f7ff fe0e 	bl	8000ddc <RescheduleTimerList>
 80011c0:	e7ee      	b.n	80011a0 <HW_TS_Start+0x74>
 80011c2:	bf00      	nop
 80011c4:	20000090 	.word	0x20000090
 80011c8:	20000228 	.word	0x20000228

080011cc <HW_TS_RTC_Int_AppNot>:

  return (return_value);
}

__weak void HW_TS_RTC_Int_AppNot(uint32_t TimerProcessID, uint8_t TimerID, HW_TS_pTimerCb_t pTimerCallBack)
{
 80011cc:	b508      	push	{r3, lr}
  pTimerCallBack();
 80011ce:	4790      	blx	r2

  return;
}
 80011d0:	bd08      	pop	{r3, pc}
	...

080011d4 <HW_TS_RTC_Wakeup_Handler>:
{
 80011d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80011d6:	f3ef 8410 	mrs	r4, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 80011da:	b672      	cpsid	i
  __HAL_RTC_WRITEPROTECTION_DISABLE( phrtc );
 80011dc:	4b36      	ldr	r3, [pc, #216]	; (80012b8 <HW_TS_RTC_Wakeup_Handler+0xe4>)
 80011de:	6819      	ldr	r1, [r3, #0]
 80011e0:	680b      	ldr	r3, [r1, #0]
 80011e2:	22ca      	movs	r2, #202	; 0xca
 80011e4:	625a      	str	r2, [r3, #36]	; 0x24
 80011e6:	680b      	ldr	r3, [r1, #0]
 80011e8:	2253      	movs	r2, #83	; 0x53
 80011ea:	625a      	str	r2, [r3, #36]	; 0x24
  __HAL_RTC_WAKEUPTIMER_DISABLE(phrtc);
 80011ec:	680a      	ldr	r2, [r1, #0]
 80011ee:	6893      	ldr	r3, [r2, #8]
 80011f0:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80011f4:	6093      	str	r3, [r2, #8]
  local_current_running_timer_id = CurrentRunningTimerID;
 80011f6:	4a31      	ldr	r2, [pc, #196]	; (80012bc <HW_TS_RTC_Wakeup_Handler+0xe8>)
 80011f8:	f892 3090 	ldrb.w	r3, [r2, #144]	; 0x90
 80011fc:	b2dd      	uxtb	r5, r3
  if(aTimerContext[local_current_running_timer_id].TimerIDStatus == TimerID_Running)
 80011fe:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8001202:	00d8      	lsls	r0, r3, #3
 8001204:	4402      	add	r2, r0
 8001206:	7b13      	ldrb	r3, [r2, #12]
 8001208:	b2db      	uxtb	r3, r3
 800120a:	2b02      	cmp	r3, #2
 800120c:	d015      	beq.n	800123a <HW_TS_RTC_Wakeup_Handler+0x66>
    while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(phrtc, RTC_FLAG_WUTWF) == RESET);
 800120e:	680b      	ldr	r3, [r1, #0]
 8001210:	68da      	ldr	r2, [r3, #12]
 8001212:	f012 0f04 	tst.w	r2, #4
 8001216:	d0fa      	beq.n	800120e <HW_TS_RTC_Wakeup_Handler+0x3a>
    __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(phrtc, RTC_FLAG_WUTF);   /**<  Clear flag in RTC module */
 8001218:	68da      	ldr	r2, [r3, #12]
 800121a:	b2d2      	uxtb	r2, r2
 800121c:	f462 6290 	orn	r2, r2, #1152	; 0x480
 8001220:	60da      	str	r2, [r3, #12]
    __HAL_RTC_WAKEUPTIMER_EXTI_CLEAR_FLAG(); /**<  Clear flag in EXTI module */
 8001222:	4b27      	ldr	r3, [pc, #156]	; (80012c0 <HW_TS_RTC_Wakeup_Handler+0xec>)
 8001224:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8001228:	60da      	str	r2, [r3, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800122a:	f384 8810 	msr	PRIMASK, r4
  __HAL_RTC_WRITEPROTECTION_ENABLE( phrtc );
 800122e:	4b22      	ldr	r3, [pc, #136]	; (80012b8 <HW_TS_RTC_Wakeup_Handler+0xe4>)
 8001230:	681b      	ldr	r3, [r3, #0]
 8001232:	681b      	ldr	r3, [r3, #0]
 8001234:	22ff      	movs	r2, #255	; 0xff
 8001236:	625a      	str	r2, [r3, #36]	; 0x24
}
 8001238:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    ptimer_callback = aTimerContext[local_current_running_timer_id].pTimerCallBack;
 800123a:	4b20      	ldr	r3, [pc, #128]	; (80012bc <HW_TS_RTC_Wakeup_Handler+0xe8>)
 800123c:	eb05 0145 	add.w	r1, r5, r5, lsl #1
 8001240:	00ca      	lsls	r2, r1, #3
 8001242:	1899      	adds	r1, r3, r2
 8001244:	589f      	ldr	r7, [r3, r2]
    timer_process_id = aTimerContext[local_current_running_timer_id].TimerProcessID;
 8001246:	690e      	ldr	r6, [r1, #16]
    if(WakeupTimerLimitation != WakeupTimerValue_Overpassed)
 8001248:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 800124c:	b373      	cbz	r3, 80012ac <HW_TS_RTC_Wakeup_Handler+0xd8>
      if(aTimerContext[local_current_running_timer_id].TimerMode == hw_ts_Repeated)
 800124e:	7b4b      	ldrb	r3, [r1, #13]
 8001250:	b2db      	uxtb	r3, r3
 8001252:	2b01      	cmp	r3, #1
 8001254:	d012      	beq.n	800127c <HW_TS_RTC_Wakeup_Handler+0xa8>
 8001256:	f384 8810 	msr	PRIMASK, r4
        HW_TS_Stop(local_current_running_timer_id);
 800125a:	4628      	mov	r0, r5
 800125c:	f7ff ff02 	bl	8001064 <HW_TS_Stop>
        __HAL_RTC_WRITEPROTECTION_DISABLE( phrtc );
 8001260:	4b15      	ldr	r3, [pc, #84]	; (80012b8 <HW_TS_RTC_Wakeup_Handler+0xe4>)
 8001262:	681b      	ldr	r3, [r3, #0]
 8001264:	681a      	ldr	r2, [r3, #0]
 8001266:	21ca      	movs	r1, #202	; 0xca
 8001268:	6251      	str	r1, [r2, #36]	; 0x24
 800126a:	681b      	ldr	r3, [r3, #0]
 800126c:	2253      	movs	r2, #83	; 0x53
 800126e:	625a      	str	r2, [r3, #36]	; 0x24
      HW_TS_RTC_Int_AppNot(timer_process_id, local_current_running_timer_id, ptimer_callback);
 8001270:	463a      	mov	r2, r7
 8001272:	4629      	mov	r1, r5
 8001274:	4630      	mov	r0, r6
 8001276:	f7ff ffa9 	bl	80011cc <HW_TS_RTC_Int_AppNot>
 800127a:	e7d8      	b.n	800122e <HW_TS_RTC_Wakeup_Handler+0x5a>
        UnlinkTimer(local_current_running_timer_id, SSR_Read_Not_Requested);
 800127c:	2101      	movs	r1, #1
 800127e:	4628      	mov	r0, r5
 8001280:	f7ff fc7e 	bl	8000b80 <UnlinkTimer>
 8001284:	f384 8810 	msr	PRIMASK, r4
        HW_TS_Start(local_current_running_timer_id, aTimerContext[local_current_running_timer_id].CounterInit);
 8001288:	eb05 0345 	add.w	r3, r5, r5, lsl #1
 800128c:	00da      	lsls	r2, r3, #3
 800128e:	4b0b      	ldr	r3, [pc, #44]	; (80012bc <HW_TS_RTC_Wakeup_Handler+0xe8>)
 8001290:	4413      	add	r3, r2
 8001292:	6859      	ldr	r1, [r3, #4]
 8001294:	4628      	mov	r0, r5
 8001296:	f7ff ff49 	bl	800112c <HW_TS_Start>
        __HAL_RTC_WRITEPROTECTION_DISABLE( phrtc );
 800129a:	4b07      	ldr	r3, [pc, #28]	; (80012b8 <HW_TS_RTC_Wakeup_Handler+0xe4>)
 800129c:	681b      	ldr	r3, [r3, #0]
 800129e:	681a      	ldr	r2, [r3, #0]
 80012a0:	21ca      	movs	r1, #202	; 0xca
 80012a2:	6251      	str	r1, [r2, #36]	; 0x24
 80012a4:	681b      	ldr	r3, [r3, #0]
 80012a6:	2253      	movs	r2, #83	; 0x53
 80012a8:	625a      	str	r2, [r3, #36]	; 0x24
 80012aa:	e7e1      	b.n	8001270 <HW_TS_RTC_Wakeup_Handler+0x9c>
      RescheduleTimerList();
 80012ac:	f7ff fd96 	bl	8000ddc <RescheduleTimerList>
 80012b0:	f384 8810 	msr	PRIMASK, r4
}
 80012b4:	e7bb      	b.n	800122e <HW_TS_RTC_Wakeup_Handler+0x5a>
 80012b6:	bf00      	nop
 80012b8:	20000228 	.word	0x20000228
 80012bc:	20000090 	.word	0x20000090
 80012c0:	58000800 	.word	0x58000800

080012c4 <HW_UART_Transmit_DMA>:
hw_status_t HW_UART_Transmit_DMA(hw_uart_id_t hw_uart_id, uint8_t *p_data, uint16_t size, void (*cb)(void))
{
    HAL_StatusTypeDef hal_status = HAL_OK;
    hw_status_t hw_status = hw_uart_ok;

    switch (hw_uart_id)
 80012c4:	b108      	cbz	r0, 80012ca <HW_UART_Transmit_DMA+0x6>
    hw_status_t hw_status = hw_uart_ok;
 80012c6:	2000      	movs	r0, #0
        default:
            break;
    }

    return hw_status;
}
 80012c8:	4770      	bx	lr
{
 80012ca:	b510      	push	{r4, lr}
 80012cc:	4604      	mov	r4, r0
            HW_huart1TxCb = cb;
 80012ce:	4807      	ldr	r0, [pc, #28]	; (80012ec <HW_UART_Transmit_DMA+0x28>)
 80012d0:	6003      	str	r3, [r0, #0]
            huart1.Instance = USART1;
 80012d2:	4807      	ldr	r0, [pc, #28]	; (80012f0 <HW_UART_Transmit_DMA+0x2c>)
 80012d4:	4b07      	ldr	r3, [pc, #28]	; (80012f4 <HW_UART_Transmit_DMA+0x30>)
 80012d6:	6003      	str	r3, [r0, #0]
            hal_status = HAL_UART_Transmit_DMA(&huart1, p_data, size);
 80012d8:	f003 fa5a 	bl	8004790 <HAL_UART_Transmit_DMA>
    switch (hal_status)
 80012dc:	2802      	cmp	r0, #2
 80012de:	d004      	beq.n	80012ea <HW_UART_Transmit_DMA+0x26>
 80012e0:	2803      	cmp	r0, #3
 80012e2:	d002      	beq.n	80012ea <HW_UART_Transmit_DMA+0x26>
 80012e4:	2801      	cmp	r0, #1
 80012e6:	d000      	beq.n	80012ea <HW_UART_Transmit_DMA+0x26>
 80012e8:	4620      	mov	r0, r4
}
 80012ea:	bd10      	pop	{r4, pc}
 80012ec:	20001378 	.word	0x20001378
 80012f0:	200014a8 	.word	0x200014a8
 80012f4:	40013800 	.word	0x40013800

080012f8 <HAL_UART_TxCpltCallback>:

    return;
}

void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80012f8:	b508      	push	{r3, lr}
    switch ((uint32_t)huart->Instance)
 80012fa:	6802      	ldr	r2, [r0, #0]
 80012fc:	4b04      	ldr	r3, [pc, #16]	; (8001310 <HAL_UART_TxCpltCallback+0x18>)
 80012fe:	429a      	cmp	r2, r3
 8001300:	d000      	beq.n	8001304 <HAL_UART_TxCpltCallback+0xc>
        default:
            break;
    }

    return;
}
 8001302:	bd08      	pop	{r3, pc}
            if(HW_huart1TxCb)
 8001304:	4b03      	ldr	r3, [pc, #12]	; (8001314 <HAL_UART_TxCpltCallback+0x1c>)
 8001306:	681b      	ldr	r3, [r3, #0]
 8001308:	2b00      	cmp	r3, #0
 800130a:	d0fa      	beq.n	8001302 <HAL_UART_TxCpltCallback+0xa>
                HW_huart1TxCb();
 800130c:	4798      	blx	r3
    return;
 800130e:	e7f8      	b.n	8001302 <HAL_UART_TxCpltCallback+0xa>
 8001310:	40013800 	.word	0x40013800
 8001314:	20001378 	.word	0x20001378

08001318 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001318:	b082      	sub	sp, #8
  SET_BIT(RCC->AHB2ENR, Periphs);
 800131a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800131e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001320:	f042 0202 	orr.w	r2, r2, #2
 8001324:	64da      	str	r2, [r3, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8001326:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001328:	f003 0302 	and.w	r3, r3, #2
 800132c:	9301      	str	r3, [sp, #4]
  (void)tmpreg;
 800132e:	9b01      	ldr	r3, [sp, #4]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOB_CLK_ENABLE();

}
 8001330:	b002      	add	sp, #8
 8001332:	4770      	bx	lr

08001334 <MX_DMA_Init>:
{
 8001334:	b500      	push	{lr}
 8001336:	b085      	sub	sp, #20
  SET_BIT(RCC->AHB1ENR, Periphs);
 8001338:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800133c:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800133e:	f042 0204 	orr.w	r2, r2, #4
 8001342:	649a      	str	r2, [r3, #72]	; 0x48
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 8001344:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8001346:	f002 0204 	and.w	r2, r2, #4
 800134a:	9203      	str	r2, [sp, #12]
  (void)tmpreg;
 800134c:	9a03      	ldr	r2, [sp, #12]
  SET_BIT(RCC->AHB1ENR, Periphs);
 800134e:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8001350:	f042 0202 	orr.w	r2, r2, #2
 8001354:	649a      	str	r2, [r3, #72]	; 0x48
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 8001356:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8001358:	f002 0202 	and.w	r2, r2, #2
 800135c:	9202      	str	r2, [sp, #8]
  (void)tmpreg;
 800135e:	9a02      	ldr	r2, [sp, #8]
  SET_BIT(RCC->AHB1ENR, Periphs);
 8001360:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8001362:	f042 0201 	orr.w	r2, r2, #1
 8001366:	649a      	str	r2, [r3, #72]	; 0x48
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 8001368:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800136a:	f003 0301 	and.w	r3, r3, #1
 800136e:	9301      	str	r3, [sp, #4]
  (void)tmpreg;
 8001370:	9b01      	ldr	r3, [sp, #4]
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8001372:	2200      	movs	r2, #0
 8001374:	4611      	mov	r1, r2
 8001376:	200b      	movs	r0, #11
 8001378:	f001 fbee 	bl	8002b58 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 800137c:	200b      	movs	r0, #11
 800137e:	f001 fc1f 	bl	8002bc0 <HAL_NVIC_EnableIRQ>
  HAL_NVIC_SetPriority(DMA2_Channel4_IRQn, 15, 0);
 8001382:	2200      	movs	r2, #0
 8001384:	210f      	movs	r1, #15
 8001386:	203a      	movs	r0, #58	; 0x3a
 8001388:	f001 fbe6 	bl	8002b58 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Channel4_IRQn);
 800138c:	203a      	movs	r0, #58	; 0x3a
 800138e:	f001 fc17 	bl	8002bc0 <HAL_NVIC_EnableIRQ>
}
 8001392:	b005      	add	sp, #20
 8001394:	f85d fb04 	ldr.w	pc, [sp], #4

08001398 <Error_Handler>:
  __ASM volatile ("cpsid i" : : : "memory");
 8001398:	b672      	cpsid	i
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800139a:	e7fe      	b.n	800139a <Error_Handler+0x2>

0800139c <MX_IPCC_Init>:
{
 800139c:	b508      	push	{r3, lr}
  hipcc.Instance = IPCC;
 800139e:	4804      	ldr	r0, [pc, #16]	; (80013b0 <MX_IPCC_Init+0x14>)
 80013a0:	4b04      	ldr	r3, [pc, #16]	; (80013b4 <MX_IPCC_Init+0x18>)
 80013a2:	6003      	str	r3, [r0, #0]
  if (HAL_IPCC_Init(&hipcc) != HAL_OK)
 80013a4:	f001 ff42 	bl	800322c <HAL_IPCC_Init>
 80013a8:	b900      	cbnz	r0, 80013ac <MX_IPCC_Init+0x10>
}
 80013aa:	bd08      	pop	{r3, pc}
    Error_Handler();
 80013ac:	f7ff fff4 	bl	8001398 <Error_Handler>
 80013b0:	2000137c 	.word	0x2000137c
 80013b4:	58000c00 	.word	0x58000c00

080013b8 <MX_RTC_Init>:
{
 80013b8:	b508      	push	{r3, lr}
  hrtc.Instance = RTC;
 80013ba:	480a      	ldr	r0, [pc, #40]	; (80013e4 <MX_RTC_Init+0x2c>)
 80013bc:	4b0a      	ldr	r3, [pc, #40]	; (80013e8 <MX_RTC_Init+0x30>)
 80013be:	6003      	str	r3, [r0, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 80013c0:	2300      	movs	r3, #0
 80013c2:	6043      	str	r3, [r0, #4]
  hrtc.Init.AsynchPrediv = CFG_RTC_ASYNCH_PRESCALER;
 80013c4:	220f      	movs	r2, #15
 80013c6:	6082      	str	r2, [r0, #8]
  hrtc.Init.SynchPrediv = CFG_RTC_SYNCH_PRESCALER;
 80013c8:	f647 72ff 	movw	r2, #32767	; 0x7fff
 80013cc:	60c2      	str	r2, [r0, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 80013ce:	6103      	str	r3, [r0, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 80013d0:	6183      	str	r3, [r0, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 80013d2:	61c3      	str	r3, [r0, #28]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 80013d4:	6143      	str	r3, [r0, #20]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 80013d6:	f002 ffd2 	bl	800437e <HAL_RTC_Init>
 80013da:	b900      	cbnz	r0, 80013de <MX_RTC_Init+0x26>
}
 80013dc:	bd08      	pop	{r3, pc}
    Error_Handler();
 80013de:	f7ff ffdb 	bl	8001398 <Error_Handler>
 80013e2:	bf00      	nop
 80013e4:	20001598 	.word	0x20001598
 80013e8:	40002800 	.word	0x40002800

080013ec <MX_ADC1_Init>:
{
 80013ec:	b510      	push	{r4, lr}
 80013ee:	b086      	sub	sp, #24
  ADC_ChannelConfTypeDef sConfig = {0};
 80013f0:	2300      	movs	r3, #0
 80013f2:	9300      	str	r3, [sp, #0]
 80013f4:	9301      	str	r3, [sp, #4]
 80013f6:	9302      	str	r3, [sp, #8]
 80013f8:	9303      	str	r3, [sp, #12]
 80013fa:	9304      	str	r3, [sp, #16]
 80013fc:	9305      	str	r3, [sp, #20]
  hadc1.Instance = ADC1;
 80013fe:	4822      	ldr	r0, [pc, #136]	; (8001488 <MX_ADC1_Init+0x9c>)
 8001400:	4a22      	ldr	r2, [pc, #136]	; (800148c <MX_ADC1_Init+0xa0>)
 8001402:	6002      	str	r2, [r0, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV32;
 8001404:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8001408:	6042      	str	r2, [r0, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 800140a:	6083      	str	r3, [r0, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800140c:	60c3      	str	r3, [r0, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 800140e:	2201      	movs	r2, #1
 8001410:	6102      	str	r2, [r0, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001412:	2104      	movs	r1, #4
 8001414:	6141      	str	r1, [r0, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8001416:	7603      	strb	r3, [r0, #24]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8001418:	7643      	strb	r3, [r0, #25]
  hadc1.Init.NbrOfConversion = 2;
 800141a:	2402      	movs	r4, #2
 800141c:	61c4      	str	r4, [r0, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800141e:	f880 3020 	strb.w	r3, [r0, #32]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001422:	6283      	str	r3, [r0, #40]	; 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001424:	62c3      	str	r3, [r0, #44]	; 0x2c
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8001426:	f880 3030 	strb.w	r3, [r0, #48]	; 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 800142a:	f44f 5480 	mov.w	r4, #4096	; 0x1000
 800142e:	6344      	str	r4, [r0, #52]	; 0x34
  hadc1.Init.OversamplingMode = ENABLE;
 8001430:	f880 2038 	strb.w	r2, [r0, #56]	; 0x38
  hadc1.Init.Oversampling.Ratio = ADC_OVERSAMPLING_RATIO_4;
 8001434:	63c1      	str	r1, [r0, #60]	; 0x3c
  hadc1.Init.Oversampling.RightBitShift = ADC_RIGHTBITSHIFT_2;
 8001436:	2140      	movs	r1, #64	; 0x40
 8001438:	6401      	str	r1, [r0, #64]	; 0x40
  hadc1.Init.Oversampling.TriggeredMode = ADC_TRIGGEREDMODE_SINGLE_TRIGGER;
 800143a:	6443      	str	r3, [r0, #68]	; 0x44
  hadc1.Init.Oversampling.OversamplingStopReset = ADC_REGOVERSAMPLING_CONTINUED_MODE;
 800143c:	6482      	str	r2, [r0, #72]	; 0x48
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800143e:	f000 fce1 	bl	8001e04 <HAL_ADC_Init>
 8001442:	b9d8      	cbnz	r0, 800147c <MX_ADC1_Init+0x90>
  sConfig.Channel = ADC_CHANNEL_TEMPSENSOR;
 8001444:	4b12      	ldr	r3, [pc, #72]	; (8001490 <MX_ADC1_Init+0xa4>)
 8001446:	9300      	str	r3, [sp, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8001448:	2306      	movs	r3, #6
 800144a:	9301      	str	r3, [sp, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_24CYCLES_5;
 800144c:	2303      	movs	r3, #3
 800144e:	9302      	str	r3, [sp, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8001450:	237f      	movs	r3, #127	; 0x7f
 8001452:	9303      	str	r3, [sp, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8001454:	2304      	movs	r3, #4
 8001456:	9304      	str	r3, [sp, #16]
  sConfig.Offset = 0;
 8001458:	2300      	movs	r3, #0
 800145a:	9305      	str	r3, [sp, #20]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800145c:	4669      	mov	r1, sp
 800145e:	480a      	ldr	r0, [pc, #40]	; (8001488 <MX_ADC1_Init+0x9c>)
 8001460:	f000 ff08 	bl	8002274 <HAL_ADC_ConfigChannel>
 8001464:	b960      	cbnz	r0, 8001480 <MX_ADC1_Init+0x94>
  sConfig.Channel = ADC_CHANNEL_VBAT;
 8001466:	4b0b      	ldr	r3, [pc, #44]	; (8001494 <MX_ADC1_Init+0xa8>)
 8001468:	9300      	str	r3, [sp, #0]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 800146a:	230c      	movs	r3, #12
 800146c:	9301      	str	r3, [sp, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800146e:	4669      	mov	r1, sp
 8001470:	4805      	ldr	r0, [pc, #20]	; (8001488 <MX_ADC1_Init+0x9c>)
 8001472:	f000 feff 	bl	8002274 <HAL_ADC_ConfigChannel>
 8001476:	b928      	cbnz	r0, 8001484 <MX_ADC1_Init+0x98>
}
 8001478:	b006      	add	sp, #24
 800147a:	bd10      	pop	{r4, pc}
    Error_Handler();
 800147c:	f7ff ff8c 	bl	8001398 <Error_Handler>
    Error_Handler();
 8001480:	f7ff ff8a 	bl	8001398 <Error_Handler>
    Error_Handler();
 8001484:	f7ff ff88 	bl	8001398 <Error_Handler>
 8001488:	20001418 	.word	0x20001418
 800148c:	50040000 	.word	0x50040000
 8001490:	c7520000 	.word	0xc7520000
 8001494:	cb840000 	.word	0xcb840000

08001498 <MX_TIM2_Init>:
{
 8001498:	b500      	push	{lr}
 800149a:	b089      	sub	sp, #36	; 0x24
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800149c:	2300      	movs	r3, #0
 800149e:	9304      	str	r3, [sp, #16]
 80014a0:	9305      	str	r3, [sp, #20]
 80014a2:	9306      	str	r3, [sp, #24]
 80014a4:	9307      	str	r3, [sp, #28]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80014a6:	9301      	str	r3, [sp, #4]
 80014a8:	9302      	str	r3, [sp, #8]
 80014aa:	9303      	str	r3, [sp, #12]
  htim2.Instance = TIM2;
 80014ac:	4813      	ldr	r0, [pc, #76]	; (80014fc <MX_TIM2_Init+0x64>)
 80014ae:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80014b2:	6002      	str	r2, [r0, #0]
  htim2.Init.Prescaler = 32;
 80014b4:	2220      	movs	r2, #32
 80014b6:	6042      	str	r2, [r0, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80014b8:	6083      	str	r3, [r0, #8]
  htim2.Init.Period = 4294967295;
 80014ba:	f04f 32ff 	mov.w	r2, #4294967295
 80014be:	60c2      	str	r2, [r0, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80014c0:	6103      	str	r3, [r0, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80014c2:	6183      	str	r3, [r0, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80014c4:	f003 f830 	bl	8004528 <HAL_TIM_Base_Init>
 80014c8:	b990      	cbnz	r0, 80014f0 <MX_TIM2_Init+0x58>
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80014ca:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80014ce:	9304      	str	r3, [sp, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80014d0:	a904      	add	r1, sp, #16
 80014d2:	480a      	ldr	r0, [pc, #40]	; (80014fc <MX_TIM2_Init+0x64>)
 80014d4:	f003 f864 	bl	80045a0 <HAL_TIM_ConfigClockSource>
 80014d8:	b960      	cbnz	r0, 80014f4 <MX_TIM2_Init+0x5c>
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80014da:	2300      	movs	r3, #0
 80014dc:	9301      	str	r3, [sp, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80014de:	9303      	str	r3, [sp, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80014e0:	a901      	add	r1, sp, #4
 80014e2:	4806      	ldr	r0, [pc, #24]	; (80014fc <MX_TIM2_Init+0x64>)
 80014e4:	f003 f8dc 	bl	80046a0 <HAL_TIMEx_MasterConfigSynchronization>
 80014e8:	b930      	cbnz	r0, 80014f8 <MX_TIM2_Init+0x60>
}
 80014ea:	b009      	add	sp, #36	; 0x24
 80014ec:	f85d fb04 	ldr.w	pc, [sp], #4
    Error_Handler();
 80014f0:	f7ff ff52 	bl	8001398 <Error_Handler>
    Error_Handler();
 80014f4:	f7ff ff50 	bl	8001398 <Error_Handler>
    Error_Handler();
 80014f8:	f7ff ff4e 	bl	8001398 <Error_Handler>
 80014fc:	200015bc 	.word	0x200015bc

08001500 <SystemClock_Config>:
{
 8001500:	b510      	push	{r4, lr}
 8001502:	b09a      	sub	sp, #104	; 0x68
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001504:	2248      	movs	r2, #72	; 0x48
 8001506:	2100      	movs	r1, #0
 8001508:	a808      	add	r0, sp, #32
 800150a:	f005 fec1 	bl	8007290 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800150e:	2400      	movs	r4, #0
 8001510:	9401      	str	r4, [sp, #4]
 8001512:	9402      	str	r4, [sp, #8]
 8001514:	9403      	str	r4, [sp, #12]
 8001516:	9404      	str	r4, [sp, #16]
 8001518:	9405      	str	r4, [sp, #20]
 800151a:	9406      	str	r4, [sp, #24]
 800151c:	9407      	str	r4, [sp, #28]
  HAL_PWR_EnableBkUpAccess();
 800151e:	f001 fea3 	bl	8003268 <HAL_PWR_EnableBkUpAccess>
  MODIFY_REG(RCC->BDCR, RCC_BDCR_LSEDRV, LSEDrive);
 8001522:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001526:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 800152a:	f023 0318 	bic.w	r3, r3, #24
 800152e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001532:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8001536:	6813      	ldr	r3, [r2, #0]
 8001538:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800153c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001540:	6013      	str	r3, [r2, #0]
 8001542:	6813      	ldr	r3, [r2, #0]
 8001544:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001548:	9300      	str	r3, [sp, #0]
 800154a:	9b00      	ldr	r3, [sp, #0]
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSE
 800154c:	2307      	movs	r3, #7
 800154e:	9308      	str	r3, [sp, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001550:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001554:	9309      	str	r3, [sp, #36]	; 0x24
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8001556:	2301      	movs	r3, #1
 8001558:	930a      	str	r3, [sp, #40]	; 0x28
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800155a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800155e:	930b      	str	r3, [sp, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001560:	2340      	movs	r3, #64	; 0x40
 8001562:	930c      	str	r3, [sp, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8001564:	9413      	str	r4, [sp, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001566:	a808      	add	r0, sp, #32
 8001568:	f001 ff82 	bl	8003470 <HAL_RCC_OscConfig>
 800156c:	b980      	cbnz	r0, 8001590 <SystemClock_Config+0x90>
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK4|RCC_CLOCKTYPE_HCLK2
 800156e:	236f      	movs	r3, #111	; 0x6f
 8001570:	9301      	str	r3, [sp, #4]
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSE;
 8001572:	2302      	movs	r3, #2
 8001574:	9302      	str	r3, [sp, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001576:	2300      	movs	r3, #0
 8001578:	9303      	str	r3, [sp, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800157a:	9304      	str	r3, [sp, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800157c:	9305      	str	r3, [sp, #20]
  RCC_ClkInitStruct.AHBCLK2Divider = RCC_SYSCLK_DIV1;
 800157e:	9306      	str	r3, [sp, #24]
  RCC_ClkInitStruct.AHBCLK4Divider = RCC_SYSCLK_DIV1;
 8001580:	9307      	str	r3, [sp, #28]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8001582:	2101      	movs	r1, #1
 8001584:	a801      	add	r0, sp, #4
 8001586:	f002 fb09 	bl	8003b9c <HAL_RCC_ClockConfig>
 800158a:	b918      	cbnz	r0, 8001594 <SystemClock_Config+0x94>
}
 800158c:	b01a      	add	sp, #104	; 0x68
 800158e:	bd10      	pop	{r4, pc}
    Error_Handler();
 8001590:	f7ff ff02 	bl	8001398 <Error_Handler>
    Error_Handler();
 8001594:	f7ff ff00 	bl	8001398 <Error_Handler>

08001598 <PeriphCommonClock_Config>:
{
 8001598:	b500      	push	{lr}
 800159a:	b097      	sub	sp, #92	; 0x5c
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800159c:	2240      	movs	r2, #64	; 0x40
 800159e:	2100      	movs	r1, #0
 80015a0:	a803      	add	r0, sp, #12
 80015a2:	f005 fe75 	bl	8007290 <memset>
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SMPS|RCC_PERIPHCLK_RFWAKEUP;
 80015a6:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 80015aa:	9302      	str	r3, [sp, #8]
  PeriphClkInitStruct.RFWakeUpClockSelection = RCC_RFWKPCLKSOURCE_LSE;
 80015ac:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80015b0:	9313      	str	r3, [sp, #76]	; 0x4c
  PeriphClkInitStruct.SmpsClockSelection = RCC_SMPSCLKSOURCE_HSE;
 80015b2:	2302      	movs	r3, #2
 80015b4:	9314      	str	r3, [sp, #80]	; 0x50
  PeriphClkInitStruct.SmpsDivSelection = RCC_SMPSCLKDIV_RANGE0;
 80015b6:	2300      	movs	r3, #0
 80015b8:	9315      	str	r3, [sp, #84]	; 0x54
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80015ba:	a802      	add	r0, sp, #8
 80015bc:	f002 fd19 	bl	8003ff2 <HAL_RCCEx_PeriphCLKConfig>
 80015c0:	b9c8      	cbnz	r0, 80015f6 <PeriphCommonClock_Config+0x5e>
  MODIFY_REG(PWR->CR5, PWR_CR5_SMPSSC, StartupCurrent);
 80015c2:	4a15      	ldr	r2, [pc, #84]	; (8001618 <PeriphCommonClock_Config+0x80>)
 80015c4:	69d3      	ldr	r3, [r2, #28]
 80015c6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80015ca:	61d3      	str	r3, [r2, #28]
  __IO const uint32_t OutputVoltageLevel_calibration = (((*SMPS_VOLTAGE_CAL_ADDR) & SMPS_VOLTAGE_CAL) >> SMPS_VOLTAGE_CAL_POS);  /* SMPS output voltage level calibrated in production */
 80015cc:	4b13      	ldr	r3, [pc, #76]	; (800161c <PeriphCommonClock_Config+0x84>)
 80015ce:	681b      	ldr	r3, [r3, #0]
 80015d0:	f3c3 2303 	ubfx	r3, r3, #8, #4
 80015d4:	9301      	str	r3, [sp, #4]
  if(OutputVoltageLevel_calibration == 0UL)
 80015d6:	9b01      	ldr	r3, [sp, #4]
 80015d8:	b97b      	cbnz	r3, 80015fa <PeriphCommonClock_Config+0x62>
    MODIFY_REG(PWR->CR5, PWR_CR5_SMPSVOS, OutputVoltageLevel);
 80015da:	69d3      	ldr	r3, [r2, #28]
 80015dc:	f023 030f 	bic.w	r3, r3, #15
 80015e0:	f043 0304 	orr.w	r3, r3, #4
 80015e4:	61d3      	str	r3, [r2, #28]
  SET_BIT(PWR->CR5, PWR_CR5_SMPSEN);
 80015e6:	4a0c      	ldr	r2, [pc, #48]	; (8001618 <PeriphCommonClock_Config+0x80>)
 80015e8:	69d3      	ldr	r3, [r2, #28]
 80015ea:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80015ee:	61d3      	str	r3, [r2, #28]
}
 80015f0:	b017      	add	sp, #92	; 0x5c
 80015f2:	f85d fb04 	ldr.w	pc, [sp], #4
    Error_Handler();
 80015f6:	f7ff fecf 	bl	8001398 <Error_Handler>
    TrimmingSteps = ((int32_t)OutputVoltageLevel_calibration - (int32_t)(LL_PWR_SMPS_OUTPUT_VOLTAGE_1V50 >> PWR_CR5_SMPSVOS_Pos));
 80015fa:	9b01      	ldr	r3, [sp, #4]
    if(OutputVoltageLevelTrimmed < 0)
 80015fc:	3b02      	subs	r3, #2
 80015fe:	d403      	bmi.n	8001608 <PeriphCommonClock_Config+0x70>
      if(OutputVoltageLevelTrimmed > (int32_t)PWR_CR5_SMPSVOS)
 8001600:	2b0f      	cmp	r3, #15
 8001602:	dd02      	ble.n	800160a <PeriphCommonClock_Config+0x72>
        OutputVoltageLevelTrimmed = (int32_t)PWR_CR5_SMPSVOS;
 8001604:	230f      	movs	r3, #15
 8001606:	e000      	b.n	800160a <PeriphCommonClock_Config+0x72>
      OutputVoltageLevelTrimmed = 0;
 8001608:	2300      	movs	r3, #0
    MODIFY_REG(PWR->CR5, PWR_CR5_SMPSVOS, (uint32_t)OutputVoltageLevelTrimmed);
 800160a:	4903      	ldr	r1, [pc, #12]	; (8001618 <PeriphCommonClock_Config+0x80>)
 800160c:	69ca      	ldr	r2, [r1, #28]
 800160e:	f022 020f 	bic.w	r2, r2, #15
 8001612:	4313      	orrs	r3, r2
 8001614:	61cb      	str	r3, [r1, #28]
 8001616:	e7e6      	b.n	80015e6 <PeriphCommonClock_Config+0x4e>
 8001618:	58000400 	.word	0x58000400
 800161c:	1fff7558 	.word	0x1fff7558

08001620 <MX_USART1_UART_Init>:
{
 8001620:	b508      	push	{r3, lr}
  huart1.Instance = USART1;
 8001622:	4816      	ldr	r0, [pc, #88]	; (800167c <MX_USART1_UART_Init+0x5c>)
 8001624:	4b16      	ldr	r3, [pc, #88]	; (8001680 <MX_USART1_UART_Init+0x60>)
 8001626:	6003      	str	r3, [r0, #0]
  huart1.Init.BaudRate = 115200;
 8001628:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
 800162c:	6043      	str	r3, [r0, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800162e:	2300      	movs	r3, #0
 8001630:	6083      	str	r3, [r0, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001632:	60c3      	str	r3, [r0, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001634:	6103      	str	r3, [r0, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001636:	220c      	movs	r2, #12
 8001638:	6142      	str	r2, [r0, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800163a:	6183      	str	r3, [r0, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_8;
 800163c:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8001640:	61c2      	str	r2, [r0, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001642:	6203      	str	r3, [r0, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001644:	6243      	str	r3, [r0, #36]	; 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001646:	6283      	str	r3, [r0, #40]	; 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001648:	f003 fd53 	bl	80050f2 <HAL_UART_Init>
 800164c:	b970      	cbnz	r0, 800166c <MX_USART1_UART_Init+0x4c>
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 800164e:	2100      	movs	r1, #0
 8001650:	480a      	ldr	r0, [pc, #40]	; (800167c <MX_USART1_UART_Init+0x5c>)
 8001652:	f003 fdc9 	bl	80051e8 <HAL_UARTEx_SetTxFifoThreshold>
 8001656:	b958      	cbnz	r0, 8001670 <MX_USART1_UART_Init+0x50>
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001658:	2100      	movs	r1, #0
 800165a:	4808      	ldr	r0, [pc, #32]	; (800167c <MX_USART1_UART_Init+0x5c>)
 800165c:	f003 fde9 	bl	8005232 <HAL_UARTEx_SetRxFifoThreshold>
 8001660:	b940      	cbnz	r0, 8001674 <MX_USART1_UART_Init+0x54>
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8001662:	4806      	ldr	r0, [pc, #24]	; (800167c <MX_USART1_UART_Init+0x5c>)
 8001664:	f003 fda1 	bl	80051aa <HAL_UARTEx_DisableFifoMode>
 8001668:	b930      	cbnz	r0, 8001678 <MX_USART1_UART_Init+0x58>
}
 800166a:	bd08      	pop	{r3, pc}
    Error_Handler();
 800166c:	f7ff fe94 	bl	8001398 <Error_Handler>
    Error_Handler();
 8001670:	f7ff fe92 	bl	8001398 <Error_Handler>
    Error_Handler();
 8001674:	f7ff fe90 	bl	8001398 <Error_Handler>
    Error_Handler();
 8001678:	f7ff fe8e 	bl	8001398 <Error_Handler>
 800167c:	200014a8 	.word	0x200014a8
 8001680:	40013800 	.word	0x40013800

08001684 <main>:
{
 8001684:	b508      	push	{r3, lr}
  HAL_Init();
 8001686:	f000 fb25 	bl	8001cd4 <HAL_Init>
  MX_APPE_Config();
 800168a:	f7ff f997 	bl	80009bc <MX_APPE_Config>
  SystemClock_Config();
 800168e:	f7ff ff37 	bl	8001500 <SystemClock_Config>
  PeriphCommonClock_Config();
 8001692:	f7ff ff81 	bl	8001598 <PeriphCommonClock_Config>
   MX_IPCC_Init();
 8001696:	f7ff fe81 	bl	800139c <MX_IPCC_Init>
  MX_GPIO_Init();
 800169a:	f7ff fe3d 	bl	8001318 <MX_GPIO_Init>
  MX_DMA_Init();
 800169e:	f7ff fe49 	bl	8001334 <MX_DMA_Init>
  MX_RTC_Init();
 80016a2:	f7ff fe89 	bl	80013b8 <MX_RTC_Init>
  MX_USART1_UART_Init();
 80016a6:	f7ff ffbb 	bl	8001620 <MX_USART1_UART_Init>
  MX_ADC1_Init();
 80016aa:	f7ff fe9f 	bl	80013ec <MX_ADC1_Init>
  MX_TIM2_Init();
 80016ae:	f7ff fef3 	bl	8001498 <MX_TIM2_Init>
  MX_APPE_Init();
 80016b2:	f7ff f9cd 	bl	8000a50 <MX_APPE_Init>
    MX_APPE_Process();
 80016b6:	f7ff f9df 	bl	8000a78 <MX_APPE_Process>
  while (1)
 80016ba:	e7fc      	b.n	80016b6 <main+0x32>

080016bc <queueBSP>:
	//Run it on a timer
	HW_TS_Create(CFG_TIM_PROC_ID_ISR, &TimerMeasurement_Id, hw_ts_SingleShot, queueBSP);
	HW_TS_Start(TimerMeasurement_Id, BSP_INTERVAL_FAST);
}

void queueBSP( void ){
 80016bc:	b508      	push	{r3, lr}
	//Queue BSP task
	UTIL_SEQ_SetTask( 1<<CFG_TASK_StartBSP_EVT_ID, CFG_SCH_PRIO_0);
 80016be:	2100      	movs	r1, #0
 80016c0:	2004      	movs	r0, #4
 80016c2:	f005 fc83 	bl	8006fcc <UTIL_SEQ_SetTask>
	return;
}
 80016c6:	bd08      	pop	{r3, pc}

080016c8 <BSP_Start>:

void BSP_Start(void){
 80016c8:	b510      	push	{r4, lr}
	APP_DBG_MSG("Start BSP \n");
 80016ca:	4815      	ldr	r0, [pc, #84]	; (8001720 <BSP_Start+0x58>)
 80016cc:	f005 fe6e 	bl	80073ac <puts>
	//Start and Calibrate ADC
	HAL_ADCEx_Calibration_Start(&hadc1, ADC_SINGLE_ENDED);
 80016d0:	4c14      	ldr	r4, [pc, #80]	; (8001724 <BSP_Start+0x5c>)
 80016d2:	217f      	movs	r1, #127	; 0x7f
 80016d4:	4620      	mov	r0, r4
 80016d6:	f001 f9d9 	bl	8002a8c <HAL_ADCEx_Calibration_Start>
	//Start ADC into DMA, Callback will handle data
	HAL_ADC_Start_DMA(&hadc1, (uint32_t*)rawADC, ADC_NUM_CHANNELS);
 80016da:	2202      	movs	r2, #2
 80016dc:	4912      	ldr	r1, [pc, #72]	; (8001728 <BSP_Start+0x60>)
 80016de:	4620      	mov	r0, r4
 80016e0:	f001 f8e8 	bl	80028b4 <HAL_ADC_Start_DMA>
	//Set ADC running bit
	powerState |= (1UL << ADC_Running_Bit);
 80016e4:	4a11      	ldr	r2, [pc, #68]	; (800172c <BSP_Start+0x64>)
 80016e6:	6813      	ldr	r3, [r2, #0]
 80016e8:	f043 0301 	orr.w	r3, r3, #1
 80016ec:	6013      	str	r3, [r2, #0]

	//Set Next BSP timer
	if (VBatmV > 3000){
 80016ee:	4b10      	ldr	r3, [pc, #64]	; (8001730 <BSP_Start+0x68>)
 80016f0:	881a      	ldrh	r2, [r3, #0]
 80016f2:	f640 33b8 	movw	r3, #3000	; 0xbb8
 80016f6:	429a      	cmp	r2, r3
 80016f8:	d90a      	bls.n	8001710 <BSP_Start+0x48>
		HW_TS_Start(TimerMeasurement_Id, BSP_INTERVAL_FAST);
 80016fa:	f640 0101 	movw	r1, #2049	; 0x801
 80016fe:	4b0d      	ldr	r3, [pc, #52]	; (8001734 <BSP_Start+0x6c>)
 8001700:	7818      	ldrb	r0, [r3, #0]
 8001702:	f7ff fd13 	bl	800112c <HW_TS_Start>
	}else{
		HW_TS_Start(TimerMeasurement_Id, BSP_INTERVAL_SLOW);
	}

	//Don't allow Stop mode
	UTIL_LPM_SetStopMode(1 << CFG_LPM_APP, UTIL_LPM_DISABLE);
 8001706:	2101      	movs	r1, #1
 8001708:	4608      	mov	r0, r1
 800170a:	f005 fc33 	bl	8006f74 <UTIL_LPM_SetStopMode>
	return;
}
 800170e:	bd10      	pop	{r4, pc}
		HW_TS_Start(TimerMeasurement_Id, BSP_INTERVAL_SLOW);
 8001710:	f642 0105 	movw	r1, #10245	; 0x2805
 8001714:	4b07      	ldr	r3, [pc, #28]	; (8001734 <BSP_Start+0x6c>)
 8001716:	7818      	ldrb	r0, [r3, #0]
 8001718:	f7ff fd08 	bl	800112c <HW_TS_Start>
 800171c:	e7f3      	b.n	8001706 <BSP_Start+0x3e>
 800171e:	bf00      	nop
 8001720:	080086a8 	.word	0x080086a8
 8001724:	20001418 	.word	0x20001418
 8001728:	20001614 	.word	0x20001614
 800172c:	20001610 	.word	0x20001610
 8001730:	2000160c 	.word	0x2000160c
 8001734:	2000160e 	.word	0x2000160e

08001738 <My_app_Init>:
void My_app_Init(void){
 8001738:	b510      	push	{r4, lr}
	APP_DBG_MSG("My_ADC_Init \n");
 800173a:	480d      	ldr	r0, [pc, #52]	; (8001770 <My_app_Init+0x38>)
 800173c:	f005 fe36 	bl	80073ac <puts>
	UTIL_SEQ_RegTask( 1<< CFG_TASK_StartBSP_EVT_ID, UTIL_SEQ_RFU, BSP_Start);
 8001740:	4a0c      	ldr	r2, [pc, #48]	; (8001774 <My_app_Init+0x3c>)
 8001742:	2100      	movs	r1, #0
 8001744:	2004      	movs	r0, #4
 8001746:	f005 fd5b 	bl	8007200 <UTIL_SEQ_RegTask>
	UTIL_SEQ_RegTask( 1<< CFG_TASK_EndADC_EVT_ID, UTIL_SEQ_RFU, ADC_End);
 800174a:	4a0b      	ldr	r2, [pc, #44]	; (8001778 <My_app_Init+0x40>)
 800174c:	2100      	movs	r1, #0
 800174e:	2008      	movs	r0, #8
 8001750:	f005 fd56 	bl	8007200 <UTIL_SEQ_RegTask>
	HW_TS_Create(CFG_TIM_PROC_ID_ISR, &TimerMeasurement_Id, hw_ts_SingleShot, queueBSP);
 8001754:	4c09      	ldr	r4, [pc, #36]	; (800177c <My_app_Init+0x44>)
 8001756:	4b0a      	ldr	r3, [pc, #40]	; (8001780 <My_app_Init+0x48>)
 8001758:	2200      	movs	r2, #0
 800175a:	4621      	mov	r1, r4
 800175c:	4610      	mov	r0, r2
 800175e:	f7ff fc51 	bl	8001004 <HW_TS_Create>
	HW_TS_Start(TimerMeasurement_Id, BSP_INTERVAL_FAST);
 8001762:	f640 0101 	movw	r1, #2049	; 0x801
 8001766:	7820      	ldrb	r0, [r4, #0]
 8001768:	f7ff fce0 	bl	800112c <HW_TS_Start>
}
 800176c:	bd10      	pop	{r4, pc}
 800176e:	bf00      	nop
 8001770:	080086b4 	.word	0x080086b4
 8001774:	080016c9 	.word	0x080016c9
 8001778:	0800179d 	.word	0x0800179d
 800177c:	2000160e 	.word	0x2000160e
 8001780:	080016bd 	.word	0x080016bd

08001784 <allow_stop>:
	uint8_t BLEBatmeasurement = (uint8_t)VBatmV;
	Custom_STM_App_Update_Char(CUSTOM_STM_BATLVL, (uint8_t *)&BLEBatmeasurement);
	return;
}

void allow_stop(){
 8001784:	b508      	push	{r3, lr}
	//Only allow stop mode if powerState == 0
	if(powerState == 0){
 8001786:	4b04      	ldr	r3, [pc, #16]	; (8001798 <allow_stop+0x14>)
 8001788:	681b      	ldr	r3, [r3, #0]
 800178a:	b103      	cbz	r3, 800178e <allow_stop+0xa>
		//Allow Stop mode
		UTIL_LPM_SetStopMode(1 << CFG_LPM_APP, UTIL_LPM_ENABLE);
	}
}
 800178c:	bd08      	pop	{r3, pc}
		UTIL_LPM_SetStopMode(1 << CFG_LPM_APP, UTIL_LPM_ENABLE);
 800178e:	2100      	movs	r1, #0
 8001790:	2001      	movs	r0, #1
 8001792:	f005 fbef 	bl	8006f74 <UTIL_LPM_SetStopMode>
}
 8001796:	e7f9      	b.n	800178c <allow_stop+0x8>
 8001798:	20001610 	.word	0x20001610

0800179c <ADC_End>:
void ADC_End(){
 800179c:	b500      	push	{lr}
 800179e:	b083      	sub	sp, #12
	HAL_ADC_Stop_DMA(&hadc1);
 80017a0:	481b      	ldr	r0, [pc, #108]	; (8001810 <ADC_End+0x74>)
 80017a2:	f001 f931 	bl	8002a08 <HAL_ADC_Stop_DMA>
	powerState &= ~(1UL << ADC_Running_Bit);
 80017a6:	4a1b      	ldr	r2, [pc, #108]	; (8001814 <ADC_End+0x78>)
 80017a8:	6813      	ldr	r3, [r2, #0]
 80017aa:	f023 0301 	bic.w	r3, r3, #1
 80017ae:	6013      	str	r3, [r2, #0]
	allow_stop();
 80017b0:	f7ff ffe8 	bl	8001784 <allow_stop>
	temperature = __HAL_ADC_CALC_TEMPERATURE(ADC_AVDD_MV, rawADC[0],ADC_RESOLUTION_12B);
 80017b4:	4b18      	ldr	r3, [pc, #96]	; (8001818 <ADC_End+0x7c>)
 80017b6:	8819      	ldrh	r1, [r3, #0]
 80017b8:	b28b      	uxth	r3, r1
 80017ba:	f640 41e4 	movw	r1, #3300	; 0xce4
 80017be:	fb01 f103 	mul.w	r1, r1, r3
 80017c2:	4b16      	ldr	r3, [pc, #88]	; (800181c <ADC_End+0x80>)
 80017c4:	fba3 3101 	umull	r3, r1, r3, r1
 80017c8:	4b15      	ldr	r3, [pc, #84]	; (8001820 <ADC_End+0x84>)
 80017ca:	881a      	ldrh	r2, [r3, #0]
 80017cc:	ebc2 1391 	rsb	r3, r2, r1, lsr #6
 80017d0:	2164      	movs	r1, #100	; 0x64
 80017d2:	fb01 f103 	mul.w	r1, r1, r3
 80017d6:	4b13      	ldr	r3, [pc, #76]	; (8001824 <ADC_End+0x88>)
 80017d8:	881b      	ldrh	r3, [r3, #0]
 80017da:	1a9b      	subs	r3, r3, r2
 80017dc:	fb91 f1f3 	sdiv	r1, r1, r3
 80017e0:	311e      	adds	r1, #30
 80017e2:	b209      	sxth	r1, r1
 80017e4:	4b10      	ldr	r3, [pc, #64]	; (8001828 <ADC_End+0x8c>)
 80017e6:	8019      	strh	r1, [r3, #0]
	APP_DBG_MSG("ADC Result Temp %d \n", temperature);
 80017e8:	4810      	ldr	r0, [pc, #64]	; (800182c <ADC_End+0x90>)
 80017ea:	f005 fd59 	bl	80072a0 <iprintf>
	VBatmV = HAL_GetTick() & 0x3F;
 80017ee:	f000 fa93 	bl	8001d18 <HAL_GetTick>
 80017f2:	f000 003f 	and.w	r0, r0, #63	; 0x3f
 80017f6:	4b0e      	ldr	r3, [pc, #56]	; (8001830 <ADC_End+0x94>)
 80017f8:	8018      	strh	r0, [r3, #0]
	uint8_t BLEBatmeasurement = (uint8_t)VBatmV;
 80017fa:	f88d 0007 	strb.w	r0, [sp, #7]
	Custom_STM_App_Update_Char(CUSTOM_STM_BATLVL, (uint8_t *)&BLEBatmeasurement);
 80017fe:	f10d 0107 	add.w	r1, sp, #7
 8001802:	2002      	movs	r0, #2
 8001804:	f005 fa56 	bl	8006cb4 <Custom_STM_App_Update_Char>
}
 8001808:	b003      	add	sp, #12
 800180a:	f85d fb04 	ldr.w	pc, [sp], #4
 800180e:	bf00      	nop
 8001810:	20001418 	.word	0x20001418
 8001814:	20001610 	.word	0x20001610
 8001818:	20001614 	.word	0x20001614
 800181c:	057619f1 	.word	0x057619f1
 8001820:	1fff75a8 	.word	0x1fff75a8
 8001824:	1fff75ca 	.word	0x1fff75ca
 8001828:	2000160a 	.word	0x2000160a
 800182c:	080086c4 	.word	0x080086c4
 8001830:	2000160c 	.word	0x2000160c

08001834 <HAL_ADC_ConvCpltCallback>:


void HAL_ADC_ConvCpltCallback  (ADC_HandleTypeDef *hadc) {
 8001834:	b508      	push	{r3, lr}
	//Queue ADC_end task
	UTIL_SEQ_SetTask( 1<<CFG_TASK_EndADC_EVT_ID, CFG_SCH_PRIO_0);
 8001836:	2100      	movs	r1, #0
 8001838:	2008      	movs	r0, #8
 800183a:	f005 fbc7 	bl	8006fcc <UTIL_SEQ_SetTask>
}
 800183e:	bd08      	pop	{r3, pc}

08001840 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001840:	b500      	push	{lr}
 8001842:	b083      	sub	sp, #12
  SET_BIT(RCC->AHB3ENR, Periphs);
 8001844:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001848:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800184a:	f442 2200 	orr.w	r2, r2, #524288	; 0x80000
 800184e:	651a      	str	r2, [r3, #80]	; 0x50
  tmpreg = READ_BIT(RCC->AHB3ENR, Periphs);
 8001850:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001852:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001856:	9301      	str	r3, [sp, #4]
  (void)tmpreg;
 8001858:	9b01      	ldr	r3, [sp, #4]

  /* System interrupt init*/

  /* Peripheral interrupt init */
  /* HSEM_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(HSEM_IRQn, 0, 0);
 800185a:	2200      	movs	r2, #0
 800185c:	4611      	mov	r1, r2
 800185e:	202e      	movs	r0, #46	; 0x2e
 8001860:	f001 f97a 	bl	8002b58 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(HSEM_IRQn);
 8001864:	202e      	movs	r0, #46	; 0x2e
 8001866:	f001 f9ab 	bl	8002bc0 <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800186a:	b003      	add	sp, #12
 800186c:	f85d fb04 	ldr.w	pc, [sp], #4

08001870 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001870:	b510      	push	{r4, lr}
 8001872:	b096      	sub	sp, #88	; 0x58
 8001874:	4604      	mov	r4, r0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001876:	2250      	movs	r2, #80	; 0x50
 8001878:	2100      	movs	r1, #0
 800187a:	a802      	add	r0, sp, #8
 800187c:	f005 fd08 	bl	8007290 <memset>
  if(hadc->Instance==ADC1)
 8001880:	6822      	ldr	r2, [r4, #0]
 8001882:	4b20      	ldr	r3, [pc, #128]	; (8001904 <HAL_ADC_MspInit+0x94>)
 8001884:	429a      	cmp	r2, r3
 8001886:	d001      	beq.n	800188c <HAL_ADC_MspInit+0x1c>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8001888:	b016      	add	sp, #88	; 0x58
 800188a:	bd10      	pop	{r4, pc}
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 800188c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001890:	9302      	str	r3, [sp, #8]
    PeriphClkInitStruct.AdcClockSelection = RCC_ADCCLKSOURCE_SYSCLK;
 8001892:	f04f 5340 	mov.w	r3, #805306368	; 0x30000000
 8001896:	9311      	str	r3, [sp, #68]	; 0x44
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001898:	a802      	add	r0, sp, #8
 800189a:	f002 fbaa 	bl	8003ff2 <HAL_RCCEx_PeriphCLKConfig>
 800189e:	bb58      	cbnz	r0, 80018f8 <HAL_ADC_MspInit+0x88>
  SET_BIT(RCC->AHB2ENR, Periphs);
 80018a0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80018a4:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80018a6:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80018aa:	64da      	str	r2, [r3, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 80018ac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80018ae:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80018b2:	9301      	str	r3, [sp, #4]
  (void)tmpreg;
 80018b4:	9b01      	ldr	r3, [sp, #4]
    hdma_adc1.Instance = DMA1_Channel1;
 80018b6:	4814      	ldr	r0, [pc, #80]	; (8001908 <HAL_ADC_MspInit+0x98>)
 80018b8:	4b14      	ldr	r3, [pc, #80]	; (800190c <HAL_ADC_MspInit+0x9c>)
 80018ba:	6003      	str	r3, [r0, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 80018bc:	2305      	movs	r3, #5
 80018be:	6043      	str	r3, [r0, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80018c0:	2300      	movs	r3, #0
 80018c2:	6083      	str	r3, [r0, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 80018c4:	60c3      	str	r3, [r0, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 80018c6:	2280      	movs	r2, #128	; 0x80
 80018c8:	6102      	str	r2, [r0, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80018ca:	f44f 7280 	mov.w	r2, #256	; 0x100
 80018ce:	6142      	str	r2, [r0, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80018d0:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80018d4:	6182      	str	r2, [r0, #24]
    hdma_adc1.Init.Mode = DMA_NORMAL;
 80018d6:	61c3      	str	r3, [r0, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 80018d8:	6203      	str	r3, [r0, #32]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 80018da:	f001 fa23 	bl	8002d24 <HAL_DMA_Init>
 80018de:	b970      	cbnz	r0, 80018fe <HAL_ADC_MspInit+0x8e>
    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 80018e0:	4b09      	ldr	r3, [pc, #36]	; (8001908 <HAL_ADC_MspInit+0x98>)
 80018e2:	64e3      	str	r3, [r4, #76]	; 0x4c
 80018e4:	629c      	str	r4, [r3, #40]	; 0x28
    HAL_NVIC_SetPriority(ADC1_IRQn, 0, 0);
 80018e6:	2200      	movs	r2, #0
 80018e8:	4611      	mov	r1, r2
 80018ea:	2012      	movs	r0, #18
 80018ec:	f001 f934 	bl	8002b58 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_IRQn);
 80018f0:	2012      	movs	r0, #18
 80018f2:	f001 f965 	bl	8002bc0 <HAL_NVIC_EnableIRQ>
}
 80018f6:	e7c7      	b.n	8001888 <HAL_ADC_MspInit+0x18>
      Error_Handler();
 80018f8:	f7ff fd4e 	bl	8001398 <Error_Handler>
 80018fc:	e7d0      	b.n	80018a0 <HAL_ADC_MspInit+0x30>
      Error_Handler();
 80018fe:	f7ff fd4b 	bl	8001398 <Error_Handler>
 8001902:	e7ed      	b.n	80018e0 <HAL_ADC_MspInit+0x70>
 8001904:	50040000 	.word	0x50040000
 8001908:	20001538 	.word	0x20001538
 800190c:	40020008 	.word	0x40020008

08001910 <HAL_IPCC_MspInit>:
* @param hipcc: IPCC handle pointer
* @retval None
*/
void HAL_IPCC_MspInit(IPCC_HandleTypeDef* hipcc)
{
  if(hipcc->Instance==IPCC)
 8001910:	6802      	ldr	r2, [r0, #0]
 8001912:	4b12      	ldr	r3, [pc, #72]	; (800195c <HAL_IPCC_MspInit+0x4c>)
 8001914:	429a      	cmp	r2, r3
 8001916:	d000      	beq.n	800191a <HAL_IPCC_MspInit+0xa>
 8001918:	4770      	bx	lr
{
 800191a:	b500      	push	{lr}
 800191c:	b083      	sub	sp, #12
  SET_BIT(RCC->AHB3ENR, Periphs);
 800191e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001922:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001924:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8001928:	651a      	str	r2, [r3, #80]	; 0x50
  tmpreg = READ_BIT(RCC->AHB3ENR, Periphs);
 800192a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800192c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001930:	9301      	str	r3, [sp, #4]
  (void)tmpreg;
 8001932:	9b01      	ldr	r3, [sp, #4]

  /* USER CODE END IPCC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_IPCC_CLK_ENABLE();
    /* IPCC interrupt Init */
    HAL_NVIC_SetPriority(IPCC_C1_RX_IRQn, 0, 0);
 8001934:	2200      	movs	r2, #0
 8001936:	4611      	mov	r1, r2
 8001938:	202c      	movs	r0, #44	; 0x2c
 800193a:	f001 f90d 	bl	8002b58 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(IPCC_C1_RX_IRQn);
 800193e:	202c      	movs	r0, #44	; 0x2c
 8001940:	f001 f93e 	bl	8002bc0 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(IPCC_C1_TX_IRQn, 0, 0);
 8001944:	2200      	movs	r2, #0
 8001946:	4611      	mov	r1, r2
 8001948:	202d      	movs	r0, #45	; 0x2d
 800194a:	f001 f905 	bl	8002b58 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(IPCC_C1_TX_IRQn);
 800194e:	202d      	movs	r0, #45	; 0x2d
 8001950:	f001 f936 	bl	8002bc0 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN IPCC_MspInit 1 */

  /* USER CODE END IPCC_MspInit 1 */
  }

}
 8001954:	b003      	add	sp, #12
 8001956:	f85d fb04 	ldr.w	pc, [sp], #4
 800195a:	bf00      	nop
 800195c:	58000c00 	.word	0x58000c00

08001960 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8001960:	b510      	push	{r4, lr}
 8001962:	b096      	sub	sp, #88	; 0x58
 8001964:	4604      	mov	r4, r0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001966:	2250      	movs	r2, #80	; 0x50
 8001968:	2100      	movs	r1, #0
 800196a:	a802      	add	r0, sp, #8
 800196c:	f005 fc90 	bl	8007290 <memset>
  if(hrtc->Instance==RTC)
 8001970:	6822      	ldr	r2, [r4, #0]
 8001972:	4b12      	ldr	r3, [pc, #72]	; (80019bc <HAL_RTC_MspInit+0x5c>)
 8001974:	429a      	cmp	r2, r3
 8001976:	d001      	beq.n	800197c <HAL_RTC_MspInit+0x1c>
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 8001978:	b016      	add	sp, #88	; 0x58
 800197a:	bd10      	pop	{r4, pc}
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 800197c:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8001980:	9302      	str	r3, [sp, #8]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 8001982:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001986:	9312      	str	r3, [sp, #72]	; 0x48
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001988:	a802      	add	r0, sp, #8
 800198a:	f002 fb32 	bl	8003ff2 <HAL_RCCEx_PeriphCLKConfig>
 800198e:	b988      	cbnz	r0, 80019b4 <HAL_RTC_MspInit+0x54>
  SET_BIT(RCC->BDCR, RCC_BDCR_RTCEN);
 8001990:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001994:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 8001998:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800199c:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
  SET_BIT(RCC->APB1ENR1, Periphs);
 80019a0:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80019a2:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80019a6:	659a      	str	r2, [r3, #88]	; 0x58
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 80019a8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80019aa:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80019ae:	9301      	str	r3, [sp, #4]
  (void)tmpreg;
 80019b0:	9b01      	ldr	r3, [sp, #4]
}
 80019b2:	e7e1      	b.n	8001978 <HAL_RTC_MspInit+0x18>
      Error_Handler();
 80019b4:	f7ff fcf0 	bl	8001398 <Error_Handler>
 80019b8:	e7ea      	b.n	8001990 <HAL_RTC_MspInit+0x30>
 80019ba:	bf00      	nop
 80019bc:	40002800 	.word	0x40002800

080019c0 <HAL_TIM_Base_MspInit>:
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
  if(htim_base->Instance==TIM2)
 80019c0:	6803      	ldr	r3, [r0, #0]
 80019c2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80019c6:	d000      	beq.n	80019ca <HAL_TIM_Base_MspInit+0xa>
 80019c8:	4770      	bx	lr
{
 80019ca:	b082      	sub	sp, #8
  SET_BIT(RCC->APB1ENR1, Periphs);
 80019cc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80019d0:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80019d2:	f042 0201 	orr.w	r2, r2, #1
 80019d6:	659a      	str	r2, [r3, #88]	; 0x58
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 80019d8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80019da:	f003 0301 	and.w	r3, r3, #1
 80019de:	9301      	str	r3, [sp, #4]
  (void)tmpreg;
 80019e0:	9b01      	ldr	r3, [sp, #4]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 80019e2:	b002      	add	sp, #8
 80019e4:	4770      	bx	lr
	...

080019e8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80019e8:	b530      	push	{r4, r5, lr}
 80019ea:	b09d      	sub	sp, #116	; 0x74
 80019ec:	4604      	mov	r4, r0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80019ee:	2100      	movs	r1, #0
 80019f0:	9117      	str	r1, [sp, #92]	; 0x5c
 80019f2:	9118      	str	r1, [sp, #96]	; 0x60
 80019f4:	9119      	str	r1, [sp, #100]	; 0x64
 80019f6:	911a      	str	r1, [sp, #104]	; 0x68
 80019f8:	911b      	str	r1, [sp, #108]	; 0x6c
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80019fa:	2250      	movs	r2, #80	; 0x50
 80019fc:	a803      	add	r0, sp, #12
 80019fe:	f005 fc47 	bl	8007290 <memset>
  if(huart->Instance==USART1)
 8001a02:	6822      	ldr	r2, [r4, #0]
 8001a04:	4b28      	ldr	r3, [pc, #160]	; (8001aa8 <HAL_UART_MspInit+0xc0>)
 8001a06:	429a      	cmp	r2, r3
 8001a08:	d001      	beq.n	8001a0e <HAL_UART_MspInit+0x26>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8001a0a:	b01d      	add	sp, #116	; 0x74
 8001a0c:	bd30      	pop	{r4, r5, pc}
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8001a0e:	2301      	movs	r3, #1
 8001a10:	9303      	str	r3, [sp, #12]
    PeriphClkInitStruct.Usart1ClockSelection = RCC_USART1CLKSOURCE_SYSCLK;
 8001a12:	9309      	str	r3, [sp, #36]	; 0x24
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001a14:	a803      	add	r0, sp, #12
 8001a16:	f002 faec 	bl	8003ff2 <HAL_RCCEx_PeriphCLKConfig>
 8001a1a:	2800      	cmp	r0, #0
 8001a1c:	d13d      	bne.n	8001a9a <HAL_UART_MspInit+0xb2>
  SET_BIT(RCC->APB2ENR, Periphs);
 8001a1e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001a22:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8001a24:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8001a28:	661a      	str	r2, [r3, #96]	; 0x60
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8001a2a:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8001a2c:	f402 4280 	and.w	r2, r2, #16384	; 0x4000
 8001a30:	9202      	str	r2, [sp, #8]
  (void)tmpreg;
 8001a32:	9a02      	ldr	r2, [sp, #8]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8001a34:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001a36:	f042 0202 	orr.w	r2, r2, #2
 8001a3a:	64da      	str	r2, [r3, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8001a3c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001a3e:	f003 0302 	and.w	r3, r3, #2
 8001a42:	9301      	str	r3, [sp, #4]
  (void)tmpreg;
 8001a44:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_6;
 8001a46:	23c0      	movs	r3, #192	; 0xc0
 8001a48:	9317      	str	r3, [sp, #92]	; 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a4a:	2302      	movs	r3, #2
 8001a4c:	9318      	str	r3, [sp, #96]	; 0x60
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a4e:	2500      	movs	r5, #0
 8001a50:	9519      	str	r5, [sp, #100]	; 0x64
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001a52:	931a      	str	r3, [sp, #104]	; 0x68
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001a54:	2307      	movs	r3, #7
 8001a56:	931b      	str	r3, [sp, #108]	; 0x6c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001a58:	a917      	add	r1, sp, #92	; 0x5c
 8001a5a:	4814      	ldr	r0, [pc, #80]	; (8001aac <HAL_UART_MspInit+0xc4>)
 8001a5c:	f001 faf0 	bl	8003040 <HAL_GPIO_Init>
    hdma_usart1_tx.Instance = DMA2_Channel4;
 8001a60:	4813      	ldr	r0, [pc, #76]	; (8001ab0 <HAL_UART_MspInit+0xc8>)
 8001a62:	4b14      	ldr	r3, [pc, #80]	; (8001ab4 <HAL_UART_MspInit+0xcc>)
 8001a64:	6003      	str	r3, [r0, #0]
    hdma_usart1_tx.Init.Request = DMA_REQUEST_USART1_TX;
 8001a66:	230f      	movs	r3, #15
 8001a68:	6043      	str	r3, [r0, #4]
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001a6a:	2310      	movs	r3, #16
 8001a6c:	6083      	str	r3, [r0, #8]
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001a6e:	60c5      	str	r5, [r0, #12]
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8001a70:	2380      	movs	r3, #128	; 0x80
 8001a72:	6103      	str	r3, [r0, #16]
    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001a74:	6145      	str	r5, [r0, #20]
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001a76:	6185      	str	r5, [r0, #24]
    hdma_usart1_tx.Init.Mode = DMA_NORMAL;
 8001a78:	61c5      	str	r5, [r0, #28]
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8001a7a:	6205      	str	r5, [r0, #32]
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 8001a7c:	f001 f952 	bl	8002d24 <HAL_DMA_Init>
 8001a80:	b970      	cbnz	r0, 8001aa0 <HAL_UART_MspInit+0xb8>
    __HAL_LINKDMA(huart,hdmatx,hdma_usart1_tx);
 8001a82:	4b0b      	ldr	r3, [pc, #44]	; (8001ab0 <HAL_UART_MspInit+0xc8>)
 8001a84:	67a3      	str	r3, [r4, #120]	; 0x78
 8001a86:	629c      	str	r4, [r3, #40]	; 0x28
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8001a88:	2200      	movs	r2, #0
 8001a8a:	4611      	mov	r1, r2
 8001a8c:	2024      	movs	r0, #36	; 0x24
 8001a8e:	f001 f863 	bl	8002b58 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8001a92:	2024      	movs	r0, #36	; 0x24
 8001a94:	f001 f894 	bl	8002bc0 <HAL_NVIC_EnableIRQ>
}
 8001a98:	e7b7      	b.n	8001a0a <HAL_UART_MspInit+0x22>
      Error_Handler();
 8001a9a:	f7ff fc7d 	bl	8001398 <Error_Handler>
 8001a9e:	e7be      	b.n	8001a1e <HAL_UART_MspInit+0x36>
      Error_Handler();
 8001aa0:	f7ff fc7a 	bl	8001398 <Error_Handler>
 8001aa4:	e7ed      	b.n	8001a82 <HAL_UART_MspInit+0x9a>
 8001aa6:	bf00      	nop
 8001aa8:	40013800 	.word	0x40013800
 8001aac:	48000400 	.word	0x48000400
 8001ab0:	200013b8 	.word	0x200013b8
 8001ab4:	40020444 	.word	0x40020444

08001ab8 <NMI_Handler>:
{
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001ab8:	e7fe      	b.n	8001ab8 <NMI_Handler>

08001aba <HardFault_Handler>:
void HardFault_Handler(void)
{
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001aba:	e7fe      	b.n	8001aba <HardFault_Handler>

08001abc <MemManage_Handler>:
void MemManage_Handler(void)
{
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001abc:	e7fe      	b.n	8001abc <MemManage_Handler>

08001abe <BusFault_Handler>:
void BusFault_Handler(void)
{
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001abe:	e7fe      	b.n	8001abe <BusFault_Handler>

08001ac0 <UsageFault_Handler>:
void UsageFault_Handler(void)
{
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001ac0:	e7fe      	b.n	8001ac0 <UsageFault_Handler>

08001ac2 <SVC_Handler>:

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001ac2:	4770      	bx	lr

08001ac4 <DebugMon_Handler>:

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001ac4:	4770      	bx	lr

08001ac6 <PendSV_Handler>:

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001ac6:	4770      	bx	lr

08001ac8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001ac8:	b508      	push	{r3, lr}
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001aca:	f000 f919 	bl	8001d00 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001ace:	bd08      	pop	{r3, pc}

08001ad0 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8001ad0:	b508      	push	{r3, lr}
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8001ad2:	4802      	ldr	r0, [pc, #8]	; (8001adc <DMA1_Channel1_IRQHandler+0xc>)
 8001ad4:	f001 fa51 	bl	8002f7a <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8001ad8:	bd08      	pop	{r3, pc}
 8001ada:	bf00      	nop
 8001adc:	20001538 	.word	0x20001538

08001ae0 <ADC1_IRQHandler>:

/**
  * @brief This function handles ADC1 global interrupt.
  */
void ADC1_IRQHandler(void)
{
 8001ae0:	b508      	push	{r3, lr}
  /* USER CODE BEGIN ADC1_IRQn 0 */

  /* USER CODE END ADC1_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8001ae2:	4802      	ldr	r0, [pc, #8]	; (8001aec <ADC1_IRQHandler+0xc>)
 8001ae4:	f000 faac 	bl	8002040 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC1_IRQn 1 */

  /* USER CODE END ADC1_IRQn 1 */
}
 8001ae8:	bd08      	pop	{r3, pc}
 8001aea:	bf00      	nop
 8001aec:	20001418 	.word	0x20001418

08001af0 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8001af0:	b508      	push	{r3, lr}
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8001af2:	4802      	ldr	r0, [pc, #8]	; (8001afc <USART1_IRQHandler+0xc>)
 8001af4:	f002 ff20 	bl	8004938 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8001af8:	bd08      	pop	{r3, pc}
 8001afa:	bf00      	nop
 8001afc:	200014a8 	.word	0x200014a8

08001b00 <IPCC_C1_RX_IRQHandler>:

/**
  * @brief This function handles IPCC RX occupied interrupt.
  */
void IPCC_C1_RX_IRQHandler(void)
{
 8001b00:	b508      	push	{r3, lr}
  /* USER CODE BEGIN IPCC_C1_RX_IRQn 0 */

  /* USER CODE END IPCC_C1_RX_IRQn 0 */
  HAL_IPCC_RX_IRQHandler(&hipcc);
 8001b02:	f005 fa01 	bl	8006f08 <HW_IPCC_Rx_Handler>
  /* USER CODE BEGIN IPCC_C1_RX_IRQn 1 */

  /* USER CODE END IPCC_C1_RX_IRQn 1 */
}
 8001b06:	bd08      	pop	{r3, pc}

08001b08 <IPCC_C1_TX_IRQHandler>:

/**
  * @brief This function handles IPCC TX free interrupt.
  */
void IPCC_C1_TX_IRQHandler(void)
{
 8001b08:	b508      	push	{r3, lr}
  /* USER CODE BEGIN IPCC_C1_TX_IRQn 0 */

  /* USER CODE END IPCC_C1_TX_IRQn 0 */
  HAL_IPCC_TX_IRQHandler(&hipcc);
 8001b0a:	f005 f99d 	bl	8006e48 <HW_IPCC_Tx_Handler>
  /* USER CODE BEGIN IPCC_C1_TX_IRQn 1 */

  /* USER CODE END IPCC_C1_TX_IRQn 1 */
}
 8001b0e:	bd08      	pop	{r3, pc}

08001b10 <HSEM_IRQHandler>:

/**
  * @brief This function handles HSEM global interrupt.
  */
void HSEM_IRQHandler(void)
{
 8001b10:	b508      	push	{r3, lr}
  /* USER CODE BEGIN HSEM_IRQn 0 */

  /* USER CODE END HSEM_IRQn 0 */
  HAL_HSEM_IRQHandler();
 8001b12:	f001 fb5f 	bl	80031d4 <HAL_HSEM_IRQHandler>
  /* USER CODE BEGIN HSEM_IRQn 1 */

  /* USER CODE END HSEM_IRQn 1 */
}
 8001b16:	bd08      	pop	{r3, pc}

08001b18 <DMA2_Channel4_IRQHandler>:

/**
  * @brief This function handles DMA2 channel4 global interrupt.
  */
void DMA2_Channel4_IRQHandler(void)
{
 8001b18:	b508      	push	{r3, lr}
  /* USER CODE BEGIN DMA2_Channel4_IRQn 0 */

  /* USER CODE END DMA2_Channel4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 8001b1a:	4802      	ldr	r0, [pc, #8]	; (8001b24 <DMA2_Channel4_IRQHandler+0xc>)
 8001b1c:	f001 fa2d 	bl	8002f7a <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Channel4_IRQn 1 */

  /* USER CODE END DMA2_Channel4_IRQn 1 */
}
 8001b20:	bd08      	pop	{r3, pc}
 8001b22:	bf00      	nop
 8001b24:	200013b8 	.word	0x200013b8

08001b28 <RTC_WKUP_IRQHandler>:

/* USER CODE BEGIN 1 */

void RTC_WKUP_IRQHandler(void)
{
 8001b28:	b508      	push	{r3, lr}
  HAL_RTCEx_WakeUpTimerIRQHandler();
 8001b2a:	f7ff fb53 	bl	80011d4 <HW_TS_RTC_Wakeup_Handler>
}
 8001b2e:	bd08      	pop	{r3, pc}

08001b30 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001b30:	b570      	push	{r4, r5, r6, lr}
 8001b32:	460c      	mov	r4, r1
 8001b34:	4616      	mov	r6, r2
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001b36:	2500      	movs	r5, #0
 8001b38:	42b5      	cmp	r5, r6
 8001b3a:	da07      	bge.n	8001b4c <_read+0x1c>
	{
		*ptr++ = __io_getchar();
 8001b3c:	f3af 8000 	nop.w
 8001b40:	4621      	mov	r1, r4
 8001b42:	f801 0b01 	strb.w	r0, [r1], #1
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001b46:	3501      	adds	r5, #1
		*ptr++ = __io_getchar();
 8001b48:	460c      	mov	r4, r1
 8001b4a:	e7f5      	b.n	8001b38 <_read+0x8>
	}

return len;
}
 8001b4c:	4630      	mov	r0, r6
 8001b4e:	bd70      	pop	{r4, r5, r6, pc}

08001b50 <_close>:
}

int _close(int file)
{
	return -1;
}
 8001b50:	f04f 30ff 	mov.w	r0, #4294967295
 8001b54:	4770      	bx	lr

08001b56 <_fstat>:


int _fstat(int file, struct stat *st)
{
	st->st_mode = S_IFCHR;
 8001b56:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001b5a:	604b      	str	r3, [r1, #4]
	return 0;
}
 8001b5c:	2000      	movs	r0, #0
 8001b5e:	4770      	bx	lr

08001b60 <_isatty>:

int _isatty(int file)
{
	return 1;
}
 8001b60:	2001      	movs	r0, #1
 8001b62:	4770      	bx	lr

08001b64 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
	return 0;
}
 8001b64:	2000      	movs	r0, #0
 8001b66:	4770      	bx	lr

08001b68 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001b68:	b510      	push	{r4, lr}
 8001b6a:	4603      	mov	r3, r0
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001b6c:	4a0c      	ldr	r2, [pc, #48]	; (8001ba0 <_sbrk+0x38>)
 8001b6e:	490d      	ldr	r1, [pc, #52]	; (8001ba4 <_sbrk+0x3c>)
  const uint8_t *max_heap = (uint8_t *)stack_limit;
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001b70:	480d      	ldr	r0, [pc, #52]	; (8001ba8 <_sbrk+0x40>)
 8001b72:	6800      	ldr	r0, [r0, #0]
 8001b74:	b140      	cbz	r0, 8001b88 <_sbrk+0x20>
  {
    __sbrk_heap_end = &_end;
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001b76:	480c      	ldr	r0, [pc, #48]	; (8001ba8 <_sbrk+0x40>)
 8001b78:	6800      	ldr	r0, [r0, #0]
 8001b7a:	4403      	add	r3, r0
 8001b7c:	1a52      	subs	r2, r2, r1
 8001b7e:	4293      	cmp	r3, r2
 8001b80:	d806      	bhi.n	8001b90 <_sbrk+0x28>
    errno = ENOMEM;
    return (void *)-1;
  }

  prev_heap_end = __sbrk_heap_end;
  __sbrk_heap_end += incr;
 8001b82:	4a09      	ldr	r2, [pc, #36]	; (8001ba8 <_sbrk+0x40>)
 8001b84:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
}
 8001b86:	bd10      	pop	{r4, pc}
    __sbrk_heap_end = &_end;
 8001b88:	4807      	ldr	r0, [pc, #28]	; (8001ba8 <_sbrk+0x40>)
 8001b8a:	4c08      	ldr	r4, [pc, #32]	; (8001bac <_sbrk+0x44>)
 8001b8c:	6004      	str	r4, [r0, #0]
 8001b8e:	e7f2      	b.n	8001b76 <_sbrk+0xe>
    errno = ENOMEM;
 8001b90:	f005 fb46 	bl	8007220 <__errno>
 8001b94:	230c      	movs	r3, #12
 8001b96:	6003      	str	r3, [r0, #0]
    return (void *)-1;
 8001b98:	f04f 30ff 	mov.w	r0, #4294967295
 8001b9c:	e7f3      	b.n	8001b86 <_sbrk+0x1e>
 8001b9e:	bf00      	nop
 8001ba0:	20030000 	.word	0x20030000
 8001ba4:	00001000 	.word	0x00001000
 8001ba8:	2000022c 	.word	0x2000022c
 8001bac:	20001638 	.word	0x20001638

08001bb0 <SystemInit>:
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10UL*2UL))|(3UL << (11UL*2UL)));  /* set CP10 and CP11 Full Access */
 8001bb0:	4a16      	ldr	r2, [pc, #88]	; (8001c0c <SystemInit+0x5c>)
 8001bb2:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 8001bb6:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001bba:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 8001bbe:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001bc2:	681a      	ldr	r2, [r3, #0]
 8001bc4:	f042 0201 	orr.w	r2, r2, #1
 8001bc8:	601a      	str	r2, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00070000U;
 8001bca:	f44f 22e0 	mov.w	r2, #458752	; 0x70000
 8001bce:	609a      	str	r2, [r3, #8]

  /* Reset PLLSAI1ON, PLLON, HSECSSON, HSEON, HSION, and MSIPLLON bits */
  RCC->CR &= (uint32_t)0xFAF6FEFBU;
 8001bd0:	6819      	ldr	r1, [r3, #0]
 8001bd2:	f1a2 62a2 	sub.w	r2, r2, #84934656	; 0x5100000
 8001bd6:	f2a2 1205 	subw	r2, r2, #261	; 0x105
 8001bda:	400a      	ands	r2, r1
 8001bdc:	601a      	str	r2, [r3, #0]

  /*!< Reset LSI1 and LSI2 bits */
  RCC->CSR &= (uint32_t)0xFFFFFFFAU;
 8001bde:	f8d3 2094 	ldr.w	r2, [r3, #148]	; 0x94
 8001be2:	f022 0205 	bic.w	r2, r2, #5
 8001be6:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
  
  /*!< Reset HSI48ON  bit */
  RCC->CRRCR &= (uint32_t)0xFFFFFFFEU;
 8001bea:	f8d3 2098 	ldr.w	r2, [r3, #152]	; 0x98
 8001bee:	f022 0201 	bic.w	r2, r2, #1
 8001bf2:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
    
  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x22041000U;
 8001bf6:	4a06      	ldr	r2, [pc, #24]	; (8001c10 <SystemInit+0x60>)
 8001bf8:	60da      	str	r2, [r3, #12]

#if defined(STM32WB55xx) || defined(STM32WB5Mxx)
  /* Reset PLLSAI1CFGR register */
  RCC->PLLSAI1CFGR = 0x22041000U;
 8001bfa:	611a      	str	r2, [r3, #16]
#endif
  
  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8001bfc:	681a      	ldr	r2, [r3, #0]
 8001bfe:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8001c02:	601a      	str	r2, [r3, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8001c04:	2200      	movs	r2, #0
 8001c06:	619a      	str	r2, [r3, #24]
}
 8001c08:	4770      	bx	lr
 8001c0a:	bf00      	nop
 8001c0c:	e000ed00 	.word	0xe000ed00
 8001c10:	22041000 	.word	0x22041000

08001c14 <CopyDataInit>:
  bl LoopCopyDataInit
.endm

.section  .text.data_initializers
CopyDataInit:
  ldr r4, [r2, r3]
 8001c14:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001c16:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001c18:	3304      	adds	r3, #4

08001c1a <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001c1a:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001c1c:	428c      	cmp	r4, r1
  bcc  CopyDataInit
 8001c1e:	d3f9      	bcc.n	8001c14 <CopyDataInit>
  bx lr
 8001c20:	4770      	bx	lr

08001c22 <FillZerobss>:

FillZerobss:
  str  r3, [r0]
 8001c22:	6003      	str	r3, [r0, #0]
  adds r0, r0, #4
 8001c24:	3004      	adds	r0, #4

08001c26 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r0, r1
 8001c26:	4288      	cmp	r0, r1
  bcc FillZerobss
 8001c28:	d3fb      	bcc.n	8001c22 <FillZerobss>
  bx lr
 8001c2a:	4770      	bx	lr

08001c2c <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8001c2c:	480c      	ldr	r0, [pc, #48]	; (8001c60 <LoopForever+0x4>)
  mov   sp, r0          /* set stack pointer */
 8001c2e:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8001c30:	f7ff ffbe 	bl	8001bb0 <SystemInit>
  
/* Copy the data segment initializers from flash to SRAM */
  INIT_DATA _sdata, _edata, _sidata
 8001c34:	480b      	ldr	r0, [pc, #44]	; (8001c64 <LoopForever+0x8>)
 8001c36:	490c      	ldr	r1, [pc, #48]	; (8001c68 <LoopForever+0xc>)
 8001c38:	4a0c      	ldr	r2, [pc, #48]	; (8001c6c <LoopForever+0x10>)
 8001c3a:	2300      	movs	r3, #0
 8001c3c:	f7ff ffed 	bl	8001c1a <LoopCopyDataInit>

/* Zero fill the bss segments. */
  INIT_BSS _sbss, _ebss
 8001c40:	480b      	ldr	r0, [pc, #44]	; (8001c70 <LoopForever+0x14>)
 8001c42:	490c      	ldr	r1, [pc, #48]	; (8001c74 <LoopForever+0x18>)
 8001c44:	2300      	movs	r3, #0
 8001c46:	f7ff ffee 	bl	8001c26 <LoopFillZerobss>
  INIT_BSS _sMB_MEM2, _eMB_MEM2
 8001c4a:	480b      	ldr	r0, [pc, #44]	; (8001c78 <LoopForever+0x1c>)
 8001c4c:	490b      	ldr	r1, [pc, #44]	; (8001c7c <LoopForever+0x20>)
 8001c4e:	2300      	movs	r3, #0
 8001c50:	f7ff ffe9 	bl	8001c26 <LoopFillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8001c54:	f005 faea 	bl	800722c <__libc_init_array>
/* Call the application s entry point.*/
	bl	main
 8001c58:	f7ff fd14 	bl	8001684 <main>

08001c5c <LoopForever>:

LoopForever:
  b LoopForever
 8001c5c:	e7fe      	b.n	8001c5c <LoopForever>
 8001c5e:	0000      	.short	0x0000
  ldr   r0, =_estack
 8001c60:	20030000 	.word	0x20030000
  INIT_DATA _sdata, _edata, _sidata
 8001c64:	20000004 	.word	0x20000004
 8001c68:	20000090 	.word	0x20000090
 8001c6c:	08008ab0 	.word	0x08008ab0
  INIT_BSS _sbss, _ebss
 8001c70:	20000204 	.word	0x20000204
 8001c74:	20001634 	.word	0x20001634
  INIT_BSS _sMB_MEM2, _eMB_MEM2
 8001c78:	200301e0 	.word	0x200301e0
 8001c7c:	20030a57 	.word	0x20030a57

08001c80 <AES1_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001c80:	e7fe      	b.n	8001c80 <AES1_IRQHandler>
	...

08001c84 <HAL_InitTick>:
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
  HAL_StatusTypeDef  status = HAL_OK;

  if ((uint32_t)uwTickFreq != 0U)
 8001c84:	4b11      	ldr	r3, [pc, #68]	; (8001ccc <HAL_InitTick+0x48>)
 8001c86:	781b      	ldrb	r3, [r3, #0]
 8001c88:	b90b      	cbnz	r3, 8001c8e <HAL_InitTick+0xa>
      status = HAL_ERROR;
    }
  }
  else
  {
    status = HAL_ERROR;
 8001c8a:	2001      	movs	r0, #1
  }

  /* Return function status */
  return status;
}
 8001c8c:	4770      	bx	lr
{
 8001c8e:	b510      	push	{r4, lr}
 8001c90:	4604      	mov	r4, r0
    if (HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq()/ (1000U / (uint32_t)uwTickFreq)) == 0U)
 8001c92:	f001 fbdd 	bl	8003450 <HAL_RCC_GetHCLKFreq>
 8001c96:	4b0d      	ldr	r3, [pc, #52]	; (8001ccc <HAL_InitTick+0x48>)
 8001c98:	781a      	ldrb	r2, [r3, #0]
 8001c9a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001c9e:	fbb3 f3f2 	udiv	r3, r3, r2
 8001ca2:	fbb0 f0f3 	udiv	r0, r0, r3
 8001ca6:	f000 ffab 	bl	8002c00 <HAL_SYSTICK_Config>
 8001caa:	b968      	cbnz	r0, 8001cc8 <HAL_InitTick+0x44>
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001cac:	2c0f      	cmp	r4, #15
 8001cae:	d901      	bls.n	8001cb4 <HAL_InitTick+0x30>
        status = HAL_ERROR;
 8001cb0:	2001      	movs	r0, #1
 8001cb2:	e00a      	b.n	8001cca <HAL_InitTick+0x46>
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001cb4:	2200      	movs	r2, #0
 8001cb6:	4621      	mov	r1, r4
 8001cb8:	f04f 30ff 	mov.w	r0, #4294967295
 8001cbc:	f000 ff4c 	bl	8002b58 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001cc0:	4b03      	ldr	r3, [pc, #12]	; (8001cd0 <HAL_InitTick+0x4c>)
 8001cc2:	601c      	str	r4, [r3, #0]
  HAL_StatusTypeDef  status = HAL_OK;
 8001cc4:	2000      	movs	r0, #0
 8001cc6:	e000      	b.n	8001cca <HAL_InitTick+0x46>
      status = HAL_ERROR;
 8001cc8:	2001      	movs	r0, #1
}
 8001cca:	bd10      	pop	{r4, pc}
 8001ccc:	20000008 	.word	0x20000008
 8001cd0:	2000000c 	.word	0x2000000c

08001cd4 <HAL_Init>:
{
 8001cd4:	b510      	push	{r4, lr}
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001cd6:	4a09      	ldr	r2, [pc, #36]	; (8001cfc <HAL_Init+0x28>)
 8001cd8:	6813      	ldr	r3, [r2, #0]
 8001cda:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001cde:	6013      	str	r3, [r2, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001ce0:	2003      	movs	r0, #3
 8001ce2:	f000 ff27 	bl	8002b34 <HAL_NVIC_SetPriorityGrouping>
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001ce6:	200f      	movs	r0, #15
 8001ce8:	f7ff ffcc 	bl	8001c84 <HAL_InitTick>
 8001cec:	b110      	cbz	r0, 8001cf4 <HAL_Init+0x20>
    status = HAL_ERROR;
 8001cee:	2401      	movs	r4, #1
}
 8001cf0:	4620      	mov	r0, r4
 8001cf2:	bd10      	pop	{r4, pc}
 8001cf4:	4604      	mov	r4, r0
    HAL_MspInit();
 8001cf6:	f7ff fda3 	bl	8001840 <HAL_MspInit>
 8001cfa:	e7f9      	b.n	8001cf0 <HAL_Init+0x1c>
 8001cfc:	58004000 	.word	0x58004000

08001d00 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += (uint32_t)uwTickFreq;
 8001d00:	4b03      	ldr	r3, [pc, #12]	; (8001d10 <HAL_IncTick+0x10>)
 8001d02:	781b      	ldrb	r3, [r3, #0]
 8001d04:	4a03      	ldr	r2, [pc, #12]	; (8001d14 <HAL_IncTick+0x14>)
 8001d06:	6811      	ldr	r1, [r2, #0]
 8001d08:	440b      	add	r3, r1
 8001d0a:	6013      	str	r3, [r2, #0]
}
 8001d0c:	4770      	bx	lr
 8001d0e:	bf00      	nop
 8001d10:	20000008 	.word	0x20000008
 8001d14:	2000161c 	.word	0x2000161c

08001d18 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8001d18:	4b01      	ldr	r3, [pc, #4]	; (8001d20 <HAL_GetTick+0x8>)
 8001d1a:	6818      	ldr	r0, [r3, #0]
}
 8001d1c:	4770      	bx	lr
 8001d1e:	bf00      	nop
 8001d20:	2000161c 	.word	0x2000161c

08001d24 <HAL_GetTickPrio>:
  * @retval tick priority
  */
uint32_t HAL_GetTickPrio(void)
{
  return uwTickPrio;
}
 8001d24:	4b01      	ldr	r3, [pc, #4]	; (8001d2c <HAL_GetTickPrio+0x8>)
 8001d26:	6818      	ldr	r0, [r3, #0]
 8001d28:	4770      	bx	lr
 8001d2a:	bf00      	nop
 8001d2c:	2000000c 	.word	0x2000000c

08001d30 <HAL_DBGMCU_EnableDBGSleepMode>:
  * @rmtoll DBGMCU_CR    DBG_SLEEP     LL_DBGMCU_EnableDBGSleepMode
  * @retval None
  */
__STATIC_INLINE void LL_DBGMCU_EnableDBGSleepMode(void)
{
  SET_BIT(DBGMCU->CR, DBGMCU_CR_DBG_SLEEP);
 8001d30:	4a02      	ldr	r2, [pc, #8]	; (8001d3c <HAL_DBGMCU_EnableDBGSleepMode+0xc>)
 8001d32:	6853      	ldr	r3, [r2, #4]
 8001d34:	f043 0301 	orr.w	r3, r3, #1
 8001d38:	6053      	str	r3, [r2, #4]
  * @retval None
  */
void HAL_DBGMCU_EnableDBGSleepMode(void)
{
  LL_DBGMCU_EnableDBGSleepMode();
}
 8001d3a:	4770      	bx	lr
 8001d3c:	e0042000 	.word	0xe0042000

08001d40 <HAL_DBGMCU_EnableDBGStopMode>:
  * @rmtoll DBGMCU_CR    DBG_STOP      LL_DBGMCU_EnableDBGStopMode
  * @retval None
  */
__STATIC_INLINE void LL_DBGMCU_EnableDBGStopMode(void)
{
  SET_BIT(DBGMCU->CR, DBGMCU_CR_DBG_STOP);
 8001d40:	4a02      	ldr	r2, [pc, #8]	; (8001d4c <HAL_DBGMCU_EnableDBGStopMode+0xc>)
 8001d42:	6853      	ldr	r3, [r2, #4]
 8001d44:	f043 0302 	orr.w	r3, r3, #2
 8001d48:	6053      	str	r3, [r2, #4]
  * @retval None
  */
void HAL_DBGMCU_EnableDBGStopMode(void)
{
  LL_DBGMCU_EnableDBGStopMode();
}
 8001d4a:	4770      	bx	lr
 8001d4c:	e0042000 	.word	0xe0042000

08001d50 <HAL_ADC_ConvHalfCpltCallback>:
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 8001d50:	4770      	bx	lr

08001d52 <HAL_ADC_LevelOutOfWindowCallback>:
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOutOfWindowCallback must be implemented in the user file.
  */
}
 8001d52:	4770      	bx	lr

08001d54 <HAL_ADC_ErrorCallback>:
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8001d54:	4770      	bx	lr

08001d56 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8001d56:	b508      	push	{r3, lr}
 8001d58:	4603      	mov	r3, r0
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8001d5a:	6a80      	ldr	r0, [r0, #40]	; 0x28

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 8001d5c:	6d42      	ldr	r2, [r0, #84]	; 0x54
 8001d5e:	f012 0f50 	tst.w	r2, #80	; 0x50
 8001d62:	d130      	bne.n	8001dc6 <ADC_DMAConvCplt+0x70>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8001d64:	6d43      	ldr	r3, [r0, #84]	; 0x54
 8001d66:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001d6a:	6543      	str	r3, [r0, #84]	; 0x54
        }
      }
    }
    
#else
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 8001d6c:	6803      	ldr	r3, [r0, #0]
 8001d6e:	681a      	ldr	r2, [r3, #0]
 8001d70:	f012 0f08 	tst.w	r2, #8
 8001d74:	d014      	beq.n	8001da0 <ADC_DMAConvCplt+0x4a>
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
#if defined (ADC_SUPPORT_2_5_MSPS)
  return ((READ_BIT(ADCx->CFGR1, ADC_CFGR1_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR1_EXTEN)) ? 1UL : 0UL);
#else
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8001d76:	68da      	ldr	r2, [r3, #12]
 8001d78:	f412 6f40 	tst.w	r2, #3072	; 0xc00
 8001d7c:	d120      	bne.n	8001dc0 <ADC_DMAConvCplt+0x6a>
    {
      /* Are conversions software-triggered ? */
      if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
      {
        /* Is CONT bit set ? */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 8001d7e:	68db      	ldr	r3, [r3, #12]
 8001d80:	f413 5f00 	tst.w	r3, #8192	; 0x2000
 8001d84:	d11c      	bne.n	8001dc0 <ADC_DMAConvCplt+0x6a>
        {
          /* CONT bit is not set, no more conversions expected */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8001d86:	6d43      	ldr	r3, [r0, #84]	; 0x54
 8001d88:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001d8c:	6543      	str	r3, [r0, #84]	; 0x54
          if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8001d8e:	6d43      	ldr	r3, [r0, #84]	; 0x54
 8001d90:	f413 5f80 	tst.w	r3, #4096	; 0x1000
 8001d94:	d114      	bne.n	8001dc0 <ADC_DMAConvCplt+0x6a>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001d96:	6d43      	ldr	r3, [r0, #84]	; 0x54
 8001d98:	f043 0301 	orr.w	r3, r3, #1
 8001d9c:	6543      	str	r3, [r0, #84]	; 0x54
 8001d9e:	e00f      	b.n	8001dc0 <ADC_DMAConvCplt+0x6a>
    }
    else
    {
      /* DMA End of Transfer interrupt was triggered but conversions sequence
         is not over. If DMACFG is set to 0, conversions are stopped. */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMACFG) == 0UL)
 8001da0:	68db      	ldr	r3, [r3, #12]
 8001da2:	f013 0f02 	tst.w	r3, #2
 8001da6:	d10b      	bne.n	8001dc0 <ADC_DMAConvCplt+0x6a>
      {
        /* DMACFG bit is not set, conversions are stopped. */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8001da8:	6d43      	ldr	r3, [r0, #84]	; 0x54
 8001daa:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001dae:	6543      	str	r3, [r0, #84]	; 0x54
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8001db0:	6d43      	ldr	r3, [r0, #84]	; 0x54
 8001db2:	f413 5f80 	tst.w	r3, #4096	; 0x1000
 8001db6:	d103      	bne.n	8001dc0 <ADC_DMAConvCplt+0x6a>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001db8:	6d43      	ldr	r3, [r0, #84]	; 0x54
 8001dba:	f043 0301 	orr.w	r3, r3, #1
 8001dbe:	6543      	str	r3, [r0, #84]	; 0x54
    }
#endif /* ADC_SUPPORT_2_5_MSPS */

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
 8001dc0:	6e43      	ldr	r3, [r0, #100]	; 0x64
 8001dc2:	4798      	blx	r3
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8001dc4:	bd08      	pop	{r3, pc}
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8001dc6:	6d42      	ldr	r2, [r0, #84]	; 0x54
 8001dc8:	f012 0f10 	tst.w	r2, #16
 8001dcc:	d002      	beq.n	8001dd4 <ADC_DMAConvCplt+0x7e>
      hadc->ErrorCallback(hadc);
 8001dce:	6f03      	ldr	r3, [r0, #112]	; 0x70
 8001dd0:	4798      	blx	r3
 8001dd2:	e7f7      	b.n	8001dc4 <ADC_DMAConvCplt+0x6e>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8001dd4:	6cc2      	ldr	r2, [r0, #76]	; 0x4c
 8001dd6:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8001dd8:	4618      	mov	r0, r3
 8001dda:	4790      	blx	r2
}
 8001ddc:	e7f2      	b.n	8001dc4 <ADC_DMAConvCplt+0x6e>

08001dde <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 8001dde:	b508      	push	{r3, lr}
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8001de0:	6a80      	ldr	r0, [r0, #40]	; 0x28

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
 8001de2:	6e83      	ldr	r3, [r0, #104]	; 0x68
 8001de4:	4798      	blx	r3
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8001de6:	bd08      	pop	{r3, pc}

08001de8 <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 8001de8:	b508      	push	{r3, lr}
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8001dea:	6a80      	ldr	r0, [r0, #40]	; 0x28

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8001dec:	6d43      	ldr	r3, [r0, #84]	; 0x54
 8001dee:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001df2:	6543      	str	r3, [r0, #84]	; 0x54

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8001df4:	6d83      	ldr	r3, [r0, #88]	; 0x58
 8001df6:	f043 0304 	orr.w	r3, r3, #4
 8001dfa:	6583      	str	r3, [r0, #88]	; 0x58

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
 8001dfc:	6f03      	ldr	r3, [r0, #112]	; 0x70
 8001dfe:	4798      	blx	r3
#else
  HAL_ADC_ErrorCallback(hadc);
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8001e00:	bd08      	pop	{r3, pc}
	...

08001e04 <HAL_ADC_Init>:
{
 8001e04:	b530      	push	{r4, r5, lr}
 8001e06:	b083      	sub	sp, #12
  __IO uint32_t wait_loop_index = 0UL;
 8001e08:	2300      	movs	r3, #0
 8001e0a:	9301      	str	r3, [sp, #4]
  if (hadc == NULL)
 8001e0c:	2800      	cmp	r0, #0
 8001e0e:	f000 80f6 	beq.w	8001ffe <HAL_ADC_Init+0x1fa>
 8001e12:	4604      	mov	r4, r0
  if (hadc->State == HAL_ADC_STATE_RESET)
 8001e14:	6d43      	ldr	r3, [r0, #84]	; 0x54
 8001e16:	b9f3      	cbnz	r3, 8001e56 <HAL_ADC_Init+0x52>
    hadc->ConvCpltCallback              = HAL_ADC_ConvCpltCallback;                 /* Legacy weak callback */
 8001e18:	4b7a      	ldr	r3, [pc, #488]	; (8002004 <HAL_ADC_Init+0x200>)
 8001e1a:	6643      	str	r3, [r0, #100]	; 0x64
    hadc->ConvHalfCpltCallback          = HAL_ADC_ConvHalfCpltCallback;             /* Legacy weak callback */
 8001e1c:	4b7a      	ldr	r3, [pc, #488]	; (8002008 <HAL_ADC_Init+0x204>)
 8001e1e:	6683      	str	r3, [r0, #104]	; 0x68
    hadc->LevelOutOfWindowCallback      = HAL_ADC_LevelOutOfWindowCallback;         /* Legacy weak callback */
 8001e20:	4b7a      	ldr	r3, [pc, #488]	; (800200c <HAL_ADC_Init+0x208>)
 8001e22:	66c3      	str	r3, [r0, #108]	; 0x6c
    hadc->ErrorCallback                 = HAL_ADC_ErrorCallback;                    /* Legacy weak callback */
 8001e24:	4b7a      	ldr	r3, [pc, #488]	; (8002010 <HAL_ADC_Init+0x20c>)
 8001e26:	6703      	str	r3, [r0, #112]	; 0x70
    hadc->InjectedConvCpltCallback      = HAL_ADCEx_InjectedConvCpltCallback;       /* Legacy weak callback */
 8001e28:	4b7a      	ldr	r3, [pc, #488]	; (8002014 <HAL_ADC_Init+0x210>)
 8001e2a:	6743      	str	r3, [r0, #116]	; 0x74
    hadc->InjectedQueueOverflowCallback = HAL_ADCEx_InjectedQueueOverflowCallback;  /* Legacy weak callback */
 8001e2c:	4b7a      	ldr	r3, [pc, #488]	; (8002018 <HAL_ADC_Init+0x214>)
 8001e2e:	6783      	str	r3, [r0, #120]	; 0x78
    hadc->LevelOutOfWindow2Callback     = HAL_ADCEx_LevelOutOfWindow2Callback;      /* Legacy weak callback */
 8001e30:	4b7a      	ldr	r3, [pc, #488]	; (800201c <HAL_ADC_Init+0x218>)
 8001e32:	67c3      	str	r3, [r0, #124]	; 0x7c
    hadc->LevelOutOfWindow3Callback     = HAL_ADCEx_LevelOutOfWindow3Callback;      /* Legacy weak callback */
 8001e34:	4b7a      	ldr	r3, [pc, #488]	; (8002020 <HAL_ADC_Init+0x21c>)
 8001e36:	f8c0 3080 	str.w	r3, [r0, #128]	; 0x80
    hadc->EndOfSamplingCallback         = HAL_ADCEx_EndOfSamplingCallback;          /* Legacy weak callback */
 8001e3a:	4b7a      	ldr	r3, [pc, #488]	; (8002024 <HAL_ADC_Init+0x220>)
 8001e3c:	f8c0 3084 	str.w	r3, [r0, #132]	; 0x84
    if (hadc->MspInitCallback == NULL)
 8001e40:	f8d0 3088 	ldr.w	r3, [r0, #136]	; 0x88
 8001e44:	b353      	cbz	r3, 8001e9c <HAL_ADC_Init+0x98>
    hadc->MspInitCallback(hadc);
 8001e46:	f8d4 3088 	ldr.w	r3, [r4, #136]	; 0x88
 8001e4a:	4620      	mov	r0, r4
 8001e4c:	4798      	blx	r3
    ADC_CLEAR_ERRORCODE(hadc);
 8001e4e:	2300      	movs	r3, #0
 8001e50:	65a3      	str	r3, [r4, #88]	; 0x58
    hadc->Lock = HAL_UNLOCKED;
 8001e52:	f884 3050 	strb.w	r3, [r4, #80]	; 0x50
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8001e56:	6823      	ldr	r3, [r4, #0]
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8001e58:	689a      	ldr	r2, [r3, #8]
 8001e5a:	f012 5f00 	tst.w	r2, #536870912	; 0x20000000
 8001e5e:	d005      	beq.n	8001e6c <HAL_ADC_Init+0x68>
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8001e60:	689a      	ldr	r2, [r3, #8]
 8001e62:	f022 4220 	bic.w	r2, r2, #2684354560	; 0xa0000000
 8001e66:	f022 023f 	bic.w	r2, r2, #63	; 0x3f
 8001e6a:	609a      	str	r2, [r3, #8]
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001e6c:	6822      	ldr	r2, [r4, #0]
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8001e6e:	6893      	ldr	r3, [r2, #8]
 8001e70:	f013 5f80 	tst.w	r3, #268435456	; 0x10000000
 8001e74:	d11c      	bne.n	8001eb0 <HAL_ADC_Init+0xac>
  MODIFY_REG(ADCx->CR,
 8001e76:	6893      	ldr	r3, [r2, #8]
 8001e78:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 8001e7c:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001e80:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001e84:	6093      	str	r3, [r2, #8]
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8001e86:	4b68      	ldr	r3, [pc, #416]	; (8002028 <HAL_ADC_Init+0x224>)
 8001e88:	681b      	ldr	r3, [r3, #0]
 8001e8a:	099b      	lsrs	r3, r3, #6
 8001e8c:	4a67      	ldr	r2, [pc, #412]	; (800202c <HAL_ADC_Init+0x228>)
 8001e8e:	fba2 2303 	umull	r2, r3, r2, r3
 8001e92:	099b      	lsrs	r3, r3, #6
 8001e94:	3301      	adds	r3, #1
 8001e96:	005b      	lsls	r3, r3, #1
 8001e98:	9301      	str	r3, [sp, #4]
    while (wait_loop_index != 0UL)
 8001e9a:	e006      	b.n	8001eaa <HAL_ADC_Init+0xa6>
      hadc->MspInitCallback = HAL_ADC_MspInit; /* Legacy weak MspInit  */
 8001e9c:	4b64      	ldr	r3, [pc, #400]	; (8002030 <HAL_ADC_Init+0x22c>)
 8001e9e:	f8c0 3088 	str.w	r3, [r0, #136]	; 0x88
 8001ea2:	e7d0      	b.n	8001e46 <HAL_ADC_Init+0x42>
      wait_loop_index--;
 8001ea4:	9b01      	ldr	r3, [sp, #4]
 8001ea6:	3b01      	subs	r3, #1
 8001ea8:	9301      	str	r3, [sp, #4]
    while (wait_loop_index != 0UL)
 8001eaa:	9b01      	ldr	r3, [sp, #4]
 8001eac:	2b00      	cmp	r3, #0
 8001eae:	d1f9      	bne.n	8001ea4 <HAL_ADC_Init+0xa0>
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001eb0:	6822      	ldr	r2, [r4, #0]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8001eb2:	6893      	ldr	r3, [r2, #8]
 8001eb4:	f013 5f80 	tst.w	r3, #268435456	; 0x10000000
 8001eb8:	d109      	bne.n	8001ece <HAL_ADC_Init+0xca>
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001eba:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8001ebc:	f043 0310 	orr.w	r3, r3, #16
 8001ec0:	6563      	str	r3, [r4, #84]	; 0x54
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001ec2:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8001ec4:	f043 0301 	orr.w	r3, r3, #1
 8001ec8:	65a3      	str	r3, [r4, #88]	; 0x58
    tmp_hal_status = HAL_ERROR;
 8001eca:	2001      	movs	r0, #1
 8001ecc:	e000      	b.n	8001ed0 <HAL_ADC_Init+0xcc>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001ece:	2000      	movs	r0, #0
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8001ed0:	6893      	ldr	r3, [r2, #8]
 8001ed2:	f013 0304 	ands.w	r3, r3, #4
 8001ed6:	d000      	beq.n	8001eda <HAL_ADC_Init+0xd6>
 8001ed8:	2301      	movs	r3, #1
  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8001eda:	6d61      	ldr	r1, [r4, #84]	; 0x54
 8001edc:	f011 0f10 	tst.w	r1, #16
 8001ee0:	f040 8086 	bne.w	8001ff0 <HAL_ADC_Init+0x1ec>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8001ee4:	2b00      	cmp	r3, #0
 8001ee6:	f040 8083 	bne.w	8001ff0 <HAL_ADC_Init+0x1ec>
    ADC_STATE_CLR_SET(hadc->State,
 8001eea:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8001eec:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8001ef0:	f043 0302 	orr.w	r3, r3, #2
 8001ef4:	6563      	str	r3, [r4, #84]	; 0x54
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8001ef6:	6893      	ldr	r3, [r2, #8]
 8001ef8:	f013 0f01 	tst.w	r3, #1
 8001efc:	d10b      	bne.n	8001f16 <HAL_ADC_Init+0x112>
 8001efe:	4b4d      	ldr	r3, [pc, #308]	; (8002034 <HAL_ADC_Init+0x230>)
 8001f00:	689b      	ldr	r3, [r3, #8]
 8001f02:	f013 0f01 	tst.w	r3, #1
 8001f06:	d106      	bne.n	8001f16 <HAL_ADC_Init+0x112>
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8001f08:	6863      	ldr	r3, [r4, #4]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8001f0a:	494b      	ldr	r1, [pc, #300]	; (8002038 <HAL_ADC_Init+0x234>)
 8001f0c:	688a      	ldr	r2, [r1, #8]
 8001f0e:	f422 127c 	bic.w	r2, r2, #4128768	; 0x3f0000
 8001f12:	4313      	orrs	r3, r2
 8001f14:	608b      	str	r3, [r1, #8]
    tmpCFGR |= (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001f16:	7e62      	ldrb	r2, [r4, #25]
                hadc->Init.Overrun                                                     |
 8001f18:	6b63      	ldr	r3, [r4, #52]	; 0x34
    tmpCFGR |= (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001f1a:	ea43 3342 	orr.w	r3, r3, r2, lsl #13
                hadc->Init.DataAlign                                                   |
 8001f1e:	68e2      	ldr	r2, [r4, #12]
                hadc->Init.Overrun                                                     |
 8001f20:	4313      	orrs	r3, r2
                hadc->Init.Resolution                                                  |
 8001f22:	68a2      	ldr	r2, [r4, #8]
                hadc->Init.DataAlign                                                   |
 8001f24:	4313      	orrs	r3, r2
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8001f26:	f894 2020 	ldrb.w	r2, [r4, #32]
                hadc->Init.Resolution                                                  |
 8001f2a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001f2e:	2a01      	cmp	r2, #1
 8001f30:	d03e      	beq.n	8001fb0 <HAL_ADC_Init+0x1ac>
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001f32:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 8001f34:	b122      	cbz	r2, 8001f40 <HAL_ADC_Init+0x13c>
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8001f36:	f402 7270 	and.w	r2, r2, #960	; 0x3c0
                  | hadc->Init.ExternalTrigConvEdge
 8001f3a:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 8001f3c:	430a      	orrs	r2, r1
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8001f3e:	4313      	orrs	r3, r2
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 8001f40:	6821      	ldr	r1, [r4, #0]
 8001f42:	68cd      	ldr	r5, [r1, #12]
 8001f44:	4a3d      	ldr	r2, [pc, #244]	; (800203c <HAL_ADC_Init+0x238>)
 8001f46:	402a      	ands	r2, r5
 8001f48:	4313      	orrs	r3, r2
 8001f4a:	60cb      	str	r3, [r1, #12]
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001f4c:	6821      	ldr	r1, [r4, #0]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8001f4e:	688b      	ldr	r3, [r1, #8]
 8001f50:	f013 0304 	ands.w	r3, r3, #4
 8001f54:	d000      	beq.n	8001f58 <HAL_ADC_Init+0x154>
 8001f56:	2301      	movs	r3, #1
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8001f58:	688a      	ldr	r2, [r1, #8]
 8001f5a:	f012 0208 	ands.w	r2, r2, #8
 8001f5e:	d000      	beq.n	8001f62 <HAL_ADC_Init+0x15e>
 8001f60:	2201      	movs	r2, #1
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8001f62:	b9b3      	cbnz	r3, 8001f92 <HAL_ADC_Init+0x18e>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8001f64:	b9aa      	cbnz	r2, 8001f92 <HAL_ADC_Init+0x18e>
                 ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8001f66:	7e22      	ldrb	r2, [r4, #24]
                 ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8001f68:	f894 3030 	ldrb.w	r3, [r4, #48]	; 0x30
 8001f6c:	005b      	lsls	r3, r3, #1
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8001f6e:	ea43 3282 	orr.w	r2, r3, r2, lsl #14
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8001f72:	68cb      	ldr	r3, [r1, #12]
 8001f74:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8001f78:	f023 0302 	bic.w	r3, r3, #2
 8001f7c:	4313      	orrs	r3, r2
 8001f7e:	60cb      	str	r3, [r1, #12]
      if (hadc->Init.OversamplingMode == ENABLE)
 8001f80:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38
 8001f84:	2b01      	cmp	r3, #1
 8001f86:	d018      	beq.n	8001fba <HAL_ADC_Init+0x1b6>
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8001f88:	6822      	ldr	r2, [r4, #0]
 8001f8a:	6913      	ldr	r3, [r2, #16]
 8001f8c:	f023 0301 	bic.w	r3, r3, #1
 8001f90:	6113      	str	r3, [r2, #16]
    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8001f92:	6923      	ldr	r3, [r4, #16]
 8001f94:	2b01      	cmp	r3, #1
 8001f96:	d022      	beq.n	8001fde <HAL_ADC_Init+0x1da>
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8001f98:	6822      	ldr	r2, [r4, #0]
 8001f9a:	6b13      	ldr	r3, [r2, #48]	; 0x30
 8001f9c:	f023 030f 	bic.w	r3, r3, #15
 8001fa0:	6313      	str	r3, [r2, #48]	; 0x30
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8001fa2:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8001fa4:	f023 0303 	bic.w	r3, r3, #3
 8001fa8:	f043 0301 	orr.w	r3, r3, #1
 8001fac:	6563      	str	r3, [r4, #84]	; 0x54
 8001fae:	e024      	b.n	8001ffa <HAL_ADC_Init+0x1f6>
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8001fb0:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8001fb2:	3a01      	subs	r2, #1
 8001fb4:	ea43 4342 	orr.w	r3, r3, r2, lsl #17
 8001fb8:	e7bb      	b.n	8001f32 <HAL_ADC_Init+0x12e>
        MODIFY_REG(hadc->Instance->CFGR2,
 8001fba:	6821      	ldr	r1, [r4, #0]
 8001fbc:	690b      	ldr	r3, [r1, #16]
 8001fbe:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8001fc2:	f023 0304 	bic.w	r3, r3, #4
 8001fc6:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 8001fc8:	6c25      	ldr	r5, [r4, #64]	; 0x40
 8001fca:	432a      	orrs	r2, r5
 8001fcc:	6c65      	ldr	r5, [r4, #68]	; 0x44
 8001fce:	432a      	orrs	r2, r5
 8001fd0:	6ca5      	ldr	r5, [r4, #72]	; 0x48
 8001fd2:	432a      	orrs	r2, r5
 8001fd4:	4313      	orrs	r3, r2
 8001fd6:	f043 0301 	orr.w	r3, r3, #1
 8001fda:	610b      	str	r3, [r1, #16]
 8001fdc:	e7d9      	b.n	8001f92 <HAL_ADC_Init+0x18e>
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8001fde:	6821      	ldr	r1, [r4, #0]
 8001fe0:	6b0b      	ldr	r3, [r1, #48]	; 0x30
 8001fe2:	f023 030f 	bic.w	r3, r3, #15
 8001fe6:	69e2      	ldr	r2, [r4, #28]
 8001fe8:	3a01      	subs	r2, #1
 8001fea:	4313      	orrs	r3, r2
 8001fec:	630b      	str	r3, [r1, #48]	; 0x30
 8001fee:	e7d8      	b.n	8001fa2 <HAL_ADC_Init+0x19e>
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001ff0:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8001ff2:	f043 0310 	orr.w	r3, r3, #16
 8001ff6:	6563      	str	r3, [r4, #84]	; 0x54
    tmp_hal_status = HAL_ERROR;
 8001ff8:	2001      	movs	r0, #1
}
 8001ffa:	b003      	add	sp, #12
 8001ffc:	bd30      	pop	{r4, r5, pc}
    return HAL_ERROR;
 8001ffe:	2001      	movs	r0, #1
 8002000:	e7fb      	b.n	8001ffa <HAL_ADC_Init+0x1f6>
 8002002:	bf00      	nop
 8002004:	08001835 	.word	0x08001835
 8002008:	08001d51 	.word	0x08001d51
 800200c:	08001d53 	.word	0x08001d53
 8002010:	08001d55 	.word	0x08001d55
 8002014:	08002b29 	.word	0x08002b29
 8002018:	08002b2b 	.word	0x08002b2b
 800201c:	08002b2d 	.word	0x08002b2d
 8002020:	08002b2f 	.word	0x08002b2f
 8002024:	08002b31 	.word	0x08002b31
 8002028:	20000004 	.word	0x20000004
 800202c:	053e2d63 	.word	0x053e2d63
 8002030:	08001871 	.word	0x08001871
 8002034:	50040000 	.word	0x50040000
 8002038:	50040300 	.word	0x50040300
 800203c:	fff0c007 	.word	0xfff0c007

08002040 <HAL_ADC_IRQHandler>:
{
 8002040:	b570      	push	{r4, r5, r6, lr}
 8002042:	4604      	mov	r4, r0
  uint32_t tmp_isr = hadc->Instance->ISR;
 8002044:	6803      	ldr	r3, [r0, #0]
 8002046:	681d      	ldr	r5, [r3, #0]
  uint32_t tmp_ier = hadc->Instance->IER;
 8002048:	685e      	ldr	r6, [r3, #4]
  if (((tmp_isr & ADC_FLAG_EOSMP) == ADC_FLAG_EOSMP) && ((tmp_ier & ADC_IT_EOSMP) == ADC_IT_EOSMP))
 800204a:	f015 0f02 	tst.w	r5, #2
 800204e:	d011      	beq.n	8002074 <HAL_ADC_IRQHandler+0x34>
 8002050:	f016 0f02 	tst.w	r6, #2
 8002054:	d00e      	beq.n	8002074 <HAL_ADC_IRQHandler+0x34>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8002056:	6d43      	ldr	r3, [r0, #84]	; 0x54
 8002058:	f013 0f10 	tst.w	r3, #16
 800205c:	d103      	bne.n	8002066 <HAL_ADC_IRQHandler+0x26>
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOSMP);
 800205e:	6d43      	ldr	r3, [r0, #84]	; 0x54
 8002060:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8002064:	6543      	str	r3, [r0, #84]	; 0x54
    hadc->EndOfSamplingCallback(hadc);
 8002066:	f8d4 3084 	ldr.w	r3, [r4, #132]	; 0x84
 800206a:	4620      	mov	r0, r4
 800206c:	4798      	blx	r3
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOSMP);
 800206e:	6823      	ldr	r3, [r4, #0]
 8002070:	2202      	movs	r2, #2
 8002072:	601a      	str	r2, [r3, #0]
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 8002074:	f015 0f04 	tst.w	r5, #4
 8002078:	d002      	beq.n	8002080 <HAL_ADC_IRQHandler+0x40>
 800207a:	f016 0f04 	tst.w	r6, #4
 800207e:	d105      	bne.n	800208c <HAL_ADC_IRQHandler+0x4c>
 8002080:	f015 0f08 	tst.w	r5, #8
 8002084:	d03a      	beq.n	80020fc <HAL_ADC_IRQHandler+0xbc>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 8002086:	f016 0f08 	tst.w	r6, #8
 800208a:	d037      	beq.n	80020fc <HAL_ADC_IRQHandler+0xbc>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 800208c:	6d63      	ldr	r3, [r4, #84]	; 0x54
 800208e:	f013 0f10 	tst.w	r3, #16
 8002092:	d103      	bne.n	800209c <HAL_ADC_IRQHandler+0x5c>
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002094:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8002096:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800209a:	6563      	str	r3, [r4, #84]	; 0x54
    if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 800209c:	6823      	ldr	r3, [r4, #0]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 800209e:	68da      	ldr	r2, [r3, #12]
 80020a0:	f412 6f40 	tst.w	r2, #3072	; 0xc00
 80020a4:	d124      	bne.n	80020f0 <HAL_ADC_IRQHandler+0xb0>
      if (READ_BIT (hadc->Instance->CFGR, ADC_CFGR_CONT) != ADC_CFGR_CONT)
 80020a6:	68da      	ldr	r2, [r3, #12]
 80020a8:	f412 5f00 	tst.w	r2, #8192	; 0x2000
 80020ac:	d120      	bne.n	80020f0 <HAL_ADC_IRQHandler+0xb0>
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 80020ae:	681a      	ldr	r2, [r3, #0]
 80020b0:	f012 0f08 	tst.w	r2, #8
 80020b4:	d01c      	beq.n	80020f0 <HAL_ADC_IRQHandler+0xb0>
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80020b6:	689a      	ldr	r2, [r3, #8]
 80020b8:	f012 0f04 	tst.w	r2, #4
 80020bc:	d110      	bne.n	80020e0 <HAL_ADC_IRQHandler+0xa0>
            __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 80020be:	685a      	ldr	r2, [r3, #4]
 80020c0:	f022 020c 	bic.w	r2, r2, #12
 80020c4:	605a      	str	r2, [r3, #4]
            CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80020c6:	6d63      	ldr	r3, [r4, #84]	; 0x54
 80020c8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80020cc:	6563      	str	r3, [r4, #84]	; 0x54
            if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 80020ce:	6d63      	ldr	r3, [r4, #84]	; 0x54
 80020d0:	f413 5f80 	tst.w	r3, #4096	; 0x1000
 80020d4:	d10c      	bne.n	80020f0 <HAL_ADC_IRQHandler+0xb0>
              SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80020d6:	6d63      	ldr	r3, [r4, #84]	; 0x54
 80020d8:	f043 0301 	orr.w	r3, r3, #1
 80020dc:	6563      	str	r3, [r4, #84]	; 0x54
 80020de:	e007      	b.n	80020f0 <HAL_ADC_IRQHandler+0xb0>
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80020e0:	6d63      	ldr	r3, [r4, #84]	; 0x54
 80020e2:	f043 0310 	orr.w	r3, r3, #16
 80020e6:	6563      	str	r3, [r4, #84]	; 0x54
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80020e8:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80020ea:	f043 0301 	orr.w	r3, r3, #1
 80020ee:	65a3      	str	r3, [r4, #88]	; 0x58
    hadc->ConvCpltCallback(hadc);
 80020f0:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80020f2:	4620      	mov	r0, r4
 80020f4:	4798      	blx	r3
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 80020f6:	6823      	ldr	r3, [r4, #0]
 80020f8:	220c      	movs	r2, #12
 80020fa:	601a      	str	r2, [r3, #0]
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 80020fc:	f015 0f20 	tst.w	r5, #32
 8002100:	d002      	beq.n	8002108 <HAL_ADC_IRQHandler+0xc8>
 8002102:	f016 0f20 	tst.w	r6, #32
 8002106:	d105      	bne.n	8002114 <HAL_ADC_IRQHandler+0xd4>
 8002108:	f015 0f40 	tst.w	r5, #64	; 0x40
 800210c:	d04d      	beq.n	80021aa <HAL_ADC_IRQHandler+0x16a>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 800210e:	f016 0f40 	tst.w	r6, #64	; 0x40
 8002112:	d04a      	beq.n	80021aa <HAL_ADC_IRQHandler+0x16a>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8002114:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8002116:	f013 0f10 	tst.w	r3, #16
 800211a:	d103      	bne.n	8002124 <HAL_ADC_IRQHandler+0xe4>
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 800211c:	6d63      	ldr	r3, [r4, #84]	; 0x54
 800211e:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8002122:	6563      	str	r3, [r4, #84]	; 0x54
    tmp_adc_inj_is_trigger_source_sw_start = LL_ADC_INJ_IsTriggerSourceSWStart(hadc->Instance);
 8002124:	6823      	ldr	r3, [r4, #0]
  return ((READ_BIT(ADCx->JSQR, ADC_JSQR_JEXTEN) == (LL_ADC_INJ_TRIG_SOFTWARE & ADC_JSQR_JEXTEN)) ? 1UL : 0UL);
 8002126:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8002128:	f012 0fc0 	tst.w	r2, #192	; 0xc0
 800212c:	d12b      	bne.n	8002186 <HAL_ADC_IRQHandler+0x146>
 800212e:	2101      	movs	r1, #1
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8002130:	68da      	ldr	r2, [r3, #12]
 8002132:	f412 6f40 	tst.w	r2, #3072	; 0xc00
 8002136:	d128      	bne.n	800218a <HAL_ADC_IRQHandler+0x14a>
 8002138:	2001      	movs	r0, #1
    tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 800213a:	68da      	ldr	r2, [r3, #12]
    if (tmp_adc_inj_is_trigger_source_sw_start != 0UL)
 800213c:	b379      	cbz	r1, 800219e <HAL_ADC_IRQHandler+0x15e>
      if ((READ_BIT(tmp_cfgr, ADC_CFGR_JAUTO) == 0UL) ||
 800213e:	f012 7f00 	tst.w	r2, #33554432	; 0x2000000
 8002142:	d003      	beq.n	800214c <HAL_ADC_IRQHandler+0x10c>
 8002144:	b358      	cbz	r0, 800219e <HAL_ADC_IRQHandler+0x15e>
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
 8002146:	f412 5f00 	tst.w	r2, #8192	; 0x2000
 800214a:	d128      	bne.n	800219e <HAL_ADC_IRQHandler+0x15e>
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS))
 800214c:	681a      	ldr	r2, [r3, #0]
 800214e:	f012 0f40 	tst.w	r2, #64	; 0x40
 8002152:	d024      	beq.n	800219e <HAL_ADC_IRQHandler+0x15e>
          if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JQM) == 0UL)
 8002154:	68da      	ldr	r2, [r3, #12]
 8002156:	f412 1f00 	tst.w	r2, #2097152	; 0x200000
 800215a:	d120      	bne.n	800219e <HAL_ADC_IRQHandler+0x15e>
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 800215c:	689a      	ldr	r2, [r3, #8]
 800215e:	f012 0f08 	tst.w	r2, #8
 8002162:	d114      	bne.n	800218e <HAL_ADC_IRQHandler+0x14e>
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC | ADC_IT_JEOS);
 8002164:	685a      	ldr	r2, [r3, #4]
 8002166:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 800216a:	605a      	str	r2, [r3, #4]
              CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);
 800216c:	6d63      	ldr	r3, [r4, #84]	; 0x54
 800216e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8002172:	6563      	str	r3, [r4, #84]	; 0x54
              if ((hadc->State & HAL_ADC_STATE_REG_BUSY) == 0UL)
 8002174:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8002176:	f413 7f80 	tst.w	r3, #256	; 0x100
 800217a:	d110      	bne.n	800219e <HAL_ADC_IRQHandler+0x15e>
                SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800217c:	6d63      	ldr	r3, [r4, #84]	; 0x54
 800217e:	f043 0301 	orr.w	r3, r3, #1
 8002182:	6563      	str	r3, [r4, #84]	; 0x54
 8002184:	e00b      	b.n	800219e <HAL_ADC_IRQHandler+0x15e>
  return ((READ_BIT(ADCx->JSQR, ADC_JSQR_JEXTEN) == (LL_ADC_INJ_TRIG_SOFTWARE & ADC_JSQR_JEXTEN)) ? 1UL : 0UL);
 8002186:	2100      	movs	r1, #0
 8002188:	e7d2      	b.n	8002130 <HAL_ADC_IRQHandler+0xf0>
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 800218a:	2000      	movs	r0, #0
 800218c:	e7d5      	b.n	800213a <HAL_ADC_IRQHandler+0xfa>
              SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800218e:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8002190:	f043 0310 	orr.w	r3, r3, #16
 8002194:	6563      	str	r3, [r4, #84]	; 0x54
              SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002196:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8002198:	f043 0301 	orr.w	r3, r3, #1
 800219c:	65a3      	str	r3, [r4, #88]	; 0x58
    hadc->InjectedConvCpltCallback(hadc);
 800219e:	6f63      	ldr	r3, [r4, #116]	; 0x74
 80021a0:	4620      	mov	r0, r4
 80021a2:	4798      	blx	r3
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOC | ADC_FLAG_JEOS);
 80021a4:	6823      	ldr	r3, [r4, #0]
 80021a6:	2260      	movs	r2, #96	; 0x60
 80021a8:	601a      	str	r2, [r3, #0]
  if (((tmp_isr & ADC_FLAG_AWD1) == ADC_FLAG_AWD1) && ((tmp_ier & ADC_IT_AWD1) == ADC_IT_AWD1))
 80021aa:	f015 0f80 	tst.w	r5, #128	; 0x80
 80021ae:	d00c      	beq.n	80021ca <HAL_ADC_IRQHandler+0x18a>
 80021b0:	f016 0f80 	tst.w	r6, #128	; 0x80
 80021b4:	d009      	beq.n	80021ca <HAL_ADC_IRQHandler+0x18a>
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 80021b6:	6d63      	ldr	r3, [r4, #84]	; 0x54
 80021b8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80021bc:	6563      	str	r3, [r4, #84]	; 0x54
    hadc->LevelOutOfWindowCallback(hadc);
 80021be:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 80021c0:	4620      	mov	r0, r4
 80021c2:	4798      	blx	r3
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD1);
 80021c4:	6823      	ldr	r3, [r4, #0]
 80021c6:	2280      	movs	r2, #128	; 0x80
 80021c8:	601a      	str	r2, [r3, #0]
  if (((tmp_isr & ADC_FLAG_AWD2) == ADC_FLAG_AWD2) && ((tmp_ier & ADC_IT_AWD2) == ADC_IT_AWD2))
 80021ca:	f415 7f80 	tst.w	r5, #256	; 0x100
 80021ce:	d00d      	beq.n	80021ec <HAL_ADC_IRQHandler+0x1ac>
 80021d0:	f416 7f80 	tst.w	r6, #256	; 0x100
 80021d4:	d00a      	beq.n	80021ec <HAL_ADC_IRQHandler+0x1ac>
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD2);
 80021d6:	6d63      	ldr	r3, [r4, #84]	; 0x54
 80021d8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80021dc:	6563      	str	r3, [r4, #84]	; 0x54
    hadc->LevelOutOfWindow2Callback(hadc);
 80021de:	6fe3      	ldr	r3, [r4, #124]	; 0x7c
 80021e0:	4620      	mov	r0, r4
 80021e2:	4798      	blx	r3
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD2);
 80021e4:	6823      	ldr	r3, [r4, #0]
 80021e6:	f44f 7280 	mov.w	r2, #256	; 0x100
 80021ea:	601a      	str	r2, [r3, #0]
  if (((tmp_isr & ADC_FLAG_AWD3) == ADC_FLAG_AWD3) && ((tmp_ier & ADC_IT_AWD3) == ADC_IT_AWD3))
 80021ec:	f415 7f00 	tst.w	r5, #512	; 0x200
 80021f0:	d00e      	beq.n	8002210 <HAL_ADC_IRQHandler+0x1d0>
 80021f2:	f416 7f00 	tst.w	r6, #512	; 0x200
 80021f6:	d00b      	beq.n	8002210 <HAL_ADC_IRQHandler+0x1d0>
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD3);
 80021f8:	6d63      	ldr	r3, [r4, #84]	; 0x54
 80021fa:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80021fe:	6563      	str	r3, [r4, #84]	; 0x54
    hadc->LevelOutOfWindow3Callback(hadc);
 8002200:	f8d4 3080 	ldr.w	r3, [r4, #128]	; 0x80
 8002204:	4620      	mov	r0, r4
 8002206:	4798      	blx	r3
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD3);
 8002208:	6823      	ldr	r3, [r4, #0]
 800220a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800220e:	601a      	str	r2, [r3, #0]
  if (((tmp_isr & ADC_FLAG_OVR) == ADC_FLAG_OVR) && ((tmp_ier & ADC_IT_OVR) == ADC_IT_OVR))
 8002210:	f015 0f10 	tst.w	r5, #16
 8002214:	d017      	beq.n	8002246 <HAL_ADC_IRQHandler+0x206>
 8002216:	f016 0f10 	tst.w	r6, #16
 800221a:	d014      	beq.n	8002246 <HAL_ADC_IRQHandler+0x206>
    if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 800221c:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800221e:	b123      	cbz	r3, 800222a <HAL_ADC_IRQHandler+0x1ea>
      if (LL_ADC_REG_GetDMATransfer(hadc->Instance) != LL_ADC_REG_DMA_TRANSFER_NONE)
 8002220:	6823      	ldr	r3, [r4, #0]
  return (uint32_t)(READ_BIT(ADCx->CFGR, ADC_CFGR_DMAEN | ADC_CFGR_DMACFG));
 8002222:	68db      	ldr	r3, [r3, #12]
 8002224:	f013 0f03 	tst.w	r3, #3
 8002228:	d00a      	beq.n	8002240 <HAL_ADC_IRQHandler+0x200>
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_OVR);
 800222a:	6d63      	ldr	r3, [r4, #84]	; 0x54
 800222c:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002230:	6563      	str	r3, [r4, #84]	; 0x54
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8002232:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8002234:	f043 0302 	orr.w	r3, r3, #2
 8002238:	65a3      	str	r3, [r4, #88]	; 0x58
      hadc->ErrorCallback(hadc);
 800223a:	6f23      	ldr	r3, [r4, #112]	; 0x70
 800223c:	4620      	mov	r0, r4
 800223e:	4798      	blx	r3
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8002240:	6823      	ldr	r3, [r4, #0]
 8002242:	2210      	movs	r2, #16
 8002244:	601a      	str	r2, [r3, #0]
  if (((tmp_isr & ADC_FLAG_JQOVF) == ADC_FLAG_JQOVF) && ((tmp_ier & ADC_IT_JQOVF) == ADC_IT_JQOVF))
 8002246:	f415 6f80 	tst.w	r5, #1024	; 0x400
 800224a:	d011      	beq.n	8002270 <HAL_ADC_IRQHandler+0x230>
 800224c:	f416 6f80 	tst.w	r6, #1024	; 0x400
 8002250:	d00e      	beq.n	8002270 <HAL_ADC_IRQHandler+0x230>
    SET_BIT(hadc->State, HAL_ADC_STATE_INJ_JQOVF);
 8002252:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8002254:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002258:	6563      	str	r3, [r4, #84]	; 0x54
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_JQOVF);
 800225a:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800225c:	f043 0308 	orr.w	r3, r3, #8
 8002260:	65a3      	str	r3, [r4, #88]	; 0x58
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JQOVF);
 8002262:	6823      	ldr	r3, [r4, #0]
 8002264:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002268:	601a      	str	r2, [r3, #0]
    hadc->InjectedQueueOverflowCallback(hadc);
 800226a:	6fa3      	ldr	r3, [r4, #120]	; 0x78
 800226c:	4620      	mov	r0, r4
 800226e:	4798      	blx	r3
}
 8002270:	bd70      	pop	{r4, r5, r6, pc}
	...

08002274 <HAL_ADC_ConfigChannel>:
{
 8002274:	b4f0      	push	{r4, r5, r6, r7}
 8002276:	b082      	sub	sp, #8
  __IO uint32_t wait_loop_index = 0;
 8002278:	2200      	movs	r2, #0
 800227a:	9201      	str	r2, [sp, #4]
  __HAL_LOCK(hadc);
 800227c:	f890 2050 	ldrb.w	r2, [r0, #80]	; 0x50
 8002280:	2a01      	cmp	r2, #1
 8002282:	f000 8225 	beq.w	80026d0 <HAL_ADC_ConfigChannel+0x45c>
 8002286:	4603      	mov	r3, r0
 8002288:	2201      	movs	r2, #1
 800228a:	f880 2050 	strb.w	r2, [r0, #80]	; 0x50
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800228e:	6806      	ldr	r6, [r0, #0]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8002290:	68b0      	ldr	r0, [r6, #8]
 8002292:	f010 0f04 	tst.w	r0, #4
 8002296:	d00a      	beq.n	80022ae <HAL_ADC_ConfigChannel+0x3a>
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002298:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800229a:	f042 0220 	orr.w	r2, r2, #32
 800229e:	655a      	str	r2, [r3, #84]	; 0x54
    tmp_hal_status = HAL_ERROR;
 80022a0:	2001      	movs	r0, #1
  __HAL_UNLOCK(hadc);
 80022a2:	2200      	movs	r2, #0
 80022a4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
}
 80022a8:	b002      	add	sp, #8
 80022aa:	bcf0      	pop	{r4, r5, r6, r7}
 80022ac:	4770      	bx	lr
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 80022ae:	684d      	ldr	r5, [r1, #4]
 80022b0:	680c      	ldr	r4, [r1, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 80022b2:	3630      	adds	r6, #48	; 0x30
 80022b4:	0a2a      	lsrs	r2, r5, #8
 80022b6:	0092      	lsls	r2, r2, #2
 80022b8:	f002 020c 	and.w	r2, r2, #12
  MODIFY_REG(*preg,
 80022bc:	58b0      	ldr	r0, [r6, r2]
 80022be:	f005 051f 	and.w	r5, r5, #31
 80022c2:	271f      	movs	r7, #31
 80022c4:	40af      	lsls	r7, r5
 80022c6:	ea20 0007 	bic.w	r0, r0, r7
 80022ca:	f3c4 6484 	ubfx	r4, r4, #26, #5
 80022ce:	40ac      	lsls	r4, r5
 80022d0:	4320      	orrs	r0, r4
 80022d2:	50b0      	str	r0, [r6, r2]
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80022d4:	681c      	ldr	r4, [r3, #0]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80022d6:	68a2      	ldr	r2, [r4, #8]
 80022d8:	f012 0204 	ands.w	r2, r2, #4
 80022dc:	d000      	beq.n	80022e0 <HAL_ADC_ConfigChannel+0x6c>
 80022de:	2201      	movs	r2, #1
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 80022e0:	68a0      	ldr	r0, [r4, #8]
 80022e2:	f010 0008 	ands.w	r0, r0, #8
 80022e6:	d000      	beq.n	80022ea <HAL_ADC_ConfigChannel+0x76>
 80022e8:	2001      	movs	r0, #1
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80022ea:	bb52      	cbnz	r2, 8002342 <HAL_ADC_ConfigChannel+0xce>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80022ec:	bb48      	cbnz	r0, 8002342 <HAL_ADC_ConfigChannel+0xce>
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 80022ee:	680e      	ldr	r6, [r1, #0]
 80022f0:	688d      	ldr	r5, [r1, #8]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 80022f2:	3414      	adds	r4, #20
 80022f4:	0e72      	lsrs	r2, r6, #25
 80022f6:	0092      	lsls	r2, r2, #2
 80022f8:	f002 0204 	and.w	r2, r2, #4
  MODIFY_REG(*preg,
 80022fc:	58a0      	ldr	r0, [r4, r2]
 80022fe:	f3c6 5604 	ubfx	r6, r6, #20, #5
 8002302:	2707      	movs	r7, #7
 8002304:	40b7      	lsls	r7, r6
 8002306:	ea20 0007 	bic.w	r0, r0, r7
 800230a:	40b5      	lsls	r5, r6
 800230c:	4328      	orrs	r0, r5
 800230e:	50a0      	str	r0, [r4, r2]
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8002310:	694c      	ldr	r4, [r1, #20]
 8002312:	6818      	ldr	r0, [r3, #0]
 8002314:	68c2      	ldr	r2, [r0, #12]
 8002316:	f3c2 02c1 	ubfx	r2, r2, #3, #2
 800231a:	0052      	lsls	r2, r2, #1
 800231c:	fa04 f202 	lsl.w	r2, r4, r2
      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 8002320:	690d      	ldr	r5, [r1, #16]
 8002322:	2d04      	cmp	r5, #4
 8002324:	d047      	beq.n	80023b6 <HAL_ADC_ConfigChannel+0x142>
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 8002326:	680e      	ldr	r6, [r1, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002328:	3060      	adds	r0, #96	; 0x60
  MODIFY_REG(*preg,
 800232a:	f850 7025 	ldr.w	r7, [r0, r5, lsl #2]
 800232e:	4cb2      	ldr	r4, [pc, #712]	; (80025f8 <HAL_ADC_ConfigChannel+0x384>)
 8002330:	403c      	ands	r4, r7
 8002332:	f006 46f8 	and.w	r6, r6, #2080374784	; 0x7c000000
 8002336:	4332      	orrs	r2, r6
 8002338:	4314      	orrs	r4, r2
 800233a:	f044 4400 	orr.w	r4, r4, #2147483648	; 0x80000000
 800233e:	f840 4025 	str.w	r4, [r0, r5, lsl #2]
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002342:	6818      	ldr	r0, [r3, #0]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8002344:	6882      	ldr	r2, [r0, #8]
 8002346:	f012 0f01 	tst.w	r2, #1
 800234a:	f040 81bb 	bne.w	80026c4 <HAL_ADC_ConfigChannel+0x450>
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 800234e:	680a      	ldr	r2, [r1, #0]
 8002350:	68cd      	ldr	r5, [r1, #12]
  MODIFY_REG(ADCx->DIFSEL,
 8002352:	f8d0 40b0 	ldr.w	r4, [r0, #176]	; 0xb0
 8002356:	f3c2 0612 	ubfx	r6, r2, #0, #19
 800235a:	ea24 0406 	bic.w	r4, r4, r6
 800235e:	f005 0618 	and.w	r6, r5, #24
 8002362:	4da6      	ldr	r5, [pc, #664]	; (80025fc <HAL_ADC_ConfigChannel+0x388>)
 8002364:	40f5      	lsrs	r5, r6
 8002366:	402a      	ands	r2, r5
 8002368:	f3c2 0212 	ubfx	r2, r2, #0, #19
 800236c:	4322      	orrs	r2, r4
 800236e:	f8c0 20b0 	str.w	r2, [r0, #176]	; 0xb0
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8002372:	68c8      	ldr	r0, [r1, #12]
 8002374:	4aa2      	ldr	r2, [pc, #648]	; (8002600 <HAL_ADC_ConfigChannel+0x38c>)
 8002376:	4290      	cmp	r0, r2
 8002378:	f000 8084 	beq.w	8002484 <HAL_ADC_ConfigChannel+0x210>
      if(__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 800237c:	680a      	ldr	r2, [r1, #0]
 800237e:	49a1      	ldr	r1, [pc, #644]	; (8002604 <HAL_ADC_ConfigChannel+0x390>)
 8002380:	420a      	tst	r2, r1
 8002382:	f000 81a1 	beq.w	80026c8 <HAL_ADC_ConfigChannel+0x454>
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8002386:	49a0      	ldr	r1, [pc, #640]	; (8002608 <HAL_ADC_ConfigChannel+0x394>)
 8002388:	6889      	ldr	r1, [r1, #8]
 800238a:	f001 74e0 	and.w	r4, r1, #29360128	; 0x1c00000
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 800238e:	489f      	ldr	r0, [pc, #636]	; (800260c <HAL_ADC_ConfigChannel+0x398>)
 8002390:	6880      	ldr	r0, [r0, #8]
 8002392:	f010 0f01 	tst.w	r0, #1
 8002396:	f040 8141 	bne.w	800261c <HAL_ADC_ConfigChannel+0x3a8>
          if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 800239a:	489d      	ldr	r0, [pc, #628]	; (8002610 <HAL_ADC_ConfigChannel+0x39c>)
 800239c:	4282      	cmp	r2, r0
 800239e:	f000 8143 	beq.w	8002628 <HAL_ADC_ConfigChannel+0x3b4>
          else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 80023a2:	489c      	ldr	r0, [pc, #624]	; (8002614 <HAL_ADC_ConfigChannel+0x3a0>)
 80023a4:	4282      	cmp	r2, r0
 80023a6:	f000 8166 	beq.w	8002676 <HAL_ADC_ConfigChannel+0x402>
          else if ((sConfig->Channel == ADC_CHANNEL_VREFINT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 80023aa:	489b      	ldr	r0, [pc, #620]	; (8002618 <HAL_ADC_ConfigChannel+0x3a4>)
 80023ac:	4282      	cmp	r2, r0
 80023ae:	f000 8176 	beq.w	800269e <HAL_ADC_ConfigChannel+0x42a>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80023b2:	2000      	movs	r0, #0
 80023b4:	e775      	b.n	80022a2 <HAL_ADC_ConfigChannel+0x2e>
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 80023b6:	6e02      	ldr	r2, [r0, #96]	; 0x60
 80023b8:	6e04      	ldr	r4, [r0, #96]	; 0x60
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80023ba:	f3c4 6484 	ubfx	r4, r4, #26, #5
 80023be:	680a      	ldr	r2, [r1, #0]
 80023c0:	f3c2 0512 	ubfx	r5, r2, #0, #19
 80023c4:	bb7d      	cbnz	r5, 8002426 <HAL_ADC_ConfigChannel+0x1b2>
 80023c6:	f3c2 6284 	ubfx	r2, r2, #26, #5
 80023ca:	4294      	cmp	r4, r2
 80023cc:	d033      	beq.n	8002436 <HAL_ADC_ConfigChannel+0x1c2>
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80023ce:	681c      	ldr	r4, [r3, #0]
 80023d0:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80023d2:	6e60      	ldr	r0, [r4, #100]	; 0x64
 80023d4:	f3c0 6084 	ubfx	r0, r0, #26, #5
 80023d8:	680a      	ldr	r2, [r1, #0]
 80023da:	f3c2 0512 	ubfx	r5, r2, #0, #19
 80023de:	bb7d      	cbnz	r5, 8002440 <HAL_ADC_ConfigChannel+0x1cc>
 80023e0:	f3c2 6284 	ubfx	r2, r2, #26, #5
 80023e4:	4290      	cmp	r0, r2
 80023e6:	d033      	beq.n	8002450 <HAL_ADC_ConfigChannel+0x1dc>
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80023e8:	681c      	ldr	r4, [r3, #0]
 80023ea:	6ea2      	ldr	r2, [r4, #104]	; 0x68
 80023ec:	6ea0      	ldr	r0, [r4, #104]	; 0x68
 80023ee:	f3c0 6084 	ubfx	r0, r0, #26, #5
 80023f2:	680a      	ldr	r2, [r1, #0]
 80023f4:	f3c2 0512 	ubfx	r5, r2, #0, #19
 80023f8:	bb7d      	cbnz	r5, 800245a <HAL_ADC_ConfigChannel+0x1e6>
 80023fa:	f3c2 6284 	ubfx	r2, r2, #26, #5
 80023fe:	4290      	cmp	r0, r2
 8002400:	d033      	beq.n	800246a <HAL_ADC_ConfigChannel+0x1f6>
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8002402:	681c      	ldr	r4, [r3, #0]
 8002404:	6ee2      	ldr	r2, [r4, #108]	; 0x6c
 8002406:	6ee0      	ldr	r0, [r4, #108]	; 0x6c
 8002408:	f3c0 6084 	ubfx	r0, r0, #26, #5
 800240c:	680a      	ldr	r2, [r1, #0]
 800240e:	f3c2 0512 	ubfx	r5, r2, #0, #19
 8002412:	bb7d      	cbnz	r5, 8002474 <HAL_ADC_ConfigChannel+0x200>
 8002414:	f3c2 6284 	ubfx	r2, r2, #26, #5
 8002418:	4290      	cmp	r0, r2
 800241a:	d192      	bne.n	8002342 <HAL_ADC_ConfigChannel+0xce>
  MODIFY_REG(*preg,
 800241c:	6ee2      	ldr	r2, [r4, #108]	; 0x6c
 800241e:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8002422:	66e2      	str	r2, [r4, #108]	; 0x6c
}
 8002424:	e78d      	b.n	8002342 <HAL_ADC_ConfigChannel+0xce>
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002426:	fa92 f2a2 	rbit	r2, r2
  if (value == 0U)
 800242a:	b112      	cbz	r2, 8002432 <HAL_ADC_ConfigChannel+0x1be>
  return __builtin_clz(value);
 800242c:	fab2 f282 	clz	r2, r2
 8002430:	e7cb      	b.n	80023ca <HAL_ADC_ConfigChannel+0x156>
    return 32U;
 8002432:	2220      	movs	r2, #32
 8002434:	e7c9      	b.n	80023ca <HAL_ADC_ConfigChannel+0x156>
  MODIFY_REG(*preg,
 8002436:	6e02      	ldr	r2, [r0, #96]	; 0x60
 8002438:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 800243c:	6602      	str	r2, [r0, #96]	; 0x60
}
 800243e:	e7c6      	b.n	80023ce <HAL_ADC_ConfigChannel+0x15a>
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002440:	fa92 f2a2 	rbit	r2, r2
  if (value == 0U)
 8002444:	b112      	cbz	r2, 800244c <HAL_ADC_ConfigChannel+0x1d8>
  return __builtin_clz(value);
 8002446:	fab2 f282 	clz	r2, r2
 800244a:	e7cb      	b.n	80023e4 <HAL_ADC_ConfigChannel+0x170>
    return 32U;
 800244c:	2220      	movs	r2, #32
 800244e:	e7c9      	b.n	80023e4 <HAL_ADC_ConfigChannel+0x170>
  MODIFY_REG(*preg,
 8002450:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8002452:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8002456:	6662      	str	r2, [r4, #100]	; 0x64
}
 8002458:	e7c6      	b.n	80023e8 <HAL_ADC_ConfigChannel+0x174>
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800245a:	fa92 f2a2 	rbit	r2, r2
  if (value == 0U)
 800245e:	b112      	cbz	r2, 8002466 <HAL_ADC_ConfigChannel+0x1f2>
  return __builtin_clz(value);
 8002460:	fab2 f282 	clz	r2, r2
 8002464:	e7cb      	b.n	80023fe <HAL_ADC_ConfigChannel+0x18a>
    return 32U;
 8002466:	2220      	movs	r2, #32
 8002468:	e7c9      	b.n	80023fe <HAL_ADC_ConfigChannel+0x18a>
  MODIFY_REG(*preg,
 800246a:	6ea2      	ldr	r2, [r4, #104]	; 0x68
 800246c:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8002470:	66a2      	str	r2, [r4, #104]	; 0x68
}
 8002472:	e7c6      	b.n	8002402 <HAL_ADC_ConfigChannel+0x18e>
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002474:	fa92 f2a2 	rbit	r2, r2
  if (value == 0U)
 8002478:	b112      	cbz	r2, 8002480 <HAL_ADC_ConfigChannel+0x20c>
  return __builtin_clz(value);
 800247a:	fab2 f282 	clz	r2, r2
 800247e:	e7cb      	b.n	8002418 <HAL_ADC_ConfigChannel+0x1a4>
    return 32U;
 8002480:	2220      	movs	r2, #32
 8002482:	e7c9      	b.n	8002418 <HAL_ADC_ConfigChannel+0x1a4>
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002484:	681d      	ldr	r5, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8002486:	680a      	ldr	r2, [r1, #0]
 8002488:	f3c2 0612 	ubfx	r6, r2, #0, #19
 800248c:	2e00      	cmp	r6, #0
 800248e:	d135      	bne.n	80024fc <HAL_ADC_ConfigChannel+0x288>
 8002490:	0e90      	lsrs	r0, r2, #26
 8002492:	3001      	adds	r0, #1
 8002494:	f000 001f 	and.w	r0, r0, #31
 8002498:	2809      	cmp	r0, #9
 800249a:	bf8c      	ite	hi
 800249c:	2000      	movhi	r0, #0
 800249e:	2001      	movls	r0, #1
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80024a0:	2800      	cmp	r0, #0
 80024a2:	d062      	beq.n	800256a <HAL_ADC_ConfigChannel+0x2f6>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80024a4:	2e00      	cmp	r6, #0
 80024a6:	d138      	bne.n	800251a <HAL_ADC_ConfigChannel+0x2a6>
 80024a8:	0e94      	lsrs	r4, r2, #26
 80024aa:	3401      	adds	r4, #1
 80024ac:	06a4      	lsls	r4, r4, #26
 80024ae:	f004 44f8 	and.w	r4, r4, #2080374784	; 0x7c000000
 80024b2:	2e00      	cmp	r6, #0
 80024b4:	d13d      	bne.n	8002532 <HAL_ADC_ConfigChannel+0x2be>
 80024b6:	0e90      	lsrs	r0, r2, #26
 80024b8:	3001      	adds	r0, #1
 80024ba:	f000 071f 	and.w	r7, r0, #31
 80024be:	2001      	movs	r0, #1
 80024c0:	40b8      	lsls	r0, r7
 80024c2:	4304      	orrs	r4, r0
 80024c4:	2e00      	cmp	r6, #0
 80024c6:	d142      	bne.n	800254e <HAL_ADC_ConfigChannel+0x2da>
 80024c8:	0e92      	lsrs	r2, r2, #26
 80024ca:	3201      	adds	r2, #1
 80024cc:	f002 021f 	and.w	r2, r2, #31
 80024d0:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 80024d4:	0512      	lsls	r2, r2, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80024d6:	4322      	orrs	r2, r4
 80024d8:	688c      	ldr	r4, [r1, #8]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 80024da:	3514      	adds	r5, #20
 80024dc:	0e50      	lsrs	r0, r2, #25
 80024de:	0080      	lsls	r0, r0, #2
 80024e0:	f000 0004 	and.w	r0, r0, #4
  MODIFY_REG(*preg,
 80024e4:	582e      	ldr	r6, [r5, r0]
 80024e6:	f3c2 5204 	ubfx	r2, r2, #20, #5
 80024ea:	2707      	movs	r7, #7
 80024ec:	4097      	lsls	r7, r2
 80024ee:	ea26 0607 	bic.w	r6, r6, r7
 80024f2:	fa04 f202 	lsl.w	r2, r4, r2
 80024f6:	4332      	orrs	r2, r6
 80024f8:	502a      	str	r2, [r5, r0]
}
 80024fa:	e73f      	b.n	800237c <HAL_ADC_ConfigChannel+0x108>
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80024fc:	fa92 f0a2 	rbit	r0, r2
  if (value == 0U)
 8002500:	b148      	cbz	r0, 8002516 <HAL_ADC_ConfigChannel+0x2a2>
  return __builtin_clz(value);
 8002502:	fab0 f080 	clz	r0, r0
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8002506:	3001      	adds	r0, #1
 8002508:	f000 001f 	and.w	r0, r0, #31
 800250c:	2809      	cmp	r0, #9
 800250e:	bf8c      	ite	hi
 8002510:	2000      	movhi	r0, #0
 8002512:	2001      	movls	r0, #1
 8002514:	e7c4      	b.n	80024a0 <HAL_ADC_ConfigChannel+0x22c>
    return 32U;
 8002516:	2020      	movs	r0, #32
 8002518:	e7f5      	b.n	8002506 <HAL_ADC_ConfigChannel+0x292>
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800251a:	fa92 f4a2 	rbit	r4, r2
  if (value == 0U)
 800251e:	b134      	cbz	r4, 800252e <HAL_ADC_ConfigChannel+0x2ba>
  return __builtin_clz(value);
 8002520:	fab4 f484 	clz	r4, r4
 8002524:	3401      	adds	r4, #1
 8002526:	06a4      	lsls	r4, r4, #26
 8002528:	f004 44f8 	and.w	r4, r4, #2080374784	; 0x7c000000
 800252c:	e7c1      	b.n	80024b2 <HAL_ADC_ConfigChannel+0x23e>
    return 32U;
 800252e:	2420      	movs	r4, #32
 8002530:	e7f8      	b.n	8002524 <HAL_ADC_ConfigChannel+0x2b0>
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002532:	fa92 f0a2 	rbit	r0, r2
  if (value == 0U)
 8002536:	b140      	cbz	r0, 800254a <HAL_ADC_ConfigChannel+0x2d6>
  return __builtin_clz(value);
 8002538:	fab0 f080 	clz	r0, r0
 800253c:	3001      	adds	r0, #1
 800253e:	f000 001f 	and.w	r0, r0, #31
 8002542:	2701      	movs	r7, #1
 8002544:	fa07 f000 	lsl.w	r0, r7, r0
 8002548:	e7bb      	b.n	80024c2 <HAL_ADC_ConfigChannel+0x24e>
    return 32U;
 800254a:	2020      	movs	r0, #32
 800254c:	e7f6      	b.n	800253c <HAL_ADC_ConfigChannel+0x2c8>
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800254e:	fa92 f2a2 	rbit	r2, r2
  if (value == 0U)
 8002552:	b142      	cbz	r2, 8002566 <HAL_ADC_ConfigChannel+0x2f2>
  return __builtin_clz(value);
 8002554:	fab2 f282 	clz	r2, r2
 8002558:	3201      	adds	r2, #1
 800255a:	f002 021f 	and.w	r2, r2, #31
 800255e:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8002562:	0512      	lsls	r2, r2, #20
 8002564:	e7b7      	b.n	80024d6 <HAL_ADC_ConfigChannel+0x262>
    return 32U;
 8002566:	2220      	movs	r2, #32
 8002568:	e7f6      	b.n	8002558 <HAL_ADC_ConfigChannel+0x2e4>
 800256a:	b9ce      	cbnz	r6, 80025a0 <HAL_ADC_ConfigChannel+0x32c>
 800256c:	0e94      	lsrs	r4, r2, #26
 800256e:	3401      	adds	r4, #1
 8002570:	06a4      	lsls	r4, r4, #26
 8002572:	f004 44f8 	and.w	r4, r4, #2080374784	; 0x7c000000
 8002576:	b9fe      	cbnz	r6, 80025b8 <HAL_ADC_ConfigChannel+0x344>
 8002578:	0e90      	lsrs	r0, r2, #26
 800257a:	3001      	adds	r0, #1
 800257c:	f000 071f 	and.w	r7, r0, #31
 8002580:	2001      	movs	r0, #1
 8002582:	40b8      	lsls	r0, r7
 8002584:	4304      	orrs	r4, r0
 8002586:	bb2e      	cbnz	r6, 80025d4 <HAL_ADC_ConfigChannel+0x360>
 8002588:	0e90      	lsrs	r0, r2, #26
 800258a:	3001      	adds	r0, #1
 800258c:	f000 001f 	and.w	r0, r0, #31
 8002590:	eb00 0240 	add.w	r2, r0, r0, lsl #1
 8002594:	3a1e      	subs	r2, #30
 8002596:	0512      	lsls	r2, r2, #20
 8002598:	f042 7200 	orr.w	r2, r2, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800259c:	4322      	orrs	r2, r4
 800259e:	e79b      	b.n	80024d8 <HAL_ADC_ConfigChannel+0x264>
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80025a0:	fa92 f4a2 	rbit	r4, r2
  if (value == 0U)
 80025a4:	b134      	cbz	r4, 80025b4 <HAL_ADC_ConfigChannel+0x340>
  return __builtin_clz(value);
 80025a6:	fab4 f484 	clz	r4, r4
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80025aa:	3401      	adds	r4, #1
 80025ac:	06a4      	lsls	r4, r4, #26
 80025ae:	f004 44f8 	and.w	r4, r4, #2080374784	; 0x7c000000
 80025b2:	e7e0      	b.n	8002576 <HAL_ADC_ConfigChannel+0x302>
    return 32U;
 80025b4:	2420      	movs	r4, #32
 80025b6:	e7f8      	b.n	80025aa <HAL_ADC_ConfigChannel+0x336>
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80025b8:	fa92 f0a2 	rbit	r0, r2
  if (value == 0U)
 80025bc:	b140      	cbz	r0, 80025d0 <HAL_ADC_ConfigChannel+0x35c>
  return __builtin_clz(value);
 80025be:	fab0 f080 	clz	r0, r0
 80025c2:	3001      	adds	r0, #1
 80025c4:	f000 001f 	and.w	r0, r0, #31
 80025c8:	2701      	movs	r7, #1
 80025ca:	fa07 f000 	lsl.w	r0, r7, r0
 80025ce:	e7d9      	b.n	8002584 <HAL_ADC_ConfigChannel+0x310>
    return 32U;
 80025d0:	2020      	movs	r0, #32
 80025d2:	e7f6      	b.n	80025c2 <HAL_ADC_ConfigChannel+0x34e>
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80025d4:	fa92 f2a2 	rbit	r2, r2
  if (value == 0U)
 80025d8:	b15a      	cbz	r2, 80025f2 <HAL_ADC_ConfigChannel+0x37e>
  return __builtin_clz(value);
 80025da:	fab2 f082 	clz	r0, r2
 80025de:	3001      	adds	r0, #1
 80025e0:	f000 001f 	and.w	r0, r0, #31
 80025e4:	eb00 0240 	add.w	r2, r0, r0, lsl #1
 80025e8:	3a1e      	subs	r2, #30
 80025ea:	0512      	lsls	r2, r2, #20
 80025ec:	f042 7200 	orr.w	r2, r2, #33554432	; 0x2000000
 80025f0:	e7d4      	b.n	800259c <HAL_ADC_ConfigChannel+0x328>
    return 32U;
 80025f2:	2020      	movs	r0, #32
 80025f4:	e7f3      	b.n	80025de <HAL_ADC_ConfigChannel+0x36a>
 80025f6:	bf00      	nop
 80025f8:	03fff000 	.word	0x03fff000
 80025fc:	0007ffff 	.word	0x0007ffff
 8002600:	407f0000 	.word	0x407f0000
 8002604:	80080000 	.word	0x80080000
 8002608:	50040300 	.word	0x50040300
 800260c:	50040000 	.word	0x50040000
 8002610:	c7520000 	.word	0xc7520000
 8002614:	cb840000 	.word	0xcb840000
 8002618:	80000001 	.word	0x80000001
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800261c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800261e:	f042 0220 	orr.w	r2, r2, #32
 8002622:	655a      	str	r2, [r3, #84]	; 0x54
          tmp_hal_status = HAL_ERROR;
 8002624:	2001      	movs	r0, #1
 8002626:	e63c      	b.n	80022a2 <HAL_ADC_ConfigChannel+0x2e>
          if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8002628:	f411 0f00 	tst.w	r1, #8388608	; 0x800000
 800262c:	f47f aeb9 	bne.w	80023a2 <HAL_ADC_ConfigChannel+0x12e>
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002630:	6819      	ldr	r1, [r3, #0]
 8002632:	4a28      	ldr	r2, [pc, #160]	; (80026d4 <HAL_ADC_ConfigChannel+0x460>)
 8002634:	4291      	cmp	r1, r2
 8002636:	d001      	beq.n	800263c <HAL_ADC_ConfigChannel+0x3c8>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002638:	2000      	movs	r0, #0
 800263a:	e632      	b.n	80022a2 <HAL_ADC_ConfigChannel+0x2e>
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_TEMPSENSOR | tmp_config_internal_channel);
 800263c:	f444 0200 	orr.w	r2, r4, #8388608	; 0x800000
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8002640:	4825      	ldr	r0, [pc, #148]	; (80026d8 <HAL_ADC_ConfigChannel+0x464>)
 8002642:	6881      	ldr	r1, [r0, #8]
 8002644:	f021 71e0 	bic.w	r1, r1, #29360128	; 0x1c00000
 8002648:	430a      	orrs	r2, r1
 800264a:	6082      	str	r2, [r0, #8]
              wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 800264c:	4a23      	ldr	r2, [pc, #140]	; (80026dc <HAL_ADC_ConfigChannel+0x468>)
 800264e:	6812      	ldr	r2, [r2, #0]
 8002650:	0992      	lsrs	r2, r2, #6
 8002652:	4923      	ldr	r1, [pc, #140]	; (80026e0 <HAL_ADC_ConfigChannel+0x46c>)
 8002654:	fba1 1202 	umull	r1, r2, r1, r2
 8002658:	0992      	lsrs	r2, r2, #6
 800265a:	3201      	adds	r2, #1
 800265c:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8002660:	0092      	lsls	r2, r2, #2
 8002662:	9201      	str	r2, [sp, #4]
              while(wait_loop_index != 0UL)
 8002664:	e002      	b.n	800266c <HAL_ADC_ConfigChannel+0x3f8>
                wait_loop_index--;
 8002666:	9a01      	ldr	r2, [sp, #4]
 8002668:	3a01      	subs	r2, #1
 800266a:	9201      	str	r2, [sp, #4]
              while(wait_loop_index != 0UL)
 800266c:	9a01      	ldr	r2, [sp, #4]
 800266e:	2a00      	cmp	r2, #0
 8002670:	d1f9      	bne.n	8002666 <HAL_ADC_ConfigChannel+0x3f2>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002672:	2000      	movs	r0, #0
 8002674:	e615      	b.n	80022a2 <HAL_ADC_ConfigChannel+0x2e>
          else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8002676:	f011 7f80 	tst.w	r1, #16777216	; 0x1000000
 800267a:	f47f ae96 	bne.w	80023aa <HAL_ADC_ConfigChannel+0x136>
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 800267e:	6819      	ldr	r1, [r3, #0]
 8002680:	4a14      	ldr	r2, [pc, #80]	; (80026d4 <HAL_ADC_ConfigChannel+0x460>)
 8002682:	4291      	cmp	r1, r2
 8002684:	d001      	beq.n	800268a <HAL_ADC_ConfigChannel+0x416>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002686:	2000      	movs	r0, #0
 8002688:	e60b      	b.n	80022a2 <HAL_ADC_ConfigChannel+0x2e>
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
 800268a:	f044 7280 	orr.w	r2, r4, #16777216	; 0x1000000
 800268e:	4812      	ldr	r0, [pc, #72]	; (80026d8 <HAL_ADC_ConfigChannel+0x464>)
 8002690:	6881      	ldr	r1, [r0, #8]
 8002692:	f021 71e0 	bic.w	r1, r1, #29360128	; 0x1c00000
 8002696:	430a      	orrs	r2, r1
 8002698:	6082      	str	r2, [r0, #8]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800269a:	2000      	movs	r0, #0
}
 800269c:	e601      	b.n	80022a2 <HAL_ADC_ConfigChannel+0x2e>
          else if ((sConfig->Channel == ADC_CHANNEL_VREFINT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 800269e:	f411 0f80 	tst.w	r1, #4194304	; 0x400000
 80026a2:	d113      	bne.n	80026cc <HAL_ADC_ConfigChannel+0x458>
            if (ADC_VREFINT_INSTANCE(hadc))
 80026a4:	6819      	ldr	r1, [r3, #0]
 80026a6:	4a0b      	ldr	r2, [pc, #44]	; (80026d4 <HAL_ADC_ConfigChannel+0x460>)
 80026a8:	4291      	cmp	r1, r2
 80026aa:	d001      	beq.n	80026b0 <HAL_ADC_ConfigChannel+0x43c>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80026ac:	2000      	movs	r0, #0
 80026ae:	e5f8      	b.n	80022a2 <HAL_ADC_ConfigChannel+0x2e>
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VREFINT | tmp_config_internal_channel);
 80026b0:	f444 0280 	orr.w	r2, r4, #4194304	; 0x400000
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 80026b4:	4808      	ldr	r0, [pc, #32]	; (80026d8 <HAL_ADC_ConfigChannel+0x464>)
 80026b6:	6881      	ldr	r1, [r0, #8]
 80026b8:	f021 71e0 	bic.w	r1, r1, #29360128	; 0x1c00000
 80026bc:	430a      	orrs	r2, r1
 80026be:	6082      	str	r2, [r0, #8]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80026c0:	2000      	movs	r0, #0
}
 80026c2:	e5ee      	b.n	80022a2 <HAL_ADC_ConfigChannel+0x2e>
 80026c4:	2000      	movs	r0, #0
 80026c6:	e5ec      	b.n	80022a2 <HAL_ADC_ConfigChannel+0x2e>
 80026c8:	2000      	movs	r0, #0
 80026ca:	e5ea      	b.n	80022a2 <HAL_ADC_ConfigChannel+0x2e>
 80026cc:	2000      	movs	r0, #0
 80026ce:	e5e8      	b.n	80022a2 <HAL_ADC_ConfigChannel+0x2e>
  __HAL_LOCK(hadc);
 80026d0:	2002      	movs	r0, #2
 80026d2:	e5e9      	b.n	80022a8 <HAL_ADC_ConfigChannel+0x34>
 80026d4:	50040000 	.word	0x50040000
 80026d8:	50040300 	.word	0x50040300
 80026dc:	20000004 	.word	0x20000004
 80026e0:	053e2d63 	.word	0x053e2d63

080026e4 <ADC_ConversionStop>:
{
 80026e4:	b570      	push	{r4, r5, r6, lr}
 80026e6:	4604      	mov	r4, r0
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80026e8:	6803      	ldr	r3, [r0, #0]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80026ea:	689a      	ldr	r2, [r3, #8]
 80026ec:	f012 0204 	ands.w	r2, r2, #4
 80026f0:	d000      	beq.n	80026f4 <ADC_ConversionStop+0x10>
 80026f2:	2201      	movs	r2, #1
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 80026f4:	6898      	ldr	r0, [r3, #8]
 80026f6:	f010 0008 	ands.w	r0, r0, #8
 80026fa:	d000      	beq.n	80026fe <ADC_ConversionStop+0x1a>
 80026fc:	2001      	movs	r0, #1
  if ((tmp_adc_is_conversion_on_going_regular != 0UL)
 80026fe:	b90a      	cbnz	r2, 8002704 <ADC_ConversionStop+0x20>
      || (tmp_adc_is_conversion_on_going_injected != 0UL)
 8002700:	2800      	cmp	r0, #0
 8002702:	d06b      	beq.n	80027dc <ADC_ConversionStop+0xf8>
    if (((hadc->Instance->CFGR & ADC_CFGR_JAUTO) != 0UL)
 8002704:	68da      	ldr	r2, [r3, #12]
 8002706:	f012 7f00 	tst.w	r2, #33554432	; 0x2000000
 800270a:	d004      	beq.n	8002716 <ADC_ConversionStop+0x32>
        && (hadc->Init.LowPowerAutoWait == ENABLE)
 800270c:	8b20      	ldrh	r0, [r4, #24]
 800270e:	f240 1201 	movw	r2, #257	; 0x101
 8002712:	4290      	cmp	r0, r2
 8002714:	d04e      	beq.n	80027b4 <ADC_ConversionStop+0xd0>
    if (conversion_group_reassigned != ADC_INJECTED_GROUP)
 8002716:	2902      	cmp	r1, #2
 8002718:	d010      	beq.n	800273c <ADC_ConversionStop+0x58>
      if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) != 0UL)
 800271a:	6823      	ldr	r3, [r4, #0]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 800271c:	689a      	ldr	r2, [r3, #8]
 800271e:	f012 0f04 	tst.w	r2, #4
 8002722:	d00b      	beq.n	800273c <ADC_ConversionStop+0x58>
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 8002724:	689a      	ldr	r2, [r3, #8]
 8002726:	f012 0f02 	tst.w	r2, #2
 800272a:	d107      	bne.n	800273c <ADC_ConversionStop+0x58>
  MODIFY_REG(ADCx->CR,
 800272c:	689a      	ldr	r2, [r3, #8]
 800272e:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8002732:	f022 023f 	bic.w	r2, r2, #63	; 0x3f
 8002736:	f042 0210 	orr.w	r2, r2, #16
 800273a:	609a      	str	r2, [r3, #8]
    if (conversion_group_reassigned != ADC_REGULAR_GROUP)
 800273c:	2901      	cmp	r1, #1
 800273e:	d010      	beq.n	8002762 <ADC_ConversionStop+0x7e>
      if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) != 0UL)
 8002740:	6823      	ldr	r3, [r4, #0]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8002742:	689a      	ldr	r2, [r3, #8]
 8002744:	f012 0f08 	tst.w	r2, #8
 8002748:	d00b      	beq.n	8002762 <ADC_ConversionStop+0x7e>
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 800274a:	689a      	ldr	r2, [r3, #8]
 800274c:	f012 0f02 	tst.w	r2, #2
 8002750:	d107      	bne.n	8002762 <ADC_ConversionStop+0x7e>
  MODIFY_REG(ADCx->CR,
 8002752:	689a      	ldr	r2, [r3, #8]
 8002754:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8002758:	f022 023f 	bic.w	r2, r2, #63	; 0x3f
 800275c:	f042 0220 	orr.w	r2, r2, #32
 8002760:	609a      	str	r2, [r3, #8]
    switch (conversion_group_reassigned)
 8002762:	2902      	cmp	r1, #2
 8002764:	d034      	beq.n	80027d0 <ADC_ConversionStop+0xec>
 8002766:	2903      	cmp	r1, #3
 8002768:	d134      	bne.n	80027d4 <ADC_ConversionStop+0xf0>
 800276a:	250c      	movs	r5, #12
    tickstart = HAL_GetTick();
 800276c:	f7ff fad4 	bl	8001d18 <HAL_GetTick>
 8002770:	4606      	mov	r6, r0
    while ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 8002772:	6823      	ldr	r3, [r4, #0]
 8002774:	689b      	ldr	r3, [r3, #8]
 8002776:	422b      	tst	r3, r5
 8002778:	d02e      	beq.n	80027d8 <ADC_ConversionStop+0xf4>
      if ((HAL_GetTick() - tickstart) > ADC_STOP_CONVERSION_TIMEOUT)
 800277a:	f7ff facd 	bl	8001d18 <HAL_GetTick>
 800277e:	1b80      	subs	r0, r0, r6
 8002780:	2805      	cmp	r0, #5
 8002782:	d9f6      	bls.n	8002772 <ADC_ConversionStop+0x8e>
        if ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 8002784:	6823      	ldr	r3, [r4, #0]
 8002786:	689b      	ldr	r3, [r3, #8]
 8002788:	422b      	tst	r3, r5
 800278a:	d0f2      	beq.n	8002772 <ADC_ConversionStop+0x8e>
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800278c:	6d63      	ldr	r3, [r4, #84]	; 0x54
 800278e:	f043 0310 	orr.w	r3, r3, #16
 8002792:	6563      	str	r3, [r4, #84]	; 0x54
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002794:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8002796:	f043 0301 	orr.w	r3, r3, #1
 800279a:	65a3      	str	r3, [r4, #88]	; 0x58
          return HAL_ERROR;
 800279c:	2001      	movs	r0, #1
 800279e:	e01c      	b.n	80027da <ADC_ConversionStop+0xf6>
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80027a0:	6d63      	ldr	r3, [r4, #84]	; 0x54
 80027a2:	f043 0310 	orr.w	r3, r3, #16
 80027a6:	6563      	str	r3, [r4, #84]	; 0x54
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80027a8:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80027aa:	f043 0301 	orr.w	r3, r3, #1
 80027ae:	65a3      	str	r3, [r4, #88]	; 0x58
          return HAL_ERROR;
 80027b0:	2001      	movs	r0, #1
 80027b2:	e012      	b.n	80027da <ADC_ConversionStop+0xf6>
  uint32_t Conversion_Timeout_CPU_cycles = 0UL;
 80027b4:	2200      	movs	r2, #0
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == 0UL)
 80027b6:	6819      	ldr	r1, [r3, #0]
 80027b8:	f011 0f40 	tst.w	r1, #64	; 0x40
 80027bc:	d104      	bne.n	80027c8 <ADC_ConversionStop+0xe4>
        if (Conversion_Timeout_CPU_cycles >= (ADC_CONVERSION_TIME_MAX_CPU_CYCLES * 4UL))
 80027be:	4908      	ldr	r1, [pc, #32]	; (80027e0 <ADC_ConversionStop+0xfc>)
 80027c0:	428a      	cmp	r2, r1
 80027c2:	d8ed      	bhi.n	80027a0 <ADC_ConversionStop+0xbc>
        Conversion_Timeout_CPU_cycles ++;
 80027c4:	3201      	adds	r2, #1
 80027c6:	e7f6      	b.n	80027b6 <ADC_ConversionStop+0xd2>
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOS);
 80027c8:	2240      	movs	r2, #64	; 0x40
 80027ca:	601a      	str	r2, [r3, #0]
      conversion_group_reassigned = ADC_REGULAR_GROUP;
 80027cc:	2101      	movs	r1, #1
 80027ce:	e7a4      	b.n	800271a <ADC_ConversionStop+0x36>
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_JADSTART;
 80027d0:	2508      	movs	r5, #8
 80027d2:	e7cb      	b.n	800276c <ADC_ConversionStop+0x88>
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_ADSTART;
 80027d4:	2504      	movs	r5, #4
 80027d6:	e7c9      	b.n	800276c <ADC_ConversionStop+0x88>
  return HAL_OK;
 80027d8:	2000      	movs	r0, #0
}
 80027da:	bd70      	pop	{r4, r5, r6, pc}
  return HAL_OK;
 80027dc:	2000      	movs	r0, #0
 80027de:	e7fc      	b.n	80027da <ADC_ConversionStop+0xf6>
 80027e0:	a33fffff 	.word	0xa33fffff

080027e4 <ADC_Enable>:
{
 80027e4:	b530      	push	{r4, r5, lr}
 80027e6:	b083      	sub	sp, #12
  __IO uint32_t wait_loop_index = 0UL;
 80027e8:	2300      	movs	r3, #0
 80027ea:	9301      	str	r3, [sp, #4]
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80027ec:	6803      	ldr	r3, [r0, #0]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80027ee:	689a      	ldr	r2, [r3, #8]
 80027f0:	f012 0f01 	tst.w	r2, #1
 80027f4:	d152      	bne.n	800289c <ADC_Enable+0xb8>
 80027f6:	4604      	mov	r4, r0
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
 80027f8:	6899      	ldr	r1, [r3, #8]
 80027fa:	4a2a      	ldr	r2, [pc, #168]	; (80028a4 <ADC_Enable+0xc0>)
 80027fc:	4211      	tst	r1, r2
 80027fe:	d116      	bne.n	800282e <ADC_Enable+0x4a>
  MODIFY_REG(ADCx->CR,
 8002800:	689a      	ldr	r2, [r3, #8]
 8002802:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8002806:	f022 023f 	bic.w	r2, r2, #63	; 0x3f
 800280a:	f042 0201 	orr.w	r2, r2, #1
 800280e:	609a      	str	r2, [r3, #8]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8002810:	4b25      	ldr	r3, [pc, #148]	; (80028a8 <ADC_Enable+0xc4>)
 8002812:	689b      	ldr	r3, [r3, #8]
    if((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) & LL_ADC_PATH_INTERNAL_TEMPSENSOR) != 0UL)
 8002814:	f413 0f00 	tst.w	r3, #8388608	; 0x800000
 8002818:	d019      	beq.n	800284e <ADC_Enable+0x6a>
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_BUFFER_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 800281a:	4b24      	ldr	r3, [pc, #144]	; (80028ac <ADC_Enable+0xc8>)
 800281c:	681b      	ldr	r3, [r3, #0]
 800281e:	099b      	lsrs	r3, r3, #6
 8002820:	4a23      	ldr	r2, [pc, #140]	; (80028b0 <ADC_Enable+0xcc>)
 8002822:	fba2 2303 	umull	r2, r3, r2, r3
 8002826:	099b      	lsrs	r3, r3, #6
 8002828:	3301      	adds	r3, #1
 800282a:	9301      	str	r3, [sp, #4]
      while(wait_loop_index != 0UL)
 800282c:	e00c      	b.n	8002848 <ADC_Enable+0x64>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800282e:	6d43      	ldr	r3, [r0, #84]	; 0x54
 8002830:	f043 0310 	orr.w	r3, r3, #16
 8002834:	6543      	str	r3, [r0, #84]	; 0x54
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002836:	6d83      	ldr	r3, [r0, #88]	; 0x58
 8002838:	f043 0301 	orr.w	r3, r3, #1
 800283c:	6583      	str	r3, [r0, #88]	; 0x58
      return HAL_ERROR;
 800283e:	2001      	movs	r0, #1
 8002840:	e02d      	b.n	800289e <ADC_Enable+0xba>
        wait_loop_index--;
 8002842:	9b01      	ldr	r3, [sp, #4]
 8002844:	3b01      	subs	r3, #1
 8002846:	9301      	str	r3, [sp, #4]
      while(wait_loop_index != 0UL)
 8002848:	9b01      	ldr	r3, [sp, #4]
 800284a:	2b00      	cmp	r3, #0
 800284c:	d1f9      	bne.n	8002842 <ADC_Enable+0x5e>
      tickstart = HAL_GetTick();
 800284e:	f7ff fa63 	bl	8001d18 <HAL_GetTick>
 8002852:	4605      	mov	r5, r0
      while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002854:	e004      	b.n	8002860 <ADC_Enable+0x7c>
        if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8002856:	f7ff fa5f 	bl	8001d18 <HAL_GetTick>
 800285a:	1b43      	subs	r3, r0, r5
 800285c:	2b02      	cmp	r3, #2
 800285e:	d811      	bhi.n	8002884 <ADC_Enable+0xa0>
      while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002860:	6823      	ldr	r3, [r4, #0]
 8002862:	681a      	ldr	r2, [r3, #0]
 8002864:	f012 0f01 	tst.w	r2, #1
 8002868:	d116      	bne.n	8002898 <ADC_Enable+0xb4>
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 800286a:	689a      	ldr	r2, [r3, #8]
 800286c:	f012 0f01 	tst.w	r2, #1
 8002870:	d1f1      	bne.n	8002856 <ADC_Enable+0x72>
  MODIFY_REG(ADCx->CR,
 8002872:	689a      	ldr	r2, [r3, #8]
 8002874:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8002878:	f022 023f 	bic.w	r2, r2, #63	; 0x3f
 800287c:	f042 0201 	orr.w	r2, r2, #1
 8002880:	609a      	str	r2, [r3, #8]
}
 8002882:	e7e8      	b.n	8002856 <ADC_Enable+0x72>
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002884:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8002886:	f043 0310 	orr.w	r3, r3, #16
 800288a:	6563      	str	r3, [r4, #84]	; 0x54
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800288c:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800288e:	f043 0301 	orr.w	r3, r3, #1
 8002892:	65a3      	str	r3, [r4, #88]	; 0x58
          return HAL_ERROR;
 8002894:	2001      	movs	r0, #1
 8002896:	e002      	b.n	800289e <ADC_Enable+0xba>
  return HAL_OK;
 8002898:	2000      	movs	r0, #0
 800289a:	e000      	b.n	800289e <ADC_Enable+0xba>
 800289c:	2000      	movs	r0, #0
}
 800289e:	b003      	add	sp, #12
 80028a0:	bd30      	pop	{r4, r5, pc}
 80028a2:	bf00      	nop
 80028a4:	8000003f 	.word	0x8000003f
 80028a8:	50040300 	.word	0x50040300
 80028ac:	20000004 	.word	0x20000004
 80028b0:	053e2d63 	.word	0x053e2d63

080028b4 <HAL_ADC_Start_DMA>:
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80028b4:	6803      	ldr	r3, [r0, #0]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80028b6:	689b      	ldr	r3, [r3, #8]
 80028b8:	f013 0f04 	tst.w	r3, #4
 80028bc:	d14f      	bne.n	800295e <HAL_ADC_Start_DMA+0xaa>
{
 80028be:	b570      	push	{r4, r5, r6, lr}
 80028c0:	4604      	mov	r4, r0
 80028c2:	460e      	mov	r6, r1
 80028c4:	4615      	mov	r5, r2
    __HAL_LOCK(hadc);
 80028c6:	f890 3050 	ldrb.w	r3, [r0, #80]	; 0x50
 80028ca:	2b01      	cmp	r3, #1
 80028cc:	d049      	beq.n	8002962 <HAL_ADC_Start_DMA+0xae>
 80028ce:	2301      	movs	r3, #1
 80028d0:	f880 3050 	strb.w	r3, [r0, #80]	; 0x50
      tmp_hal_status = ADC_Enable(hadc);
 80028d4:	f7ff ff86 	bl	80027e4 <ADC_Enable>
      if (tmp_hal_status == HAL_OK)
 80028d8:	2800      	cmp	r0, #0
 80028da:	d13c      	bne.n	8002956 <HAL_ADC_Start_DMA+0xa2>
        ADC_STATE_CLR_SET(hadc->State,
 80028dc:	6d63      	ldr	r3, [r4, #84]	; 0x54
 80028de:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80028e2:	f023 0301 	bic.w	r3, r3, #1
 80028e6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80028ea:	6563      	str	r3, [r4, #84]	; 0x54
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 80028ec:	6d63      	ldr	r3, [r4, #84]	; 0x54
 80028ee:	f413 5f80 	tst.w	r3, #4096	; 0x1000
 80028f2:	d02d      	beq.n	8002950 <HAL_ADC_Start_DMA+0x9c>
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 80028f4:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80028f6:	f023 0306 	bic.w	r3, r3, #6
 80028fa:	65a3      	str	r3, [r4, #88]	; 0x58
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 80028fc:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 80028fe:	4a1a      	ldr	r2, [pc, #104]	; (8002968 <HAL_ADC_Start_DMA+0xb4>)
 8002900:	62da      	str	r2, [r3, #44]	; 0x2c
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8002902:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 8002904:	4a19      	ldr	r2, [pc, #100]	; (800296c <HAL_ADC_Start_DMA+0xb8>)
 8002906:	631a      	str	r2, [r3, #48]	; 0x30
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8002908:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 800290a:	4a19      	ldr	r2, [pc, #100]	; (8002970 <HAL_ADC_Start_DMA+0xbc>)
 800290c:	635a      	str	r2, [r3, #52]	; 0x34
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 800290e:	6823      	ldr	r3, [r4, #0]
 8002910:	221c      	movs	r2, #28
 8002912:	601a      	str	r2, [r3, #0]
        __HAL_UNLOCK(hadc);
 8002914:	2300      	movs	r3, #0
 8002916:	f884 3050 	strb.w	r3, [r4, #80]	; 0x50
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 800291a:	6822      	ldr	r2, [r4, #0]
 800291c:	6853      	ldr	r3, [r2, #4]
 800291e:	f043 0310 	orr.w	r3, r3, #16
 8002922:	6053      	str	r3, [r2, #4]
        SET_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 8002924:	6822      	ldr	r2, [r4, #0]
 8002926:	68d3      	ldr	r3, [r2, #12]
 8002928:	f043 0301 	orr.w	r3, r3, #1
 800292c:	60d3      	str	r3, [r2, #12]
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 800292e:	6821      	ldr	r1, [r4, #0]
 8002930:	462b      	mov	r3, r5
 8002932:	4632      	mov	r2, r6
 8002934:	3140      	adds	r1, #64	; 0x40
 8002936:	6ce0      	ldr	r0, [r4, #76]	; 0x4c
 8002938:	f000 fa62 	bl	8002e00 <HAL_DMA_Start_IT>
        LL_ADC_REG_StartConversion(hadc->Instance);
 800293c:	6822      	ldr	r2, [r4, #0]
  MODIFY_REG(ADCx->CR,
 800293e:	6893      	ldr	r3, [r2, #8]
 8002940:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8002944:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002948:	f043 0304 	orr.w	r3, r3, #4
 800294c:	6093      	str	r3, [r2, #8]
}
 800294e:	bd70      	pop	{r4, r5, r6, pc}
          ADC_CLEAR_ERRORCODE(hadc);
 8002950:	2300      	movs	r3, #0
 8002952:	65a3      	str	r3, [r4, #88]	; 0x58
 8002954:	e7d2      	b.n	80028fc <HAL_ADC_Start_DMA+0x48>
        __HAL_UNLOCK(hadc);
 8002956:	2300      	movs	r3, #0
 8002958:	f884 3050 	strb.w	r3, [r4, #80]	; 0x50
 800295c:	e7f7      	b.n	800294e <HAL_ADC_Start_DMA+0x9a>
    tmp_hal_status = HAL_BUSY;
 800295e:	2002      	movs	r0, #2
}
 8002960:	4770      	bx	lr
    __HAL_LOCK(hadc);
 8002962:	2002      	movs	r0, #2
 8002964:	e7f3      	b.n	800294e <HAL_ADC_Start_DMA+0x9a>
 8002966:	bf00      	nop
 8002968:	08001d57 	.word	0x08001d57
 800296c:	08001ddf 	.word	0x08001ddf
 8002970:	08001de9 	.word	0x08001de9

08002974 <ADC_Disable>:
{
 8002974:	b538      	push	{r3, r4, r5, lr}
 8002976:	4604      	mov	r4, r0
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 8002978:	6802      	ldr	r2, [r0, #0]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 800297a:	6893      	ldr	r3, [r2, #8]
 800297c:	f013 0302 	ands.w	r3, r3, #2
 8002980:	d000      	beq.n	8002984 <ADC_Disable+0x10>
 8002982:	2301      	movs	r3, #1
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8002984:	6891      	ldr	r1, [r2, #8]
 8002986:	f011 0f01 	tst.w	r1, #1
 800298a:	d039      	beq.n	8002a00 <ADC_Disable+0x8c>
      && (tmp_adc_is_disable_on_going == 0UL)
 800298c:	2b00      	cmp	r3, #0
 800298e:	d139      	bne.n	8002a04 <ADC_Disable+0x90>
    if ((hadc->Instance->CR & (ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 8002990:	6893      	ldr	r3, [r2, #8]
 8002992:	f003 030d 	and.w	r3, r3, #13
 8002996:	2b01      	cmp	r3, #1
 8002998:	d009      	beq.n	80029ae <ADC_Disable+0x3a>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800299a:	6d63      	ldr	r3, [r4, #84]	; 0x54
 800299c:	f043 0310 	orr.w	r3, r3, #16
 80029a0:	6563      	str	r3, [r4, #84]	; 0x54
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80029a2:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80029a4:	f043 0301 	orr.w	r3, r3, #1
 80029a8:	65a3      	str	r3, [r4, #88]	; 0x58
      return HAL_ERROR;
 80029aa:	2001      	movs	r0, #1
 80029ac:	e029      	b.n	8002a02 <ADC_Disable+0x8e>
  MODIFY_REG(ADCx->CR,
 80029ae:	6893      	ldr	r3, [r2, #8]
 80029b0:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80029b4:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80029b8:	f043 0302 	orr.w	r3, r3, #2
 80029bc:	6093      	str	r3, [r2, #8]
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 80029be:	6823      	ldr	r3, [r4, #0]
 80029c0:	2203      	movs	r2, #3
 80029c2:	601a      	str	r2, [r3, #0]
    tickstart = HAL_GetTick();
 80029c4:	f7ff f9a8 	bl	8001d18 <HAL_GetTick>
 80029c8:	4605      	mov	r5, r0
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 80029ca:	6823      	ldr	r3, [r4, #0]
 80029cc:	689b      	ldr	r3, [r3, #8]
 80029ce:	f013 0f01 	tst.w	r3, #1
 80029d2:	d013      	beq.n	80029fc <ADC_Disable+0x88>
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 80029d4:	f7ff f9a0 	bl	8001d18 <HAL_GetTick>
 80029d8:	1b40      	subs	r0, r0, r5
 80029da:	2802      	cmp	r0, #2
 80029dc:	d9f5      	bls.n	80029ca <ADC_Disable+0x56>
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 80029de:	6823      	ldr	r3, [r4, #0]
 80029e0:	689b      	ldr	r3, [r3, #8]
 80029e2:	f013 0f01 	tst.w	r3, #1
 80029e6:	d0f0      	beq.n	80029ca <ADC_Disable+0x56>
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80029e8:	6d63      	ldr	r3, [r4, #84]	; 0x54
 80029ea:	f043 0310 	orr.w	r3, r3, #16
 80029ee:	6563      	str	r3, [r4, #84]	; 0x54
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80029f0:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80029f2:	f043 0301 	orr.w	r3, r3, #1
 80029f6:	65a3      	str	r3, [r4, #88]	; 0x58
          return HAL_ERROR;
 80029f8:	2001      	movs	r0, #1
 80029fa:	e002      	b.n	8002a02 <ADC_Disable+0x8e>
  return HAL_OK;
 80029fc:	2000      	movs	r0, #0
 80029fe:	e000      	b.n	8002a02 <ADC_Disable+0x8e>
 8002a00:	2000      	movs	r0, #0
}
 8002a02:	bd38      	pop	{r3, r4, r5, pc}
  return HAL_OK;
 8002a04:	2000      	movs	r0, #0
 8002a06:	e7fc      	b.n	8002a02 <ADC_Disable+0x8e>

08002a08 <HAL_ADC_Stop_DMA>:
{
 8002a08:	b538      	push	{r3, r4, r5, lr}
  __HAL_LOCK(hadc);
 8002a0a:	f890 3050 	ldrb.w	r3, [r0, #80]	; 0x50
 8002a0e:	2b01      	cmp	r3, #1
 8002a10:	d039      	beq.n	8002a86 <HAL_ADC_Stop_DMA+0x7e>
 8002a12:	4604      	mov	r4, r0
 8002a14:	2301      	movs	r3, #1
 8002a16:	f880 3050 	strb.w	r3, [r0, #80]	; 0x50
  tmp_hal_status = ADC_ConversionStop(hadc, ADC_REGULAR_INJECTED_GROUP);
 8002a1a:	2103      	movs	r1, #3
 8002a1c:	f7ff fe62 	bl	80026e4 <ADC_ConversionStop>
  if (tmp_hal_status == HAL_OK)
 8002a20:	4605      	mov	r5, r0
 8002a22:	b9e8      	cbnz	r0, 8002a60 <HAL_ADC_Stop_DMA+0x58>
    CLEAR_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 8002a24:	6822      	ldr	r2, [r4, #0]
 8002a26:	68d3      	ldr	r3, [r2, #12]
 8002a28:	f023 0301 	bic.w	r3, r3, #1
 8002a2c:	60d3      	str	r3, [r2, #12]
    if (hadc->DMA_Handle->State == HAL_DMA_STATE_BUSY)
 8002a2e:	6ce0      	ldr	r0, [r4, #76]	; 0x4c
 8002a30:	f890 3025 	ldrb.w	r3, [r0, #37]	; 0x25
 8002a34:	b2db      	uxtb	r3, r3
 8002a36:	2b02      	cmp	r3, #2
 8002a38:	d017      	beq.n	8002a6a <HAL_ADC_Stop_DMA+0x62>
    __HAL_ADC_DISABLE_IT(hadc, ADC_IT_OVR);
 8002a3a:	6822      	ldr	r2, [r4, #0]
 8002a3c:	6853      	ldr	r3, [r2, #4]
 8002a3e:	f023 0310 	bic.w	r3, r3, #16
 8002a42:	6053      	str	r3, [r2, #4]
    if (tmp_hal_status == HAL_OK)
 8002a44:	b9dd      	cbnz	r5, 8002a7e <HAL_ADC_Stop_DMA+0x76>
      tmp_hal_status = ADC_Disable(hadc);
 8002a46:	4620      	mov	r0, r4
 8002a48:	f7ff ff94 	bl	8002974 <ADC_Disable>
 8002a4c:	4605      	mov	r5, r0
    if (tmp_hal_status == HAL_OK)
 8002a4e:	b93d      	cbnz	r5, 8002a60 <HAL_ADC_Stop_DMA+0x58>
      ADC_STATE_CLR_SET(hadc->State,
 8002a50:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8002a52:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8002a56:	f023 0301 	bic.w	r3, r3, #1
 8002a5a:	f043 0301 	orr.w	r3, r3, #1
 8002a5e:	6563      	str	r3, [r4, #84]	; 0x54
  __HAL_UNLOCK(hadc);
 8002a60:	2300      	movs	r3, #0
 8002a62:	f884 3050 	strb.w	r3, [r4, #80]	; 0x50
}
 8002a66:	4628      	mov	r0, r5
 8002a68:	bd38      	pop	{r3, r4, r5, pc}
      tmp_hal_status = HAL_DMA_Abort(hadc->DMA_Handle);
 8002a6a:	f000 fa13 	bl	8002e94 <HAL_DMA_Abort>
      if (tmp_hal_status != HAL_OK)
 8002a6e:	4605      	mov	r5, r0
 8002a70:	2800      	cmp	r0, #0
 8002a72:	d0e2      	beq.n	8002a3a <HAL_ADC_Stop_DMA+0x32>
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8002a74:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8002a76:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002a7a:	6563      	str	r3, [r4, #84]	; 0x54
 8002a7c:	e7dd      	b.n	8002a3a <HAL_ADC_Stop_DMA+0x32>
      (void)ADC_Disable(hadc);
 8002a7e:	4620      	mov	r0, r4
 8002a80:	f7ff ff78 	bl	8002974 <ADC_Disable>
 8002a84:	e7e3      	b.n	8002a4e <HAL_ADC_Stop_DMA+0x46>
  __HAL_LOCK(hadc);
 8002a86:	2502      	movs	r5, #2
 8002a88:	e7ed      	b.n	8002a66 <HAL_ADC_Stop_DMA+0x5e>
	...

08002a8c <HAL_ADCEx_Calibration_Start>:
  *
  *         (1) On STM32WB serie, parameter not available on devices: STM32WB10xx, STM32WB15xx.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef *hadc, uint32_t SingleDiff)
{
 8002a8c:	b530      	push	{r4, r5, lr}
 8002a8e:	b083      	sub	sp, #12
  uint32_t calibration_index;
  uint32_t calibration_factor_accumulated = 0;
#endif /* ADC_SUPPORT_2_5_MSPS */

  HAL_StatusTypeDef tmp_hal_status;
  __IO uint32_t wait_loop_index = 0UL;
 8002a90:	2300      	movs	r3, #0
 8002a92:	9301      	str	r3, [sp, #4]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_SINGLE_DIFFERENTIAL(SingleDiff));

  /* Process locked */
  __HAL_LOCK(hadc);
 8002a94:	f890 3050 	ldrb.w	r3, [r0, #80]	; 0x50
 8002a98:	2b01      	cmp	r3, #1
 8002a9a:	d041      	beq.n	8002b20 <HAL_ADCEx_Calibration_Start+0x94>
 8002a9c:	4604      	mov	r4, r0
 8002a9e:	460d      	mov	r5, r1
 8002aa0:	2301      	movs	r3, #1
 8002aa2:	f880 3050 	strb.w	r3, [r0, #80]	; 0x50

  /* Calibration prerequisite: ADC must be disabled. */

  /* Disable the ADC (if not already disabled) */
  tmp_hal_status = ADC_Disable(hadc);
 8002aa6:	f7ff ff65 	bl	8002974 <ADC_Disable>

  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 8002aaa:	bb80      	cbnz	r0, 8002b0e <HAL_ADCEx_Calibration_Start+0x82>
#if defined (ADC_SUPPORT_2_5_MSPS)
    ADC_STATE_CLR_SET(hadc->State,
                      HAL_ADC_STATE_REG_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
#else
    ADC_STATE_CLR_SET(hadc->State,
 8002aac:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8002aae:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8002ab2:	f023 0302 	bic.w	r3, r3, #2
 8002ab6:	f043 0302 	orr.w	r3, r3, #2
 8002aba:	6563      	str	r3, [r4, #84]	; 0x54
    {
      /* Start ADC calibration */
      LL_ADC_StartCalibration(hadc->Instance);

#else
    LL_ADC_StartCalibration(hadc->Instance, SingleDiff);
 8002abc:	6822      	ldr	r2, [r4, #0]
  MODIFY_REG(ADCx->CR,
 8002abe:	6893      	ldr	r3, [r2, #8]
 8002ac0:	f023 4340 	bic.w	r3, r3, #3221225472	; 0xc0000000
 8002ac4:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002ac8:	f005 4580 	and.w	r5, r5, #1073741824	; 0x40000000
 8002acc:	432b      	orrs	r3, r5
 8002ace:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8002ad2:	6093      	str	r3, [r2, #8]
#endif /* ADC_SUPPORT_2_5_MSPS */

    /* Wait for calibration completion */
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 8002ad4:	6823      	ldr	r3, [r4, #0]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADCAL) == (ADC_CR_ADCAL)) ? 1UL : 0UL);
 8002ad6:	689b      	ldr	r3, [r3, #8]
 8002ad8:	2b00      	cmp	r3, #0
 8002ada:	db06      	blt.n	8002aea <HAL_ADCEx_Calibration_Start+0x5e>
    LL_ADC_SetCalibrationFactor(hadc->Instance, calibration_factor_accumulated);
    LL_ADC_Disable(hadc->Instance);
#endif /* ADC_SUPPORT_2_5_MSPS */

    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002adc:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8002ade:	f023 0303 	bic.w	r3, r3, #3
 8002ae2:	f043 0301 	orr.w	r3, r3, #1
 8002ae6:	6563      	str	r3, [r4, #84]	; 0x54
 8002ae8:	e015      	b.n	8002b16 <HAL_ADCEx_Calibration_Start+0x8a>
      wait_loop_index++;
 8002aea:	9b01      	ldr	r3, [sp, #4]
 8002aec:	3301      	adds	r3, #1
 8002aee:	9301      	str	r3, [sp, #4]
      if (wait_loop_index >= ADC_CALIBRATION_TIMEOUT)
 8002af0:	9a01      	ldr	r2, [sp, #4]
 8002af2:	4b0c      	ldr	r3, [pc, #48]	; (8002b24 <HAL_ADCEx_Calibration_Start+0x98>)
 8002af4:	429a      	cmp	r2, r3
 8002af6:	d9ed      	bls.n	8002ad4 <HAL_ADCEx_Calibration_Start+0x48>
        ADC_STATE_CLR_SET(hadc->State,
 8002af8:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8002afa:	f023 0312 	bic.w	r3, r3, #18
 8002afe:	f043 0310 	orr.w	r3, r3, #16
 8002b02:	6563      	str	r3, [r4, #84]	; 0x54
        __HAL_UNLOCK(hadc);
 8002b04:	2300      	movs	r3, #0
 8002b06:	f884 3050 	strb.w	r3, [r4, #80]	; 0x50
        return HAL_ERROR;
 8002b0a:	2001      	movs	r0, #1
 8002b0c:	e006      	b.n	8002b1c <HAL_ADCEx_Calibration_Start+0x90>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002b0e:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8002b10:	f043 0310 	orr.w	r3, r3, #16
 8002b14:	6563      	str	r3, [r4, #84]	; 0x54
    /* Note: No need to update variable "tmp_hal_status" here: already set    */
    /*       to state "HAL_ERROR" by function disabling the ADC.              */
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002b16:	2300      	movs	r3, #0
 8002b18:	f884 3050 	strb.w	r3, [r4, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
}
 8002b1c:	b003      	add	sp, #12
 8002b1e:	bd30      	pop	{r4, r5, pc}
  __HAL_LOCK(hadc);
 8002b20:	2002      	movs	r0, #2
 8002b22:	e7fb      	b.n	8002b1c <HAL_ADCEx_Calibration_Start+0x90>
 8002b24:	00026aaa 	.word	0x00026aaa

08002b28 <HAL_ADCEx_InjectedConvCpltCallback>:
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedConvCpltCallback must be implemented in the user file.
  */
}
 8002b28:	4770      	bx	lr

08002b2a <HAL_ADCEx_InjectedQueueOverflowCallback>:
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedQueueOverflowCallback must be implemented in the user file.
  */
}
 8002b2a:	4770      	bx	lr

08002b2c <HAL_ADCEx_LevelOutOfWindow2Callback>:
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow2Callback must be implemented in the user file.
  */
}
 8002b2c:	4770      	bx	lr

08002b2e <HAL_ADCEx_LevelOutOfWindow3Callback>:
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow3Callback must be implemented in the user file.
  */
}
 8002b2e:	4770      	bx	lr

08002b30 <HAL_ADCEx_EndOfSamplingCallback>:
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_EndOfSamplingCallback must be implemented in the user file.
  */
}
 8002b30:	4770      	bx	lr
	...

08002b34 <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002b34:	4a07      	ldr	r2, [pc, #28]	; (8002b54 <HAL_NVIC_SetPriorityGrouping+0x20>)
 8002b36:	68d3      	ldr	r3, [r2, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002b38:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8002b3c:	041b      	lsls	r3, r3, #16
 8002b3e:	0c1b      	lsrs	r3, r3, #16
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002b40:	0200      	lsls	r0, r0, #8
 8002b42:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002b46:	4303      	orrs	r3, r0
  reg_value  =  (reg_value                                   |
 8002b48:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002b4c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
  SCB->AIRCR =  reg_value;
 8002b50:	60d3      	str	r3, [r2, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 8002b52:	4770      	bx	lr
 8002b54:	e000ed00 	.word	0xe000ed00

08002b58 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002b58:	b430      	push	{r4, r5}
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002b5a:	4b17      	ldr	r3, [pc, #92]	; (8002bb8 <HAL_NVIC_SetPriority+0x60>)
 8002b5c:	68db      	ldr	r3, [r3, #12]
 8002b5e:	f3c3 2302 	ubfx	r3, r3, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002b62:	f1c3 0407 	rsb	r4, r3, #7
 8002b66:	2c04      	cmp	r4, #4
 8002b68:	bf28      	it	cs
 8002b6a:	2404      	movcs	r4, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002b6c:	1d1d      	adds	r5, r3, #4
 8002b6e:	2d06      	cmp	r5, #6
 8002b70:	d918      	bls.n	8002ba4 <HAL_NVIC_SetPriority+0x4c>
 8002b72:	3b03      	subs	r3, #3

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002b74:	f04f 35ff 	mov.w	r5, #4294967295
 8002b78:	fa05 f404 	lsl.w	r4, r5, r4
 8002b7c:	ea21 0104 	bic.w	r1, r1, r4
 8002b80:	4099      	lsls	r1, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002b82:	fa05 f303 	lsl.w	r3, r5, r3
 8002b86:	ea22 0303 	bic.w	r3, r2, r3
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002b8a:	4319      	orrs	r1, r3
  if ((int32_t)(IRQn) >= 0)
 8002b8c:	2800      	cmp	r0, #0
 8002b8e:	db0b      	blt.n	8002ba8 <HAL_NVIC_SetPriority+0x50>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002b90:	0109      	lsls	r1, r1, #4
 8002b92:	b2c9      	uxtb	r1, r1
 8002b94:	f100 4060 	add.w	r0, r0, #3758096384	; 0xe0000000
 8002b98:	f500 4061 	add.w	r0, r0, #57600	; 0xe100
 8002b9c:	f880 1300 	strb.w	r1, [r0, #768]	; 0x300
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 8002ba0:	bc30      	pop	{r4, r5}
 8002ba2:	4770      	bx	lr
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002ba4:	2300      	movs	r3, #0
 8002ba6:	e7e5      	b.n	8002b74 <HAL_NVIC_SetPriority+0x1c>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002ba8:	f000 000f 	and.w	r0, r0, #15
 8002bac:	0109      	lsls	r1, r1, #4
 8002bae:	b2c9      	uxtb	r1, r1
 8002bb0:	4b02      	ldr	r3, [pc, #8]	; (8002bbc <HAL_NVIC_SetPriority+0x64>)
 8002bb2:	5419      	strb	r1, [r3, r0]
 8002bb4:	e7f4      	b.n	8002ba0 <HAL_NVIC_SetPriority+0x48>
 8002bb6:	bf00      	nop
 8002bb8:	e000ed00 	.word	0xe000ed00
 8002bbc:	e000ed14 	.word	0xe000ed14

08002bc0 <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 8002bc0:	2800      	cmp	r0, #0
 8002bc2:	db07      	blt.n	8002bd4 <HAL_NVIC_EnableIRQ+0x14>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002bc4:	f000 021f 	and.w	r2, r0, #31
 8002bc8:	0940      	lsrs	r0, r0, #5
 8002bca:	2301      	movs	r3, #1
 8002bcc:	4093      	lsls	r3, r2
 8002bce:	4a02      	ldr	r2, [pc, #8]	; (8002bd8 <HAL_NVIC_EnableIRQ+0x18>)
 8002bd0:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 8002bd4:	4770      	bx	lr
 8002bd6:	bf00      	nop
 8002bd8:	e000e100 	.word	0xe000e100

08002bdc <HAL_NVIC_DisableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 8002bdc:	2800      	cmp	r0, #0
 8002bde:	db0c      	blt.n	8002bfa <HAL_NVIC_DisableIRQ+0x1e>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002be0:	f000 021f 	and.w	r2, r0, #31
 8002be4:	0940      	lsrs	r0, r0, #5
 8002be6:	2301      	movs	r3, #1
 8002be8:	4093      	lsls	r3, r2
 8002bea:	3020      	adds	r0, #32
 8002bec:	4a03      	ldr	r2, [pc, #12]	; (8002bfc <HAL_NVIC_DisableIRQ+0x20>)
 8002bee:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
 8002bf2:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8002bf6:	f3bf 8f6f 	isb	sy
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
}
 8002bfa:	4770      	bx	lr
 8002bfc:	e000e100 	.word	0xe000e100

08002c00 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002c00:	3801      	subs	r0, #1
 8002c02:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8002c06:	d20a      	bcs.n	8002c1e <HAL_SYSTICK_Config+0x1e>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002c08:	4b06      	ldr	r3, [pc, #24]	; (8002c24 <HAL_SYSTICK_Config+0x24>)
 8002c0a:	6058      	str	r0, [r3, #4]
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002c0c:	4a06      	ldr	r2, [pc, #24]	; (8002c28 <HAL_SYSTICK_Config+0x28>)
 8002c0e:	21f0      	movs	r1, #240	; 0xf0
 8002c10:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002c14:	2000      	movs	r0, #0
 8002c16:	6098      	str	r0, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002c18:	2207      	movs	r2, #7
 8002c1a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002c1c:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 8002c1e:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
  return SysTick_Config(TicksNumb);
}
 8002c20:	4770      	bx	lr
 8002c22:	bf00      	nop
 8002c24:	e000e010 	.word	0xe000e010
 8002c28:	e000ed00 	.word	0xe000ed00

08002c2c <HAL_NVIC_SetPendingIRQ>:
  if ((int32_t)(IRQn) >= 0)
 8002c2c:	2800      	cmp	r0, #0
 8002c2e:	db08      	blt.n	8002c42 <HAL_NVIC_SetPendingIRQ+0x16>
    NVIC->ISPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002c30:	f000 021f 	and.w	r2, r0, #31
 8002c34:	0940      	lsrs	r0, r0, #5
 8002c36:	2301      	movs	r3, #1
 8002c38:	4093      	lsls	r3, r2
 8002c3a:	3040      	adds	r0, #64	; 0x40
 8002c3c:	4a01      	ldr	r2, [pc, #4]	; (8002c44 <HAL_NVIC_SetPendingIRQ+0x18>)
 8002c3e:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Set interrupt pending */
  NVIC_SetPendingIRQ(IRQn);
}
 8002c42:	4770      	bx	lr
 8002c44:	e000e100 	.word	0xe000e100

08002c48 <HAL_NVIC_ClearPendingIRQ>:
  if ((int32_t)(IRQn) >= 0)
 8002c48:	2800      	cmp	r0, #0
 8002c4a:	db08      	blt.n	8002c5e <HAL_NVIC_ClearPendingIRQ+0x16>
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002c4c:	f000 021f 	and.w	r2, r0, #31
 8002c50:	0940      	lsrs	r0, r0, #5
 8002c52:	2301      	movs	r3, #1
 8002c54:	4093      	lsls	r3, r2
 8002c56:	3060      	adds	r0, #96	; 0x60
 8002c58:	4a01      	ldr	r2, [pc, #4]	; (8002c60 <HAL_NVIC_ClearPendingIRQ+0x18>)
 8002c5a:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Clear pending interrupt */
  NVIC_ClearPendingIRQ(IRQn);
}
 8002c5e:	4770      	bx	lr
 8002c60:	e000e100 	.word	0xe000e100

08002c64 <DMA_SetConfig>:
  * @param DstAddress The destination memory Buffer address
  * @param DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002c64:	b470      	push	{r4, r5, r6}
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8002c66:	6cc4      	ldr	r4, [r0, #76]	; 0x4c
 8002c68:	6d05      	ldr	r5, [r0, #80]	; 0x50
 8002c6a:	6065      	str	r5, [r4, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 8002c6c:	6d44      	ldr	r4, [r0, #84]	; 0x54
 8002c6e:	b114      	cbz	r4, 8002c76 <DMA_SetConfig+0x12>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8002c70:	6d84      	ldr	r4, [r0, #88]	; 0x58
 8002c72:	6dc5      	ldr	r5, [r0, #92]	; 0x5c
 8002c74:	6065      	str	r5, [r4, #4]
  }

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8002c76:	6c44      	ldr	r4, [r0, #68]	; 0x44
 8002c78:	f004 051c 	and.w	r5, r4, #28
 8002c7c:	6c06      	ldr	r6, [r0, #64]	; 0x40
 8002c7e:	2401      	movs	r4, #1
 8002c80:	40ac      	lsls	r4, r5
 8002c82:	6074      	str	r4, [r6, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8002c84:	6804      	ldr	r4, [r0, #0]
 8002c86:	6063      	str	r3, [r4, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002c88:	6883      	ldr	r3, [r0, #8]
 8002c8a:	2b10      	cmp	r3, #16
 8002c8c:	d005      	beq.n	8002c9a <DMA_SetConfig+0x36>
  }
  /* Peripheral to Memory */
  else
  {
    /* Configure DMA Channel source address */
    hdma->Instance->CPAR = SrcAddress;
 8002c8e:	6803      	ldr	r3, [r0, #0]
 8002c90:	6099      	str	r1, [r3, #8]

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
 8002c92:	6803      	ldr	r3, [r0, #0]
 8002c94:	60da      	str	r2, [r3, #12]
  }
}
 8002c96:	bc70      	pop	{r4, r5, r6}
 8002c98:	4770      	bx	lr
    hdma->Instance->CPAR = DstAddress;
 8002c9a:	6803      	ldr	r3, [r0, #0]
 8002c9c:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = SrcAddress;
 8002c9e:	6803      	ldr	r3, [r0, #0]
 8002ca0:	60d9      	str	r1, [r3, #12]
 8002ca2:	e7f8      	b.n	8002c96 <DMA_SetConfig+0x32>

08002ca4 <DMA_CalcDMAMUXChannelBaseAndMask>:
{
  uint32_t channel_number;

  /* check if instance is not outside the DMA channel range */
#if defined(DMA2)
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 8002ca4:	6803      	ldr	r3, [r0, #0]
 8002ca6:	4a10      	ldr	r2, [pc, #64]	; (8002ce8 <DMA_CalcDMAMUXChannelBaseAndMask+0x44>)
 8002ca8:	4293      	cmp	r3, r2
 8002caa:	d815      	bhi.n	8002cd8 <DMA_CalcDMAMUXChannelBaseAndMask+0x34>
  {
    /* DMA1 */
    hdma->DMAmuxChannel = (DMAMUX1_Channel0 + (hdma->ChannelIndex >> 2U));
 8002cac:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8002cae:	f022 0203 	bic.w	r2, r2, #3
 8002cb2:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
 8002cb6:	f502 3202 	add.w	r2, r2, #133120	; 0x20800
 8002cba:	6482      	str	r2, [r0, #72]	; 0x48
  }
#else
  /* DMA1 */
  hdma->DMAmuxChannel = (DMAMUX1_Channel0 + (hdma->ChannelIndex >> 2U));
#endif
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 8002cbc:	b2db      	uxtb	r3, r3
 8002cbe:	3b08      	subs	r3, #8
 8002cc0:	4a0a      	ldr	r2, [pc, #40]	; (8002cec <DMA_CalcDMAMUXChannelBaseAndMask+0x48>)
 8002cc2:	fba2 2303 	umull	r2, r3, r2, r3
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8002cc6:	4a0a      	ldr	r2, [pc, #40]	; (8002cf0 <DMA_CalcDMAMUXChannelBaseAndMask+0x4c>)
 8002cc8:	64c2      	str	r2, [r0, #76]	; 0x4c

  /* Initialize the field DMAmuxChannelStatusMask with the corresponding index of the DMAMUX channel selected for the current ChannelIndex */
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 8002cca:	f3c3 1304 	ubfx	r3, r3, #4, #5
 8002cce:	2201      	movs	r2, #1
 8002cd0:	fa02 f303 	lsl.w	r3, r2, r3
 8002cd4:	6503      	str	r3, [r0, #80]	; 0x50
}
 8002cd6:	4770      	bx	lr
    hdma->DMAmuxChannel = (DMAMUX1_Channel7 + (hdma->ChannelIndex >> 2U));
 8002cd8:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8002cda:	f022 0103 	bic.w	r1, r2, #3
 8002cde:	4a05      	ldr	r2, [pc, #20]	; (8002cf4 <DMA_CalcDMAMUXChannelBaseAndMask+0x50>)
 8002ce0:	440a      	add	r2, r1
 8002ce2:	6482      	str	r2, [r0, #72]	; 0x48
 8002ce4:	e7ea      	b.n	8002cbc <DMA_CalcDMAMUXChannelBaseAndMask+0x18>
 8002ce6:	bf00      	nop
 8002ce8:	40020407 	.word	0x40020407
 8002cec:	cccccccd 	.word	0xcccccccd
 8002cf0:	40020880 	.word	0x40020880
 8002cf4:	4002081c 	.word	0x4002081c

08002cf8 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8002cf8:	6843      	ldr	r3, [r0, #4]
 8002cfa:	f003 033f 	and.w	r3, r3, #63	; 0x3f

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8002cfe:	4a07      	ldr	r2, [pc, #28]	; (8002d1c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x24>)
 8002d00:	441a      	add	r2, r3
 8002d02:	0092      	lsls	r2, r2, #2
 8002d04:	6542      	str	r2, [r0, #84]	; 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8002d06:	4a06      	ldr	r2, [pc, #24]	; (8002d20 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x28>)
 8002d08:	6582      	str	r2, [r0, #88]	; 0x58

  /* here "Request" is either DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR3, i.e. <= 4*/
  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x3U);
 8002d0a:	3b01      	subs	r3, #1
 8002d0c:	f003 0303 	and.w	r3, r3, #3
 8002d10:	2201      	movs	r2, #1
 8002d12:	fa02 f303 	lsl.w	r3, r2, r3
 8002d16:	65c3      	str	r3, [r0, #92]	; 0x5c
}
 8002d18:	4770      	bx	lr
 8002d1a:	bf00      	nop
 8002d1c:	1000823f 	.word	0x1000823f
 8002d20:	40020940 	.word	0x40020940

08002d24 <HAL_DMA_Init>:
  if (hdma == NULL)
 8002d24:	2800      	cmp	r0, #0
 8002d26:	d05d      	beq.n	8002de4 <HAL_DMA_Init+0xc0>
{
 8002d28:	b510      	push	{r4, lr}
 8002d2a:	4604      	mov	r4, r0
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8002d2c:	6801      	ldr	r1, [r0, #0]
 8002d2e:	4b2e      	ldr	r3, [pc, #184]	; (8002de8 <HAL_DMA_Init+0xc4>)
 8002d30:	4299      	cmp	r1, r3
 8002d32:	d83f      	bhi.n	8002db4 <HAL_DMA_Init+0x90>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8002d34:	4b2d      	ldr	r3, [pc, #180]	; (8002dec <HAL_DMA_Init+0xc8>)
 8002d36:	440b      	add	r3, r1
 8002d38:	4a2d      	ldr	r2, [pc, #180]	; (8002df0 <HAL_DMA_Init+0xcc>)
 8002d3a:	fba2 2303 	umull	r2, r3, r2, r3
 8002d3e:	091b      	lsrs	r3, r3, #4
 8002d40:	009b      	lsls	r3, r3, #2
 8002d42:	6443      	str	r3, [r0, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 8002d44:	4b2b      	ldr	r3, [pc, #172]	; (8002df4 <HAL_DMA_Init+0xd0>)
 8002d46:	6403      	str	r3, [r0, #64]	; 0x40
  hdma->State = HAL_DMA_STATE_BUSY;
 8002d48:	2302      	movs	r3, #2
 8002d4a:	f884 3025 	strb.w	r3, [r4, #37]	; 0x25
  tmp = hdma->Instance->CCR;
 8002d4e:	680a      	ldr	r2, [r1, #0]
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8002d50:	f422 42ff 	bic.w	r2, r2, #32640	; 0x7f80
 8002d54:	f022 0270 	bic.w	r2, r2, #112	; 0x70
  tmp |=  hdma->Init.Direction        |
 8002d58:	68a3      	ldr	r3, [r4, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002d5a:	68e0      	ldr	r0, [r4, #12]
  tmp |=  hdma->Init.Direction        |
 8002d5c:	4303      	orrs	r3, r0
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002d5e:	6920      	ldr	r0, [r4, #16]
 8002d60:	4303      	orrs	r3, r0
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002d62:	6960      	ldr	r0, [r4, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002d64:	4303      	orrs	r3, r0
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002d66:	69a0      	ldr	r0, [r4, #24]
 8002d68:	4303      	orrs	r3, r0
          hdma->Init.Mode                | hdma->Init.Priority;
 8002d6a:	69e0      	ldr	r0, [r4, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002d6c:	4303      	orrs	r3, r0
          hdma->Init.Mode                | hdma->Init.Priority;
 8002d6e:	6a20      	ldr	r0, [r4, #32]
 8002d70:	4303      	orrs	r3, r0
  tmp |=  hdma->Init.Direction        |
 8002d72:	4313      	orrs	r3, r2
  hdma->Instance->CCR = tmp;
 8002d74:	600b      	str	r3, [r1, #0]
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8002d76:	4620      	mov	r0, r4
 8002d78:	f7ff ff94 	bl	8002ca4 <DMA_CalcDMAMUXChannelBaseAndMask>
  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8002d7c:	68a3      	ldr	r3, [r4, #8]
 8002d7e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002d82:	d022      	beq.n	8002dca <HAL_DMA_Init+0xa6>
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8002d84:	6863      	ldr	r3, [r4, #4]
 8002d86:	6ca2      	ldr	r2, [r4, #72]	; 0x48
 8002d88:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002d8c:	6013      	str	r3, [r2, #0]
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8002d8e:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 8002d90:	6d22      	ldr	r2, [r4, #80]	; 0x50
 8002d92:	605a      	str	r2, [r3, #4]
  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8002d94:	6863      	ldr	r3, [r4, #4]
 8002d96:	3b01      	subs	r3, #1
 8002d98:	2b03      	cmp	r3, #3
 8002d9a:	d919      	bls.n	8002dd0 <HAL_DMA_Init+0xac>
    hdma->DMAmuxRequestGen = 0U;
 8002d9c:	2300      	movs	r3, #0
 8002d9e:	6563      	str	r3, [r4, #84]	; 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 8002da0:	65a3      	str	r3, [r4, #88]	; 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 8002da2:	65e3      	str	r3, [r4, #92]	; 0x5c
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002da4:	2000      	movs	r0, #0
 8002da6:	63e0      	str	r0, [r4, #60]	; 0x3c
  hdma->State  = HAL_DMA_STATE_READY;
 8002da8:	2301      	movs	r3, #1
 8002daa:	f884 3025 	strb.w	r3, [r4, #37]	; 0x25
  hdma->Lock = HAL_UNLOCKED;
 8002dae:	f884 0024 	strb.w	r0, [r4, #36]	; 0x24
}
 8002db2:	bd10      	pop	{r4, pc}
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 8002db4:	4b10      	ldr	r3, [pc, #64]	; (8002df8 <HAL_DMA_Init+0xd4>)
 8002db6:	440b      	add	r3, r1
 8002db8:	4a0d      	ldr	r2, [pc, #52]	; (8002df0 <HAL_DMA_Init+0xcc>)
 8002dba:	fba2 2303 	umull	r2, r3, r2, r3
 8002dbe:	091b      	lsrs	r3, r3, #4
 8002dc0:	009b      	lsls	r3, r3, #2
 8002dc2:	6443      	str	r3, [r0, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 8002dc4:	4b0d      	ldr	r3, [pc, #52]	; (8002dfc <HAL_DMA_Init+0xd8>)
 8002dc6:	6403      	str	r3, [r0, #64]	; 0x40
 8002dc8:	e7be      	b.n	8002d48 <HAL_DMA_Init+0x24>
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8002dca:	2300      	movs	r3, #0
 8002dcc:	6063      	str	r3, [r4, #4]
 8002dce:	e7d9      	b.n	8002d84 <HAL_DMA_Init+0x60>
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8002dd0:	4620      	mov	r0, r4
 8002dd2:	f7ff ff91 	bl	8002cf8 <DMA_CalcDMAMUXRequestGenBaseAndMask>
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8002dd6:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8002dd8:	2200      	movs	r2, #0
 8002dda:	601a      	str	r2, [r3, #0]
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8002ddc:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8002dde:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 8002de0:	605a      	str	r2, [r3, #4]
 8002de2:	e7df      	b.n	8002da4 <HAL_DMA_Init+0x80>
    return HAL_ERROR;
 8002de4:	2001      	movs	r0, #1
}
 8002de6:	4770      	bx	lr
 8002de8:	40020407 	.word	0x40020407
 8002dec:	bffdfff8 	.word	0xbffdfff8
 8002df0:	cccccccd 	.word	0xcccccccd
 8002df4:	40020000 	.word	0x40020000
 8002df8:	bffdfbf8 	.word	0xbffdfbf8
 8002dfc:	40020400 	.word	0x40020400

08002e00 <HAL_DMA_Start_IT>:
{
 8002e00:	b538      	push	{r3, r4, r5, lr}
 8002e02:	4604      	mov	r4, r0
  __HAL_LOCK(hdma);
 8002e04:	f890 0024 	ldrb.w	r0, [r0, #36]	; 0x24
 8002e08:	2801      	cmp	r0, #1
 8002e0a:	d041      	beq.n	8002e90 <HAL_DMA_Start_IT+0x90>
 8002e0c:	2001      	movs	r0, #1
 8002e0e:	f884 0024 	strb.w	r0, [r4, #36]	; 0x24
  if (HAL_DMA_STATE_READY == hdma->State)
 8002e12:	f894 0025 	ldrb.w	r0, [r4, #37]	; 0x25
 8002e16:	b2c0      	uxtb	r0, r0
 8002e18:	2801      	cmp	r0, #1
 8002e1a:	d004      	beq.n	8002e26 <HAL_DMA_Start_IT+0x26>
    __HAL_UNLOCK(hdma);
 8002e1c:	2300      	movs	r3, #0
 8002e1e:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24
    status = HAL_BUSY;
 8002e22:	2002      	movs	r0, #2
}
 8002e24:	bd38      	pop	{r3, r4, r5, pc}
    hdma->State = HAL_DMA_STATE_BUSY;
 8002e26:	2002      	movs	r0, #2
 8002e28:	f884 0025 	strb.w	r0, [r4, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002e2c:	2000      	movs	r0, #0
 8002e2e:	63e0      	str	r0, [r4, #60]	; 0x3c
    __HAL_DMA_DISABLE(hdma);
 8002e30:	6825      	ldr	r5, [r4, #0]
 8002e32:	6828      	ldr	r0, [r5, #0]
 8002e34:	f020 0001 	bic.w	r0, r0, #1
 8002e38:	6028      	str	r0, [r5, #0]
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002e3a:	4620      	mov	r0, r4
 8002e3c:	f7ff ff12 	bl	8002c64 <DMA_SetConfig>
    if (NULL != hdma->XferHalfCpltCallback)
 8002e40:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8002e42:	b1d3      	cbz	r3, 8002e7a <HAL_DMA_Start_IT+0x7a>
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002e44:	6822      	ldr	r2, [r4, #0]
 8002e46:	6813      	ldr	r3, [r2, #0]
 8002e48:	f043 030e 	orr.w	r3, r3, #14
 8002e4c:	6013      	str	r3, [r2, #0]
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8002e4e:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 8002e50:	681a      	ldr	r2, [r3, #0]
 8002e52:	f412 3f80 	tst.w	r2, #65536	; 0x10000
 8002e56:	d003      	beq.n	8002e60 <HAL_DMA_Start_IT+0x60>
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8002e58:	681a      	ldr	r2, [r3, #0]
 8002e5a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002e5e:	601a      	str	r2, [r3, #0]
    if (hdma->DMAmuxRequestGen != 0U)
 8002e60:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8002e62:	b11b      	cbz	r3, 8002e6c <HAL_DMA_Start_IT+0x6c>
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8002e64:	681a      	ldr	r2, [r3, #0]
 8002e66:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002e6a:	601a      	str	r2, [r3, #0]
    __HAL_DMA_ENABLE(hdma);
 8002e6c:	6822      	ldr	r2, [r4, #0]
 8002e6e:	6813      	ldr	r3, [r2, #0]
 8002e70:	f043 0301 	orr.w	r3, r3, #1
 8002e74:	6013      	str	r3, [r2, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002e76:	2000      	movs	r0, #0
 8002e78:	e7d4      	b.n	8002e24 <HAL_DMA_Start_IT+0x24>
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8002e7a:	6822      	ldr	r2, [r4, #0]
 8002e7c:	6813      	ldr	r3, [r2, #0]
 8002e7e:	f023 0304 	bic.w	r3, r3, #4
 8002e82:	6013      	str	r3, [r2, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8002e84:	6822      	ldr	r2, [r4, #0]
 8002e86:	6813      	ldr	r3, [r2, #0]
 8002e88:	f043 030a 	orr.w	r3, r3, #10
 8002e8c:	6013      	str	r3, [r2, #0]
 8002e8e:	e7de      	b.n	8002e4e <HAL_DMA_Start_IT+0x4e>
  __HAL_LOCK(hdma);
 8002e90:	2002      	movs	r0, #2
 8002e92:	e7c7      	b.n	8002e24 <HAL_DMA_Start_IT+0x24>

08002e94 <HAL_DMA_Abort>:
  if (NULL == hdma)
 8002e94:	4603      	mov	r3, r0
 8002e96:	2800      	cmp	r0, #0
 8002e98:	d034      	beq.n	8002f04 <HAL_DMA_Abort+0x70>
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002e9a:	f890 2025 	ldrb.w	r2, [r0, #37]	; 0x25
 8002e9e:	b2d2      	uxtb	r2, r2
 8002ea0:	2a02      	cmp	r2, #2
 8002ea2:	d006      	beq.n	8002eb2 <HAL_DMA_Abort+0x1e>
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002ea4:	2204      	movs	r2, #4
 8002ea6:	63c2      	str	r2, [r0, #60]	; 0x3c
    __HAL_UNLOCK(hdma);
 8002ea8:	2200      	movs	r2, #0
 8002eaa:	f880 2024 	strb.w	r2, [r0, #36]	; 0x24
    return HAL_ERROR;
 8002eae:	2001      	movs	r0, #1
 8002eb0:	4770      	bx	lr
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002eb2:	6801      	ldr	r1, [r0, #0]
 8002eb4:	680a      	ldr	r2, [r1, #0]
 8002eb6:	f022 020e 	bic.w	r2, r2, #14
 8002eba:	600a      	str	r2, [r1, #0]
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8002ebc:	6c81      	ldr	r1, [r0, #72]	; 0x48
 8002ebe:	680a      	ldr	r2, [r1, #0]
 8002ec0:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002ec4:	600a      	str	r2, [r1, #0]
    __HAL_DMA_DISABLE(hdma);
 8002ec6:	6801      	ldr	r1, [r0, #0]
 8002ec8:	680a      	ldr	r2, [r1, #0]
 8002eca:	f022 0201 	bic.w	r2, r2, #1
 8002ece:	600a      	str	r2, [r1, #0]
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8002ed0:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8002ed2:	f002 011c 	and.w	r1, r2, #28
 8002ed6:	6c00      	ldr	r0, [r0, #64]	; 0x40
 8002ed8:	2201      	movs	r2, #1
 8002eda:	408a      	lsls	r2, r1
 8002edc:	6042      	str	r2, [r0, #4]
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8002ede:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8002ee0:	6d19      	ldr	r1, [r3, #80]	; 0x50
 8002ee2:	6051      	str	r1, [r2, #4]
    if (hdma->DMAmuxRequestGen != 0U)
 8002ee4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8002ee6:	b132      	cbz	r2, 8002ef6 <HAL_DMA_Abort+0x62>
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8002ee8:	6811      	ldr	r1, [r2, #0]
 8002eea:	f421 7180 	bic.w	r1, r1, #256	; 0x100
 8002eee:	6011      	str	r1, [r2, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8002ef0:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8002ef2:	6dd9      	ldr	r1, [r3, #92]	; 0x5c
 8002ef4:	6051      	str	r1, [r2, #4]
    hdma->State = HAL_DMA_STATE_READY;
 8002ef6:	2201      	movs	r2, #1
 8002ef8:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    __HAL_UNLOCK(hdma);
 8002efc:	2000      	movs	r0, #0
 8002efe:	f883 0024 	strb.w	r0, [r3, #36]	; 0x24
  return HAL_OK;
 8002f02:	4770      	bx	lr
    return HAL_ERROR;
 8002f04:	2001      	movs	r0, #1
}
 8002f06:	4770      	bx	lr

08002f08 <HAL_DMA_Abort_IT>:
{
 8002f08:	b508      	push	{r3, lr}
  if (HAL_DMA_STATE_BUSY != hdma->State)
 8002f0a:	f890 3025 	ldrb.w	r3, [r0, #37]	; 0x25
 8002f0e:	b2db      	uxtb	r3, r3
 8002f10:	2b02      	cmp	r3, #2
 8002f12:	d003      	beq.n	8002f1c <HAL_DMA_Abort_IT+0x14>
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002f14:	2304      	movs	r3, #4
 8002f16:	63c3      	str	r3, [r0, #60]	; 0x3c
    status = HAL_ERROR;
 8002f18:	2001      	movs	r0, #1
}
 8002f1a:	bd08      	pop	{r3, pc}
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002f1c:	6802      	ldr	r2, [r0, #0]
 8002f1e:	6813      	ldr	r3, [r2, #0]
 8002f20:	f023 030e 	bic.w	r3, r3, #14
 8002f24:	6013      	str	r3, [r2, #0]
    __HAL_DMA_DISABLE(hdma);
 8002f26:	6802      	ldr	r2, [r0, #0]
 8002f28:	6813      	ldr	r3, [r2, #0]
 8002f2a:	f023 0301 	bic.w	r3, r3, #1
 8002f2e:	6013      	str	r3, [r2, #0]
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8002f30:	6c82      	ldr	r2, [r0, #72]	; 0x48
 8002f32:	6813      	ldr	r3, [r2, #0]
 8002f34:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002f38:	6013      	str	r3, [r2, #0]
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8002f3a:	6c43      	ldr	r3, [r0, #68]	; 0x44
 8002f3c:	f003 021c 	and.w	r2, r3, #28
 8002f40:	6c01      	ldr	r1, [r0, #64]	; 0x40
 8002f42:	2301      	movs	r3, #1
 8002f44:	4093      	lsls	r3, r2
 8002f46:	604b      	str	r3, [r1, #4]
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8002f48:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
 8002f4a:	6d02      	ldr	r2, [r0, #80]	; 0x50
 8002f4c:	605a      	str	r2, [r3, #4]
    if (hdma->DMAmuxRequestGen != 0U)
 8002f4e:	6d43      	ldr	r3, [r0, #84]	; 0x54
 8002f50:	b133      	cbz	r3, 8002f60 <HAL_DMA_Abort_IT+0x58>
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8002f52:	681a      	ldr	r2, [r3, #0]
 8002f54:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002f58:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8002f5a:	6d83      	ldr	r3, [r0, #88]	; 0x58
 8002f5c:	6dc2      	ldr	r2, [r0, #92]	; 0x5c
 8002f5e:	605a      	str	r2, [r3, #4]
    hdma->State = HAL_DMA_STATE_READY;
 8002f60:	2301      	movs	r3, #1
 8002f62:	f880 3025 	strb.w	r3, [r0, #37]	; 0x25
    __HAL_UNLOCK(hdma);
 8002f66:	2300      	movs	r3, #0
 8002f68:	f880 3024 	strb.w	r3, [r0, #36]	; 0x24
    if (hdma->XferAbortCallback != NULL)
 8002f6c:	6b83      	ldr	r3, [r0, #56]	; 0x38
 8002f6e:	b113      	cbz	r3, 8002f76 <HAL_DMA_Abort_IT+0x6e>
      hdma->XferAbortCallback(hdma);
 8002f70:	4798      	blx	r3
  HAL_StatusTypeDef status = HAL_OK;
 8002f72:	2000      	movs	r0, #0
 8002f74:	e7d1      	b.n	8002f1a <HAL_DMA_Abort_IT+0x12>
 8002f76:	2000      	movs	r0, #0
 8002f78:	e7cf      	b.n	8002f1a <HAL_DMA_Abort_IT+0x12>

08002f7a <HAL_DMA_IRQHandler>:
{
 8002f7a:	b538      	push	{r3, r4, r5, lr}
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8002f7c:	6c03      	ldr	r3, [r0, #64]	; 0x40
 8002f7e:	6819      	ldr	r1, [r3, #0]
  uint32_t source_it = hdma->Instance->CCR;
 8002f80:	6804      	ldr	r4, [r0, #0]
 8002f82:	6825      	ldr	r5, [r4, #0]
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1cU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 8002f84:	6c43      	ldr	r3, [r0, #68]	; 0x44
 8002f86:	f003 031c 	and.w	r3, r3, #28
 8002f8a:	2204      	movs	r2, #4
 8002f8c:	409a      	lsls	r2, r3
 8002f8e:	420a      	tst	r2, r1
 8002f90:	d015      	beq.n	8002fbe <HAL_DMA_IRQHandler+0x44>
 8002f92:	f015 0f04 	tst.w	r5, #4
 8002f96:	d012      	beq.n	8002fbe <HAL_DMA_IRQHandler+0x44>
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002f98:	6823      	ldr	r3, [r4, #0]
 8002f9a:	f013 0f20 	tst.w	r3, #32
 8002f9e:	d103      	bne.n	8002fa8 <HAL_DMA_IRQHandler+0x2e>
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8002fa0:	6823      	ldr	r3, [r4, #0]
 8002fa2:	f023 0304 	bic.w	r3, r3, #4
 8002fa6:	6023      	str	r3, [r4, #0]
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU));
 8002fa8:	6c43      	ldr	r3, [r0, #68]	; 0x44
 8002faa:	f003 021c 	and.w	r2, r3, #28
 8002fae:	6c01      	ldr	r1, [r0, #64]	; 0x40
 8002fb0:	2304      	movs	r3, #4
 8002fb2:	4093      	lsls	r3, r2
 8002fb4:	604b      	str	r3, [r1, #4]
    if (hdma->XferHalfCpltCallback != NULL)
 8002fb6:	6b03      	ldr	r3, [r0, #48]	; 0x30
 8002fb8:	b103      	cbz	r3, 8002fbc <HAL_DMA_IRQHandler+0x42>
      hdma->XferHalfCpltCallback(hdma);
 8002fba:	4798      	blx	r3
}
 8002fbc:	bd38      	pop	{r3, r4, r5, pc}
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1cU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 8002fbe:	2202      	movs	r2, #2
 8002fc0:	409a      	lsls	r2, r3
 8002fc2:	420a      	tst	r2, r1
 8002fc4:	d01c      	beq.n	8003000 <HAL_DMA_IRQHandler+0x86>
 8002fc6:	f015 0f02 	tst.w	r5, #2
 8002fca:	d019      	beq.n	8003000 <HAL_DMA_IRQHandler+0x86>
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002fcc:	6823      	ldr	r3, [r4, #0]
 8002fce:	f013 0f20 	tst.w	r3, #32
 8002fd2:	d106      	bne.n	8002fe2 <HAL_DMA_IRQHandler+0x68>
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8002fd4:	6823      	ldr	r3, [r4, #0]
 8002fd6:	f023 030a 	bic.w	r3, r3, #10
 8002fda:	6023      	str	r3, [r4, #0]
      hdma->State = HAL_DMA_STATE_READY;
 8002fdc:	2301      	movs	r3, #1
 8002fde:	f880 3025 	strb.w	r3, [r0, #37]	; 0x25
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1cU));
 8002fe2:	6c43      	ldr	r3, [r0, #68]	; 0x44
 8002fe4:	f003 021c 	and.w	r2, r3, #28
 8002fe8:	6c01      	ldr	r1, [r0, #64]	; 0x40
 8002fea:	2302      	movs	r3, #2
 8002fec:	4093      	lsls	r3, r2
 8002fee:	604b      	str	r3, [r1, #4]
    __HAL_UNLOCK(hdma);
 8002ff0:	2300      	movs	r3, #0
 8002ff2:	f880 3024 	strb.w	r3, [r0, #36]	; 0x24
    if (hdma->XferCpltCallback != NULL)
 8002ff6:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 8002ff8:	2b00      	cmp	r3, #0
 8002ffa:	d0df      	beq.n	8002fbc <HAL_DMA_IRQHandler+0x42>
      hdma->XferCpltCallback(hdma);
 8002ffc:	4798      	blx	r3
 8002ffe:	e7dd      	b.n	8002fbc <HAL_DMA_IRQHandler+0x42>
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1cU)))!= 0U) && ((source_it & DMA_IT_TE) != 0U))
 8003000:	2208      	movs	r2, #8
 8003002:	fa02 f303 	lsl.w	r3, r2, r3
 8003006:	420b      	tst	r3, r1
 8003008:	d0d8      	beq.n	8002fbc <HAL_DMA_IRQHandler+0x42>
 800300a:	f015 0f08 	tst.w	r5, #8
 800300e:	d0d5      	beq.n	8002fbc <HAL_DMA_IRQHandler+0x42>
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003010:	6823      	ldr	r3, [r4, #0]
 8003012:	f023 030e 	bic.w	r3, r3, #14
 8003016:	6023      	str	r3, [r4, #0]
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8003018:	6c43      	ldr	r3, [r0, #68]	; 0x44
 800301a:	f003 031c 	and.w	r3, r3, #28
 800301e:	6c01      	ldr	r1, [r0, #64]	; 0x40
 8003020:	2201      	movs	r2, #1
 8003022:	fa02 f303 	lsl.w	r3, r2, r3
 8003026:	604b      	str	r3, [r1, #4]
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8003028:	63c2      	str	r2, [r0, #60]	; 0x3c
    hdma->State = HAL_DMA_STATE_READY;
 800302a:	f880 2025 	strb.w	r2, [r0, #37]	; 0x25
    __HAL_UNLOCK(hdma);
 800302e:	2300      	movs	r3, #0
 8003030:	f880 3024 	strb.w	r3, [r0, #36]	; 0x24
    if (hdma->XferErrorCallback != NULL)
 8003034:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8003036:	2b00      	cmp	r3, #0
 8003038:	d0c0      	beq.n	8002fbc <HAL_DMA_IRQHandler+0x42>
      hdma->XferErrorCallback(hdma);
 800303a:	4798      	blx	r3
  return;
 800303c:	e7be      	b.n	8002fbc <HAL_DMA_IRQHandler+0x42>
	...

08003040 <HAL_GPIO_Init>:
  * @param GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003040:	b4f0      	push	{r4, r5, r6, r7}
  uint32_t position = 0x00u;
 8003042:	2300      	movs	r3, #0
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003044:	e05f      	b.n	8003106 <HAL_GPIO_Init+0xc6>
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8003046:	6886      	ldr	r6, [r0, #8]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8003048:	005f      	lsls	r7, r3, #1
 800304a:	2503      	movs	r5, #3
 800304c:	40bd      	lsls	r5, r7
 800304e:	ea26 0605 	bic.w	r6, r6, r5
        temp |= (GPIO_Init->Speed << (position * 2u));
 8003052:	68cd      	ldr	r5, [r1, #12]
 8003054:	40bd      	lsls	r5, r7
 8003056:	4335      	orrs	r5, r6
        GPIOx->OSPEEDR = temp;
 8003058:	6085      	str	r5, [r0, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800305a:	6846      	ldr	r6, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800305c:	ea26 0604 	bic.w	r6, r6, r4
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003060:	684d      	ldr	r5, [r1, #4]
 8003062:	f3c5 1400 	ubfx	r4, r5, #4, #1
 8003066:	409c      	lsls	r4, r3
 8003068:	4334      	orrs	r4, r6
        GPIOx->OTYPER = temp;
 800306a:	6044      	str	r4, [r0, #4]
 800306c:	e059      	b.n	8003122 <HAL_GPIO_Init+0xe2>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800306e:	08dd      	lsrs	r5, r3, #3
 8003070:	3508      	adds	r5, #8
 8003072:	f850 7025 	ldr.w	r7, [r0, r5, lsl #2]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8003076:	f003 0407 	and.w	r4, r3, #7
 800307a:	00a6      	lsls	r6, r4, #2
 800307c:	240f      	movs	r4, #15
 800307e:	40b4      	lsls	r4, r6
 8003080:	ea27 0704 	bic.w	r7, r7, r4
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8003084:	690c      	ldr	r4, [r1, #16]
 8003086:	40b4      	lsls	r4, r6
 8003088:	433c      	orrs	r4, r7
        GPIOx->AFR[position >> 3u] = temp;
 800308a:	f840 4025 	str.w	r4, [r0, r5, lsl #2]
 800308e:	e05c      	b.n	800314a <HAL_GPIO_Init+0x10a>
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
      {
        temp = SYSCFG->EXTICR[position >> 2u];
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8003090:	2404      	movs	r4, #4
 8003092:	e000      	b.n	8003096 <HAL_GPIO_Init+0x56>
 8003094:	2400      	movs	r4, #0
 8003096:	40b4      	lsls	r4, r6
 8003098:	433c      	orrs	r4, r7
        SYSCFG->EXTICR[position >> 2u] = temp;
 800309a:	3502      	adds	r5, #2
 800309c:	4e47      	ldr	r6, [pc, #284]	; (80031bc <HAL_GPIO_Init+0x17c>)
 800309e:	f846 4025 	str.w	r4, [r6, r5, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80030a2:	4c47      	ldr	r4, [pc, #284]	; (80031c0 <HAL_GPIO_Init+0x180>)
 80030a4:	6825      	ldr	r5, [r4, #0]
        temp &= ~(iocurrent);
 80030a6:	43d4      	mvns	r4, r2
 80030a8:	ea25 0602 	bic.w	r6, r5, r2
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80030ac:	684f      	ldr	r7, [r1, #4]
 80030ae:	f417 1f80 	tst.w	r7, #1048576	; 0x100000
 80030b2:	d001      	beq.n	80030b8 <HAL_GPIO_Init+0x78>
        {
          temp |= iocurrent;
 80030b4:	ea42 0605 	orr.w	r6, r2, r5
        }
        EXTI->RTSR1 = temp;
 80030b8:	4d41      	ldr	r5, [pc, #260]	; (80031c0 <HAL_GPIO_Init+0x180>)
 80030ba:	602e      	str	r6, [r5, #0]

        temp = EXTI->FTSR1;
 80030bc:	686d      	ldr	r5, [r5, #4]
        temp &= ~(iocurrent);
 80030be:	ea04 0605 	and.w	r6, r4, r5
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80030c2:	684f      	ldr	r7, [r1, #4]
 80030c4:	f417 1f00 	tst.w	r7, #2097152	; 0x200000
 80030c8:	d001      	beq.n	80030ce <HAL_GPIO_Init+0x8e>
        {
          temp |= iocurrent;
 80030ca:	ea42 0605 	orr.w	r6, r2, r5
        }
        EXTI->FTSR1 = temp;
 80030ce:	4d3c      	ldr	r5, [pc, #240]	; (80031c0 <HAL_GPIO_Init+0x180>)
 80030d0:	606e      	str	r6, [r5, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 80030d2:	f8d5 5080 	ldr.w	r5, [r5, #128]	; 0x80
        temp &= ~(iocurrent);
 80030d6:	ea04 0605 	and.w	r6, r4, r5
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80030da:	684f      	ldr	r7, [r1, #4]
 80030dc:	f417 3f80 	tst.w	r7, #65536	; 0x10000
 80030e0:	d001      	beq.n	80030e6 <HAL_GPIO_Init+0xa6>
        {
          temp |= iocurrent;
 80030e2:	ea42 0605 	orr.w	r6, r2, r5
        }
        EXTI->IMR1 = temp;
 80030e6:	4d36      	ldr	r5, [pc, #216]	; (80031c0 <HAL_GPIO_Init+0x180>)
 80030e8:	f8c5 6080 	str.w	r6, [r5, #128]	; 0x80

        temp = EXTI->EMR1;
 80030ec:	f8d5 5084 	ldr.w	r5, [r5, #132]	; 0x84
        temp &= ~(iocurrent);
 80030f0:	402c      	ands	r4, r5
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80030f2:	684e      	ldr	r6, [r1, #4]
 80030f4:	f416 3f00 	tst.w	r6, #131072	; 0x20000
 80030f8:	d001      	beq.n	80030fe <HAL_GPIO_Init+0xbe>
        {
          temp |= iocurrent;
 80030fa:	ea42 0405 	orr.w	r4, r2, r5
        }
        EXTI->EMR1 = temp;
 80030fe:	4a30      	ldr	r2, [pc, #192]	; (80031c0 <HAL_GPIO_Init+0x180>)
 8003100:	f8c2 4084 	str.w	r4, [r2, #132]	; 0x84
      }
    }

    position++;
 8003104:	3301      	adds	r3, #1
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003106:	680a      	ldr	r2, [r1, #0]
 8003108:	fa32 f403 	lsrs.w	r4, r2, r3
 800310c:	d054      	beq.n	80031b8 <HAL_GPIO_Init+0x178>
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 800310e:	2401      	movs	r4, #1
 8003110:	409c      	lsls	r4, r3
    if (iocurrent != 0x00u)
 8003112:	4022      	ands	r2, r4
 8003114:	d0f6      	beq.n	8003104 <HAL_GPIO_Init+0xc4>
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8003116:	684d      	ldr	r5, [r1, #4]
 8003118:	f005 0503 	and.w	r5, r5, #3
 800311c:	3d01      	subs	r5, #1
 800311e:	2d01      	cmp	r5, #1
 8003120:	d991      	bls.n	8003046 <HAL_GPIO_Init+0x6>
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003122:	684c      	ldr	r4, [r1, #4]
 8003124:	f004 0403 	and.w	r4, r4, #3
 8003128:	2c03      	cmp	r4, #3
 800312a:	d009      	beq.n	8003140 <HAL_GPIO_Init+0x100>
        temp = GPIOx->PUPDR;
 800312c:	68c5      	ldr	r5, [r0, #12]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800312e:	005e      	lsls	r6, r3, #1
 8003130:	2403      	movs	r4, #3
 8003132:	40b4      	lsls	r4, r6
 8003134:	ea25 0504 	bic.w	r5, r5, r4
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003138:	688c      	ldr	r4, [r1, #8]
 800313a:	40b4      	lsls	r4, r6
 800313c:	432c      	orrs	r4, r5
        GPIOx->PUPDR = temp;
 800313e:	60c4      	str	r4, [r0, #12]
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003140:	684c      	ldr	r4, [r1, #4]
 8003142:	f004 0403 	and.w	r4, r4, #3
 8003146:	2c02      	cmp	r4, #2
 8003148:	d091      	beq.n	800306e <HAL_GPIO_Init+0x2e>
      temp = GPIOx->MODER;
 800314a:	6805      	ldr	r5, [r0, #0]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 800314c:	005e      	lsls	r6, r3, #1
 800314e:	2403      	movs	r4, #3
 8003150:	40b4      	lsls	r4, r6
 8003152:	ea25 0504 	bic.w	r5, r5, r4
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8003156:	684c      	ldr	r4, [r1, #4]
 8003158:	f004 0403 	and.w	r4, r4, #3
 800315c:	40b4      	lsls	r4, r6
 800315e:	432c      	orrs	r4, r5
      GPIOx->MODER = temp;
 8003160:	6004      	str	r4, [r0, #0]
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8003162:	684c      	ldr	r4, [r1, #4]
 8003164:	f414 3f40 	tst.w	r4, #196608	; 0x30000
 8003168:	d0cc      	beq.n	8003104 <HAL_GPIO_Init+0xc4>
        temp = SYSCFG->EXTICR[position >> 2u];
 800316a:	089d      	lsrs	r5, r3, #2
 800316c:	1cae      	adds	r6, r5, #2
 800316e:	4c13      	ldr	r4, [pc, #76]	; (80031bc <HAL_GPIO_Init+0x17c>)
 8003170:	f854 7026 	ldr.w	r7, [r4, r6, lsl #2]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8003174:	f003 0403 	and.w	r4, r3, #3
 8003178:	00a6      	lsls	r6, r4, #2
 800317a:	240f      	movs	r4, #15
 800317c:	40b4      	lsls	r4, r6
 800317e:	ea27 0704 	bic.w	r7, r7, r4
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8003182:	f1b0 4f90 	cmp.w	r0, #1207959552	; 0x48000000
 8003186:	d085      	beq.n	8003094 <HAL_GPIO_Init+0x54>
 8003188:	4c0e      	ldr	r4, [pc, #56]	; (80031c4 <HAL_GPIO_Init+0x184>)
 800318a:	42a0      	cmp	r0, r4
 800318c:	d00e      	beq.n	80031ac <HAL_GPIO_Init+0x16c>
 800318e:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 8003192:	42a0      	cmp	r0, r4
 8003194:	d00c      	beq.n	80031b0 <HAL_GPIO_Init+0x170>
 8003196:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 800319a:	42a0      	cmp	r0, r4
 800319c:	d00a      	beq.n	80031b4 <HAL_GPIO_Init+0x174>
 800319e:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 80031a2:	42a0      	cmp	r0, r4
 80031a4:	f43f af74 	beq.w	8003090 <HAL_GPIO_Init+0x50>
 80031a8:	2407      	movs	r4, #7
 80031aa:	e774      	b.n	8003096 <HAL_GPIO_Init+0x56>
 80031ac:	2401      	movs	r4, #1
 80031ae:	e772      	b.n	8003096 <HAL_GPIO_Init+0x56>
 80031b0:	2402      	movs	r4, #2
 80031b2:	e770      	b.n	8003096 <HAL_GPIO_Init+0x56>
 80031b4:	2403      	movs	r4, #3
 80031b6:	e76e      	b.n	8003096 <HAL_GPIO_Init+0x56>
  }
}
 80031b8:	bcf0      	pop	{r4, r5, r6, r7}
 80031ba:	4770      	bx	lr
 80031bc:	40010000 	.word	0x40010000
 80031c0:	58000800 	.word	0x58000800
 80031c4:	48000400 	.word	0x48000400

080031c8 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80031c8:	b10a      	cbz	r2, 80031ce <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80031ca:	6181      	str	r1, [r0, #24]
 80031cc:	4770      	bx	lr
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80031ce:	6281      	str	r1, [r0, #40]	; 0x28
  }
}
 80031d0:	4770      	bx	lr

080031d2 <HAL_HSEM_FreeCallback>:
  UNUSED(SemMask);

  /* NOTE : This function should not be modified, when the callback is needed,
  the HAL_HSEM_FreeCallback can be implemented in the user file
    */
}
 80031d2:	4770      	bx	lr

080031d4 <HAL_HSEM_IRQHandler>:
{
 80031d4:	b508      	push	{r3, lr}
  statusreg = HSEM_COMMON->MISR;
 80031d6:	4b05      	ldr	r3, [pc, #20]	; (80031ec <HAL_HSEM_IRQHandler+0x18>)
 80031d8:	68d8      	ldr	r0, [r3, #12]
  HSEM_COMMON->IER &= ~((uint32_t)statusreg);
 80031da:	681a      	ldr	r2, [r3, #0]
 80031dc:	ea22 0200 	bic.w	r2, r2, r0
 80031e0:	601a      	str	r2, [r3, #0]
  HSEM_COMMON->ICR = ((uint32_t)statusreg);
 80031e2:	6058      	str	r0, [r3, #4]
  HAL_HSEM_FreeCallback(statusreg);
 80031e4:	f7ff fff5 	bl	80031d2 <HAL_HSEM_FreeCallback>
}
 80031e8:	bd08      	pop	{r3, pc}
 80031ea:	bf00      	nop
 80031ec:	58001500 	.word	0x58001500

080031f0 <HAL_IPCC_RxCallback>:
  UNUSED(ChannelDir);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_IPCC_RxCallback can be implemented in the user file
   */
}
 80031f0:	4770      	bx	lr

080031f2 <HAL_IPCC_TxCallback>:
  UNUSED(ChannelDir);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_IPCC_TxCallback can be implemented in the user file
   */
}
 80031f2:	4770      	bx	lr

080031f4 <IPCC_SetDefaultCallbacks>:
  */
void IPCC_SetDefaultCallbacks(IPCC_HandleTypeDef *hipcc)
{
  uint32_t i;
  /* Set all callbacks to default */
  for (i = 0; i < IPCC_CHANNEL_NUMBER; i++)
 80031f4:	2300      	movs	r3, #0
 80031f6:	2b05      	cmp	r3, #5
 80031f8:	d80a      	bhi.n	8003210 <IPCC_SetDefaultCallbacks+0x1c>
  {
    hipcc->ChannelCallbackRx[i] = HAL_IPCC_RxCallback;
 80031fa:	eb00 0283 	add.w	r2, r0, r3, lsl #2
 80031fe:	4905      	ldr	r1, [pc, #20]	; (8003214 <IPCC_SetDefaultCallbacks+0x20>)
 8003200:	6051      	str	r1, [r2, #4]
    hipcc->ChannelCallbackTx[i] = HAL_IPCC_TxCallback;
 8003202:	1d9a      	adds	r2, r3, #6
 8003204:	eb00 0282 	add.w	r2, r0, r2, lsl #2
 8003208:	4903      	ldr	r1, [pc, #12]	; (8003218 <IPCC_SetDefaultCallbacks+0x24>)
 800320a:	6051      	str	r1, [r2, #4]
  for (i = 0; i < IPCC_CHANNEL_NUMBER; i++)
 800320c:	3301      	adds	r3, #1
 800320e:	e7f2      	b.n	80031f6 <IPCC_SetDefaultCallbacks+0x2>
  }
}
 8003210:	4770      	bx	lr
 8003212:	bf00      	nop
 8003214:	080031f1 	.word	0x080031f1
 8003218:	080031f3 	.word	0x080031f3

0800321c <IPCC_Reset_Register>:
  * @param  Instance pointer to register
  */
void IPCC_Reset_Register(IPCC_CommonTypeDef *Instance)
{
  /* Disable RX and TX interrupts */
  Instance->CR  = 0x00000000U;
 800321c:	2300      	movs	r3, #0
 800321e:	6003      	str	r3, [r0, #0]

  /* Mask RX and TX interrupts */
  Instance->MR  = (IPCC_ALL_TX_BUF | IPCC_ALL_RX_BUF);
 8003220:	f04f 133f 	mov.w	r3, #4128831	; 0x3f003f
 8003224:	6043      	str	r3, [r0, #4]

  /* Clear RX status */
  Instance->SCR = IPCC_ALL_RX_BUF;
 8003226:	233f      	movs	r3, #63	; 0x3f
 8003228:	6083      	str	r3, [r0, #8]
}
 800322a:	4770      	bx	lr

0800322c <HAL_IPCC_Init>:
  if (hipcc != NULL)
 800322c:	b1c0      	cbz	r0, 8003260 <HAL_IPCC_Init+0x34>
{
 800322e:	b538      	push	{r3, r4, r5, lr}
 8003230:	4604      	mov	r4, r0
    if (hipcc->State == HAL_IPCC_STATE_RESET)
 8003232:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38
 8003236:	b183      	cbz	r3, 800325a <HAL_IPCC_Init+0x2e>
    IPCC_Reset_Register(currentInstance);
 8003238:	4d0a      	ldr	r5, [pc, #40]	; (8003264 <HAL_IPCC_Init+0x38>)
 800323a:	4628      	mov	r0, r5
 800323c:	f7ff ffee 	bl	800321c <IPCC_Reset_Register>
    currentInstance->CR |= (IPCC_CR_RXOIE | IPCC_CR_TXFIE);
 8003240:	682b      	ldr	r3, [r5, #0]
 8003242:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 8003246:	602b      	str	r3, [r5, #0]
    IPCC_SetDefaultCallbacks(hipcc);
 8003248:	4620      	mov	r0, r4
 800324a:	f7ff ffd3 	bl	80031f4 <IPCC_SetDefaultCallbacks>
    hipcc->callbackRequest = 0;
 800324e:	2000      	movs	r0, #0
 8003250:	6360      	str	r0, [r4, #52]	; 0x34
    hipcc->State = HAL_IPCC_STATE_READY;
 8003252:	2301      	movs	r3, #1
 8003254:	f884 3038 	strb.w	r3, [r4, #56]	; 0x38
}
 8003258:	bd38      	pop	{r3, r4, r5, pc}
      HAL_IPCC_MspInit(hipcc);
 800325a:	f7fe fb59 	bl	8001910 <HAL_IPCC_MspInit>
 800325e:	e7eb      	b.n	8003238 <HAL_IPCC_Init+0xc>
    err = HAL_ERROR;
 8003260:	2001      	movs	r0, #1
}
 8003262:	4770      	bx	lr
 8003264:	58000c00 	.word	0x58000c00

08003268 <HAL_PWR_EnableBkUpAccess>:
  *         back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003268:	4a02      	ldr	r2, [pc, #8]	; (8003274 <HAL_PWR_EnableBkUpAccess+0xc>)
 800326a:	6813      	ldr	r3, [r2, #0]
 800326c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003270:	6013      	str	r3, [r2, #0]
}
 8003272:	4770      	bx	lr
 8003274:	58000400 	.word	0x58000400

08003278 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_RANGE1 or PWR_REGULATOR_VOLTAGE_RANGE2)
  */  
uint32_t HAL_PWREx_GetVoltageRange(void)
{
  return  (PWR->CR1 & PWR_CR1_VOS);
 8003278:	4b02      	ldr	r3, [pc, #8]	; (8003284 <HAL_PWREx_GetVoltageRange+0xc>)
 800327a:	6818      	ldr	r0, [r3, #0]
}
 800327c:	f400 60c0 	and.w	r0, r0, #1536	; 0x600
 8003280:	4770      	bx	lr
 8003282:	bf00      	nop
 8003284:	58000400 	.word	0x58000400

08003288 <RCC_SetFlashLatency>:
  * @param  Flash_ClkSrcFreq  Flash Clock Source (in MHz)
  * @param  VCORE_Voltage     Current Vcore voltage (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2)
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatency(uint32_t Flash_ClkSrcFreq, uint32_t VCORE_Voltage)
{
 8003288:	b5f0      	push	{r4, r5, r6, r7, lr}
 800328a:	b08d      	sub	sp, #52	; 0x34
 800328c:	4605      	mov	r5, r0
 800328e:	460f      	mov	r7, r1
  /* Flash Clock source (HCLK4) range in MHz with a VCORE is range1 */
  const uint32_t FLASH_CLK_SRC_RANGE_VOS1[] = {18UL, 36UL, 54UL, 64UL};
 8003290:	4c2a      	ldr	r4, [pc, #168]	; (800333c <RCC_SetFlashLatency+0xb4>)
 8003292:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8003296:	ae0c      	add	r6, sp, #48	; 0x30
 8003298:	e906 000f 	stmdb	r6, {r0, r1, r2, r3}
#if defined(PWR_CR1_VOS)
  /* Flash Clock source (HCLK4) range in MHz with a VCORE is range2 */
  const uint32_t FLASH_CLK_SRC_RANGE_VOS2[] = {6UL, 12UL, 16UL};
 800329c:	ab05      	add	r3, sp, #20
 800329e:	f104 0210 	add.w	r2, r4, #16
 80032a2:	ca07      	ldmia	r2, {r0, r1, r2}
 80032a4:	e883 0007 	stmia.w	r3, {r0, r1, r2}
#endif
  /* Flash Latency range */
  const uint32_t FLASH_LATENCY_RANGE[] = {FLASH_LATENCY_0, FLASH_LATENCY_1, FLASH_LATENCY_2, FLASH_LATENCY_3};
 80032a8:	ae01      	add	r6, sp, #4
 80032aa:	341c      	adds	r4, #28
 80032ac:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 80032b0:	e886 000f 	stmia.w	r6, {r0, r1, r2, r3}
  uint32_t latency   = FLASH_LATENCY_0;  /* default value 0WS */
  uint32_t tickstart;

#if defined(PWR_CR1_VOS)
  if (VCORE_Voltage == PWR_REGULATOR_VOLTAGE_SCALE1)
 80032b4:	f5b7 7f00 	cmp.w	r7, #512	; 0x200
 80032b8:	d01b      	beq.n	80032f2 <RCC_SetFlashLatency+0x6a>
      }
    }
  }
  else  /* PWR_REGULATOR_VOLTAGE_SCALE2 */
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 80032ba:	2300      	movs	r3, #0
 80032bc:	2b02      	cmp	r3, #2
 80032be:	d822      	bhi.n	8003306 <RCC_SetFlashLatency+0x7e>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS2[index])
 80032c0:	aa0c      	add	r2, sp, #48	; 0x30
 80032c2:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 80032c6:	f852 2c1c 	ldr.w	r2, [r2, #-28]
 80032ca:	42aa      	cmp	r2, r5
 80032cc:	d215      	bcs.n	80032fa <RCC_SetFlashLatency+0x72>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 80032ce:	3301      	adds	r3, #1
 80032d0:	e7f4      	b.n	80032bc <RCC_SetFlashLatency+0x34>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 80032d2:	3301      	adds	r3, #1
 80032d4:	2b03      	cmp	r3, #3
 80032d6:	d80e      	bhi.n	80032f6 <RCC_SetFlashLatency+0x6e>
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS1[index])
 80032d8:	aa0c      	add	r2, sp, #48	; 0x30
 80032da:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 80032de:	f852 2c10 	ldr.w	r2, [r2, #-16]
 80032e2:	42aa      	cmp	r2, r5
 80032e4:	d3f5      	bcc.n	80032d2 <RCC_SetFlashLatency+0x4a>
        latency = FLASH_LATENCY_RANGE[index];
 80032e6:	aa0c      	add	r2, sp, #48	; 0x30
 80032e8:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 80032ec:	f853 5c2c 	ldr.w	r5, [r3, #-44]
        break;
 80032f0:	e00a      	b.n	8003308 <RCC_SetFlashLatency+0x80>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 80032f2:	2300      	movs	r3, #0
 80032f4:	e7ee      	b.n	80032d4 <RCC_SetFlashLatency+0x4c>
  uint32_t latency   = FLASH_LATENCY_0;  /* default value 0WS */
 80032f6:	2500      	movs	r5, #0
 80032f8:	e006      	b.n	8003308 <RCC_SetFlashLatency+0x80>
      {
        latency = FLASH_LATENCY_RANGE[index];
 80032fa:	aa0c      	add	r2, sp, #48	; 0x30
 80032fc:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8003300:	f853 5c2c 	ldr.w	r5, [r3, #-44]
        break;
 8003304:	e000      	b.n	8003308 <RCC_SetFlashLatency+0x80>
  uint32_t latency   = FLASH_LATENCY_0;  /* default value 0WS */
 8003306:	2500      	movs	r5, #0
      break;
    }
  }
#endif

  __HAL_FLASH_SET_LATENCY(latency);
 8003308:	4a0d      	ldr	r2, [pc, #52]	; (8003340 <RCC_SetFlashLatency+0xb8>)
 800330a:	6813      	ldr	r3, [r2, #0]
 800330c:	f023 0307 	bic.w	r3, r3, #7
 8003310:	432b      	orrs	r3, r5
 8003312:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8003314:	f7fe fd00 	bl	8001d18 <HAL_GetTick>
 8003318:	4604      	mov	r4, r0

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  while (__HAL_FLASH_GET_LATENCY() != latency)
 800331a:	4b09      	ldr	r3, [pc, #36]	; (8003340 <RCC_SetFlashLatency+0xb8>)
 800331c:	681b      	ldr	r3, [r3, #0]
 800331e:	f003 0307 	and.w	r3, r3, #7
 8003322:	42ab      	cmp	r3, r5
 8003324:	d006      	beq.n	8003334 <RCC_SetFlashLatency+0xac>
  {
    if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8003326:	f7fe fcf7 	bl	8001d18 <HAL_GetTick>
 800332a:	1b00      	subs	r0, r0, r4
 800332c:	2802      	cmp	r0, #2
 800332e:	d9f4      	bls.n	800331a <RCC_SetFlashLatency+0x92>
    {
      return HAL_TIMEOUT;
 8003330:	2003      	movs	r0, #3
 8003332:	e000      	b.n	8003336 <RCC_SetFlashLatency+0xae>
    }
  }
  return HAL_OK;
 8003334:	2000      	movs	r0, #0
}
 8003336:	b00d      	add	sp, #52	; 0x34
 8003338:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800333a:	bf00      	nop
 800333c:	0800826c 	.word	0x0800826c
 8003340:	58004000 	.word	0x58004000

08003344 <RCC_SetFlashLatencyFromMSIRange>:
{
 8003344:	b510      	push	{r4, lr}
  if (MSI_Range > RCC_MSIRANGE_11)
 8003346:	28b0      	cmp	r0, #176	; 0xb0
 8003348:	d916      	bls.n	8003378 <RCC_SetFlashLatencyFromMSIRange+0x34>
    msifreq = __LL_RCC_CALC_MSI_FREQ(RCC_MSIRANGE_11);
 800334a:	4b0e      	ldr	r3, [pc, #56]	; (8003384 <RCC_SetFlashLatencyFromMSIRange+0x40>)
 800334c:	6adc      	ldr	r4, [r3, #44]	; 0x2c
  return (uint32_t)(READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE) << 4);
 800334e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003352:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
  flash_clksrcfreq = __LL_RCC_CALC_HCLK4_FREQ(msifreq, LL_RCC_GetAHB4Prescaler());
 8003356:	f003 030f 	and.w	r3, r3, #15
 800335a:	4a0b      	ldr	r2, [pc, #44]	; (8003388 <RCC_SetFlashLatencyFromMSIRange+0x44>)
 800335c:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8003360:	fbb4 f4f0 	udiv	r4, r4, r0
  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), HAL_PWREx_GetVoltageRange());
 8003364:	f7ff ff88 	bl	8003278 <HAL_PWREx_GetVoltageRange>
 8003368:	4601      	mov	r1, r0
 800336a:	4808      	ldr	r0, [pc, #32]	; (800338c <RCC_SetFlashLatencyFromMSIRange+0x48>)
 800336c:	fba0 3004 	umull	r3, r0, r0, r4
 8003370:	0c80      	lsrs	r0, r0, #18
 8003372:	f7ff ff89 	bl	8003288 <RCC_SetFlashLatency>
}
 8003376:	bd10      	pop	{r4, pc}
    msifreq = __LL_RCC_CALC_MSI_FREQ(MSI_Range);
 8003378:	f3c0 1003 	ubfx	r0, r0, #4, #4
 800337c:	4b01      	ldr	r3, [pc, #4]	; (8003384 <RCC_SetFlashLatencyFromMSIRange+0x40>)
 800337e:	f853 4020 	ldr.w	r4, [r3, r0, lsl #2]
 8003382:	e7e4      	b.n	800334e <RCC_SetFlashLatencyFromMSIRange+0xa>
 8003384:	0800873c 	.word	0x0800873c
 8003388:	080086dc 	.word	0x080086dc
 800338c:	431bde83 	.word	0x431bde83

08003390 <HAL_RCC_GetSysClockFreq>:
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8003390:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003394:	689b      	ldr	r3, [r3, #8]
  if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_MSI)
 8003396:	f013 030c 	ands.w	r3, r3, #12
 800339a:	d10d      	bne.n	80033b8 <HAL_RCC_GetSysClockFreq+0x28>
  uint32_t msiRange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE);
 800339c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80033a0:	681b      	ldr	r3, [r3, #0]
 80033a2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  if (msiRange > LL_RCC_MSIRANGE_11)
 80033a6:	2bb0      	cmp	r3, #176	; 0xb0
 80033a8:	d804      	bhi.n	80033b4 <HAL_RCC_GetSysClockFreq+0x24>
    sysclockfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_GetRange());
 80033aa:	091b      	lsrs	r3, r3, #4
 80033ac:	4a25      	ldr	r2, [pc, #148]	; (8003444 <HAL_RCC_GetSysClockFreq+0xb4>)
 80033ae:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 80033b2:	4770      	bx	lr
    msiRange = LL_RCC_MSIRANGE_11;
 80033b4:	23b0      	movs	r3, #176	; 0xb0
 80033b6:	e7f8      	b.n	80033aa <HAL_RCC_GetSysClockFreq+0x1a>
  else if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 80033b8:	2b04      	cmp	r3, #4
 80033ba:	d03e      	beq.n	800343a <HAL_RCC_GetSysClockFreq+0xaa>
  else if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE)
 80033bc:	2b08      	cmp	r3, #8
 80033be:	d010      	beq.n	80033e2 <HAL_RCC_GetSysClockFreq+0x52>
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 80033c0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80033c4:	68db      	ldr	r3, [r3, #12]
 80033c6:	f003 0303 	and.w	r3, r3, #3
    switch (pllsource)
 80033ca:	2b02      	cmp	r3, #2
 80033cc:	d01f      	beq.n	800340e <HAL_RCC_GetSysClockFreq+0x7e>
 80033ce:	2b03      	cmp	r3, #3
 80033d0:	d10f      	bne.n	80033f2 <HAL_RCC_GetSysClockFreq+0x62>
  return ((READ_BIT(RCC->CR, RCC_CR_HSEPRE) == (RCC_CR_HSEPRE)) ? 1UL : 0UL);
 80033d2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80033d6:	681b      	ldr	r3, [r3, #0]
 80033d8:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80033dc:	d12b      	bne.n	8003436 <HAL_RCC_GetSysClockFreq+0xa6>
          pllinputfreq = HSE_VALUE;
 80033de:	4b1a      	ldr	r3, [pc, #104]	; (8003448 <HAL_RCC_GetSysClockFreq+0xb8>)
 80033e0:	e016      	b.n	8003410 <HAL_RCC_GetSysClockFreq+0x80>
 80033e2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80033e6:	681b      	ldr	r3, [r3, #0]
 80033e8:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80033ec:	d027      	beq.n	800343e <HAL_RCC_GetSysClockFreq+0xae>
      sysclockfreq = HSE_VALUE / 2U;
 80033ee:	4817      	ldr	r0, [pc, #92]	; (800344c <HAL_RCC_GetSysClockFreq+0xbc>)
 80033f0:	4770      	bx	lr
  uint32_t msiRange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE);
 80033f2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80033f6:	681b      	ldr	r3, [r3, #0]
 80033f8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  if (msiRange > LL_RCC_MSIRANGE_11)
 80033fc:	2bb0      	cmp	r3, #176	; 0xb0
 80033fe:	d804      	bhi.n	800340a <HAL_RCC_GetSysClockFreq+0x7a>
        pllinputfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_GetRange());
 8003400:	091b      	lsrs	r3, r3, #4
 8003402:	4a10      	ldr	r2, [pc, #64]	; (8003444 <HAL_RCC_GetSysClockFreq+0xb4>)
 8003404:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
        break;
 8003408:	e002      	b.n	8003410 <HAL_RCC_GetSysClockFreq+0x80>
    msiRange = LL_RCC_MSIRANGE_11;
 800340a:	23b0      	movs	r3, #176	; 0xb0
 800340c:	e7f8      	b.n	8003400 <HAL_RCC_GetSysClockFreq+0x70>
    switch (pllsource)
 800340e:	4b0f      	ldr	r3, [pc, #60]	; (800344c <HAL_RCC_GetSysClockFreq+0xbc>)
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >>  RCC_PLLCFGR_PLLN_Pos);
 8003410:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003414:	68d0      	ldr	r0, [r2, #12]
 8003416:	f3c0 2006 	ubfx	r0, r0, #8, #7
    sysclockfreq = __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(), LL_RCC_PLL_GetN(), LL_RCC_PLL_GetR());
 800341a:	fb00 f003 	mul.w	r0, r0, r3
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM));
 800341e:	68d3      	ldr	r3, [r2, #12]
 8003420:	f3c3 1302 	ubfx	r3, r3, #4, #3
 8003424:	3301      	adds	r3, #1
 8003426:	fbb0 f0f3 	udiv	r0, r0, r3
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR));
 800342a:	68d3      	ldr	r3, [r2, #12]
 800342c:	0f5b      	lsrs	r3, r3, #29
 800342e:	3301      	adds	r3, #1
 8003430:	fbb0 f0f3 	udiv	r0, r0, r3
 8003434:	4770      	bx	lr
          pllinputfreq = HSE_VALUE / 2U;
 8003436:	4b05      	ldr	r3, [pc, #20]	; (800344c <HAL_RCC_GetSysClockFreq+0xbc>)
 8003438:	e7ea      	b.n	8003410 <HAL_RCC_GetSysClockFreq+0x80>
    sysclockfreq = HSI_VALUE;
 800343a:	4804      	ldr	r0, [pc, #16]	; (800344c <HAL_RCC_GetSysClockFreq+0xbc>)
 800343c:	4770      	bx	lr
      sysclockfreq = HSE_VALUE;
 800343e:	4802      	ldr	r0, [pc, #8]	; (8003448 <HAL_RCC_GetSysClockFreq+0xb8>)
}
 8003440:	4770      	bx	lr
 8003442:	bf00      	nop
 8003444:	0800873c 	.word	0x0800873c
 8003448:	01e84800 	.word	0x01e84800
 800344c:	00f42400 	.word	0x00f42400

08003450 <HAL_RCC_GetHCLKFreq>:
{
 8003450:	b508      	push	{r3, lr}
  return ((uint32_t)(__LL_RCC_CALC_HCLK1_FREQ(HAL_RCC_GetSysClockFreq(), LL_RCC_GetAHBPrescaler())));
 8003452:	f7ff ff9d 	bl	8003390 <HAL_RCC_GetSysClockFreq>
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 8003456:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800345a:	689b      	ldr	r3, [r3, #8]
 800345c:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8003460:	4a02      	ldr	r2, [pc, #8]	; (800346c <HAL_RCC_GetHCLKFreq+0x1c>)
 8003462:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
}
 8003466:	fbb0 f0f3 	udiv	r0, r0, r3
 800346a:	bd08      	pop	{r3, pc}
 800346c:	080086dc 	.word	0x080086dc

08003470 <HAL_RCC_OscConfig>:
  if (RCC_OscInitStruct == NULL)
 8003470:	2800      	cmp	r0, #0
 8003472:	f000 837e 	beq.w	8003b72 <HAL_RCC_OscConfig+0x702>
{
 8003476:	b538      	push	{r3, r4, r5, lr}
 8003478:	4604      	mov	r4, r0
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 800347a:	6803      	ldr	r3, [r0, #0]
 800347c:	f013 0f20 	tst.w	r3, #32
 8003480:	d07f      	beq.n	8003582 <HAL_RCC_OscConfig+0x112>
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8003482:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003486:	6893      	ldr	r3, [r2, #8]
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 8003488:	68d2      	ldr	r2, [r2, #12]
 800348a:	f002 0203 	and.w	r2, r2, #3
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 800348e:	f013 030c 	ands.w	r3, r3, #12
 8003492:	d01d      	beq.n	80034d0 <HAL_RCC_OscConfig+0x60>
 8003494:	2b0c      	cmp	r3, #12
 8003496:	d019      	beq.n	80034cc <HAL_RCC_OscConfig+0x5c>
      if (RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8003498:	69e3      	ldr	r3, [r4, #28]
 800349a:	2b00      	cmp	r3, #0
 800349c:	f000 809e 	beq.w	80035dc <HAL_RCC_OscConfig+0x16c>
  SET_BIT(RCC->CR, RCC_CR_MSION);
 80034a0:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80034a4:	6813      	ldr	r3, [r2, #0]
 80034a6:	f043 0301 	orr.w	r3, r3, #1
 80034aa:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 80034ac:	f7fe fc34 	bl	8001d18 <HAL_GetTick>
 80034b0:	4605      	mov	r5, r0
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) == (RCC_CR_MSIRDY)) ? 1UL : 0UL);
 80034b2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80034b6:	681b      	ldr	r3, [r3, #0]
 80034b8:	f013 0f02 	tst.w	r3, #2
 80034bc:	d152      	bne.n	8003564 <HAL_RCC_OscConfig+0xf4>
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80034be:	f7fe fc2b 	bl	8001d18 <HAL_GetTick>
 80034c2:	1b40      	subs	r0, r0, r5
 80034c4:	2802      	cmp	r0, #2
 80034c6:	d9f4      	bls.n	80034b2 <HAL_RCC_OscConfig+0x42>
            return HAL_TIMEOUT;
 80034c8:	2003      	movs	r0, #3
 80034ca:	e35d      	b.n	8003b88 <HAL_RCC_OscConfig+0x718>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_MSI)))
 80034cc:	2a01      	cmp	r2, #1
 80034ce:	d1e3      	bne.n	8003498 <HAL_RCC_OscConfig+0x28>
 80034d0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80034d4:	681b      	ldr	r3, [r3, #0]
 80034d6:	f013 0f02 	tst.w	r3, #2
 80034da:	d003      	beq.n	80034e4 <HAL_RCC_OscConfig+0x74>
      if ((LL_RCC_MSI_IsReady() != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80034dc:	69e3      	ldr	r3, [r4, #28]
 80034de:	2b00      	cmp	r3, #0
 80034e0:	f000 8349 	beq.w	8003b76 <HAL_RCC_OscConfig+0x706>
        if (RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80034e4:	6a60      	ldr	r0, [r4, #36]	; 0x24
  uint32_t msiRange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE);
 80034e6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80034ea:	681b      	ldr	r3, [r3, #0]
 80034ec:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  if (msiRange > LL_RCC_MSIRANGE_11)
 80034f0:	2bb0      	cmp	r3, #176	; 0xb0
 80034f2:	d820      	bhi.n	8003536 <HAL_RCC_OscConfig+0xc6>
 80034f4:	4298      	cmp	r0, r3
 80034f6:	d920      	bls.n	800353a <HAL_RCC_OscConfig+0xca>
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80034f8:	f7ff ff24 	bl	8003344 <RCC_SetFlashLatencyFromMSIRange>
 80034fc:	2800      	cmp	r0, #0
 80034fe:	f040 833c 	bne.w	8003b7a <HAL_RCC_OscConfig+0x70a>
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003502:	6a63      	ldr	r3, [r4, #36]	; 0x24
  MODIFY_REG(RCC->CR, RCC_CR_MSIRANGE, Range);
 8003504:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003508:	6811      	ldr	r1, [r2, #0]
 800350a:	f021 01f0 	bic.w	r1, r1, #240	; 0xf0
 800350e:	430b      	orrs	r3, r1
 8003510:	6013      	str	r3, [r2, #0]
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003512:	6a21      	ldr	r1, [r4, #32]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_MSITRIM, Value << RCC_ICSCR_MSITRIM_Pos);
 8003514:	6853      	ldr	r3, [r2, #4]
 8003516:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800351a:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 800351e:	6053      	str	r3, [r2, #4]
        SystemCoreClock = HAL_RCC_GetHCLKFreq();
 8003520:	f7ff ff96 	bl	8003450 <HAL_RCC_GetHCLKFreq>
 8003524:	4bc4      	ldr	r3, [pc, #784]	; (8003838 <HAL_RCC_OscConfig+0x3c8>)
 8003526:	6018      	str	r0, [r3, #0]
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8003528:	4bc4      	ldr	r3, [pc, #784]	; (800383c <HAL_RCC_OscConfig+0x3cc>)
 800352a:	6818      	ldr	r0, [r3, #0]
 800352c:	f7fe fbaa 	bl	8001c84 <HAL_InitTick>
 8003530:	b338      	cbz	r0, 8003582 <HAL_RCC_OscConfig+0x112>
          return HAL_ERROR;
 8003532:	2001      	movs	r0, #1
 8003534:	e328      	b.n	8003b88 <HAL_RCC_OscConfig+0x718>
    msiRange = LL_RCC_MSIRANGE_11;
 8003536:	23b0      	movs	r3, #176	; 0xb0
 8003538:	e7dc      	b.n	80034f4 <HAL_RCC_OscConfig+0x84>
  MODIFY_REG(RCC->CR, RCC_CR_MSIRANGE, Range);
 800353a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800353e:	6813      	ldr	r3, [r2, #0]
 8003540:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003544:	4318      	orrs	r0, r3
 8003546:	6010      	str	r0, [r2, #0]
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003548:	6a21      	ldr	r1, [r4, #32]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_MSITRIM, Value << RCC_ICSCR_MSITRIM_Pos);
 800354a:	6853      	ldr	r3, [r2, #4]
 800354c:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003550:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 8003554:	6053      	str	r3, [r2, #4]
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8003556:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8003558:	f7ff fef4 	bl	8003344 <RCC_SetFlashLatencyFromMSIRange>
 800355c:	2800      	cmp	r0, #0
 800355e:	d0df      	beq.n	8003520 <HAL_RCC_OscConfig+0xb0>
            return HAL_ERROR;
 8003560:	2001      	movs	r0, #1
 8003562:	e311      	b.n	8003b88 <HAL_RCC_OscConfig+0x718>
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003564:	6a63      	ldr	r3, [r4, #36]	; 0x24
  MODIFY_REG(RCC->CR, RCC_CR_MSIRANGE, Range);
 8003566:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800356a:	6811      	ldr	r1, [r2, #0]
 800356c:	f021 01f0 	bic.w	r1, r1, #240	; 0xf0
 8003570:	430b      	orrs	r3, r1
 8003572:	6013      	str	r3, [r2, #0]
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003574:	6a21      	ldr	r1, [r4, #32]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_MSITRIM, Value << RCC_ICSCR_MSITRIM_Pos);
 8003576:	6853      	ldr	r3, [r2, #4]
 8003578:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800357c:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 8003580:	6053      	str	r3, [r2, #4]
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003582:	6823      	ldr	r3, [r4, #0]
 8003584:	f013 0f01 	tst.w	r3, #1
 8003588:	d04a      	beq.n	8003620 <HAL_RCC_OscConfig+0x1b0>
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 800358a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800358e:	6893      	ldr	r3, [r2, #8]
 8003590:	f003 030c 	and.w	r3, r3, #12
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 8003594:	68d2      	ldr	r2, [r2, #12]
 8003596:	f002 0203 	and.w	r2, r2, #3
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 800359a:	2b08      	cmp	r3, #8
 800359c:	d036      	beq.n	800360c <HAL_RCC_OscConfig+0x19c>
 800359e:	2b0c      	cmp	r3, #12
 80035a0:	d032      	beq.n	8003608 <HAL_RCC_OscConfig+0x198>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80035a2:	6863      	ldr	r3, [r4, #4]
 80035a4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80035a8:	d063      	beq.n	8003672 <HAL_RCC_OscConfig+0x202>
  CLEAR_BIT(RCC->CR, RCC_CR_HSEON);
 80035aa:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80035ae:	6813      	ldr	r3, [r2, #0]
 80035b0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80035b4:	6013      	str	r3, [r2, #0]
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80035b6:	6863      	ldr	r3, [r4, #4]
 80035b8:	2b00      	cmp	r3, #0
 80035ba:	d061      	beq.n	8003680 <HAL_RCC_OscConfig+0x210>
        tickstart = HAL_GetTick();
 80035bc:	f7fe fbac 	bl	8001d18 <HAL_GetTick>
 80035c0:	4605      	mov	r5, r0
  return ((READ_BIT(RCC->CR, RCC_CR_HSERDY) == (RCC_CR_HSERDY)) ? 1UL : 0UL);
 80035c2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80035c6:	681b      	ldr	r3, [r3, #0]
 80035c8:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 80035cc:	d128      	bne.n	8003620 <HAL_RCC_OscConfig+0x1b0>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80035ce:	f7fe fba3 	bl	8001d18 <HAL_GetTick>
 80035d2:	1b40      	subs	r0, r0, r5
 80035d4:	2864      	cmp	r0, #100	; 0x64
 80035d6:	d9f4      	bls.n	80035c2 <HAL_RCC_OscConfig+0x152>
            return HAL_TIMEOUT;
 80035d8:	2003      	movs	r0, #3
 80035da:	e2d5      	b.n	8003b88 <HAL_RCC_OscConfig+0x718>
  CLEAR_BIT(RCC->CR, RCC_CR_MSION);
 80035dc:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80035e0:	6813      	ldr	r3, [r2, #0]
 80035e2:	f023 0301 	bic.w	r3, r3, #1
 80035e6:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 80035e8:	f7fe fb96 	bl	8001d18 <HAL_GetTick>
 80035ec:	4605      	mov	r5, r0
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) == (RCC_CR_MSIRDY)) ? 1UL : 0UL);
 80035ee:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80035f2:	681b      	ldr	r3, [r3, #0]
 80035f4:	f013 0f02 	tst.w	r3, #2
 80035f8:	d0c3      	beq.n	8003582 <HAL_RCC_OscConfig+0x112>
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80035fa:	f7fe fb8d 	bl	8001d18 <HAL_GetTick>
 80035fe:	1b40      	subs	r0, r0, r5
 8003600:	2802      	cmp	r0, #2
 8003602:	d9f4      	bls.n	80035ee <HAL_RCC_OscConfig+0x17e>
            return HAL_TIMEOUT;
 8003604:	2003      	movs	r0, #3
 8003606:	e2bf      	b.n	8003b88 <HAL_RCC_OscConfig+0x718>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_HSE)))
 8003608:	2a03      	cmp	r2, #3
 800360a:	d1ca      	bne.n	80035a2 <HAL_RCC_OscConfig+0x132>
  return ((READ_BIT(RCC->CR, RCC_CR_HSERDY) == (RCC_CR_HSERDY)) ? 1UL : 0UL);
 800360c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003610:	681b      	ldr	r3, [r3, #0]
 8003612:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 8003616:	d003      	beq.n	8003620 <HAL_RCC_OscConfig+0x1b0>
      if ((LL_RCC_HSE_IsReady() != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003618:	6863      	ldr	r3, [r4, #4]
 800361a:	2b00      	cmp	r3, #0
 800361c:	f000 82af 	beq.w	8003b7e <HAL_RCC_OscConfig+0x70e>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003620:	6823      	ldr	r3, [r4, #0]
 8003622:	f013 0f02 	tst.w	r3, #2
 8003626:	d050      	beq.n	80036ca <HAL_RCC_OscConfig+0x25a>
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8003628:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800362c:	6893      	ldr	r3, [r2, #8]
 800362e:	f003 030c 	and.w	r3, r3, #12
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 8003632:	68d2      	ldr	r2, [r2, #12]
 8003634:	f002 0203 	and.w	r2, r2, #3
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 8003638:	2b04      	cmp	r3, #4
 800363a:	d033      	beq.n	80036a4 <HAL_RCC_OscConfig+0x234>
 800363c:	2b0c      	cmp	r3, #12
 800363e:	d02f      	beq.n	80036a0 <HAL_RCC_OscConfig+0x230>
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003640:	68e3      	ldr	r3, [r4, #12]
 8003642:	2b00      	cmp	r3, #0
 8003644:	d077      	beq.n	8003736 <HAL_RCC_OscConfig+0x2c6>
  SET_BIT(RCC->CR, RCC_CR_HSION);
 8003646:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800364a:	6813      	ldr	r3, [r2, #0]
 800364c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003650:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 8003652:	f7fe fb61 	bl	8001d18 <HAL_GetTick>
 8003656:	4605      	mov	r5, r0
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY)) ? 1UL : 0UL);
 8003658:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800365c:	681b      	ldr	r3, [r3, #0]
 800365e:	f413 6f80 	tst.w	r3, #1024	; 0x400
 8003662:	d15e      	bne.n	8003722 <HAL_RCC_OscConfig+0x2b2>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003664:	f7fe fb58 	bl	8001d18 <HAL_GetTick>
 8003668:	1b40      	subs	r0, r0, r5
 800366a:	2802      	cmp	r0, #2
 800366c:	d9f4      	bls.n	8003658 <HAL_RCC_OscConfig+0x1e8>
            return HAL_TIMEOUT;
 800366e:	2003      	movs	r0, #3
 8003670:	e28a      	b.n	8003b88 <HAL_RCC_OscConfig+0x718>
  SET_BIT(RCC->CR, RCC_CR_HSEON);
 8003672:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003676:	6813      	ldr	r3, [r2, #0]
 8003678:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800367c:	6013      	str	r3, [r2, #0]
}
 800367e:	e79a      	b.n	80035b6 <HAL_RCC_OscConfig+0x146>
        tickstart = HAL_GetTick();
 8003680:	f7fe fb4a 	bl	8001d18 <HAL_GetTick>
 8003684:	4605      	mov	r5, r0
  return ((READ_BIT(RCC->CR, RCC_CR_HSERDY) == (RCC_CR_HSERDY)) ? 1UL : 0UL);
 8003686:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800368a:	681b      	ldr	r3, [r3, #0]
 800368c:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 8003690:	d0c6      	beq.n	8003620 <HAL_RCC_OscConfig+0x1b0>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003692:	f7fe fb41 	bl	8001d18 <HAL_GetTick>
 8003696:	1b40      	subs	r0, r0, r5
 8003698:	2864      	cmp	r0, #100	; 0x64
 800369a:	d9f4      	bls.n	8003686 <HAL_RCC_OscConfig+0x216>
            return HAL_TIMEOUT;
 800369c:	2003      	movs	r0, #3
 800369e:	e273      	b.n	8003b88 <HAL_RCC_OscConfig+0x718>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_HSI)))
 80036a0:	2a02      	cmp	r2, #2
 80036a2:	d1cd      	bne.n	8003640 <HAL_RCC_OscConfig+0x1d0>
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY)) ? 1UL : 0UL);
 80036a4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80036a8:	681b      	ldr	r3, [r3, #0]
 80036aa:	f413 6f80 	tst.w	r3, #1024	; 0x400
 80036ae:	d003      	beq.n	80036b8 <HAL_RCC_OscConfig+0x248>
      if ((LL_RCC_HSI_IsReady() != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80036b0:	68e3      	ldr	r3, [r4, #12]
 80036b2:	2b00      	cmp	r3, #0
 80036b4:	f000 8265 	beq.w	8003b82 <HAL_RCC_OscConfig+0x712>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80036b8:	6921      	ldr	r1, [r4, #16]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_HSITRIM, Value << RCC_ICSCR_HSITRIM_Pos);
 80036ba:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80036be:	6853      	ldr	r3, [r2, #4]
 80036c0:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 80036c4:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
 80036c8:	6053      	str	r3, [r2, #4]
  if ((((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI1) == RCC_OSCILLATORTYPE_LSI1) || \
 80036ca:	6823      	ldr	r3, [r4, #0]
 80036cc:	f013 0f18 	tst.w	r3, #24
 80036d0:	f000 80e8 	beq.w	80038a4 <HAL_RCC_OscConfig+0x434>
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80036d4:	6962      	ldr	r2, [r4, #20]
 80036d6:	2a00      	cmp	r2, #0
 80036d8:	f000 80b2 	beq.w	8003840 <HAL_RCC_OscConfig+0x3d0>
      if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI2) == RCC_OSCILLATORTYPE_LSI2)
 80036dc:	f013 0f10 	tst.w	r3, #16
 80036e0:	d07a      	beq.n	80037d8 <HAL_RCC_OscConfig+0x368>
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSI1RDY) == (RCC_CSR_LSI1RDY)) ? 1UL : 0UL);
 80036e2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80036e6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80036ea:	f013 0f02 	tst.w	r3, #2
 80036ee:	d138      	bne.n	8003762 <HAL_RCC_OscConfig+0x2f2>
  SET_BIT(RCC->CSR, RCC_CSR_LSI1ON);
 80036f0:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80036f4:	f8d2 3094 	ldr.w	r3, [r2, #148]	; 0x94
 80036f8:	f043 0301 	orr.w	r3, r3, #1
 80036fc:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
          tickstart = HAL_GetTick();
 8003700:	f7fe fb0a 	bl	8001d18 <HAL_GetTick>
 8003704:	4605      	mov	r5, r0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSI1RDY) == (RCC_CSR_LSI1RDY)) ? 1UL : 0UL);
 8003706:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800370a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800370e:	f013 0f02 	tst.w	r3, #2
 8003712:	d126      	bne.n	8003762 <HAL_RCC_OscConfig+0x2f2>
            if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 8003714:	f7fe fb00 	bl	8001d18 <HAL_GetTick>
 8003718:	1b40      	subs	r0, r0, r5
 800371a:	2802      	cmp	r0, #2
 800371c:	d9f3      	bls.n	8003706 <HAL_RCC_OscConfig+0x296>
              return HAL_TIMEOUT;
 800371e:	2003      	movs	r0, #3
 8003720:	e232      	b.n	8003b88 <HAL_RCC_OscConfig+0x718>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003722:	6921      	ldr	r1, [r4, #16]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_HSITRIM, Value << RCC_ICSCR_HSITRIM_Pos);
 8003724:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003728:	6853      	ldr	r3, [r2, #4]
 800372a:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 800372e:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
 8003732:	6053      	str	r3, [r2, #4]
}
 8003734:	e7c9      	b.n	80036ca <HAL_RCC_OscConfig+0x25a>
  CLEAR_BIT(RCC->CR, RCC_CR_HSION);
 8003736:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800373a:	6813      	ldr	r3, [r2, #0]
 800373c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003740:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 8003742:	f7fe fae9 	bl	8001d18 <HAL_GetTick>
 8003746:	4605      	mov	r5, r0
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY)) ? 1UL : 0UL);
 8003748:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800374c:	681b      	ldr	r3, [r3, #0]
 800374e:	f413 6f80 	tst.w	r3, #1024	; 0x400
 8003752:	d0ba      	beq.n	80036ca <HAL_RCC_OscConfig+0x25a>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003754:	f7fe fae0 	bl	8001d18 <HAL_GetTick>
 8003758:	1b40      	subs	r0, r0, r5
 800375a:	2802      	cmp	r0, #2
 800375c:	d9f4      	bls.n	8003748 <HAL_RCC_OscConfig+0x2d8>
            return HAL_TIMEOUT;
 800375e:	2003      	movs	r0, #3
 8003760:	e212      	b.n	8003b88 <HAL_RCC_OscConfig+0x718>
  SET_BIT(RCC->CSR, RCC_CSR_LSI2ON);
 8003762:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003766:	f8d2 3094 	ldr.w	r3, [r2, #148]	; 0x94
 800376a:	f043 0304 	orr.w	r3, r3, #4
 800376e:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
        tickstart = HAL_GetTick();
 8003772:	f7fe fad1 	bl	8001d18 <HAL_GetTick>
 8003776:	4605      	mov	r5, r0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSI2RDY) == (RCC_CSR_LSI2RDY)) ? 1UL : 0UL);
 8003778:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800377c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003780:	f013 0f08 	tst.w	r3, #8
 8003784:	d106      	bne.n	8003794 <HAL_RCC_OscConfig+0x324>
          if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 8003786:	f7fe fac7 	bl	8001d18 <HAL_GetTick>
 800378a:	1b40      	subs	r0, r0, r5
 800378c:	2803      	cmp	r0, #3
 800378e:	d9f3      	bls.n	8003778 <HAL_RCC_OscConfig+0x308>
            return HAL_TIMEOUT;
 8003790:	2003      	movs	r0, #3
 8003792:	e1f9      	b.n	8003b88 <HAL_RCC_OscConfig+0x718>
        __HAL_RCC_LSI2_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->LSI2CalibrationValue);
 8003794:	69a1      	ldr	r1, [r4, #24]
  MODIFY_REG(RCC->CSR, RCC_CSR_LSI2TRIM, Value << RCC_CSR_LSI2TRIM_Pos);
 8003796:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800379a:	f8d2 3094 	ldr.w	r3, [r2, #148]	; 0x94
 800379e:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80037a2:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 80037a6:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSI1ON);
 80037aa:	f8d2 3094 	ldr.w	r3, [r2, #148]	; 0x94
 80037ae:	f023 0301 	bic.w	r3, r3, #1
 80037b2:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
        tickstart = HAL_GetTick();
 80037b6:	f7fe faaf 	bl	8001d18 <HAL_GetTick>
 80037ba:	4605      	mov	r5, r0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSI1RDY) == (RCC_CSR_LSI1RDY)) ? 1UL : 0UL);
 80037bc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80037c0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80037c4:	f013 0f02 	tst.w	r3, #2
 80037c8:	d06c      	beq.n	80038a4 <HAL_RCC_OscConfig+0x434>
          if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 80037ca:	f7fe faa5 	bl	8001d18 <HAL_GetTick>
 80037ce:	1b40      	subs	r0, r0, r5
 80037d0:	2802      	cmp	r0, #2
 80037d2:	d9f3      	bls.n	80037bc <HAL_RCC_OscConfig+0x34c>
            return HAL_TIMEOUT;
 80037d4:	2003      	movs	r0, #3
 80037d6:	e1d7      	b.n	8003b88 <HAL_RCC_OscConfig+0x718>
  SET_BIT(RCC->CSR, RCC_CSR_LSI1ON);
 80037d8:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80037dc:	f8d2 3094 	ldr.w	r3, [r2, #148]	; 0x94
 80037e0:	f043 0301 	orr.w	r3, r3, #1
 80037e4:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
        tickstart = HAL_GetTick();
 80037e8:	f7fe fa96 	bl	8001d18 <HAL_GetTick>
 80037ec:	4605      	mov	r5, r0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSI1RDY) == (RCC_CSR_LSI1RDY)) ? 1UL : 0UL);
 80037ee:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80037f2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80037f6:	f013 0f02 	tst.w	r3, #2
 80037fa:	d106      	bne.n	800380a <HAL_RCC_OscConfig+0x39a>
          if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 80037fc:	f7fe fa8c 	bl	8001d18 <HAL_GetTick>
 8003800:	1b40      	subs	r0, r0, r5
 8003802:	2802      	cmp	r0, #2
 8003804:	d9f3      	bls.n	80037ee <HAL_RCC_OscConfig+0x37e>
            return HAL_TIMEOUT;
 8003806:	2003      	movs	r0, #3
 8003808:	e1be      	b.n	8003b88 <HAL_RCC_OscConfig+0x718>
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSI2ON);
 800380a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800380e:	f8d2 3094 	ldr.w	r3, [r2, #148]	; 0x94
 8003812:	f023 0304 	bic.w	r3, r3, #4
 8003816:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSI2RDY) == (RCC_CSR_LSI2RDY)) ? 1UL : 0UL);
 800381a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800381e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003822:	f013 0f08 	tst.w	r3, #8
 8003826:	d03d      	beq.n	80038a4 <HAL_RCC_OscConfig+0x434>
          if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 8003828:	f7fe fa76 	bl	8001d18 <HAL_GetTick>
 800382c:	1b40      	subs	r0, r0, r5
 800382e:	2803      	cmp	r0, #3
 8003830:	d9f3      	bls.n	800381a <HAL_RCC_OscConfig+0x3aa>
            return HAL_TIMEOUT;
 8003832:	2003      	movs	r0, #3
 8003834:	e1a8      	b.n	8003b88 <HAL_RCC_OscConfig+0x718>
 8003836:	bf00      	nop
 8003838:	20000004 	.word	0x20000004
 800383c:	2000000c 	.word	0x2000000c
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSI2ON);
 8003840:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003844:	f8d2 3094 	ldr.w	r3, [r2, #148]	; 0x94
 8003848:	f023 0304 	bic.w	r3, r3, #4
 800384c:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
      tickstart = HAL_GetTick();
 8003850:	f7fe fa62 	bl	8001d18 <HAL_GetTick>
 8003854:	4605      	mov	r5, r0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSI2RDY) == (RCC_CSR_LSI2RDY)) ? 1UL : 0UL);
 8003856:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800385a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800385e:	f013 0f08 	tst.w	r3, #8
 8003862:	d118      	bne.n	8003896 <HAL_RCC_OscConfig+0x426>
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSI1ON);
 8003864:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003868:	f8d2 3094 	ldr.w	r3, [r2, #148]	; 0x94
 800386c:	f023 0301 	bic.w	r3, r3, #1
 8003870:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
      tickstart = HAL_GetTick();
 8003874:	f7fe fa50 	bl	8001d18 <HAL_GetTick>
 8003878:	4605      	mov	r5, r0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSI1RDY) == (RCC_CSR_LSI1RDY)) ? 1UL : 0UL);
 800387a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800387e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003882:	f013 0f02 	tst.w	r3, #2
 8003886:	d00d      	beq.n	80038a4 <HAL_RCC_OscConfig+0x434>
        if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 8003888:	f7fe fa46 	bl	8001d18 <HAL_GetTick>
 800388c:	1b40      	subs	r0, r0, r5
 800388e:	2802      	cmp	r0, #2
 8003890:	d9f3      	bls.n	800387a <HAL_RCC_OscConfig+0x40a>
          return HAL_TIMEOUT;
 8003892:	2003      	movs	r0, #3
 8003894:	e178      	b.n	8003b88 <HAL_RCC_OscConfig+0x718>
        if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 8003896:	f7fe fa3f 	bl	8001d18 <HAL_GetTick>
 800389a:	1b40      	subs	r0, r0, r5
 800389c:	2803      	cmp	r0, #3
 800389e:	d9da      	bls.n	8003856 <HAL_RCC_OscConfig+0x3e6>
          return HAL_TIMEOUT;
 80038a0:	2003      	movs	r0, #3
 80038a2:	e171      	b.n	8003b88 <HAL_RCC_OscConfig+0x718>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80038a4:	6823      	ldr	r3, [r4, #0]
 80038a6:	f013 0f04 	tst.w	r3, #4
 80038aa:	d068      	beq.n	800397e <HAL_RCC_OscConfig+0x50e>
    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80038ac:	4bb9      	ldr	r3, [pc, #740]	; (8003b94 <HAL_RCC_OscConfig+0x724>)
 80038ae:	681b      	ldr	r3, [r3, #0]
 80038b0:	f413 7f80 	tst.w	r3, #256	; 0x100
 80038b4:	d027      	beq.n	8003906 <HAL_RCC_OscConfig+0x496>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80038b6:	68a3      	ldr	r3, [r4, #8]
 80038b8:	2b01      	cmp	r3, #1
 80038ba:	d035      	beq.n	8003928 <HAL_RCC_OscConfig+0x4b8>
 80038bc:	2b05      	cmp	r3, #5
 80038be:	d03c      	beq.n	800393a <HAL_RCC_OscConfig+0x4ca>
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 80038c0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80038c4:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 80038c8:	f022 0201 	bic.w	r2, r2, #1
 80038cc:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 80038d0:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 80038d4:	f022 0204 	bic.w	r2, r2, #4
 80038d8:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80038dc:	68a3      	ldr	r3, [r4, #8]
 80038de:	b3db      	cbz	r3, 8003958 <HAL_RCC_OscConfig+0x4e8>
      tickstart = HAL_GetTick();
 80038e0:	f7fe fa1a 	bl	8001d18 <HAL_GetTick>
 80038e4:	4605      	mov	r5, r0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 80038e6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80038ea:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80038ee:	f013 0f02 	tst.w	r3, #2
 80038f2:	d144      	bne.n	800397e <HAL_RCC_OscConfig+0x50e>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80038f4:	f7fe fa10 	bl	8001d18 <HAL_GetTick>
 80038f8:	1b40      	subs	r0, r0, r5
 80038fa:	f241 3388 	movw	r3, #5000	; 0x1388
 80038fe:	4298      	cmp	r0, r3
 8003900:	d9f1      	bls.n	80038e6 <HAL_RCC_OscConfig+0x476>
          return HAL_TIMEOUT;
 8003902:	2003      	movs	r0, #3
 8003904:	e140      	b.n	8003b88 <HAL_RCC_OscConfig+0x718>
      HAL_PWR_EnableBkUpAccess();
 8003906:	f7ff fcaf 	bl	8003268 <HAL_PWR_EnableBkUpAccess>
      tickstart = HAL_GetTick();
 800390a:	f7fe fa05 	bl	8001d18 <HAL_GetTick>
 800390e:	4605      	mov	r5, r0
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003910:	4ba0      	ldr	r3, [pc, #640]	; (8003b94 <HAL_RCC_OscConfig+0x724>)
 8003912:	681b      	ldr	r3, [r3, #0]
 8003914:	f413 7f80 	tst.w	r3, #256	; 0x100
 8003918:	d1cd      	bne.n	80038b6 <HAL_RCC_OscConfig+0x446>
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800391a:	f7fe f9fd 	bl	8001d18 <HAL_GetTick>
 800391e:	1b40      	subs	r0, r0, r5
 8003920:	2802      	cmp	r0, #2
 8003922:	d9f5      	bls.n	8003910 <HAL_RCC_OscConfig+0x4a0>
          return HAL_TIMEOUT;
 8003924:	2003      	movs	r0, #3
 8003926:	e12f      	b.n	8003b88 <HAL_RCC_OscConfig+0x718>
  SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8003928:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800392c:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 8003930:	f043 0301 	orr.w	r3, r3, #1
 8003934:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8003938:	e7d0      	b.n	80038dc <HAL_RCC_OscConfig+0x46c>
  SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 800393a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800393e:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 8003942:	f042 0204 	orr.w	r2, r2, #4
 8003946:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
  SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 800394a:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 800394e:	f042 0201 	orr.w	r2, r2, #1
 8003952:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
}
 8003956:	e7c1      	b.n	80038dc <HAL_RCC_OscConfig+0x46c>
      tickstart = HAL_GetTick();
 8003958:	f7fe f9de 	bl	8001d18 <HAL_GetTick>
 800395c:	4605      	mov	r5, r0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 800395e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003962:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003966:	f013 0f02 	tst.w	r3, #2
 800396a:	d008      	beq.n	800397e <HAL_RCC_OscConfig+0x50e>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800396c:	f7fe f9d4 	bl	8001d18 <HAL_GetTick>
 8003970:	1b40      	subs	r0, r0, r5
 8003972:	f241 3388 	movw	r3, #5000	; 0x1388
 8003976:	4298      	cmp	r0, r3
 8003978:	d9f1      	bls.n	800395e <HAL_RCC_OscConfig+0x4ee>
          return HAL_TIMEOUT;
 800397a:	2003      	movs	r0, #3
 800397c:	e104      	b.n	8003b88 <HAL_RCC_OscConfig+0x718>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800397e:	6823      	ldr	r3, [r4, #0]
 8003980:	f013 0f40 	tst.w	r3, #64	; 0x40
 8003984:	d033      	beq.n	80039ee <HAL_RCC_OscConfig+0x57e>
    if (RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8003986:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8003988:	b1c3      	cbz	r3, 80039bc <HAL_RCC_OscConfig+0x54c>
  SET_BIT(RCC->CRRCR, RCC_CRRCR_HSI48ON);
 800398a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800398e:	f8d2 3098 	ldr.w	r3, [r2, #152]	; 0x98
 8003992:	f043 0301 	orr.w	r3, r3, #1
 8003996:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98
      tickstart = HAL_GetTick();
 800399a:	f7fe f9bd 	bl	8001d18 <HAL_GetTick>
 800399e:	4605      	mov	r5, r0
  return ((READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == (RCC_CRRCR_HSI48RDY)) ? 1UL : 0UL);
 80039a0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80039a4:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80039a8:	f013 0f02 	tst.w	r3, #2
 80039ac:	d11f      	bne.n	80039ee <HAL_RCC_OscConfig+0x57e>
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80039ae:	f7fe f9b3 	bl	8001d18 <HAL_GetTick>
 80039b2:	1b40      	subs	r0, r0, r5
 80039b4:	2802      	cmp	r0, #2
 80039b6:	d9f3      	bls.n	80039a0 <HAL_RCC_OscConfig+0x530>
          return HAL_TIMEOUT;
 80039b8:	2003      	movs	r0, #3
 80039ba:	e0e5      	b.n	8003b88 <HAL_RCC_OscConfig+0x718>
  CLEAR_BIT(RCC->CRRCR, RCC_CRRCR_HSI48ON);
 80039bc:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80039c0:	f8d2 3098 	ldr.w	r3, [r2, #152]	; 0x98
 80039c4:	f023 0301 	bic.w	r3, r3, #1
 80039c8:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98
      tickstart = HAL_GetTick();
 80039cc:	f7fe f9a4 	bl	8001d18 <HAL_GetTick>
 80039d0:	4605      	mov	r5, r0
  return ((READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == (RCC_CRRCR_HSI48RDY)) ? 1UL : 0UL);
 80039d2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80039d6:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80039da:	f013 0f02 	tst.w	r3, #2
 80039de:	d006      	beq.n	80039ee <HAL_RCC_OscConfig+0x57e>
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80039e0:	f7fe f99a 	bl	8001d18 <HAL_GetTick>
 80039e4:	1b40      	subs	r0, r0, r5
 80039e6:	2802      	cmp	r0, #2
 80039e8:	d9f3      	bls.n	80039d2 <HAL_RCC_OscConfig+0x562>
          return HAL_TIMEOUT;
 80039ea:	2003      	movs	r0, #3
 80039ec:	e0cc      	b.n	8003b88 <HAL_RCC_OscConfig+0x718>
  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80039ee:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 80039f0:	2b00      	cmp	r3, #0
 80039f2:	f000 80c8 	beq.w	8003b86 <HAL_RCC_OscConfig+0x716>
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 80039f6:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80039fa:	6891      	ldr	r1, [r2, #8]
 80039fc:	f001 010c 	and.w	r1, r1, #12
    const uint32_t temp_pllconfig = RCC->PLLCFGR;
 8003a00:	68d2      	ldr	r2, [r2, #12]
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8003a02:	2b02      	cmp	r3, #2
 8003a04:	d023      	beq.n	8003a4e <HAL_RCC_OscConfig+0x5de>
      if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003a06:	290c      	cmp	r1, #12
 8003a08:	f000 80c1 	beq.w	8003b8e <HAL_RCC_OscConfig+0x71e>
  CLEAR_BIT(RCC->CR, RCC_CR_PLLON);
 8003a0c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003a10:	681a      	ldr	r2, [r3, #0]
 8003a12:	f022 7280 	bic.w	r2, r2, #16777216	; 0x1000000
 8003a16:	601a      	str	r2, [r3, #0]
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PLLSOURCE_NONE);
 8003a18:	68da      	ldr	r2, [r3, #12]
 8003a1a:	f022 0203 	bic.w	r2, r2, #3
 8003a1e:	60da      	str	r2, [r3, #12]
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_USBCLK | RCC_PLL_SAI1CLK);
 8003a20:	68da      	ldr	r2, [r3, #12]
 8003a22:	f022 5288 	bic.w	r2, r2, #285212672	; 0x11000000
 8003a26:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8003a2a:	60da      	str	r2, [r3, #12]
        tickstart = HAL_GetTick();
 8003a2c:	f7fe f974 	bl	8001d18 <HAL_GetTick>
 8003a30:	4604      	mov	r4, r0
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003a32:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003a36:	681b      	ldr	r3, [r3, #0]
 8003a38:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8003a3c:	f000 8097 	beq.w	8003b6e <HAL_RCC_OscConfig+0x6fe>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003a40:	f7fe f96a 	bl	8001d18 <HAL_GetTick>
 8003a44:	1b00      	subs	r0, r0, r4
 8003a46:	2802      	cmp	r0, #2
 8003a48:	d9f3      	bls.n	8003a32 <HAL_RCC_OscConfig+0x5c2>
            return HAL_TIMEOUT;
 8003a4a:	2003      	movs	r0, #3
 8003a4c:	e09c      	b.n	8003b88 <HAL_RCC_OscConfig+0x718>
      if ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003a4e:	f002 0303 	and.w	r3, r2, #3
 8003a52:	6b20      	ldr	r0, [r4, #48]	; 0x30
 8003a54:	4283      	cmp	r3, r0
 8003a56:	d00a      	beq.n	8003a6e <HAL_RCC_OscConfig+0x5fe>
        if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003a58:	290c      	cmp	r1, #12
 8003a5a:	f000 8096 	beq.w	8003b8a <HAL_RCC_OscConfig+0x71a>
          if (READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8003a5e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003a62:	681b      	ldr	r3, [r3, #0]
 8003a64:	f013 6f80 	tst.w	r3, #67108864	; 0x4000000
 8003a68:	d022      	beq.n	8003ab0 <HAL_RCC_OscConfig+0x640>
            return HAL_ERROR;
 8003a6a:	2001      	movs	r0, #1
 8003a6c:	e08c      	b.n	8003b88 <HAL_RCC_OscConfig+0x718>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8003a6e:	f002 0370 	and.w	r3, r2, #112	; 0x70
 8003a72:	6b60      	ldr	r0, [r4, #52]	; 0x34
      if ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003a74:	4283      	cmp	r3, r0
 8003a76:	d1ef      	bne.n	8003a58 <HAL_RCC_OscConfig+0x5e8>
          ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) != RCC_OscInitStruct->PLL.PLLN) ||
 8003a78:	f3c2 2306 	ubfx	r3, r2, #8, #7
 8003a7c:	6ba0      	ldr	r0, [r4, #56]	; 0x38
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8003a7e:	4283      	cmp	r3, r0
 8003a80:	d1ea      	bne.n	8003a58 <HAL_RCC_OscConfig+0x5e8>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8003a82:	f402 1378 	and.w	r3, r2, #4063232	; 0x3e0000
 8003a86:	6be0      	ldr	r0, [r4, #60]	; 0x3c
          ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) != RCC_OscInitStruct->PLL.PLLN) ||
 8003a88:	4283      	cmp	r3, r0
 8003a8a:	d1e5      	bne.n	8003a58 <HAL_RCC_OscConfig+0x5e8>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8003a8c:	f002 6360 	and.w	r3, r2, #234881024	; 0xe000000
 8003a90:	6c20      	ldr	r0, [r4, #64]	; 0x40
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8003a92:	4283      	cmp	r3, r0
 8003a94:	d1e0      	bne.n	8003a58 <HAL_RCC_OscConfig+0x5e8>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 8003a96:	f002 4260 	and.w	r2, r2, #3758096384	; 0xe0000000
 8003a9a:	6c63      	ldr	r3, [r4, #68]	; 0x44
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8003a9c:	429a      	cmp	r2, r3
 8003a9e:	d1db      	bne.n	8003a58 <HAL_RCC_OscConfig+0x5e8>
        if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003aa0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003aa4:	681b      	ldr	r3, [r3, #0]
 8003aa6:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8003aaa:	d044      	beq.n	8003b36 <HAL_RCC_OscConfig+0x6c6>
  return HAL_OK;
 8003aac:	2000      	movs	r0, #0
 8003aae:	e06b      	b.n	8003b88 <HAL_RCC_OscConfig+0x718>
 8003ab0:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003ab4:	6813      	ldr	r3, [r2, #0]
 8003ab6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003aba:	6013      	str	r3, [r2, #0]
            tickstart = HAL_GetTick();
 8003abc:	f7fe f92c 	bl	8001d18 <HAL_GetTick>
 8003ac0:	4605      	mov	r5, r0
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003ac2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003ac6:	681b      	ldr	r3, [r3, #0]
 8003ac8:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8003acc:	d006      	beq.n	8003adc <HAL_RCC_OscConfig+0x66c>
              if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003ace:	f7fe f923 	bl	8001d18 <HAL_GetTick>
 8003ad2:	1b40      	subs	r0, r0, r5
 8003ad4:	2802      	cmp	r0, #2
 8003ad6:	d9f4      	bls.n	8003ac2 <HAL_RCC_OscConfig+0x652>
                return HAL_TIMEOUT;
 8003ad8:	2003      	movs	r0, #3
 8003ada:	e055      	b.n	8003b88 <HAL_RCC_OscConfig+0x718>
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003adc:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003ae0:	68d3      	ldr	r3, [r2, #12]
 8003ae2:	492d      	ldr	r1, [pc, #180]	; (8003b98 <HAL_RCC_OscConfig+0x728>)
 8003ae4:	4019      	ands	r1, r3
 8003ae6:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8003ae8:	6b60      	ldr	r0, [r4, #52]	; 0x34
 8003aea:	4303      	orrs	r3, r0
 8003aec:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 8003aee:	ea43 2300 	orr.w	r3, r3, r0, lsl #8
 8003af2:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 8003af4:	4303      	orrs	r3, r0
 8003af6:	6c20      	ldr	r0, [r4, #64]	; 0x40
 8003af8:	4303      	orrs	r3, r0
 8003afa:	6c60      	ldr	r0, [r4, #68]	; 0x44
 8003afc:	4303      	orrs	r3, r0
 8003afe:	430b      	orrs	r3, r1
 8003b00:	60d3      	str	r3, [r2, #12]
  SET_BIT(RCC->CR, RCC_CR_PLLON);
 8003b02:	6813      	ldr	r3, [r2, #0]
 8003b04:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003b08:	6013      	str	r3, [r2, #0]
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003b0a:	68d3      	ldr	r3, [r2, #12]
 8003b0c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003b10:	60d3      	str	r3, [r2, #12]
            tickstart = HAL_GetTick();
 8003b12:	f7fe f901 	bl	8001d18 <HAL_GetTick>
 8003b16:	4604      	mov	r4, r0
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003b18:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003b1c:	681b      	ldr	r3, [r3, #0]
 8003b1e:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8003b22:	d106      	bne.n	8003b32 <HAL_RCC_OscConfig+0x6c2>
              if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003b24:	f7fe f8f8 	bl	8001d18 <HAL_GetTick>
 8003b28:	1b00      	subs	r0, r0, r4
 8003b2a:	2802      	cmp	r0, #2
 8003b2c:	d9f4      	bls.n	8003b18 <HAL_RCC_OscConfig+0x6a8>
                return HAL_TIMEOUT;
 8003b2e:	2003      	movs	r0, #3
 8003b30:	e02a      	b.n	8003b88 <HAL_RCC_OscConfig+0x718>
  return HAL_OK;
 8003b32:	2000      	movs	r0, #0
 8003b34:	e028      	b.n	8003b88 <HAL_RCC_OscConfig+0x718>
 8003b36:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003b3a:	681a      	ldr	r2, [r3, #0]
 8003b3c:	f042 7280 	orr.w	r2, r2, #16777216	; 0x1000000
 8003b40:	601a      	str	r2, [r3, #0]
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003b42:	68da      	ldr	r2, [r3, #12]
 8003b44:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8003b48:	60da      	str	r2, [r3, #12]
          tickstart = HAL_GetTick();
 8003b4a:	f7fe f8e5 	bl	8001d18 <HAL_GetTick>
 8003b4e:	4604      	mov	r4, r0
          while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003b50:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003b54:	681b      	ldr	r3, [r3, #0]
 8003b56:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8003b5a:	d106      	bne.n	8003b6a <HAL_RCC_OscConfig+0x6fa>
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003b5c:	f7fe f8dc 	bl	8001d18 <HAL_GetTick>
 8003b60:	1b03      	subs	r3, r0, r4
 8003b62:	2b02      	cmp	r3, #2
 8003b64:	d9f4      	bls.n	8003b50 <HAL_RCC_OscConfig+0x6e0>
              return HAL_TIMEOUT;
 8003b66:	2003      	movs	r0, #3
 8003b68:	e00e      	b.n	8003b88 <HAL_RCC_OscConfig+0x718>
  return HAL_OK;
 8003b6a:	2000      	movs	r0, #0
 8003b6c:	e00c      	b.n	8003b88 <HAL_RCC_OscConfig+0x718>
 8003b6e:	2000      	movs	r0, #0
 8003b70:	e00a      	b.n	8003b88 <HAL_RCC_OscConfig+0x718>
    return HAL_ERROR;
 8003b72:	2001      	movs	r0, #1
}
 8003b74:	4770      	bx	lr
        return HAL_ERROR;
 8003b76:	2001      	movs	r0, #1
 8003b78:	e006      	b.n	8003b88 <HAL_RCC_OscConfig+0x718>
            return HAL_ERROR;
 8003b7a:	2001      	movs	r0, #1
 8003b7c:	e004      	b.n	8003b88 <HAL_RCC_OscConfig+0x718>
        return HAL_ERROR;
 8003b7e:	2001      	movs	r0, #1
 8003b80:	e002      	b.n	8003b88 <HAL_RCC_OscConfig+0x718>
        return HAL_ERROR;
 8003b82:	2001      	movs	r0, #1
 8003b84:	e000      	b.n	8003b88 <HAL_RCC_OscConfig+0x718>
  return HAL_OK;
 8003b86:	2000      	movs	r0, #0
}
 8003b88:	bd38      	pop	{r3, r4, r5, pc}
          return HAL_ERROR;
 8003b8a:	2001      	movs	r0, #1
 8003b8c:	e7fc      	b.n	8003b88 <HAL_RCC_OscConfig+0x718>
        return HAL_ERROR;
 8003b8e:	2001      	movs	r0, #1
 8003b90:	e7fa      	b.n	8003b88 <HAL_RCC_OscConfig+0x718>
 8003b92:	bf00      	nop
 8003b94:	58000400 	.word	0x58000400
 8003b98:	11c1808c 	.word	0x11c1808c

08003b9c <HAL_RCC_ClockConfig>:
  if (RCC_ClkInitStruct == NULL)
 8003b9c:	2800      	cmp	r0, #0
 8003b9e:	f000 8127 	beq.w	8003df0 <HAL_RCC_ClockConfig+0x254>
{
 8003ba2:	b570      	push	{r4, r5, r6, lr}
 8003ba4:	460c      	mov	r4, r1
 8003ba6:	4605      	mov	r5, r0
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003ba8:	4b93      	ldr	r3, [pc, #588]	; (8003df8 <HAL_RCC_ClockConfig+0x25c>)
 8003baa:	681b      	ldr	r3, [r3, #0]
 8003bac:	f003 0307 	and.w	r3, r3, #7
 8003bb0:	428b      	cmp	r3, r1
 8003bb2:	d32d      	bcc.n	8003c10 <HAL_RCC_ClockConfig+0x74>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003bb4:	682b      	ldr	r3, [r5, #0]
 8003bb6:	f013 0f02 	tst.w	r3, #2
 8003bba:	d13f      	bne.n	8003c3c <HAL_RCC_ClockConfig+0xa0>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK2) == RCC_CLOCKTYPE_HCLK2)
 8003bbc:	682b      	ldr	r3, [r5, #0]
 8003bbe:	f013 0f20 	tst.w	r3, #32
 8003bc2:	d153      	bne.n	8003c6c <HAL_RCC_ClockConfig+0xd0>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK4) == RCC_CLOCKTYPE_HCLK4)
 8003bc4:	682b      	ldr	r3, [r5, #0]
 8003bc6:	f013 0f40 	tst.w	r3, #64	; 0x40
 8003bca:	d16a      	bne.n	8003ca2 <HAL_RCC_ClockConfig+0x106>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003bcc:	682b      	ldr	r3, [r5, #0]
 8003bce:	f013 0f04 	tst.w	r3, #4
 8003bd2:	f040 8083 	bne.w	8003cdc <HAL_RCC_ClockConfig+0x140>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003bd6:	682b      	ldr	r3, [r5, #0]
 8003bd8:	f013 0f08 	tst.w	r3, #8
 8003bdc:	f040 8097 	bne.w	8003d0e <HAL_RCC_ClockConfig+0x172>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003be0:	682b      	ldr	r3, [r5, #0]
 8003be2:	f013 0f01 	tst.w	r3, #1
 8003be6:	f000 80de 	beq.w	8003da6 <HAL_RCC_ClockConfig+0x20a>
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003bea:	686b      	ldr	r3, [r5, #4]
 8003bec:	2b02      	cmp	r3, #2
 8003bee:	f000 80a8 	beq.w	8003d42 <HAL_RCC_ClockConfig+0x1a6>
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003bf2:	2b03      	cmp	r3, #3
 8003bf4:	f000 80ad 	beq.w	8003d52 <HAL_RCC_ClockConfig+0x1b6>
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8003bf8:	2b00      	cmp	r3, #0
 8003bfa:	f040 80b2 	bne.w	8003d62 <HAL_RCC_ClockConfig+0x1c6>
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) == (RCC_CR_MSIRDY)) ? 1UL : 0UL);
 8003bfe:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003c02:	6812      	ldr	r2, [r2, #0]
 8003c04:	f012 0f02 	tst.w	r2, #2
 8003c08:	f040 80b1 	bne.w	8003d6e <HAL_RCC_ClockConfig+0x1d2>
        return HAL_ERROR;
 8003c0c:	2001      	movs	r0, #1
 8003c0e:	e0ee      	b.n	8003dee <HAL_RCC_ClockConfig+0x252>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003c10:	4a79      	ldr	r2, [pc, #484]	; (8003df8 <HAL_RCC_ClockConfig+0x25c>)
 8003c12:	6813      	ldr	r3, [r2, #0]
 8003c14:	f023 0307 	bic.w	r3, r3, #7
 8003c18:	430b      	orrs	r3, r1
 8003c1a:	6013      	str	r3, [r2, #0]
    tickstart = HAL_GetTick();
 8003c1c:	f7fe f87c 	bl	8001d18 <HAL_GetTick>
 8003c20:	4606      	mov	r6, r0
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003c22:	4b75      	ldr	r3, [pc, #468]	; (8003df8 <HAL_RCC_ClockConfig+0x25c>)
 8003c24:	681b      	ldr	r3, [r3, #0]
 8003c26:	f003 0307 	and.w	r3, r3, #7
 8003c2a:	42a3      	cmp	r3, r4
 8003c2c:	d0c2      	beq.n	8003bb4 <HAL_RCC_ClockConfig+0x18>
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8003c2e:	f7fe f873 	bl	8001d18 <HAL_GetTick>
 8003c32:	1b80      	subs	r0, r0, r6
 8003c34:	2802      	cmp	r0, #2
 8003c36:	d9f4      	bls.n	8003c22 <HAL_RCC_ClockConfig+0x86>
        return HAL_TIMEOUT;
 8003c38:	2003      	movs	r0, #3
 8003c3a:	e0d8      	b.n	8003dee <HAL_RCC_ClockConfig+0x252>
    LL_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLKDivider);
 8003c3c:	68ab      	ldr	r3, [r5, #8]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 8003c3e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003c42:	688a      	ldr	r2, [r1, #8]
 8003c44:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 8003c48:	4313      	orrs	r3, r2
 8003c4a:	608b      	str	r3, [r1, #8]
    tickstart = HAL_GetTick();
 8003c4c:	f7fe f864 	bl	8001d18 <HAL_GetTick>
 8003c50:	4606      	mov	r6, r0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_HPREF) == (RCC_CFGR_HPREF)) ? 1UL : 0UL);
 8003c52:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003c56:	689b      	ldr	r3, [r3, #8]
 8003c58:	f413 3f80 	tst.w	r3, #65536	; 0x10000
 8003c5c:	d1ae      	bne.n	8003bbc <HAL_RCC_ClockConfig+0x20>
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8003c5e:	f7fe f85b 	bl	8001d18 <HAL_GetTick>
 8003c62:	1b80      	subs	r0, r0, r6
 8003c64:	2802      	cmp	r0, #2
 8003c66:	d9f4      	bls.n	8003c52 <HAL_RCC_ClockConfig+0xb6>
        return HAL_TIMEOUT;
 8003c68:	2003      	movs	r0, #3
 8003c6a:	e0c0      	b.n	8003dee <HAL_RCC_ClockConfig+0x252>
    LL_C2_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLK2Divider);
 8003c6c:	696b      	ldr	r3, [r5, #20]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_C2HPRE, Prescaler);
 8003c6e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003c72:	f8d1 2108 	ldr.w	r2, [r1, #264]	; 0x108
 8003c76:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 8003c7a:	4313      	orrs	r3, r2
 8003c7c:	f8c1 3108 	str.w	r3, [r1, #264]	; 0x108
    tickstart = HAL_GetTick();
 8003c80:	f7fe f84a 	bl	8001d18 <HAL_GetTick>
 8003c84:	4606      	mov	r6, r0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_C2HPREF) == (RCC_EXTCFGR_C2HPREF)) ? 1UL : 0UL);
 8003c86:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003c8a:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8003c8e:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 8003c92:	d197      	bne.n	8003bc4 <HAL_RCC_ClockConfig+0x28>
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8003c94:	f7fe f840 	bl	8001d18 <HAL_GetTick>
 8003c98:	1b80      	subs	r0, r0, r6
 8003c9a:	2802      	cmp	r0, #2
 8003c9c:	d9f3      	bls.n	8003c86 <HAL_RCC_ClockConfig+0xea>
        return HAL_TIMEOUT;
 8003c9e:	2003      	movs	r0, #3
 8003ca0:	e0a5      	b.n	8003dee <HAL_RCC_ClockConfig+0x252>
    LL_RCC_SetAHB4Prescaler(RCC_ClkInitStruct->AHBCLK4Divider);
 8003ca2:	69a9      	ldr	r1, [r5, #24]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE, Prescaler >> 4);
 8003ca4:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003ca8:	f8d2 3108 	ldr.w	r3, [r2, #264]	; 0x108
 8003cac:	f023 030f 	bic.w	r3, r3, #15
 8003cb0:	ea43 1311 	orr.w	r3, r3, r1, lsr #4
 8003cb4:	f8c2 3108 	str.w	r3, [r2, #264]	; 0x108
    tickstart = HAL_GetTick();
 8003cb8:	f7fe f82e 	bl	8001d18 <HAL_GetTick>
 8003cbc:	4606      	mov	r6, r0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPREF) == (RCC_EXTCFGR_SHDHPREF)) ? 1UL : 0UL);
 8003cbe:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003cc2:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8003cc6:	f413 3f80 	tst.w	r3, #65536	; 0x10000
 8003cca:	f47f af7f 	bne.w	8003bcc <HAL_RCC_ClockConfig+0x30>
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8003cce:	f7fe f823 	bl	8001d18 <HAL_GetTick>
 8003cd2:	1b80      	subs	r0, r0, r6
 8003cd4:	2802      	cmp	r0, #2
 8003cd6:	d9f2      	bls.n	8003cbe <HAL_RCC_ClockConfig+0x122>
        return HAL_TIMEOUT;
 8003cd8:	2003      	movs	r0, #3
 8003cda:	e088      	b.n	8003dee <HAL_RCC_ClockConfig+0x252>
    LL_RCC_SetAPB1Prescaler(RCC_ClkInitStruct->APB1CLKDivider);
 8003cdc:	68eb      	ldr	r3, [r5, #12]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 8003cde:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003ce2:	688a      	ldr	r2, [r1, #8]
 8003ce4:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8003ce8:	4313      	orrs	r3, r2
 8003cea:	608b      	str	r3, [r1, #8]
    tickstart = HAL_GetTick();
 8003cec:	f7fe f814 	bl	8001d18 <HAL_GetTick>
 8003cf0:	4606      	mov	r6, r0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1F) == (RCC_CFGR_PPRE1F)) ? 1UL : 0UL);
 8003cf2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003cf6:	689b      	ldr	r3, [r3, #8]
 8003cf8:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 8003cfc:	f47f af6b 	bne.w	8003bd6 <HAL_RCC_ClockConfig+0x3a>
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8003d00:	f7fe f80a 	bl	8001d18 <HAL_GetTick>
 8003d04:	1b80      	subs	r0, r0, r6
 8003d06:	2802      	cmp	r0, #2
 8003d08:	d9f3      	bls.n	8003cf2 <HAL_RCC_ClockConfig+0x156>
        return HAL_TIMEOUT;
 8003d0a:	2003      	movs	r0, #3
 8003d0c:	e06f      	b.n	8003dee <HAL_RCC_ClockConfig+0x252>
    LL_RCC_SetAPB2Prescaler((RCC_ClkInitStruct->APB2CLKDivider) << 3U);
 8003d0e:	6929      	ldr	r1, [r5, #16]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 8003d10:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003d14:	6893      	ldr	r3, [r2, #8]
 8003d16:	f423 5360 	bic.w	r3, r3, #14336	; 0x3800
 8003d1a:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8003d1e:	6093      	str	r3, [r2, #8]
    tickstart = HAL_GetTick();
 8003d20:	f7fd fffa 	bl	8001d18 <HAL_GetTick>
 8003d24:	4606      	mov	r6, r0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2F) == (RCC_CFGR_PPRE2F)) ? 1UL : 0UL);
 8003d26:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003d2a:	689b      	ldr	r3, [r3, #8]
 8003d2c:	f413 2f80 	tst.w	r3, #262144	; 0x40000
 8003d30:	f47f af56 	bne.w	8003be0 <HAL_RCC_ClockConfig+0x44>
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8003d34:	f7fd fff0 	bl	8001d18 <HAL_GetTick>
 8003d38:	1b80      	subs	r0, r0, r6
 8003d3a:	2802      	cmp	r0, #2
 8003d3c:	d9f3      	bls.n	8003d26 <HAL_RCC_ClockConfig+0x18a>
        return HAL_TIMEOUT;
 8003d3e:	2003      	movs	r0, #3
 8003d40:	e055      	b.n	8003dee <HAL_RCC_ClockConfig+0x252>
  return ((READ_BIT(RCC->CR, RCC_CR_HSERDY) == (RCC_CR_HSERDY)) ? 1UL : 0UL);
 8003d42:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003d46:	6812      	ldr	r2, [r2, #0]
 8003d48:	f412 3f00 	tst.w	r2, #131072	; 0x20000
 8003d4c:	d10f      	bne.n	8003d6e <HAL_RCC_ClockConfig+0x1d2>
        return HAL_ERROR;
 8003d4e:	2001      	movs	r0, #1
 8003d50:	e04d      	b.n	8003dee <HAL_RCC_ClockConfig+0x252>
  return ((READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY)) ? 1UL : 0UL);
 8003d52:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003d56:	6812      	ldr	r2, [r2, #0]
 8003d58:	f012 7f00 	tst.w	r2, #33554432	; 0x2000000
 8003d5c:	d107      	bne.n	8003d6e <HAL_RCC_ClockConfig+0x1d2>
        return HAL_ERROR;
 8003d5e:	2001      	movs	r0, #1
 8003d60:	e045      	b.n	8003dee <HAL_RCC_ClockConfig+0x252>
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY)) ? 1UL : 0UL);
 8003d62:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003d66:	6812      	ldr	r2, [r2, #0]
 8003d68:	f412 6f80 	tst.w	r2, #1024	; 0x400
 8003d6c:	d042      	beq.n	8003df4 <HAL_RCC_ClockConfig+0x258>
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 8003d6e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003d72:	688a      	ldr	r2, [r1, #8]
 8003d74:	f022 0203 	bic.w	r2, r2, #3
 8003d78:	4313      	orrs	r3, r2
 8003d7a:	608b      	str	r3, [r1, #8]
    tickstart = HAL_GetTick();
 8003d7c:	f7fd ffcc 	bl	8001d18 <HAL_GetTick>
 8003d80:	4606      	mov	r6, r0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8003d82:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003d86:	689b      	ldr	r3, [r3, #8]
 8003d88:	f003 030c 	and.w	r3, r3, #12
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003d8c:	686a      	ldr	r2, [r5, #4]
 8003d8e:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 8003d92:	d008      	beq.n	8003da6 <HAL_RCC_ClockConfig+0x20a>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003d94:	f7fd ffc0 	bl	8001d18 <HAL_GetTick>
 8003d98:	1b80      	subs	r0, r0, r6
 8003d9a:	f241 3388 	movw	r3, #5000	; 0x1388
 8003d9e:	4298      	cmp	r0, r3
 8003da0:	d9ef      	bls.n	8003d82 <HAL_RCC_ClockConfig+0x1e6>
        return HAL_TIMEOUT;
 8003da2:	2003      	movs	r0, #3
 8003da4:	e023      	b.n	8003dee <HAL_RCC_ClockConfig+0x252>
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003da6:	4b14      	ldr	r3, [pc, #80]	; (8003df8 <HAL_RCC_ClockConfig+0x25c>)
 8003da8:	681b      	ldr	r3, [r3, #0]
 8003daa:	f003 0307 	and.w	r3, r3, #7
 8003dae:	42a3      	cmp	r3, r4
 8003db0:	d915      	bls.n	8003dde <HAL_RCC_ClockConfig+0x242>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003db2:	4a11      	ldr	r2, [pc, #68]	; (8003df8 <HAL_RCC_ClockConfig+0x25c>)
 8003db4:	6813      	ldr	r3, [r2, #0]
 8003db6:	f023 0307 	bic.w	r3, r3, #7
 8003dba:	4323      	orrs	r3, r4
 8003dbc:	6013      	str	r3, [r2, #0]
    tickstart = HAL_GetTick();
 8003dbe:	f7fd ffab 	bl	8001d18 <HAL_GetTick>
 8003dc2:	4605      	mov	r5, r0
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003dc4:	4b0c      	ldr	r3, [pc, #48]	; (8003df8 <HAL_RCC_ClockConfig+0x25c>)
 8003dc6:	681b      	ldr	r3, [r3, #0]
 8003dc8:	f003 0307 	and.w	r3, r3, #7
 8003dcc:	42a3      	cmp	r3, r4
 8003dce:	d006      	beq.n	8003dde <HAL_RCC_ClockConfig+0x242>
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8003dd0:	f7fd ffa2 	bl	8001d18 <HAL_GetTick>
 8003dd4:	1b40      	subs	r0, r0, r5
 8003dd6:	2802      	cmp	r0, #2
 8003dd8:	d9f4      	bls.n	8003dc4 <HAL_RCC_ClockConfig+0x228>
        return HAL_TIMEOUT;
 8003dda:	2003      	movs	r0, #3
 8003ddc:	e007      	b.n	8003dee <HAL_RCC_ClockConfig+0x252>
  SystemCoreClock = HAL_RCC_GetHCLKFreq();
 8003dde:	f7ff fb37 	bl	8003450 <HAL_RCC_GetHCLKFreq>
 8003de2:	4b06      	ldr	r3, [pc, #24]	; (8003dfc <HAL_RCC_ClockConfig+0x260>)
 8003de4:	6018      	str	r0, [r3, #0]
  return HAL_InitTick(HAL_GetTickPrio());
 8003de6:	f7fd ff9d 	bl	8001d24 <HAL_GetTickPrio>
 8003dea:	f7fd ff4b 	bl	8001c84 <HAL_InitTick>
}
 8003dee:	bd70      	pop	{r4, r5, r6, pc}
    return HAL_ERROR;
 8003df0:	2001      	movs	r0, #1
}
 8003df2:	4770      	bx	lr
        return HAL_ERROR;
 8003df4:	2001      	movs	r0, #1
 8003df6:	e7fa      	b.n	8003dee <HAL_RCC_ClockConfig+0x252>
 8003df8:	58004000 	.word	0x58004000
 8003dfc:	20000004 	.word	0x20000004

08003e00 <HAL_RCC_GetPCLK1Freq>:
{
 8003e00:	b508      	push	{r3, lr}
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 8003e02:	f7ff fb25 	bl	8003450 <HAL_RCC_GetHCLKFreq>
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1));
 8003e06:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003e0a:	689b      	ldr	r3, [r3, #8]
 8003e0c:	f3c3 2302 	ubfx	r3, r3, #8, #3
 8003e10:	4a03      	ldr	r2, [pc, #12]	; (8003e20 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003e12:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003e16:	f003 031f 	and.w	r3, r3, #31
}
 8003e1a:	40d8      	lsrs	r0, r3
 8003e1c:	bd08      	pop	{r3, pc}
 8003e1e:	bf00      	nop
 8003e20:	0800871c 	.word	0x0800871c

08003e24 <HAL_RCC_GetPCLK2Freq>:
{
 8003e24:	b508      	push	{r3, lr}
  return ((uint32_t)(__LL_RCC_CALC_PCLK2_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB2Prescaler())));
 8003e26:	f7ff fb13 	bl	8003450 <HAL_RCC_GetHCLKFreq>
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2));
 8003e2a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003e2e:	689b      	ldr	r3, [r3, #8]
 8003e30:	f3c3 23c2 	ubfx	r3, r3, #11, #3
 8003e34:	4a03      	ldr	r2, [pc, #12]	; (8003e44 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003e36:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003e3a:	f003 031f 	and.w	r3, r3, #31
}
 8003e3e:	40d8      	lsrs	r0, r3
 8003e40:	bd08      	pop	{r3, pc}
 8003e42:	bf00      	nop
 8003e44:	0800871c 	.word	0x0800871c

08003e48 <RCCEx_PLLSAI1_ConfigNP>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNP(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 8003e48:	b570      	push	{r4, r5, r6, lr}
 8003e4a:	4605      	mov	r5, r0
  CLEAR_BIT(RCC->CR, RCC_CR_PLLSAI1ON);
 8003e4c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003e50:	6813      	ldr	r3, [r2, #0]
 8003e52:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8003e56:	6013      	str	r3, [r2, #0]

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8003e58:	f7fd ff5e 	bl	8001d18 <HAL_GetTick>
 8003e5c:	4604      	mov	r4, r0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == (RCC_CR_PLLSAI1RDY)) ? 1UL : 0UL);
 8003e5e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003e62:	681b      	ldr	r3, [r3, #0]
 8003e64:	f013 6f00 	tst.w	r3, #134217728	; 0x8000000
 8003e68:	d006      	beq.n	8003e78 <RCCEx_PLLSAI1_ConfigNP+0x30>

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003e6a:	f7fd ff55 	bl	8001d18 <HAL_GetTick>
 8003e6e:	1b00      	subs	r0, r0, r4
 8003e70:	2802      	cmp	r0, #2
 8003e72:	d9f4      	bls.n	8003e5e <RCCEx_PLLSAI1_ConfigNP+0x16>
    {
      status = HAL_TIMEOUT;
 8003e74:	2403      	movs	r4, #3
 8003e76:	e000      	b.n	8003e7a <RCCEx_PLLSAI1_ConfigNP+0x32>
  HAL_StatusTypeDef status = HAL_OK;
 8003e78:	2400      	movs	r4, #0
      break;
    }
  }

  if (status == HAL_OK)
 8003e7a:	b10c      	cbz	r4, 8003e80 <RCCEx_PLLSAI1_ConfigNP+0x38>
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
    }
  }

  return status;
}
 8003e7c:	4620      	mov	r0, r4
 8003e7e:	bd70      	pop	{r4, r5, r6, pc}
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 8003e80:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003e84:	691a      	ldr	r2, [r3, #16]
 8003e86:	f422 42fe 	bic.w	r2, r2, #32512	; 0x7f00
 8003e8a:	6829      	ldr	r1, [r5, #0]
 8003e8c:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8003e90:	611a      	str	r2, [r3, #16]
    __HAL_RCC_PLLSAI1_DIVP_CONFIG(PLLSAI1->PLLP);
 8003e92:	691a      	ldr	r2, [r3, #16]
 8003e94:	f422 1278 	bic.w	r2, r2, #4063232	; 0x3e0000
 8003e98:	6869      	ldr	r1, [r5, #4]
 8003e9a:	430a      	orrs	r2, r1
 8003e9c:	611a      	str	r2, [r3, #16]
  SET_BIT(RCC->CR, RCC_CR_PLLSAI1ON);
 8003e9e:	681a      	ldr	r2, [r3, #0]
 8003ea0:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 8003ea4:	601a      	str	r2, [r3, #0]
    tickstart = HAL_GetTick();
 8003ea6:	f7fd ff37 	bl	8001d18 <HAL_GetTick>
 8003eaa:	4606      	mov	r6, r0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == (RCC_CR_PLLSAI1RDY)) ? 1UL : 0UL);
 8003eac:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003eb0:	681b      	ldr	r3, [r3, #0]
 8003eb2:	f013 6f00 	tst.w	r3, #134217728	; 0x8000000
 8003eb6:	d105      	bne.n	8003ec4 <RCCEx_PLLSAI1_ConfigNP+0x7c>
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003eb8:	f7fd ff2e 	bl	8001d18 <HAL_GetTick>
 8003ebc:	1b80      	subs	r0, r0, r6
 8003ebe:	2802      	cmp	r0, #2
 8003ec0:	d9f4      	bls.n	8003eac <RCCEx_PLLSAI1_ConfigNP+0x64>
        status = HAL_TIMEOUT;
 8003ec2:	2403      	movs	r4, #3
    if (status == HAL_OK)
 8003ec4:	2c00      	cmp	r4, #0
 8003ec6:	d1d9      	bne.n	8003e7c <RCCEx_PLLSAI1_ConfigNP+0x34>
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 8003ec8:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003ecc:	6913      	ldr	r3, [r2, #16]
 8003ece:	6929      	ldr	r1, [r5, #16]
 8003ed0:	430b      	orrs	r3, r1
 8003ed2:	6113      	str	r3, [r2, #16]
 8003ed4:	e7d2      	b.n	8003e7c <RCCEx_PLLSAI1_ConfigNP+0x34>

08003ed6 <RCCEx_PLLSAI1_ConfigNQ>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNQ(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 8003ed6:	b570      	push	{r4, r5, r6, lr}
 8003ed8:	4605      	mov	r5, r0
  CLEAR_BIT(RCC->CR, RCC_CR_PLLSAI1ON);
 8003eda:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003ede:	6813      	ldr	r3, [r2, #0]
 8003ee0:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8003ee4:	6013      	str	r3, [r2, #0]

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8003ee6:	f7fd ff17 	bl	8001d18 <HAL_GetTick>
 8003eea:	4604      	mov	r4, r0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == (RCC_CR_PLLSAI1RDY)) ? 1UL : 0UL);
 8003eec:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003ef0:	681b      	ldr	r3, [r3, #0]
 8003ef2:	f013 6f00 	tst.w	r3, #134217728	; 0x8000000
 8003ef6:	d006      	beq.n	8003f06 <RCCEx_PLLSAI1_ConfigNQ+0x30>

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003ef8:	f7fd ff0e 	bl	8001d18 <HAL_GetTick>
 8003efc:	1b00      	subs	r0, r0, r4
 8003efe:	2802      	cmp	r0, #2
 8003f00:	d9f4      	bls.n	8003eec <RCCEx_PLLSAI1_ConfigNQ+0x16>
    {
      status = HAL_TIMEOUT;
 8003f02:	2403      	movs	r4, #3
 8003f04:	e000      	b.n	8003f08 <RCCEx_PLLSAI1_ConfigNQ+0x32>
  HAL_StatusTypeDef status = HAL_OK;
 8003f06:	2400      	movs	r4, #0
      break;
    }
  }

  if (status == HAL_OK)
 8003f08:	b10c      	cbz	r4, 8003f0e <RCCEx_PLLSAI1_ConfigNQ+0x38>
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
    }
  }

  return status;
}
 8003f0a:	4620      	mov	r0, r4
 8003f0c:	bd70      	pop	{r4, r5, r6, pc}
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 8003f0e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003f12:	691a      	ldr	r2, [r3, #16]
 8003f14:	f422 42fe 	bic.w	r2, r2, #32512	; 0x7f00
 8003f18:	6829      	ldr	r1, [r5, #0]
 8003f1a:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8003f1e:	611a      	str	r2, [r3, #16]
    __HAL_RCC_PLLSAI1_DIVQ_CONFIG(PLLSAI1->PLLQ);
 8003f20:	691a      	ldr	r2, [r3, #16]
 8003f22:	f022 6260 	bic.w	r2, r2, #234881024	; 0xe000000
 8003f26:	68a9      	ldr	r1, [r5, #8]
 8003f28:	430a      	orrs	r2, r1
 8003f2a:	611a      	str	r2, [r3, #16]
  SET_BIT(RCC->CR, RCC_CR_PLLSAI1ON);
 8003f2c:	681a      	ldr	r2, [r3, #0]
 8003f2e:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 8003f32:	601a      	str	r2, [r3, #0]
    tickstart = HAL_GetTick();
 8003f34:	f7fd fef0 	bl	8001d18 <HAL_GetTick>
 8003f38:	4606      	mov	r6, r0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == (RCC_CR_PLLSAI1RDY)) ? 1UL : 0UL);
 8003f3a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003f3e:	681b      	ldr	r3, [r3, #0]
 8003f40:	f013 6f00 	tst.w	r3, #134217728	; 0x8000000
 8003f44:	d105      	bne.n	8003f52 <RCCEx_PLLSAI1_ConfigNQ+0x7c>
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003f46:	f7fd fee7 	bl	8001d18 <HAL_GetTick>
 8003f4a:	1b80      	subs	r0, r0, r6
 8003f4c:	2802      	cmp	r0, #2
 8003f4e:	d9f4      	bls.n	8003f3a <RCCEx_PLLSAI1_ConfigNQ+0x64>
        status = HAL_TIMEOUT;
 8003f50:	2403      	movs	r4, #3
    if (status == HAL_OK)
 8003f52:	2c00      	cmp	r4, #0
 8003f54:	d1d9      	bne.n	8003f0a <RCCEx_PLLSAI1_ConfigNQ+0x34>
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 8003f56:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003f5a:	6913      	ldr	r3, [r2, #16]
 8003f5c:	6929      	ldr	r1, [r5, #16]
 8003f5e:	430b      	orrs	r3, r1
 8003f60:	6113      	str	r3, [r2, #16]
 8003f62:	e7d2      	b.n	8003f0a <RCCEx_PLLSAI1_ConfigNQ+0x34>

08003f64 <RCCEx_PLLSAI1_ConfigNR>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNR(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 8003f64:	b570      	push	{r4, r5, r6, lr}
 8003f66:	4605      	mov	r5, r0
  CLEAR_BIT(RCC->CR, RCC_CR_PLLSAI1ON);
 8003f68:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003f6c:	6813      	ldr	r3, [r2, #0]
 8003f6e:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8003f72:	6013      	str	r3, [r2, #0]

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8003f74:	f7fd fed0 	bl	8001d18 <HAL_GetTick>
 8003f78:	4604      	mov	r4, r0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == (RCC_CR_PLLSAI1RDY)) ? 1UL : 0UL);
 8003f7a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003f7e:	681b      	ldr	r3, [r3, #0]
 8003f80:	f013 6f00 	tst.w	r3, #134217728	; 0x8000000
 8003f84:	d006      	beq.n	8003f94 <RCCEx_PLLSAI1_ConfigNR+0x30>

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003f86:	f7fd fec7 	bl	8001d18 <HAL_GetTick>
 8003f8a:	1b00      	subs	r0, r0, r4
 8003f8c:	2802      	cmp	r0, #2
 8003f8e:	d9f4      	bls.n	8003f7a <RCCEx_PLLSAI1_ConfigNR+0x16>
    {
      status = HAL_TIMEOUT;
 8003f90:	2403      	movs	r4, #3
 8003f92:	e000      	b.n	8003f96 <RCCEx_PLLSAI1_ConfigNR+0x32>
  HAL_StatusTypeDef status = HAL_OK;
 8003f94:	2400      	movs	r4, #0
      break;
    }
  }

  if (status == HAL_OK)
 8003f96:	b10c      	cbz	r4, 8003f9c <RCCEx_PLLSAI1_ConfigNR+0x38>
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
    }
  }

  return status;
}
 8003f98:	4620      	mov	r0, r4
 8003f9a:	bd70      	pop	{r4, r5, r6, pc}
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 8003f9c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003fa0:	691a      	ldr	r2, [r3, #16]
 8003fa2:	f422 42fe 	bic.w	r2, r2, #32512	; 0x7f00
 8003fa6:	6829      	ldr	r1, [r5, #0]
 8003fa8:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8003fac:	611a      	str	r2, [r3, #16]
    __HAL_RCC_PLLSAI1_DIVR_CONFIG(PLLSAI1->PLLR);
 8003fae:	691a      	ldr	r2, [r3, #16]
 8003fb0:	f022 4260 	bic.w	r2, r2, #3758096384	; 0xe0000000
 8003fb4:	68e9      	ldr	r1, [r5, #12]
 8003fb6:	430a      	orrs	r2, r1
 8003fb8:	611a      	str	r2, [r3, #16]
  SET_BIT(RCC->CR, RCC_CR_PLLSAI1ON);
 8003fba:	681a      	ldr	r2, [r3, #0]
 8003fbc:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 8003fc0:	601a      	str	r2, [r3, #0]
    tickstart = HAL_GetTick();
 8003fc2:	f7fd fea9 	bl	8001d18 <HAL_GetTick>
 8003fc6:	4606      	mov	r6, r0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == (RCC_CR_PLLSAI1RDY)) ? 1UL : 0UL);
 8003fc8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003fcc:	681b      	ldr	r3, [r3, #0]
 8003fce:	f013 6f00 	tst.w	r3, #134217728	; 0x8000000
 8003fd2:	d105      	bne.n	8003fe0 <RCCEx_PLLSAI1_ConfigNR+0x7c>
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003fd4:	f7fd fea0 	bl	8001d18 <HAL_GetTick>
 8003fd8:	1b80      	subs	r0, r0, r6
 8003fda:	2802      	cmp	r0, #2
 8003fdc:	d9f4      	bls.n	8003fc8 <RCCEx_PLLSAI1_ConfigNR+0x64>
        status = HAL_TIMEOUT;
 8003fde:	2403      	movs	r4, #3
    if (status == HAL_OK)
 8003fe0:	2c00      	cmp	r4, #0
 8003fe2:	d1d9      	bne.n	8003f98 <RCCEx_PLLSAI1_ConfigNR+0x34>
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 8003fe4:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003fe8:	6913      	ldr	r3, [r2, #16]
 8003fea:	6929      	ldr	r1, [r5, #16]
 8003fec:	430b      	orrs	r3, r1
 8003fee:	6113      	str	r3, [r2, #16]
 8003ff0:	e7d2      	b.n	8003f98 <RCCEx_PLLSAI1_ConfigNR+0x34>

08003ff2 <HAL_RCCEx_PeriphCLKConfig>:
{
 8003ff2:	b570      	push	{r4, r5, r6, lr}
 8003ff4:	4604      	mov	r4, r0
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8003ff6:	6803      	ldr	r3, [r0, #0]
 8003ff8:	f013 0f40 	tst.w	r3, #64	; 0x40
 8003ffc:	d02f      	beq.n	800405e <HAL_RCCEx_PeriphCLKConfig+0x6c>
    switch (PeriphClkInit->Sai1ClockSelection)
 8003ffe:	6b03      	ldr	r3, [r0, #48]	; 0x30
 8004000:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004004:	d021      	beq.n	800404a <HAL_RCCEx_PeriphCLKConfig+0x58>
 8004006:	d80a      	bhi.n	800401e <HAL_RCCEx_PeriphCLKConfig+0x2c>
 8004008:	b933      	cbnz	r3, 8004018 <HAL_RCCEx_PeriphCLKConfig+0x26>
        ret = RCCEx_PLLSAI1_ConfigNP(&(PeriphClkInit->PLLSAI1));
 800400a:	3004      	adds	r0, #4
 800400c:	f7ff ff1c 	bl	8003e48 <RCCEx_PLLSAI1_ConfigNP>
    if (ret == HAL_OK)
 8004010:	4606      	mov	r6, r0
 8004012:	b158      	cbz	r0, 800402c <HAL_RCCEx_PeriphCLKConfig+0x3a>
        ret = RCCEx_PLLSAI1_ConfigNP(&(PeriphClkInit->PLLSAI1));
 8004014:	4605      	mov	r5, r0
 8004016:	e024      	b.n	8004062 <HAL_RCCEx_PeriphCLKConfig+0x70>
    switch (PeriphClkInit->Sai1ClockSelection)
 8004018:	2501      	movs	r5, #1
 800401a:	462e      	mov	r6, r5
 800401c:	e021      	b.n	8004062 <HAL_RCCEx_PeriphCLKConfig+0x70>
 800401e:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8004022:	d01a      	beq.n	800405a <HAL_RCCEx_PeriphCLKConfig+0x68>
 8004024:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8004028:	d10c      	bne.n	8004044 <HAL_RCCEx_PeriphCLKConfig+0x52>
 800402a:	2600      	movs	r6, #0
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800402c:	6b23      	ldr	r3, [r4, #48]	; 0x30
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_SAI1SEL, SAIxSource);
 800402e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004032:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 8004036:	f422 0240 	bic.w	r2, r2, #12582912	; 0xc00000
 800403a:	4313      	orrs	r3, r2
 800403c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  HAL_StatusTypeDef status  = HAL_OK;   /* Final status */
 8004040:	2500      	movs	r5, #0
}
 8004042:	e00e      	b.n	8004062 <HAL_RCCEx_PeriphCLKConfig+0x70>
    switch (PeriphClkInit->Sai1ClockSelection)
 8004044:	2501      	movs	r5, #1
 8004046:	462e      	mov	r6, r5
 8004048:	e00b      	b.n	8004062 <HAL_RCCEx_PeriphCLKConfig+0x70>
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI1CLK);
 800404a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800404e:	68d3      	ldr	r3, [r2, #12]
 8004050:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004054:	60d3      	str	r3, [r2, #12]
  HAL_StatusTypeDef ret     = HAL_OK;      /* Intermediate status */
 8004056:	2600      	movs	r6, #0
 8004058:	e7e8      	b.n	800402c <HAL_RCCEx_PeriphCLKConfig+0x3a>
    switch (PeriphClkInit->Sai1ClockSelection)
 800405a:	2600      	movs	r6, #0
 800405c:	e7e6      	b.n	800402c <HAL_RCCEx_PeriphCLKConfig+0x3a>
  HAL_StatusTypeDef status  = HAL_OK;   /* Final status */
 800405e:	2500      	movs	r5, #0
  HAL_StatusTypeDef ret     = HAL_OK;      /* Intermediate status */
 8004060:	462e      	mov	r6, r5
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8004062:	6823      	ldr	r3, [r4, #0]
 8004064:	f413 6f00 	tst.w	r3, #2048	; 0x800
 8004068:	d00a      	beq.n	8004080 <HAL_RCCEx_PeriphCLKConfig+0x8e>
  return (uint32_t)(READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL));
 800406a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800406e:	f8d3 5090 	ldr.w	r5, [r3, #144]	; 0x90
 8004072:	f405 7540 	and.w	r5, r5, #768	; 0x300
    if (rtcclocksource != PeriphClkInit->RTCClockSelection)
 8004076:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8004078:	42ab      	cmp	r3, r5
 800407a:	f040 80d5 	bne.w	8004228 <HAL_RCCEx_PeriphCLKConfig+0x236>
      status = ret;
 800407e:	4635      	mov	r5, r6
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004080:	6823      	ldr	r3, [r4, #0]
 8004082:	f013 0f01 	tst.w	r3, #1
 8004086:	d009      	beq.n	800409c <HAL_RCCEx_PeriphCLKConfig+0xaa>
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8004088:	69a3      	ldr	r3, [r4, #24]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_USART1SEL, USARTxSource);
 800408a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800408e:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 8004092:	f022 0203 	bic.w	r2, r2, #3
 8004096:	4313      	orrs	r3, r2
 8004098:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800409c:	6823      	ldr	r3, [r4, #0]
 800409e:	f013 0f02 	tst.w	r3, #2
 80040a2:	d009      	beq.n	80040b8 <HAL_RCCEx_PeriphCLKConfig+0xc6>
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80040a4:	69e3      	ldr	r3, [r4, #28]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_LPUART1SEL, LPUARTxSource);
 80040a6:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80040aa:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 80040ae:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 80040b2:	4313      	orrs	r3, r2
 80040b4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80040b8:	6823      	ldr	r3, [r4, #0]
 80040ba:	f013 0f10 	tst.w	r3, #16
 80040be:	d00c      	beq.n	80040da <HAL_RCCEx_PeriphCLKConfig+0xe8>
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80040c0:	6aa0      	ldr	r0, [r4, #40]	; 0x28
  MODIFY_REG(RCC->CCIPR, (LPTIMxSource & 0xFFFF0000U), (LPTIMxSource << 16));
 80040c2:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80040c6:	f8d1 3088 	ldr.w	r3, [r1, #136]	; 0x88
 80040ca:	0c02      	lsrs	r2, r0, #16
 80040cc:	0412      	lsls	r2, r2, #16
 80040ce:	ea23 0302 	bic.w	r3, r3, r2
 80040d2:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 80040d6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 80040da:	6823      	ldr	r3, [r4, #0]
 80040dc:	f013 0f20 	tst.w	r3, #32
 80040e0:	d00c      	beq.n	80040fc <HAL_RCCEx_PeriphCLKConfig+0x10a>
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80040e2:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 80040e4:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80040e8:	f8d1 3088 	ldr.w	r3, [r1, #136]	; 0x88
 80040ec:	0c02      	lsrs	r2, r0, #16
 80040ee:	0412      	lsls	r2, r2, #16
 80040f0:	ea23 0302 	bic.w	r3, r3, r2
 80040f4:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 80040f8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80040fc:	6823      	ldr	r3, [r4, #0]
 80040fe:	f013 0f04 	tst.w	r3, #4
 8004102:	d00f      	beq.n	8004124 <HAL_RCCEx_PeriphCLKConfig+0x132>
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8004104:	6a23      	ldr	r3, [r4, #32]
  MODIFY_REG(RCC->CCIPR, ((I2CxSource >> 4) & 0x000FF000U), ((I2CxSource << 4) & 0x000FF000U));
 8004106:	f04f 40b0 	mov.w	r0, #1476395008	; 0x58000000
 800410a:	f8d0 2088 	ldr.w	r2, [r0, #136]	; 0x88
 800410e:	0919      	lsrs	r1, r3, #4
 8004110:	f401 217f 	and.w	r1, r1, #1044480	; 0xff000
 8004114:	ea22 0201 	bic.w	r2, r2, r1
 8004118:	011b      	lsls	r3, r3, #4
 800411a:	f403 237f 	and.w	r3, r3, #1044480	; 0xff000
 800411e:	4313      	orrs	r3, r2
 8004120:	f8c0 3088 	str.w	r3, [r0, #136]	; 0x88
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8004124:	6823      	ldr	r3, [r4, #0]
 8004126:	f013 0f08 	tst.w	r3, #8
 800412a:	d00f      	beq.n	800414c <HAL_RCCEx_PeriphCLKConfig+0x15a>
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800412c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800412e:	f04f 40b0 	mov.w	r0, #1476395008	; 0x58000000
 8004132:	f8d0 2088 	ldr.w	r2, [r0, #136]	; 0x88
 8004136:	0919      	lsrs	r1, r3, #4
 8004138:	f401 217f 	and.w	r1, r1, #1044480	; 0xff000
 800413c:	ea22 0201 	bic.w	r2, r2, r1
 8004140:	011b      	lsls	r3, r3, #4
 8004142:	f403 237f 	and.w	r3, r3, #1044480	; 0xff000
 8004146:	4313      	orrs	r3, r2
 8004148:	f8c0 3088 	str.w	r3, [r0, #136]	; 0x88
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 800414c:	6823      	ldr	r3, [r4, #0]
 800414e:	f413 7f80 	tst.w	r3, #256	; 0x100
 8004152:	d013      	beq.n	800417c <HAL_RCCEx_PeriphCLKConfig+0x18a>
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004154:	6b63      	ldr	r3, [r4, #52]	; 0x34
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_CLK48SEL, CLK48xSource);
 8004156:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800415a:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 800415e:	f022 6240 	bic.w	r2, r2, #201326592	; 0xc000000
 8004162:	4313      	orrs	r3, r2
 8004164:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8004168:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800416a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800416e:	f000 809c 	beq.w	80042aa <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8004172:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8004174:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004178:	f000 809c 	beq.w	80042b4 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 800417c:	6823      	ldr	r3, [r4, #0]
 800417e:	f413 7f00 	tst.w	r3, #512	; 0x200
 8004182:	d017      	beq.n	80041b4 <HAL_RCCEx_PeriphCLKConfig+0x1c2>
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8004184:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8004186:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800418a:	d005      	beq.n	8004198 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
 800418c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004190:	d002      	beq.n	8004198 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
 8004192:	2b00      	cmp	r3, #0
 8004194:	f040 8096 	bne.w	80042c4 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_RNGSEL, RNGxSource);
 8004198:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800419c:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 80041a0:	f022 4240 	bic.w	r2, r2, #3221225472	; 0xc0000000
 80041a4:	4313      	orrs	r3, r2
 80041a6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    if (PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80041aa:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80041ac:	f1b3 5fc0 	cmp.w	r3, #402653184	; 0x18000000
 80041b0:	f000 809a 	beq.w	80042e8 <HAL_RCCEx_PeriphCLKConfig+0x2f6>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80041b4:	6823      	ldr	r3, [r4, #0]
 80041b6:	f413 6f80 	tst.w	r3, #1024	; 0x400
 80041ba:	d013      	beq.n	80041e4 <HAL_RCCEx_PeriphCLKConfig+0x1f2>
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80041bc:	6be3      	ldr	r3, [r4, #60]	; 0x3c
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_ADCSEL, ADCxSource);
 80041be:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80041c2:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 80041c6:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80041ca:	4313      	orrs	r3, r2
 80041cc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLL)
 80041d0:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 80041d2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80041d6:	f000 808e 	beq.w	80042f6 <HAL_RCCEx_PeriphCLKConfig+0x304>
  if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 80041da:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 80041dc:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80041e0:	f000 808e 	beq.w	8004300 <HAL_RCCEx_PeriphCLKConfig+0x30e>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RFWAKEUP) == RCC_PERIPHCLK_RFWAKEUP)
 80041e4:	6823      	ldr	r3, [r4, #0]
 80041e6:	f413 5f80 	tst.w	r3, #4096	; 0x1000
 80041ea:	d009      	beq.n	8004200 <HAL_RCCEx_PeriphCLKConfig+0x20e>
    __HAL_RCC_RFWAKEUP_CONFIG(PeriphClkInit->RFWakeUpClockSelection);
 80041ec:	6c63      	ldr	r3, [r4, #68]	; 0x44
  MODIFY_REG(RCC->CSR, RCC_CSR_RFWKPSEL, Source);
 80041ee:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80041f2:	f8d1 2094 	ldr.w	r2, [r1, #148]	; 0x94
 80041f6:	f422 4240 	bic.w	r2, r2, #49152	; 0xc000
 80041fa:	4313      	orrs	r3, r2
 80041fc:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SMPS) == RCC_PERIPHCLK_SMPS)
 8004200:	6823      	ldr	r3, [r4, #0]
 8004202:	f413 5f00 	tst.w	r3, #8192	; 0x2000
 8004206:	d00d      	beq.n	8004224 <HAL_RCCEx_PeriphCLKConfig+0x232>
    __HAL_RCC_SMPS_DIV_CONFIG(PeriphClkInit->SmpsDivSelection);
 8004208:	6ce2      	ldr	r2, [r4, #76]	; 0x4c
  MODIFY_REG(RCC->SMPSCR, RCC_SMPSCR_SMPSDIV, Prescaler);
 800420a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800420e:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8004210:	f021 0130 	bic.w	r1, r1, #48	; 0x30
 8004214:	430a      	orrs	r2, r1
 8004216:	625a      	str	r2, [r3, #36]	; 0x24
    __HAL_RCC_SMPS_CONFIG(PeriphClkInit->SmpsClockSelection);
 8004218:	6ca2      	ldr	r2, [r4, #72]	; 0x48
  MODIFY_REG(RCC->SMPSCR, RCC_SMPSCR_SMPSSEL, SMPSSource);
 800421a:	6a59      	ldr	r1, [r3, #36]	; 0x24
 800421c:	f021 0103 	bic.w	r1, r1, #3
 8004220:	430a      	orrs	r2, r1
 8004222:	625a      	str	r2, [r3, #36]	; 0x24
}
 8004224:	4628      	mov	r0, r5
 8004226:	bd70      	pop	{r4, r5, r6, pc}
      HAL_PWR_EnableBkUpAccess();
 8004228:	f7ff f81e 	bl	8003268 <HAL_PWR_EnableBkUpAccess>
      if (rtcclocksource == RCC_RTCCLKSOURCE_NONE)
 800422c:	b95d      	cbnz	r5, 8004246 <HAL_RCCEx_PeriphCLKConfig+0x254>
        LL_RCC_SetRTCClockSource(PeriphClkInit->RTCClockSelection);
 800422e:	6c23      	ldr	r3, [r4, #64]	; 0x40
  MODIFY_REG(RCC->BDCR, RCC_BDCR_RTCSEL, Source);
 8004230:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004234:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 8004238:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 800423c:	4313      	orrs	r3, r2
 800423e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
}
 8004242:	4635      	mov	r5, r6
 8004244:	e71c      	b.n	8004080 <HAL_RCCEx_PeriphCLKConfig+0x8e>
        uint32_t bdcr = LL_RCC_ReadReg(BDCR);
 8004246:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800424a:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
  SET_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 800424e:	f8d3 1090 	ldr.w	r1, [r3, #144]	; 0x90
 8004252:	f441 3180 	orr.w	r1, r1, #65536	; 0x10000
 8004256:	f8c3 1090 	str.w	r1, [r3, #144]	; 0x90
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 800425a:	f8d3 1090 	ldr.w	r1, [r3, #144]	; 0x90
 800425e:	f421 3180 	bic.w	r1, r1, #65536	; 0x10000
 8004262:	f8c3 1090 	str.w	r1, [r3, #144]	; 0x90
        MODIFY_REG(bdcr, RCC_BDCR_RTCSEL, PeriphClkInit->RTCClockSelection);
 8004266:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 800426a:	6c21      	ldr	r1, [r4, #64]	; 0x40
 800426c:	430a      	orrs	r2, r1
        LL_RCC_WriteReg(BDCR, bdcr);
 800426e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSEON) == (RCC_BDCR_LSEON)) ? 1UL : 0UL);
 8004272:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004276:	f013 0f01 	tst.w	r3, #1
 800427a:	d012      	beq.n	80042a2 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
          tickstart = HAL_GetTick();
 800427c:	f7fd fd4c 	bl	8001d18 <HAL_GetTick>
 8004280:	4605      	mov	r5, r0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 8004282:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004286:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800428a:	f013 0f02 	tst.w	r3, #2
 800428e:	d10a      	bne.n	80042a6 <HAL_RCCEx_PeriphCLKConfig+0x2b4>
            if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004290:	f7fd fd42 	bl	8001d18 <HAL_GetTick>
 8004294:	1b40      	subs	r0, r0, r5
 8004296:	f241 3388 	movw	r3, #5000	; 0x1388
 800429a:	4298      	cmp	r0, r3
 800429c:	d9f1      	bls.n	8004282 <HAL_RCCEx_PeriphCLKConfig+0x290>
              ret = HAL_TIMEOUT;
 800429e:	2503      	movs	r5, #3
 80042a0:	e6ee      	b.n	8004080 <HAL_RCCEx_PeriphCLKConfig+0x8e>
 80042a2:	4635      	mov	r5, r6
 80042a4:	e6ec      	b.n	8004080 <HAL_RCCEx_PeriphCLKConfig+0x8e>
 80042a6:	4635      	mov	r5, r6
 80042a8:	e6ea      	b.n	8004080 <HAL_RCCEx_PeriphCLKConfig+0x8e>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_USBCLK);
 80042aa:	68cb      	ldr	r3, [r1, #12]
 80042ac:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80042b0:	60cb      	str	r3, [r1, #12]
 80042b2:	e75e      	b.n	8004172 <HAL_RCCEx_PeriphCLKConfig+0x180>
    ret = RCCEx_PLLSAI1_ConfigNQ(&(PeriphClkInit->PLLSAI1));
 80042b4:	1d20      	adds	r0, r4, #4
 80042b6:	f7ff fe0e 	bl	8003ed6 <RCCEx_PLLSAI1_ConfigNQ>
    if (ret != HAL_OK)
 80042ba:	2800      	cmp	r0, #0
 80042bc:	f43f af5e 	beq.w	800417c <HAL_RCCEx_PeriphCLKConfig+0x18a>
      status = ret;
 80042c0:	4605      	mov	r5, r0
 80042c2:	e75b      	b.n	800417c <HAL_RCCEx_PeriphCLKConfig+0x18a>
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80042c4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_RNGSEL, RNGxSource);
 80042c8:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80042cc:	f8d2 1088 	ldr.w	r1, [r2, #136]	; 0x88
 80042d0:	f021 4140 	bic.w	r1, r1, #3221225472	; 0xc0000000
 80042d4:	f8c2 1088 	str.w	r1, [r2, #136]	; 0x88
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_CLK48SEL, CLK48xSource);
 80042d8:	f8d2 1088 	ldr.w	r1, [r2, #136]	; 0x88
 80042dc:	f021 6140 	bic.w	r1, r1, #201326592	; 0xc000000
 80042e0:	430b      	orrs	r3, r1
 80042e2:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
}
 80042e6:	e760      	b.n	80041aa <HAL_RCCEx_PeriphCLKConfig+0x1b8>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_RNGCLK);
 80042e8:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80042ec:	68d3      	ldr	r3, [r2, #12]
 80042ee:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80042f2:	60d3      	str	r3, [r2, #12]
 80042f4:	e75e      	b.n	80041b4 <HAL_RCCEx_PeriphCLKConfig+0x1c2>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 80042f6:	68cb      	ldr	r3, [r1, #12]
 80042f8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80042fc:	60cb      	str	r3, [r1, #12]
 80042fe:	e76c      	b.n	80041da <HAL_RCCEx_PeriphCLKConfig+0x1e8>
    ret = RCCEx_PLLSAI1_ConfigNR(&(PeriphClkInit->PLLSAI1));
 8004300:	1d20      	adds	r0, r4, #4
 8004302:	f7ff fe2f 	bl	8003f64 <RCCEx_PLLSAI1_ConfigNR>
    if (ret != HAL_OK)
 8004306:	2800      	cmp	r0, #0
 8004308:	f43f af6c 	beq.w	80041e4 <HAL_RCCEx_PeriphCLKConfig+0x1f2>
      status = ret;
 800430c:	4605      	mov	r5, r0
 800430e:	e769      	b.n	80041e4 <HAL_RCCEx_PeriphCLKConfig+0x1f2>

08004310 <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8004310:	b538      	push	{r3, r4, r5, lr}
 8004312:	4604      	mov	r4, r0
  uint32_t tickstart;

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 8004314:	6802      	ldr	r2, [r0, #0]
 8004316:	68d3      	ldr	r3, [r2, #12]
 8004318:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800431c:	60d3      	str	r3, [r2, #12]

  tickstart = HAL_GetTick();
 800431e:	f7fd fcfb 	bl	8001d18 <HAL_GetTick>
 8004322:	4605      	mov	r5, r0

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8004324:	6823      	ldr	r3, [r4, #0]
 8004326:	68db      	ldr	r3, [r3, #12]
 8004328:	f013 0f20 	tst.w	r3, #32
 800432c:	d107      	bne.n	800433e <HAL_RTC_WaitForSynchro+0x2e>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 800432e:	f7fd fcf3 	bl	8001d18 <HAL_GetTick>
 8004332:	1b40      	subs	r0, r0, r5
 8004334:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 8004338:	d9f4      	bls.n	8004324 <HAL_RTC_WaitForSynchro+0x14>
    {
      return HAL_TIMEOUT;
 800433a:	2003      	movs	r0, #3
 800433c:	e000      	b.n	8004340 <HAL_RTC_WaitForSynchro+0x30>
    }
  }

  return HAL_OK;
 800433e:	2000      	movs	r0, #0
}
 8004340:	bd38      	pop	{r3, r4, r5, pc}

08004342 <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8004342:	b538      	push	{r3, r4, r5, lr}
  uint32_t tickstart;

  /* Check if the Initialization mode is set */
  if ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 8004344:	6803      	ldr	r3, [r0, #0]
 8004346:	68da      	ldr	r2, [r3, #12]
 8004348:	f012 0f40 	tst.w	r2, #64	; 0x40
 800434c:	d001      	beq.n	8004352 <RTC_EnterInitMode+0x10>
        return HAL_TIMEOUT;
      }
    }
  }

  return HAL_OK;
 800434e:	2000      	movs	r0, #0
}
 8004350:	bd38      	pop	{r3, r4, r5, pc}
 8004352:	4604      	mov	r4, r0
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 8004354:	f04f 32ff 	mov.w	r2, #4294967295
 8004358:	60da      	str	r2, [r3, #12]
    tickstart = HAL_GetTick();
 800435a:	f7fd fcdd 	bl	8001d18 <HAL_GetTick>
 800435e:	4605      	mov	r5, r0
    while ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 8004360:	6823      	ldr	r3, [r4, #0]
 8004362:	68db      	ldr	r3, [r3, #12]
 8004364:	f013 0f40 	tst.w	r3, #64	; 0x40
 8004368:	d107      	bne.n	800437a <RTC_EnterInitMode+0x38>
      if ((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 800436a:	f7fd fcd5 	bl	8001d18 <HAL_GetTick>
 800436e:	1b43      	subs	r3, r0, r5
 8004370:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004374:	d9f4      	bls.n	8004360 <RTC_EnterInitMode+0x1e>
        return HAL_TIMEOUT;
 8004376:	2003      	movs	r0, #3
 8004378:	e7ea      	b.n	8004350 <RTC_EnterInitMode+0xe>
  return HAL_OK;
 800437a:	2000      	movs	r0, #0
 800437c:	e7e8      	b.n	8004350 <RTC_EnterInitMode+0xe>

0800437e <HAL_RTC_Init>:
{
 800437e:	b538      	push	{r3, r4, r5, lr}
  if (hrtc == NULL)
 8004380:	2800      	cmp	r0, #0
 8004382:	d067      	beq.n	8004454 <HAL_RTC_Init+0xd6>
 8004384:	4604      	mov	r4, r0
  if (hrtc->State == HAL_RTC_STATE_RESET)
 8004386:	f890 3021 	ldrb.w	r3, [r0, #33]	; 0x21
 800438a:	2b00      	cmp	r3, #0
 800438c:	d045      	beq.n	800441a <HAL_RTC_Init+0x9c>
  hrtc->State = HAL_RTC_STATE_BUSY;
 800438e:	2302      	movs	r3, #2
 8004390:	f884 3021 	strb.w	r3, [r4, #33]	; 0x21
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8004394:	6823      	ldr	r3, [r4, #0]
 8004396:	22ca      	movs	r2, #202	; 0xca
 8004398:	625a      	str	r2, [r3, #36]	; 0x24
 800439a:	6823      	ldr	r3, [r4, #0]
 800439c:	2253      	movs	r2, #83	; 0x53
 800439e:	625a      	str	r2, [r3, #36]	; 0x24
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 80043a0:	4620      	mov	r0, r4
 80043a2:	f7ff ffce 	bl	8004342 <RTC_EnterInitMode>
 80043a6:	4605      	mov	r5, r0
 80043a8:	2800      	cmp	r0, #0
 80043aa:	d13b      	bne.n	8004424 <HAL_RTC_Init+0xa6>
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 80043ac:	6822      	ldr	r2, [r4, #0]
 80043ae:	6893      	ldr	r3, [r2, #8]
 80043b0:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 80043b4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80043b8:	6093      	str	r3, [r2, #8]
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 80043ba:	6821      	ldr	r1, [r4, #0]
 80043bc:	688a      	ldr	r2, [r1, #8]
 80043be:	6863      	ldr	r3, [r4, #4]
 80043c0:	6920      	ldr	r0, [r4, #16]
 80043c2:	4303      	orrs	r3, r0
 80043c4:	69a0      	ldr	r0, [r4, #24]
 80043c6:	4303      	orrs	r3, r0
 80043c8:	4313      	orrs	r3, r2
 80043ca:	608b      	str	r3, [r1, #8]
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 80043cc:	6823      	ldr	r3, [r4, #0]
 80043ce:	68e2      	ldr	r2, [r4, #12]
 80043d0:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << 16U);
 80043d2:	6822      	ldr	r2, [r4, #0]
 80043d4:	6913      	ldr	r3, [r2, #16]
 80043d6:	68a1      	ldr	r1, [r4, #8]
 80043d8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80043dc:	6113      	str	r3, [r2, #16]
    hrtc->Instance->ISR &= ((uint32_t)~RTC_ISR_INIT);
 80043de:	6822      	ldr	r2, [r4, #0]
 80043e0:	68d3      	ldr	r3, [r2, #12]
 80043e2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80043e6:	60d3      	str	r3, [r2, #12]
    hrtc->Instance->OR &= (uint32_t)~(RTC_OR_ALARMOUTTYPE | RTC_OR_OUT_RMP);
 80043e8:	6822      	ldr	r2, [r4, #0]
 80043ea:	6cd3      	ldr	r3, [r2, #76]	; 0x4c
 80043ec:	f023 0303 	bic.w	r3, r3, #3
 80043f0:	64d3      	str	r3, [r2, #76]	; 0x4c
    hrtc->Instance->OR |= (uint32_t)(hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 80043f2:	6821      	ldr	r1, [r4, #0]
 80043f4:	6ccb      	ldr	r3, [r1, #76]	; 0x4c
 80043f6:	69e2      	ldr	r2, [r4, #28]
 80043f8:	6960      	ldr	r0, [r4, #20]
 80043fa:	4302      	orrs	r2, r0
 80043fc:	4313      	orrs	r3, r2
 80043fe:	64cb      	str	r3, [r1, #76]	; 0x4c
    if ((hrtc->Instance->CR & RTC_CR_BYPSHAD) == 0U)
 8004400:	6823      	ldr	r3, [r4, #0]
 8004402:	689b      	ldr	r3, [r3, #8]
 8004404:	f013 0f20 	tst.w	r3, #32
 8004408:	d014      	beq.n	8004434 <HAL_RTC_Init+0xb6>
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800440a:	6823      	ldr	r3, [r4, #0]
 800440c:	22ff      	movs	r2, #255	; 0xff
 800440e:	625a      	str	r2, [r3, #36]	; 0x24
    hrtc->State = HAL_RTC_STATE_READY;
 8004410:	2301      	movs	r3, #1
 8004412:	f884 3021 	strb.w	r3, [r4, #33]	; 0x21
}
 8004416:	4628      	mov	r0, r5
 8004418:	bd38      	pop	{r3, r4, r5, pc}
    hrtc->Lock = HAL_UNLOCKED;
 800441a:	f880 3020 	strb.w	r3, [r0, #32]
    HAL_RTC_MspInit(hrtc);
 800441e:	f7fd fa9f 	bl	8001960 <HAL_RTC_MspInit>
 8004422:	e7b4      	b.n	800438e <HAL_RTC_Init+0x10>
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8004424:	6823      	ldr	r3, [r4, #0]
 8004426:	22ff      	movs	r2, #255	; 0xff
 8004428:	625a      	str	r2, [r3, #36]	; 0x24
    hrtc->State = HAL_RTC_STATE_ERROR;
 800442a:	2304      	movs	r3, #4
 800442c:	f884 3021 	strb.w	r3, [r4, #33]	; 0x21
    return HAL_ERROR;
 8004430:	2501      	movs	r5, #1
 8004432:	e7f0      	b.n	8004416 <HAL_RTC_Init+0x98>
      if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8004434:	4620      	mov	r0, r4
 8004436:	f7ff ff6b 	bl	8004310 <HAL_RTC_WaitForSynchro>
 800443a:	2800      	cmp	r0, #0
 800443c:	d0e5      	beq.n	800440a <HAL_RTC_Init+0x8c>
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800443e:	6823      	ldr	r3, [r4, #0]
 8004440:	22ff      	movs	r2, #255	; 0xff
 8004442:	625a      	str	r2, [r3, #36]	; 0x24
        hrtc->State = HAL_RTC_STATE_ERROR;
 8004444:	2304      	movs	r3, #4
 8004446:	f884 3021 	strb.w	r3, [r4, #33]	; 0x21
        __HAL_UNLOCK(hrtc);
 800444a:	2300      	movs	r3, #0
 800444c:	f884 3020 	strb.w	r3, [r4, #32]
        return HAL_ERROR;
 8004450:	2501      	movs	r5, #1
 8004452:	e7e0      	b.n	8004416 <HAL_RTC_Init+0x98>
    return HAL_ERROR;
 8004454:	2501      	movs	r5, #1
 8004456:	e7de      	b.n	8004416 <HAL_RTC_Init+0x98>

08004458 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004458:	b430      	push	{r4, r5}
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800445a:	6a03      	ldr	r3, [r0, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800445c:	6a05      	ldr	r5, [r0, #32]
 800445e:	f025 0501 	bic.w	r5, r5, #1
 8004462:	6205      	str	r5, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004464:	6984      	ldr	r4, [r0, #24]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004466:	f024 04f0 	bic.w	r4, r4, #240	; 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800446a:	ea44 1402 	orr.w	r4, r4, r2, lsl #4

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800446e:	f023 030a 	bic.w	r3, r3, #10
  tmpccer |= TIM_ICPolarity;
 8004472:	430b      	orrs	r3, r1

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004474:	6184      	str	r4, [r0, #24]
  TIMx->CCER = tmpccer;
 8004476:	6203      	str	r3, [r0, #32]
}
 8004478:	bc30      	pop	{r4, r5}
 800447a:	4770      	bx	lr

0800447c <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800447c:	b430      	push	{r4, r5}
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800447e:	6a05      	ldr	r5, [r0, #32]
 8004480:	f025 0510 	bic.w	r5, r5, #16
 8004484:	6205      	str	r5, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004486:	6984      	ldr	r4, [r0, #24]
  tmpccer = TIMx->CCER;
 8004488:	6a03      	ldr	r3, [r0, #32]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800448a:	f424 4470 	bic.w	r4, r4, #61440	; 0xf000
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800448e:	ea44 3402 	orr.w	r4, r4, r2, lsl #12

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004492:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
  tmpccer |= (TIM_ICPolarity << 4U);
 8004496:	ea43 1301 	orr.w	r3, r3, r1, lsl #4

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800449a:	6184      	str	r4, [r0, #24]
  TIMx->CCER = tmpccer;
 800449c:	6203      	str	r3, [r0, #32]
}
 800449e:	bc30      	pop	{r4, r5}
 80044a0:	4770      	bx	lr

080044a2 <TIM_ITRx_SetConfig>:
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80044a2:	6883      	ldr	r3, [r0, #8]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80044a4:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 80044a8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80044ac:	430b      	orrs	r3, r1
 80044ae:	f043 0307 	orr.w	r3, r3, #7
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80044b2:	6083      	str	r3, [r0, #8]
}
 80044b4:	4770      	bx	lr
	...

080044b8 <TIM_Base_SetConfig>:
  tmpcr1 = TIMx->CR1;
 80044b8:	6803      	ldr	r3, [r0, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80044ba:	4a1a      	ldr	r2, [pc, #104]	; (8004524 <TIM_Base_SetConfig+0x6c>)
 80044bc:	4290      	cmp	r0, r2
 80044be:	d002      	beq.n	80044c6 <TIM_Base_SetConfig+0xe>
 80044c0:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 80044c4:	d103      	bne.n	80044ce <TIM_Base_SetConfig+0x16>
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80044c6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 80044ca:	684a      	ldr	r2, [r1, #4]
 80044cc:	4313      	orrs	r3, r2
  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80044ce:	4a15      	ldr	r2, [pc, #84]	; (8004524 <TIM_Base_SetConfig+0x6c>)
 80044d0:	4290      	cmp	r0, r2
 80044d2:	d00a      	beq.n	80044ea <TIM_Base_SetConfig+0x32>
 80044d4:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 80044d8:	d007      	beq.n	80044ea <TIM_Base_SetConfig+0x32>
 80044da:	f502 52c0 	add.w	r2, r2, #6144	; 0x1800
 80044de:	4290      	cmp	r0, r2
 80044e0:	d003      	beq.n	80044ea <TIM_Base_SetConfig+0x32>
 80044e2:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80044e6:	4290      	cmp	r0, r2
 80044e8:	d103      	bne.n	80044f2 <TIM_Base_SetConfig+0x3a>
    tmpcr1 &= ~TIM_CR1_CKD;
 80044ea:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80044ee:	68ca      	ldr	r2, [r1, #12]
 80044f0:	4313      	orrs	r3, r2
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80044f2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80044f6:	694a      	ldr	r2, [r1, #20]
 80044f8:	4313      	orrs	r3, r2
  TIMx->CR1 = tmpcr1;
 80044fa:	6003      	str	r3, [r0, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 80044fc:	688b      	ldr	r3, [r1, #8]
 80044fe:	62c3      	str	r3, [r0, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 8004500:	680b      	ldr	r3, [r1, #0]
 8004502:	6283      	str	r3, [r0, #40]	; 0x28
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004504:	4b07      	ldr	r3, [pc, #28]	; (8004524 <TIM_Base_SetConfig+0x6c>)
 8004506:	4298      	cmp	r0, r3
 8004508:	d007      	beq.n	800451a <TIM_Base_SetConfig+0x62>
 800450a:	f503 53c0 	add.w	r3, r3, #6144	; 0x1800
 800450e:	4298      	cmp	r0, r3
 8004510:	d003      	beq.n	800451a <TIM_Base_SetConfig+0x62>
 8004512:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004516:	4298      	cmp	r0, r3
 8004518:	d101      	bne.n	800451e <TIM_Base_SetConfig+0x66>
    TIMx->RCR = Structure->RepetitionCounter;
 800451a:	690b      	ldr	r3, [r1, #16]
 800451c:	6303      	str	r3, [r0, #48]	; 0x30
  TIMx->EGR = TIM_EGR_UG;
 800451e:	2301      	movs	r3, #1
 8004520:	6143      	str	r3, [r0, #20]
}
 8004522:	4770      	bx	lr
 8004524:	40012c00 	.word	0x40012c00

08004528 <HAL_TIM_Base_Init>:
  if (htim == NULL)
 8004528:	b360      	cbz	r0, 8004584 <HAL_TIM_Base_Init+0x5c>
{
 800452a:	b510      	push	{r4, lr}
 800452c:	4604      	mov	r4, r0
  if (htim->State == HAL_TIM_STATE_RESET)
 800452e:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8004532:	b313      	cbz	r3, 800457a <HAL_TIM_Base_Init+0x52>
  htim->State = HAL_TIM_STATE_BUSY;
 8004534:	2302      	movs	r3, #2
 8004536:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800453a:	4621      	mov	r1, r4
 800453c:	f851 0b04 	ldr.w	r0, [r1], #4
 8004540:	f7ff ffba 	bl	80044b8 <TIM_Base_SetConfig>
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004544:	2301      	movs	r3, #1
 8004546:	f884 3048 	strb.w	r3, [r4, #72]	; 0x48
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800454a:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
 800454e:	f884 303f 	strb.w	r3, [r4, #63]	; 0x3f
 8004552:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
 8004556:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
 800455a:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800455e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004562:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 8004566:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800456a:	f884 3046 	strb.w	r3, [r4, #70]	; 0x46
 800456e:	f884 3047 	strb.w	r3, [r4, #71]	; 0x47
  htim->State = HAL_TIM_STATE_READY;
 8004572:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  return HAL_OK;
 8004576:	2000      	movs	r0, #0
}
 8004578:	bd10      	pop	{r4, pc}
    htim->Lock = HAL_UNLOCKED;
 800457a:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
    HAL_TIM_Base_MspInit(htim);
 800457e:	f7fd fa1f 	bl	80019c0 <HAL_TIM_Base_MspInit>
 8004582:	e7d7      	b.n	8004534 <HAL_TIM_Base_Init+0xc>
    return HAL_ERROR;
 8004584:	2001      	movs	r0, #1
}
 8004586:	4770      	bx	lr

08004588 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004588:	b410      	push	{r4}
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800458a:	6884      	ldr	r4, [r0, #8]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800458c:	f424 447f 	bic.w	r4, r4, #65280	; 0xff00

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004590:	ea42 2203 	orr.w	r2, r2, r3, lsl #8
 8004594:	430a      	orrs	r2, r1
 8004596:	4322      	orrs	r2, r4

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004598:	6082      	str	r2, [r0, #8]
}
 800459a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800459e:	4770      	bx	lr

080045a0 <HAL_TIM_ConfigClockSource>:
  __HAL_LOCK(htim);
 80045a0:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 80045a4:	2b01      	cmp	r3, #1
 80045a6:	d076      	beq.n	8004696 <HAL_TIM_ConfigClockSource+0xf6>
{
 80045a8:	b510      	push	{r4, lr}
 80045aa:	4604      	mov	r4, r0
  __HAL_LOCK(htim);
 80045ac:	2301      	movs	r3, #1
 80045ae:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  htim->State = HAL_TIM_STATE_BUSY;
 80045b2:	2302      	movs	r3, #2
 80045b4:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
  tmpsmcr = htim->Instance->SMCR;
 80045b8:	6802      	ldr	r2, [r0, #0]
 80045ba:	6890      	ldr	r0, [r2, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80045bc:	4b37      	ldr	r3, [pc, #220]	; (800469c <HAL_TIM_ConfigClockSource+0xfc>)
 80045be:	4003      	ands	r3, r0
  htim->Instance->SMCR = tmpsmcr;
 80045c0:	6093      	str	r3, [r2, #8]
  switch (sClockSourceConfig->ClockSource)
 80045c2:	680b      	ldr	r3, [r1, #0]
 80045c4:	2b60      	cmp	r3, #96	; 0x60
 80045c6:	d04c      	beq.n	8004662 <HAL_TIM_ConfigClockSource+0xc2>
 80045c8:	d829      	bhi.n	800461e <HAL_TIM_ConfigClockSource+0x7e>
 80045ca:	2b40      	cmp	r3, #64	; 0x40
 80045cc:	d054      	beq.n	8004678 <HAL_TIM_ConfigClockSource+0xd8>
 80045ce:	d90c      	bls.n	80045ea <HAL_TIM_ConfigClockSource+0x4a>
 80045d0:	2b50      	cmp	r3, #80	; 0x50
 80045d2:	d122      	bne.n	800461a <HAL_TIM_ConfigClockSource+0x7a>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80045d4:	68ca      	ldr	r2, [r1, #12]
 80045d6:	6849      	ldr	r1, [r1, #4]
 80045d8:	6820      	ldr	r0, [r4, #0]
 80045da:	f7ff ff3d 	bl	8004458 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80045de:	2150      	movs	r1, #80	; 0x50
 80045e0:	6820      	ldr	r0, [r4, #0]
 80045e2:	f7ff ff5e 	bl	80044a2 <TIM_ITRx_SetConfig>
  HAL_StatusTypeDef status = HAL_OK;
 80045e6:	2000      	movs	r0, #0
      break;
 80045e8:	e005      	b.n	80045f6 <HAL_TIM_ConfigClockSource+0x56>
  switch (sClockSourceConfig->ClockSource)
 80045ea:	2b20      	cmp	r3, #32
 80045ec:	d00d      	beq.n	800460a <HAL_TIM_ConfigClockSource+0x6a>
 80045ee:	d909      	bls.n	8004604 <HAL_TIM_ConfigClockSource+0x64>
 80045f0:	2b30      	cmp	r3, #48	; 0x30
 80045f2:	d00a      	beq.n	800460a <HAL_TIM_ConfigClockSource+0x6a>
      status = HAL_ERROR;
 80045f4:	2001      	movs	r0, #1
  htim->State = HAL_TIM_STATE_READY;
 80045f6:	2301      	movs	r3, #1
 80045f8:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  __HAL_UNLOCK(htim);
 80045fc:	2300      	movs	r3, #0
 80045fe:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
}
 8004602:	bd10      	pop	{r4, pc}
  switch (sClockSourceConfig->ClockSource)
 8004604:	b10b      	cbz	r3, 800460a <HAL_TIM_ConfigClockSource+0x6a>
 8004606:	2b10      	cmp	r3, #16
 8004608:	d105      	bne.n	8004616 <HAL_TIM_ConfigClockSource+0x76>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800460a:	4619      	mov	r1, r3
 800460c:	6820      	ldr	r0, [r4, #0]
 800460e:	f7ff ff48 	bl	80044a2 <TIM_ITRx_SetConfig>
  HAL_StatusTypeDef status = HAL_OK;
 8004612:	2000      	movs	r0, #0
      break;
 8004614:	e7ef      	b.n	80045f6 <HAL_TIM_ConfigClockSource+0x56>
      status = HAL_ERROR;
 8004616:	2001      	movs	r0, #1
 8004618:	e7ed      	b.n	80045f6 <HAL_TIM_ConfigClockSource+0x56>
 800461a:	2001      	movs	r0, #1
 800461c:	e7eb      	b.n	80045f6 <HAL_TIM_ConfigClockSource+0x56>
  switch (sClockSourceConfig->ClockSource)
 800461e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004622:	d034      	beq.n	800468e <HAL_TIM_ConfigClockSource+0xee>
 8004624:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004628:	d10c      	bne.n	8004644 <HAL_TIM_ConfigClockSource+0xa4>
      TIM_ETR_SetConfig(htim->Instance,
 800462a:	68cb      	ldr	r3, [r1, #12]
 800462c:	684a      	ldr	r2, [r1, #4]
 800462e:	6889      	ldr	r1, [r1, #8]
 8004630:	6820      	ldr	r0, [r4, #0]
 8004632:	f7ff ffa9 	bl	8004588 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004636:	6822      	ldr	r2, [r4, #0]
 8004638:	6893      	ldr	r3, [r2, #8]
 800463a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800463e:	6093      	str	r3, [r2, #8]
  HAL_StatusTypeDef status = HAL_OK;
 8004640:	2000      	movs	r0, #0
      break;
 8004642:	e7d8      	b.n	80045f6 <HAL_TIM_ConfigClockSource+0x56>
  switch (sClockSourceConfig->ClockSource)
 8004644:	2b70      	cmp	r3, #112	; 0x70
 8004646:	d124      	bne.n	8004692 <HAL_TIM_ConfigClockSource+0xf2>
      TIM_ETR_SetConfig(htim->Instance,
 8004648:	68cb      	ldr	r3, [r1, #12]
 800464a:	684a      	ldr	r2, [r1, #4]
 800464c:	6889      	ldr	r1, [r1, #8]
 800464e:	6820      	ldr	r0, [r4, #0]
 8004650:	f7ff ff9a 	bl	8004588 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8004654:	6822      	ldr	r2, [r4, #0]
 8004656:	6893      	ldr	r3, [r2, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004658:	f043 0377 	orr.w	r3, r3, #119	; 0x77
      htim->Instance->SMCR = tmpsmcr;
 800465c:	6093      	str	r3, [r2, #8]
  HAL_StatusTypeDef status = HAL_OK;
 800465e:	2000      	movs	r0, #0
      break;
 8004660:	e7c9      	b.n	80045f6 <HAL_TIM_ConfigClockSource+0x56>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8004662:	68ca      	ldr	r2, [r1, #12]
 8004664:	6849      	ldr	r1, [r1, #4]
 8004666:	6820      	ldr	r0, [r4, #0]
 8004668:	f7ff ff08 	bl	800447c <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800466c:	2160      	movs	r1, #96	; 0x60
 800466e:	6820      	ldr	r0, [r4, #0]
 8004670:	f7ff ff17 	bl	80044a2 <TIM_ITRx_SetConfig>
  HAL_StatusTypeDef status = HAL_OK;
 8004674:	2000      	movs	r0, #0
      break;
 8004676:	e7be      	b.n	80045f6 <HAL_TIM_ConfigClockSource+0x56>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004678:	68ca      	ldr	r2, [r1, #12]
 800467a:	6849      	ldr	r1, [r1, #4]
 800467c:	6820      	ldr	r0, [r4, #0]
 800467e:	f7ff feeb 	bl	8004458 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004682:	2140      	movs	r1, #64	; 0x40
 8004684:	6820      	ldr	r0, [r4, #0]
 8004686:	f7ff ff0c 	bl	80044a2 <TIM_ITRx_SetConfig>
  HAL_StatusTypeDef status = HAL_OK;
 800468a:	2000      	movs	r0, #0
      break;
 800468c:	e7b3      	b.n	80045f6 <HAL_TIM_ConfigClockSource+0x56>
  switch (sClockSourceConfig->ClockSource)
 800468e:	2000      	movs	r0, #0
 8004690:	e7b1      	b.n	80045f6 <HAL_TIM_ConfigClockSource+0x56>
      status = HAL_ERROR;
 8004692:	2001      	movs	r0, #1
 8004694:	e7af      	b.n	80045f6 <HAL_TIM_ConfigClockSource+0x56>
  __HAL_LOCK(htim);
 8004696:	2002      	movs	r0, #2
}
 8004698:	4770      	bx	lr
 800469a:	bf00      	nop
 800469c:	ffce0088 	.word	0xffce0088

080046a0 <HAL_TIMEx_MasterConfigSynchronization>:
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80046a0:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 80046a4:	2b01      	cmp	r3, #1
 80046a6:	d02b      	beq.n	8004700 <HAL_TIMEx_MasterConfigSynchronization+0x60>
{
 80046a8:	b430      	push	{r4, r5}
  __HAL_LOCK(htim);
 80046aa:	2301      	movs	r3, #1
 80046ac:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80046b0:	2302      	movs	r3, #2
 80046b2:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80046b6:	6802      	ldr	r2, [r0, #0]
 80046b8:	6853      	ldr	r3, [r2, #4]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80046ba:	6895      	ldr	r5, [r2, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80046bc:	4c11      	ldr	r4, [pc, #68]	; (8004704 <HAL_TIMEx_MasterConfigSynchronization+0x64>)
 80046be:	42a2      	cmp	r2, r4
 80046c0:	d019      	beq.n	80046f6 <HAL_TIMEx_MasterConfigSynchronization+0x56>
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80046c2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80046c6:	680c      	ldr	r4, [r1, #0]
 80046c8:	4323      	orrs	r3, r4

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80046ca:	6053      	str	r3, [r2, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80046cc:	6803      	ldr	r3, [r0, #0]
 80046ce:	4a0d      	ldr	r2, [pc, #52]	; (8004704 <HAL_TIMEx_MasterConfigSynchronization+0x64>)
 80046d0:	4293      	cmp	r3, r2
 80046d2:	d002      	beq.n	80046da <HAL_TIMEx_MasterConfigSynchronization+0x3a>
 80046d4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80046d8:	d104      	bne.n	80046e4 <HAL_TIMEx_MasterConfigSynchronization+0x44>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80046da:	f025 0580 	bic.w	r5, r5, #128	; 0x80
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80046de:	688a      	ldr	r2, [r1, #8]
 80046e0:	4315      	orrs	r5, r2

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80046e2:	609d      	str	r5, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80046e4:	2301      	movs	r3, #1
 80046e6:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80046ea:	2300      	movs	r3, #0
 80046ec:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c

  return HAL_OK;
 80046f0:	4618      	mov	r0, r3
}
 80046f2:	bc30      	pop	{r4, r5}
 80046f4:	4770      	bx	lr
    tmpcr2 &= ~TIM_CR2_MMS2;
 80046f6:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80046fa:	684c      	ldr	r4, [r1, #4]
 80046fc:	4323      	orrs	r3, r4
 80046fe:	e7e0      	b.n	80046c2 <HAL_TIMEx_MasterConfigSynchronization+0x22>
  __HAL_LOCK(htim);
 8004700:	2002      	movs	r0, #2
}
 8004702:	4770      	bx	lr
 8004704:	40012c00 	.word	0x40012c00

08004708 <UART_EndTxTransfer>:
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
  /* Disable TXEIE, TCIE, TXFT interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
 8004708:	6802      	ldr	r2, [r0, #0]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800470a:	e852 3f00 	ldrex	r3, [r2]
 800470e:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004712:	e842 3100 	strex	r1, r3, [r2]
 8004716:	2900      	cmp	r1, #0
 8004718:	d1f6      	bne.n	8004708 <UART_EndTxTransfer>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
 800471a:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800471c:	f102 0308 	add.w	r3, r2, #8
 8004720:	e853 3f00 	ldrex	r3, [r3]
 8004724:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004728:	3208      	adds	r2, #8
 800472a:	e842 3100 	strex	r1, r3, [r2]
 800472e:	2900      	cmp	r1, #0
 8004730:	d1f3      	bne.n	800471a <UART_EndTxTransfer+0x12>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004732:	2320      	movs	r3, #32
 8004734:	f8c0 3084 	str.w	r3, [r0, #132]	; 0x84
}
 8004738:	4770      	bx	lr

0800473a <UART_EndRxTransfer>:
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800473a:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800473c:	e852 3f00 	ldrex	r3, [r2]
 8004740:	f423 7390 	bic.w	r3, r3, #288	; 0x120
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004744:	e842 3100 	strex	r1, r3, [r2]
 8004748:	2900      	cmp	r1, #0
 800474a:	d1f6      	bne.n	800473a <UART_EndRxTransfer>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800474c:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800474e:	f102 0308 	add.w	r3, r2, #8
 8004752:	e853 3f00 	ldrex	r3, [r3]
 8004756:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800475a:	f023 0301 	bic.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800475e:	3208      	adds	r2, #8
 8004760:	e842 3100 	strex	r1, r3, [r2]
 8004764:	2900      	cmp	r1, #0
 8004766:	d1f1      	bne.n	800474c <UART_EndRxTransfer+0x12>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004768:	6ec3      	ldr	r3, [r0, #108]	; 0x6c
 800476a:	2b01      	cmp	r3, #1
 800476c:	d006      	beq.n	800477c <UART_EndRxTransfer+0x42>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800476e:	2320      	movs	r3, #32
 8004770:	f8c0 3088 	str.w	r3, [r0, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004774:	2300      	movs	r3, #0
 8004776:	66c3      	str	r3, [r0, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8004778:	6703      	str	r3, [r0, #112]	; 0x70
}
 800477a:	4770      	bx	lr
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800477c:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800477e:	e852 3f00 	ldrex	r3, [r2]
 8004782:	f023 0310 	bic.w	r3, r3, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004786:	e842 3100 	strex	r1, r3, [r2]
 800478a:	2900      	cmp	r1, #0
 800478c:	d1f6      	bne.n	800477c <UART_EndRxTransfer+0x42>
 800478e:	e7ee      	b.n	800476e <UART_EndRxTransfer+0x34>

08004790 <HAL_UART_Transmit_DMA>:
  if (huart->gState == HAL_UART_STATE_READY)
 8004790:	f8d0 3084 	ldr.w	r3, [r0, #132]	; 0x84
 8004794:	2b20      	cmp	r3, #32
 8004796:	d14c      	bne.n	8004832 <HAL_UART_Transmit_DMA+0xa2>
{
 8004798:	b510      	push	{r4, lr}
 800479a:	4604      	mov	r4, r0
    if ((pData == NULL) || (Size == 0U))
 800479c:	2900      	cmp	r1, #0
 800479e:	d04a      	beq.n	8004836 <HAL_UART_Transmit_DMA+0xa6>
 80047a0:	2a00      	cmp	r2, #0
 80047a2:	d04a      	beq.n	800483a <HAL_UART_Transmit_DMA+0xaa>
    __HAL_LOCK(huart);
 80047a4:	f890 3080 	ldrb.w	r3, [r0, #128]	; 0x80
 80047a8:	2b01      	cmp	r3, #1
 80047aa:	d048      	beq.n	800483e <HAL_UART_Transmit_DMA+0xae>
 80047ac:	2301      	movs	r3, #1
 80047ae:	f880 3080 	strb.w	r3, [r0, #128]	; 0x80
    huart->pTxBuffPtr  = pData;
 80047b2:	6501      	str	r1, [r0, #80]	; 0x50
    huart->TxXferSize  = Size;
 80047b4:	f8a0 2054 	strh.w	r2, [r0, #84]	; 0x54
    huart->TxXferCount = Size;
 80047b8:	f8a0 2056 	strh.w	r2, [r0, #86]	; 0x56
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80047bc:	2300      	movs	r3, #0
 80047be:	f8c0 308c 	str.w	r3, [r0, #140]	; 0x8c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80047c2:	2321      	movs	r3, #33	; 0x21
 80047c4:	f8c0 3084 	str.w	r3, [r0, #132]	; 0x84
    if (huart->hdmatx != NULL)
 80047c8:	6f83      	ldr	r3, [r0, #120]	; 0x78
 80047ca:	b1f3      	cbz	r3, 800480a <HAL_UART_Transmit_DMA+0x7a>
      huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 80047cc:	491d      	ldr	r1, [pc, #116]	; (8004844 <HAL_UART_Transmit_DMA+0xb4>)
 80047ce:	62d9      	str	r1, [r3, #44]	; 0x2c
      huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 80047d0:	6f83      	ldr	r3, [r0, #120]	; 0x78
 80047d2:	491d      	ldr	r1, [pc, #116]	; (8004848 <HAL_UART_Transmit_DMA+0xb8>)
 80047d4:	6319      	str	r1, [r3, #48]	; 0x30
      huart->hdmatx->XferErrorCallback = UART_DMAError;
 80047d6:	6f83      	ldr	r3, [r0, #120]	; 0x78
 80047d8:	491c      	ldr	r1, [pc, #112]	; (800484c <HAL_UART_Transmit_DMA+0xbc>)
 80047da:	6359      	str	r1, [r3, #52]	; 0x34
      huart->hdmatx->XferAbortCallback = NULL;
 80047dc:	6f83      	ldr	r3, [r0, #120]	; 0x78
 80047de:	2100      	movs	r1, #0
 80047e0:	6399      	str	r1, [r3, #56]	; 0x38
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 80047e2:	6801      	ldr	r1, [r0, #0]
 80047e4:	4613      	mov	r3, r2
 80047e6:	f101 0228 	add.w	r2, r1, #40	; 0x28
 80047ea:	6d01      	ldr	r1, [r0, #80]	; 0x50
 80047ec:	6f80      	ldr	r0, [r0, #120]	; 0x78
 80047ee:	f7fe fb07 	bl	8002e00 <HAL_DMA_Start_IT>
 80047f2:	b150      	cbz	r0, 800480a <HAL_UART_Transmit_DMA+0x7a>
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 80047f4:	2310      	movs	r3, #16
 80047f6:	f8c4 308c 	str.w	r3, [r4, #140]	; 0x8c
        __HAL_UNLOCK(huart);
 80047fa:	2300      	movs	r3, #0
 80047fc:	f884 3080 	strb.w	r3, [r4, #128]	; 0x80
        huart->gState = HAL_UART_STATE_READY;
 8004800:	2320      	movs	r3, #32
 8004802:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
        return HAL_ERROR;
 8004806:	2001      	movs	r0, #1
 8004808:	e012      	b.n	8004830 <HAL_UART_Transmit_DMA+0xa0>
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 800480a:	6823      	ldr	r3, [r4, #0]
 800480c:	2240      	movs	r2, #64	; 0x40
 800480e:	621a      	str	r2, [r3, #32]
    __HAL_UNLOCK(huart);
 8004810:	2300      	movs	r3, #0
 8004812:	f884 3080 	strb.w	r3, [r4, #128]	; 0x80
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8004816:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004818:	f102 0308 	add.w	r3, r2, #8
 800481c:	e853 3f00 	ldrex	r3, [r3]
 8004820:	f043 0380 	orr.w	r3, r3, #128	; 0x80
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004824:	3208      	adds	r2, #8
 8004826:	e842 3100 	strex	r1, r3, [r2]
 800482a:	2900      	cmp	r1, #0
 800482c:	d1f3      	bne.n	8004816 <HAL_UART_Transmit_DMA+0x86>
    return HAL_OK;
 800482e:	2000      	movs	r0, #0
}
 8004830:	bd10      	pop	{r4, pc}
    return HAL_BUSY;
 8004832:	2002      	movs	r0, #2
}
 8004834:	4770      	bx	lr
      return HAL_ERROR;
 8004836:	2001      	movs	r0, #1
 8004838:	e7fa      	b.n	8004830 <HAL_UART_Transmit_DMA+0xa0>
 800483a:	2001      	movs	r0, #1
 800483c:	e7f8      	b.n	8004830 <HAL_UART_Transmit_DMA+0xa0>
    __HAL_LOCK(huart);
 800483e:	2002      	movs	r0, #2
 8004840:	e7f6      	b.n	8004830 <HAL_UART_Transmit_DMA+0xa0>
 8004842:	bf00      	nop
 8004844:	08004851 	.word	0x08004851
 8004848:	080048bf 	.word	0x080048bf
 800484c:	080048cb 	.word	0x080048cb

08004850 <UART_DMATransmitCplt>:
  * @brief DMA UART transmit process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8004850:	b508      	push	{r3, lr}
 8004852:	4603      	mov	r3, r0
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8004854:	6a80      	ldr	r0, [r0, #40]	; 0x28

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 8004856:	681b      	ldr	r3, [r3, #0]
 8004858:	681b      	ldr	r3, [r3, #0]
 800485a:	f013 0f20 	tst.w	r3, #32
 800485e:	d118      	bne.n	8004892 <UART_DMATransmitCplt+0x42>
  {
    huart->TxXferCount = 0U;
 8004860:	2300      	movs	r3, #0
 8004862:	f8a0 3056 	strh.w	r3, [r0, #86]	; 0x56

    /* Disable the DMA transfer for transmit request by resetting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8004866:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004868:	f102 0308 	add.w	r3, r2, #8
 800486c:	e853 3f00 	ldrex	r3, [r3]
 8004870:	f023 0380 	bic.w	r3, r3, #128	; 0x80
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004874:	3208      	adds	r2, #8
 8004876:	e842 3100 	strex	r1, r3, [r2]
 800487a:	2900      	cmp	r1, #0
 800487c:	d1f3      	bne.n	8004866 <UART_DMATransmitCplt+0x16>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800487e:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004880:	e852 3f00 	ldrex	r3, [r2]
 8004884:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004888:	e842 3100 	strex	r1, r3, [r2]
 800488c:	2900      	cmp	r1, #0
 800488e:	d1f6      	bne.n	800487e <UART_DMATransmitCplt+0x2e>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8004890:	bd08      	pop	{r3, pc}
    HAL_UART_TxCpltCallback(huart);
 8004892:	f7fc fd31 	bl	80012f8 <HAL_UART_TxCpltCallback>
}
 8004896:	e7fb      	b.n	8004890 <UART_DMATransmitCplt+0x40>

08004898 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8004898:	b508      	push	{r3, lr}
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800489a:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800489c:	e852 3f00 	ldrex	r3, [r2]
 80048a0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80048a4:	e842 3100 	strex	r1, r3, [r2]
 80048a8:	2900      	cmp	r1, #0
 80048aa:	d1f6      	bne.n	800489a <UART_EndTransmit_IT+0x2>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80048ac:	2320      	movs	r3, #32
 80048ae:	f8c0 3084 	str.w	r3, [r0, #132]	; 0x84

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 80048b2:	2300      	movs	r3, #0
 80048b4:	6743      	str	r3, [r0, #116]	; 0x74
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80048b6:	f7fc fd1f 	bl	80012f8 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80048ba:	bd08      	pop	{r3, pc}

080048bc <HAL_UART_TxHalfCpltCallback>:
}
 80048bc:	4770      	bx	lr

080048be <UART_DMATxHalfCplt>:
{
 80048be:	b508      	push	{r3, lr}
  HAL_UART_TxHalfCpltCallback(huart);
 80048c0:	6a80      	ldr	r0, [r0, #40]	; 0x28
 80048c2:	f7ff fffb 	bl	80048bc <HAL_UART_TxHalfCpltCallback>
}
 80048c6:	bd08      	pop	{r3, pc}

080048c8 <HAL_UART_ErrorCallback>:
}
 80048c8:	4770      	bx	lr

080048ca <UART_DMAError>:
{
 80048ca:	b538      	push	{r3, r4, r5, lr}
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80048cc:	6a84      	ldr	r4, [r0, #40]	; 0x28
  const HAL_UART_StateTypeDef gstate = huart->gState;
 80048ce:	f8d4 2084 	ldr.w	r2, [r4, #132]	; 0x84
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 80048d2:	f8d4 5088 	ldr.w	r5, [r4, #136]	; 0x88
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 80048d6:	6823      	ldr	r3, [r4, #0]
 80048d8:	689b      	ldr	r3, [r3, #8]
 80048da:	f013 0f80 	tst.w	r3, #128	; 0x80
 80048de:	d001      	beq.n	80048e4 <UART_DMAError+0x1a>
 80048e0:	2a21      	cmp	r2, #33	; 0x21
 80048e2:	d010      	beq.n	8004906 <UART_DMAError+0x3c>
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 80048e4:	6823      	ldr	r3, [r4, #0]
 80048e6:	689b      	ldr	r3, [r3, #8]
 80048e8:	f013 0f40 	tst.w	r3, #64	; 0x40
 80048ec:	d001      	beq.n	80048f2 <UART_DMAError+0x28>
 80048ee:	2d22      	cmp	r5, #34	; 0x22
 80048f0:	d010      	beq.n	8004914 <UART_DMAError+0x4a>
  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 80048f2:	f8d4 308c 	ldr.w	r3, [r4, #140]	; 0x8c
 80048f6:	f043 0310 	orr.w	r3, r3, #16
 80048fa:	f8c4 308c 	str.w	r3, [r4, #140]	; 0x8c
  HAL_UART_ErrorCallback(huart);
 80048fe:	4620      	mov	r0, r4
 8004900:	f7ff ffe2 	bl	80048c8 <HAL_UART_ErrorCallback>
}
 8004904:	bd38      	pop	{r3, r4, r5, pc}
    huart->TxXferCount = 0U;
 8004906:	2300      	movs	r3, #0
 8004908:	f8a4 3056 	strh.w	r3, [r4, #86]	; 0x56
    UART_EndTxTransfer(huart);
 800490c:	4620      	mov	r0, r4
 800490e:	f7ff fefb 	bl	8004708 <UART_EndTxTransfer>
 8004912:	e7e7      	b.n	80048e4 <UART_DMAError+0x1a>
    huart->RxXferCount = 0U;
 8004914:	2300      	movs	r3, #0
 8004916:	f8a4 305e 	strh.w	r3, [r4, #94]	; 0x5e
    UART_EndRxTransfer(huart);
 800491a:	4620      	mov	r0, r4
 800491c:	f7ff ff0d 	bl	800473a <UART_EndRxTransfer>
 8004920:	e7e7      	b.n	80048f2 <UART_DMAError+0x28>

08004922 <UART_DMAAbortOnError>:
{
 8004922:	b508      	push	{r3, lr}
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8004924:	6a80      	ldr	r0, [r0, #40]	; 0x28
  huart->RxXferCount = 0U;
 8004926:	2300      	movs	r3, #0
 8004928:	f8a0 305e 	strh.w	r3, [r0, #94]	; 0x5e
  huart->TxXferCount = 0U;
 800492c:	f8a0 3056 	strh.w	r3, [r0, #86]	; 0x56
  HAL_UART_ErrorCallback(huart);
 8004930:	f7ff ffca 	bl	80048c8 <HAL_UART_ErrorCallback>
}
 8004934:	bd08      	pop	{r3, pc}

08004936 <HAL_UARTEx_RxEventCallback>:
}
 8004936:	4770      	bx	lr

08004938 <HAL_UART_IRQHandler>:
{
 8004938:	b570      	push	{r4, r5, r6, lr}
 800493a:	4604      	mov	r4, r0
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800493c:	6801      	ldr	r1, [r0, #0]
 800493e:	69cb      	ldr	r3, [r1, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8004940:	6808      	ldr	r0, [r1, #0]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8004942:	688d      	ldr	r5, [r1, #8]
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8004944:	f640 020f 	movw	r2, #2063	; 0x80f
  if (errorflags == 0U)
 8004948:	401a      	ands	r2, r3
 800494a:	d108      	bne.n	800495e <HAL_UART_IRQHandler+0x26>
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800494c:	f013 0f20 	tst.w	r3, #32
 8004950:	d005      	beq.n	800495e <HAL_UART_IRQHandler+0x26>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8004952:	f010 0f20 	tst.w	r0, #32
 8004956:	d134      	bne.n	80049c2 <HAL_UART_IRQHandler+0x8a>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8004958:	f015 5f80 	tst.w	r5, #268435456	; 0x10000000
 800495c:	d131      	bne.n	80049c2 <HAL_UART_IRQHandler+0x8a>
  if ((errorflags != 0U)
 800495e:	b12a      	cbz	r2, 800496c <HAL_UART_IRQHandler+0x34>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 8004960:	4abd      	ldr	r2, [pc, #756]	; (8004c58 <HAL_UART_IRQHandler+0x320>)
 8004962:	402a      	ands	r2, r5
 8004964:	d133      	bne.n	80049ce <HAL_UART_IRQHandler+0x96>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 8004966:	4ebd      	ldr	r6, [pc, #756]	; (8004c5c <HAL_UART_IRQHandler+0x324>)
 8004968:	4230      	tst	r0, r6
 800496a:	d130      	bne.n	80049ce <HAL_UART_IRQHandler+0x96>
  if (  (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800496c:	6ee2      	ldr	r2, [r4, #108]	; 0x6c
 800496e:	2a01      	cmp	r2, #1
 8004970:	f000 80c3 	beq.w	8004afa <HAL_UART_IRQHandler+0x1c2>
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8004974:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8004978:	d003      	beq.n	8004982 <HAL_UART_IRQHandler+0x4a>
 800497a:	f415 0f80 	tst.w	r5, #4194304	; 0x400000
 800497e:	f040 8155 	bne.w	8004c2c <HAL_UART_IRQHandler+0x2f4>
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 8004982:	f013 0f80 	tst.w	r3, #128	; 0x80
 8004986:	d007      	beq.n	8004998 <HAL_UART_IRQHandler+0x60>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 8004988:	f010 0f80 	tst.w	r0, #128	; 0x80
 800498c:	f040 8155 	bne.w	8004c3a <HAL_UART_IRQHandler+0x302>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 8004990:	f415 0f00 	tst.w	r5, #8388608	; 0x800000
 8004994:	f040 8151 	bne.w	8004c3a <HAL_UART_IRQHandler+0x302>
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8004998:	f013 0f40 	tst.w	r3, #64	; 0x40
 800499c:	d003      	beq.n	80049a6 <HAL_UART_IRQHandler+0x6e>
 800499e:	f010 0f40 	tst.w	r0, #64	; 0x40
 80049a2:	f040 8151 	bne.w	8004c48 <HAL_UART_IRQHandler+0x310>
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 80049a6:	f413 0f00 	tst.w	r3, #8388608	; 0x800000
 80049aa:	d003      	beq.n	80049b4 <HAL_UART_IRQHandler+0x7c>
 80049ac:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 80049b0:	f040 814e 	bne.w	8004c50 <HAL_UART_IRQHandler+0x318>
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 80049b4:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
 80049b8:	d002      	beq.n	80049c0 <HAL_UART_IRQHandler+0x88>
 80049ba:	2800      	cmp	r0, #0
 80049bc:	f2c0 8152 	blt.w	8004c64 <HAL_UART_IRQHandler+0x32c>
}
 80049c0:	bd70      	pop	{r4, r5, r6, pc}
      if (huart->RxISR != NULL)
 80049c2:	6f23      	ldr	r3, [r4, #112]	; 0x70
 80049c4:	2b00      	cmp	r3, #0
 80049c6:	d0fb      	beq.n	80049c0 <HAL_UART_IRQHandler+0x88>
        huart->RxISR(huart);
 80049c8:	4620      	mov	r0, r4
 80049ca:	4798      	blx	r3
      return;
 80049cc:	e7f8      	b.n	80049c0 <HAL_UART_IRQHandler+0x88>
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80049ce:	f013 0f01 	tst.w	r3, #1
 80049d2:	d009      	beq.n	80049e8 <HAL_UART_IRQHandler+0xb0>
 80049d4:	f410 7f80 	tst.w	r0, #256	; 0x100
 80049d8:	d006      	beq.n	80049e8 <HAL_UART_IRQHandler+0xb0>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80049da:	2601      	movs	r6, #1
 80049dc:	620e      	str	r6, [r1, #32]
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80049de:	f8d4 108c 	ldr.w	r1, [r4, #140]	; 0x8c
 80049e2:	4331      	orrs	r1, r6
 80049e4:	f8c4 108c 	str.w	r1, [r4, #140]	; 0x8c
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80049e8:	f013 0f02 	tst.w	r3, #2
 80049ec:	d00b      	beq.n	8004a06 <HAL_UART_IRQHandler+0xce>
 80049ee:	f015 0f01 	tst.w	r5, #1
 80049f2:	d008      	beq.n	8004a06 <HAL_UART_IRQHandler+0xce>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80049f4:	6821      	ldr	r1, [r4, #0]
 80049f6:	2602      	movs	r6, #2
 80049f8:	620e      	str	r6, [r1, #32]
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80049fa:	f8d4 108c 	ldr.w	r1, [r4, #140]	; 0x8c
 80049fe:	f041 0104 	orr.w	r1, r1, #4
 8004a02:	f8c4 108c 	str.w	r1, [r4, #140]	; 0x8c
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8004a06:	f013 0f04 	tst.w	r3, #4
 8004a0a:	d00b      	beq.n	8004a24 <HAL_UART_IRQHandler+0xec>
 8004a0c:	f015 0f01 	tst.w	r5, #1
 8004a10:	d008      	beq.n	8004a24 <HAL_UART_IRQHandler+0xec>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8004a12:	6821      	ldr	r1, [r4, #0]
 8004a14:	2604      	movs	r6, #4
 8004a16:	620e      	str	r6, [r1, #32]
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8004a18:	f8d4 108c 	ldr.w	r1, [r4, #140]	; 0x8c
 8004a1c:	f041 0102 	orr.w	r1, r1, #2
 8004a20:	f8c4 108c 	str.w	r1, [r4, #140]	; 0x8c
    if (((isrflags & USART_ISR_ORE) != 0U)
 8004a24:	f013 0f08 	tst.w	r3, #8
 8004a28:	d00b      	beq.n	8004a42 <HAL_UART_IRQHandler+0x10a>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8004a2a:	f010 0f20 	tst.w	r0, #32
 8004a2e:	d100      	bne.n	8004a32 <HAL_UART_IRQHandler+0xfa>
 8004a30:	b13a      	cbz	r2, 8004a42 <HAL_UART_IRQHandler+0x10a>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8004a32:	6822      	ldr	r2, [r4, #0]
 8004a34:	2108      	movs	r1, #8
 8004a36:	6211      	str	r1, [r2, #32]
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8004a38:	f8d4 208c 	ldr.w	r2, [r4, #140]	; 0x8c
 8004a3c:	430a      	orrs	r2, r1
 8004a3e:	f8c4 208c 	str.w	r2, [r4, #140]	; 0x8c
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8004a42:	f413 6f00 	tst.w	r3, #2048	; 0x800
 8004a46:	d00c      	beq.n	8004a62 <HAL_UART_IRQHandler+0x12a>
 8004a48:	f010 6f80 	tst.w	r0, #67108864	; 0x4000000
 8004a4c:	d009      	beq.n	8004a62 <HAL_UART_IRQHandler+0x12a>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004a4e:	6822      	ldr	r2, [r4, #0]
 8004a50:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8004a54:	6211      	str	r1, [r2, #32]
      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8004a56:	f8d4 208c 	ldr.w	r2, [r4, #140]	; 0x8c
 8004a5a:	f042 0220 	orr.w	r2, r2, #32
 8004a5e:	f8c4 208c 	str.w	r2, [r4, #140]	; 0x8c
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8004a62:	f8d4 208c 	ldr.w	r2, [r4, #140]	; 0x8c
 8004a66:	2a00      	cmp	r2, #0
 8004a68:	d0aa      	beq.n	80049c0 <HAL_UART_IRQHandler+0x88>
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8004a6a:	f013 0f20 	tst.w	r3, #32
 8004a6e:	d009      	beq.n	8004a84 <HAL_UART_IRQHandler+0x14c>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8004a70:	f010 0f20 	tst.w	r0, #32
 8004a74:	d102      	bne.n	8004a7c <HAL_UART_IRQHandler+0x144>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8004a76:	f015 5f80 	tst.w	r5, #268435456	; 0x10000000
 8004a7a:	d003      	beq.n	8004a84 <HAL_UART_IRQHandler+0x14c>
        if (huart->RxISR != NULL)
 8004a7c:	6f23      	ldr	r3, [r4, #112]	; 0x70
 8004a7e:	b10b      	cbz	r3, 8004a84 <HAL_UART_IRQHandler+0x14c>
          huart->RxISR(huart);
 8004a80:	4620      	mov	r0, r4
 8004a82:	4798      	blx	r3
      errorcode = huart->ErrorCode;
 8004a84:	f8d4 208c 	ldr.w	r2, [r4, #140]	; 0x8c
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8004a88:	6823      	ldr	r3, [r4, #0]
 8004a8a:	689b      	ldr	r3, [r3, #8]
 8004a8c:	f013 0f40 	tst.w	r3, #64	; 0x40
 8004a90:	d102      	bne.n	8004a98 <HAL_UART_IRQHandler+0x160>
 8004a92:	f012 0f28 	tst.w	r2, #40	; 0x28
 8004a96:	d029      	beq.n	8004aec <HAL_UART_IRQHandler+0x1b4>
        UART_EndRxTransfer(huart);
 8004a98:	4620      	mov	r0, r4
 8004a9a:	f7ff fe4e 	bl	800473a <UART_EndRxTransfer>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004a9e:	6823      	ldr	r3, [r4, #0]
 8004aa0:	689b      	ldr	r3, [r3, #8]
 8004aa2:	f013 0f40 	tst.w	r3, #64	; 0x40
 8004aa6:	d01d      	beq.n	8004ae4 <HAL_UART_IRQHandler+0x1ac>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004aa8:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004aaa:	f102 0308 	add.w	r3, r2, #8
 8004aae:	e853 3f00 	ldrex	r3, [r3]
 8004ab2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004ab6:	3208      	adds	r2, #8
 8004ab8:	e842 3100 	strex	r1, r3, [r2]
 8004abc:	2900      	cmp	r1, #0
 8004abe:	d1f3      	bne.n	8004aa8 <HAL_UART_IRQHandler+0x170>
          if (huart->hdmarx != NULL)
 8004ac0:	6fe3      	ldr	r3, [r4, #124]	; 0x7c
 8004ac2:	b15b      	cbz	r3, 8004adc <HAL_UART_IRQHandler+0x1a4>
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8004ac4:	4a66      	ldr	r2, [pc, #408]	; (8004c60 <HAL_UART_IRQHandler+0x328>)
 8004ac6:	639a      	str	r2, [r3, #56]	; 0x38
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8004ac8:	6fe0      	ldr	r0, [r4, #124]	; 0x7c
 8004aca:	f7fe fa1d 	bl	8002f08 <HAL_DMA_Abort_IT>
 8004ace:	2800      	cmp	r0, #0
 8004ad0:	f43f af76 	beq.w	80049c0 <HAL_UART_IRQHandler+0x88>
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8004ad4:	6fe0      	ldr	r0, [r4, #124]	; 0x7c
 8004ad6:	6b83      	ldr	r3, [r0, #56]	; 0x38
 8004ad8:	4798      	blx	r3
 8004ada:	e771      	b.n	80049c0 <HAL_UART_IRQHandler+0x88>
            HAL_UART_ErrorCallback(huart);
 8004adc:	4620      	mov	r0, r4
 8004ade:	f7ff fef3 	bl	80048c8 <HAL_UART_ErrorCallback>
 8004ae2:	e76d      	b.n	80049c0 <HAL_UART_IRQHandler+0x88>
          HAL_UART_ErrorCallback(huart);
 8004ae4:	4620      	mov	r0, r4
 8004ae6:	f7ff feef 	bl	80048c8 <HAL_UART_ErrorCallback>
 8004aea:	e769      	b.n	80049c0 <HAL_UART_IRQHandler+0x88>
        HAL_UART_ErrorCallback(huart);
 8004aec:	4620      	mov	r0, r4
 8004aee:	f7ff feeb 	bl	80048c8 <HAL_UART_ErrorCallback>
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004af2:	2300      	movs	r3, #0
 8004af4:	f8c4 308c 	str.w	r3, [r4, #140]	; 0x8c
    return;
 8004af8:	e762      	b.n	80049c0 <HAL_UART_IRQHandler+0x88>
      &&((isrflags & USART_ISR_IDLE) != 0U)
 8004afa:	f013 0f10 	tst.w	r3, #16
 8004afe:	f43f af39 	beq.w	8004974 <HAL_UART_IRQHandler+0x3c>
      &&((cr1its & USART_ISR_IDLE) != 0U))
 8004b02:	f010 0f10 	tst.w	r0, #16
 8004b06:	f43f af35 	beq.w	8004974 <HAL_UART_IRQHandler+0x3c>
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8004b0a:	2310      	movs	r3, #16
 8004b0c:	620b      	str	r3, [r1, #32]
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004b0e:	6823      	ldr	r3, [r4, #0]
 8004b10:	689b      	ldr	r3, [r3, #8]
 8004b12:	f013 0f40 	tst.w	r3, #64	; 0x40
 8004b16:	d04f      	beq.n	8004bb8 <HAL_UART_IRQHandler+0x280>
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8004b18:	6fe2      	ldr	r2, [r4, #124]	; 0x7c
 8004b1a:	6813      	ldr	r3, [r2, #0]
 8004b1c:	685b      	ldr	r3, [r3, #4]
 8004b1e:	b29b      	uxth	r3, r3
      if (  (nb_remaining_rx_data > 0U)
 8004b20:	2b00      	cmp	r3, #0
 8004b22:	f43f af4d 	beq.w	80049c0 <HAL_UART_IRQHandler+0x88>
          &&(nb_remaining_rx_data < huart->RxXferSize))
 8004b26:	f8b4 105c 	ldrh.w	r1, [r4, #92]	; 0x5c
 8004b2a:	4299      	cmp	r1, r3
 8004b2c:	f67f af48 	bls.w	80049c0 <HAL_UART_IRQHandler+0x88>
        huart->RxXferCount = nb_remaining_rx_data;
 8004b30:	f8a4 305e 	strh.w	r3, [r4, #94]	; 0x5e
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8004b34:	6813      	ldr	r3, [r2, #0]
 8004b36:	681b      	ldr	r3, [r3, #0]
 8004b38:	f013 0f20 	tst.w	r3, #32
 8004b3c:	d131      	bne.n	8004ba2 <HAL_UART_IRQHandler+0x26a>
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004b3e:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004b40:	e852 3f00 	ldrex	r3, [r2]
 8004b44:	f423 7380 	bic.w	r3, r3, #256	; 0x100
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004b48:	e842 3100 	strex	r1, r3, [r2]
 8004b4c:	2900      	cmp	r1, #0
 8004b4e:	d1f6      	bne.n	8004b3e <HAL_UART_IRQHandler+0x206>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004b50:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004b52:	f102 0308 	add.w	r3, r2, #8
 8004b56:	e853 3f00 	ldrex	r3, [r3]
 8004b5a:	f023 0301 	bic.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004b5e:	3208      	adds	r2, #8
 8004b60:	e842 3100 	strex	r1, r3, [r2]
 8004b64:	2900      	cmp	r1, #0
 8004b66:	d1f3      	bne.n	8004b50 <HAL_UART_IRQHandler+0x218>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004b68:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004b6a:	f102 0308 	add.w	r3, r2, #8
 8004b6e:	e853 3f00 	ldrex	r3, [r3]
 8004b72:	f023 0340 	bic.w	r3, r3, #64	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004b76:	3208      	adds	r2, #8
 8004b78:	e842 3100 	strex	r1, r3, [r2]
 8004b7c:	2900      	cmp	r1, #0
 8004b7e:	d1f3      	bne.n	8004b68 <HAL_UART_IRQHandler+0x230>
          huart->RxState = HAL_UART_STATE_READY;
 8004b80:	2320      	movs	r3, #32
 8004b82:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004b86:	2300      	movs	r3, #0
 8004b88:	66e3      	str	r3, [r4, #108]	; 0x6c
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004b8a:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004b8c:	e852 3f00 	ldrex	r3, [r2]
 8004b90:	f023 0310 	bic.w	r3, r3, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004b94:	e842 3100 	strex	r1, r3, [r2]
 8004b98:	2900      	cmp	r1, #0
 8004b9a:	d1f6      	bne.n	8004b8a <HAL_UART_IRQHandler+0x252>
          (void)HAL_DMA_Abort(huart->hdmarx);
 8004b9c:	6fe0      	ldr	r0, [r4, #124]	; 0x7c
 8004b9e:	f7fe f979 	bl	8002e94 <HAL_DMA_Abort>
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8004ba2:	f8b4 105c 	ldrh.w	r1, [r4, #92]	; 0x5c
 8004ba6:	f8b4 305e 	ldrh.w	r3, [r4, #94]	; 0x5e
 8004baa:	b29b      	uxth	r3, r3
 8004bac:	1ac9      	subs	r1, r1, r3
 8004bae:	b289      	uxth	r1, r1
 8004bb0:	4620      	mov	r0, r4
 8004bb2:	f7ff fec0 	bl	8004936 <HAL_UARTEx_RxEventCallback>
      return;
 8004bb6:	e703      	b.n	80049c0 <HAL_UART_IRQHandler+0x88>
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8004bb8:	f8b4 105c 	ldrh.w	r1, [r4, #92]	; 0x5c
 8004bbc:	f8b4 305e 	ldrh.w	r3, [r4, #94]	; 0x5e
 8004bc0:	b29b      	uxth	r3, r3
 8004bc2:	1ac9      	subs	r1, r1, r3
 8004bc4:	b289      	uxth	r1, r1
      if (  (huart->RxXferCount > 0U)
 8004bc6:	f8b4 305e 	ldrh.w	r3, [r4, #94]	; 0x5e
 8004bca:	b29b      	uxth	r3, r3
 8004bcc:	2b00      	cmp	r3, #0
 8004bce:	f43f aef7 	beq.w	80049c0 <HAL_UART_IRQHandler+0x88>
          &&(nb_rx_data > 0U) )
 8004bd2:	2900      	cmp	r1, #0
 8004bd4:	f43f aef4 	beq.w	80049c0 <HAL_UART_IRQHandler+0x88>
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8004bd8:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004bda:	e852 3f00 	ldrex	r3, [r2]
 8004bde:	f423 7390 	bic.w	r3, r3, #288	; 0x120
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004be2:	e842 3000 	strex	r0, r3, [r2]
 8004be6:	2800      	cmp	r0, #0
 8004be8:	d1f6      	bne.n	8004bd8 <HAL_UART_IRQHandler+0x2a0>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8004bea:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004bec:	f102 0308 	add.w	r3, r2, #8
 8004bf0:	e853 3f00 	ldrex	r3, [r3]
 8004bf4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004bf8:	f023 0301 	bic.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004bfc:	3208      	adds	r2, #8
 8004bfe:	e842 3000 	strex	r0, r3, [r2]
 8004c02:	2800      	cmp	r0, #0
 8004c04:	d1f1      	bne.n	8004bea <HAL_UART_IRQHandler+0x2b2>
        huart->RxState = HAL_UART_STATE_READY;
 8004c06:	2320      	movs	r3, #32
 8004c08:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004c0c:	2300      	movs	r3, #0
 8004c0e:	66e3      	str	r3, [r4, #108]	; 0x6c
        huart->RxISR = NULL;
 8004c10:	6723      	str	r3, [r4, #112]	; 0x70
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004c12:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004c14:	e852 3f00 	ldrex	r3, [r2]
 8004c18:	f023 0310 	bic.w	r3, r3, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004c1c:	e842 3000 	strex	r0, r3, [r2]
 8004c20:	2800      	cmp	r0, #0
 8004c22:	d1f6      	bne.n	8004c12 <HAL_UART_IRQHandler+0x2da>
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8004c24:	4620      	mov	r0, r4
 8004c26:	f7ff fe86 	bl	8004936 <HAL_UARTEx_RxEventCallback>
      return;
 8004c2a:	e6c9      	b.n	80049c0 <HAL_UART_IRQHandler+0x88>
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8004c2c:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8004c30:	620b      	str	r3, [r1, #32]
    HAL_UARTEx_WakeupCallback(huart);
 8004c32:	4620      	mov	r0, r4
 8004c34:	f000 fab6 	bl	80051a4 <HAL_UARTEx_WakeupCallback>
    return;
 8004c38:	e6c2      	b.n	80049c0 <HAL_UART_IRQHandler+0x88>
    if (huart->TxISR != NULL)
 8004c3a:	6f63      	ldr	r3, [r4, #116]	; 0x74
 8004c3c:	2b00      	cmp	r3, #0
 8004c3e:	f43f aebf 	beq.w	80049c0 <HAL_UART_IRQHandler+0x88>
      huart->TxISR(huart);
 8004c42:	4620      	mov	r0, r4
 8004c44:	4798      	blx	r3
    return;
 8004c46:	e6bb      	b.n	80049c0 <HAL_UART_IRQHandler+0x88>
    UART_EndTransmit_IT(huart);
 8004c48:	4620      	mov	r0, r4
 8004c4a:	f7ff fe25 	bl	8004898 <UART_EndTransmit_IT>
    return;
 8004c4e:	e6b7      	b.n	80049c0 <HAL_UART_IRQHandler+0x88>
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 8004c50:	4620      	mov	r0, r4
 8004c52:	f000 faa9 	bl	80051a8 <HAL_UARTEx_TxFifoEmptyCallback>
    return;
 8004c56:	e6b3      	b.n	80049c0 <HAL_UART_IRQHandler+0x88>
 8004c58:	10000001 	.word	0x10000001
 8004c5c:	04000120 	.word	0x04000120
 8004c60:	08004923 	.word	0x08004923
    HAL_UARTEx_RxFifoFullCallback(huart);
 8004c64:	4620      	mov	r0, r4
 8004c66:	f000 fa9e 	bl	80051a6 <HAL_UARTEx_RxFifoFullCallback>
    return;
 8004c6a:	e6a9      	b.n	80049c0 <HAL_UART_IRQHandler+0x88>

08004c6c <UART_SetConfig>:
{
 8004c6c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004c70:	4604      	mov	r4, r0
  if (UART_INSTANCE_LOWPOWER(huart))
 8004c72:	6801      	ldr	r1, [r0, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004c74:	6883      	ldr	r3, [r0, #8]
 8004c76:	6902      	ldr	r2, [r0, #16]
 8004c78:	4313      	orrs	r3, r2
 8004c7a:	6942      	ldr	r2, [r0, #20]
 8004c7c:	4313      	orrs	r3, r2
 8004c7e:	69c2      	ldr	r2, [r0, #28]
 8004c80:	4313      	orrs	r3, r2
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004c82:	6808      	ldr	r0, [r1, #0]
 8004c84:	4a8f      	ldr	r2, [pc, #572]	; (8004ec4 <UART_SetConfig+0x258>)
 8004c86:	4002      	ands	r2, r0
 8004c88:	4313      	orrs	r3, r2
 8004c8a:	600b      	str	r3, [r1, #0]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004c8c:	6822      	ldr	r2, [r4, #0]
 8004c8e:	6853      	ldr	r3, [r2, #4]
 8004c90:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8004c94:	68e1      	ldr	r1, [r4, #12]
 8004c96:	430b      	orrs	r3, r1
 8004c98:	6053      	str	r3, [r2, #4]
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8004c9a:	69a1      	ldr	r1, [r4, #24]
  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8004c9c:	6822      	ldr	r2, [r4, #0]
 8004c9e:	4b8a      	ldr	r3, [pc, #552]	; (8004ec8 <UART_SetConfig+0x25c>)
 8004ca0:	429a      	cmp	r2, r3
 8004ca2:	d001      	beq.n	8004ca8 <UART_SetConfig+0x3c>
    tmpreg |= huart->Init.OneBitSampling;
 8004ca4:	6a23      	ldr	r3, [r4, #32]
 8004ca6:	4319      	orrs	r1, r3
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004ca8:	6893      	ldr	r3, [r2, #8]
 8004caa:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 8004cae:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 8004cb2:	430b      	orrs	r3, r1
 8004cb4:	6093      	str	r3, [r2, #8]
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8004cb6:	6822      	ldr	r2, [r4, #0]
 8004cb8:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 8004cba:	f023 030f 	bic.w	r3, r3, #15
 8004cbe:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8004cc0:	430b      	orrs	r3, r1
 8004cc2:	62d3      	str	r3, [r2, #44]	; 0x2c
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004cc4:	6822      	ldr	r2, [r4, #0]
 8004cc6:	4b81      	ldr	r3, [pc, #516]	; (8004ecc <UART_SetConfig+0x260>)
 8004cc8:	429a      	cmp	r2, r3
 8004cca:	d019      	beq.n	8004d00 <UART_SetConfig+0x94>
 8004ccc:	4b7e      	ldr	r3, [pc, #504]	; (8004ec8 <UART_SetConfig+0x25c>)
 8004cce:	429a      	cmp	r2, r3
 8004cd0:	d02a      	beq.n	8004d28 <UART_SetConfig+0xbc>
 8004cd2:	2310      	movs	r3, #16
  if (UART_INSTANCE_LOWPOWER(huart))
 8004cd4:	497c      	ldr	r1, [pc, #496]	; (8004ec8 <UART_SetConfig+0x25c>)
 8004cd6:	428a      	cmp	r2, r1
 8004cd8:	d045      	beq.n	8004d66 <UART_SetConfig+0xfa>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004cda:	69e0      	ldr	r0, [r4, #28]
 8004cdc:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
 8004ce0:	f000 8082 	beq.w	8004de8 <UART_SetConfig+0x17c>
    switch (clocksource)
 8004ce4:	3b01      	subs	r3, #1
 8004ce6:	2b07      	cmp	r3, #7
 8004ce8:	f200 80e6 	bhi.w	8004eb8 <UART_SetConfig+0x24c>
 8004cec:	e8df f013 	tbh	[pc, r3, lsl #1]
 8004cf0:	00aa00ac 	.word	0x00aa00ac
 8004cf4:	00ce00e4 	.word	0x00ce00e4
 8004cf8:	00e400e4 	.word	0x00e400e4
 8004cfc:	00d100e4 	.word	0x00d100e4
  return (uint32_t)(READ_BIT(RCC->CCIPR, USARTx));
 8004d00:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004d04:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004d08:	f003 0303 	and.w	r3, r3, #3
 8004d0c:	2b03      	cmp	r3, #3
 8004d0e:	d809      	bhi.n	8004d24 <UART_SetConfig+0xb8>
 8004d10:	e8df f003 	tbb	[pc, r3]
 8004d14:	061f0402 	.word	0x061f0402
 8004d18:	2301      	movs	r3, #1
 8004d1a:	e7db      	b.n	8004cd4 <UART_SetConfig+0x68>
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004d1c:	2304      	movs	r3, #4
 8004d1e:	e7d9      	b.n	8004cd4 <UART_SetConfig+0x68>
 8004d20:	2308      	movs	r3, #8
 8004d22:	e7d7      	b.n	8004cd4 <UART_SetConfig+0x68>
 8004d24:	2310      	movs	r3, #16
 8004d26:	e7d5      	b.n	8004cd4 <UART_SetConfig+0x68>
  return (uint32_t)(READ_BIT(RCC->CCIPR, LPUARTx));
 8004d28:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004d2c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004d30:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8004d34:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004d38:	d00d      	beq.n	8004d56 <UART_SetConfig+0xea>
 8004d3a:	d805      	bhi.n	8004d48 <UART_SetConfig+0xdc>
 8004d3c:	b16b      	cbz	r3, 8004d5a <UART_SetConfig+0xee>
 8004d3e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004d42:	d10c      	bne.n	8004d5e <UART_SetConfig+0xf2>
 8004d44:	2304      	movs	r3, #4
 8004d46:	e7c5      	b.n	8004cd4 <UART_SetConfig+0x68>
 8004d48:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004d4c:	d109      	bne.n	8004d62 <UART_SetConfig+0xf6>
 8004d4e:	2308      	movs	r3, #8
 8004d50:	e7c0      	b.n	8004cd4 <UART_SetConfig+0x68>
 8004d52:	2302      	movs	r3, #2
 8004d54:	e7be      	b.n	8004cd4 <UART_SetConfig+0x68>
 8004d56:	2302      	movs	r3, #2
 8004d58:	e7bc      	b.n	8004cd4 <UART_SetConfig+0x68>
 8004d5a:	2300      	movs	r3, #0
 8004d5c:	e7ba      	b.n	8004cd4 <UART_SetConfig+0x68>
 8004d5e:	2310      	movs	r3, #16
 8004d60:	e7b8      	b.n	8004cd4 <UART_SetConfig+0x68>
 8004d62:	2310      	movs	r3, #16
 8004d64:	e7b6      	b.n	8004cd4 <UART_SetConfig+0x68>
    switch (clocksource)
 8004d66:	2b08      	cmp	r3, #8
 8004d68:	f200 8096 	bhi.w	8004e98 <UART_SetConfig+0x22c>
 8004d6c:	e8df f003 	tbb	[pc, r3]
 8004d70:	943a9408 	.word	0x943a9408
 8004d74:	94949437 	.word	0x94949437
 8004d78:	05          	.byte	0x05
 8004d79:	00          	.byte	0x00
  if (UART_INSTANCE_LOWPOWER(huart))
 8004d7a:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8004d7e:	e004      	b.n	8004d8a <UART_SetConfig+0x11e>
        pclk = HAL_RCC_GetPCLK1Freq();
 8004d80:	f7ff f83e 	bl	8003e00 <HAL_RCC_GetPCLK1Freq>
    if (pclk != 0U)
 8004d84:	2800      	cmp	r0, #0
 8004d86:	f000 8089 	beq.w	8004e9c <UART_SetConfig+0x230>
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8004d8a:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8004d8c:	4b50      	ldr	r3, [pc, #320]	; (8004ed0 <UART_SetConfig+0x264>)
 8004d8e:	f833 2012 	ldrh.w	r2, [r3, r2, lsl #1]
 8004d92:	fbb0 f3f2 	udiv	r3, r0, r2
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8004d96:	6865      	ldr	r5, [r4, #4]
 8004d98:	eb05 0145 	add.w	r1, r5, r5, lsl #1
 8004d9c:	4299      	cmp	r1, r3
 8004d9e:	d87f      	bhi.n	8004ea0 <UART_SetConfig+0x234>
 8004da0:	ebb3 3f05 	cmp.w	r3, r5, lsl #12
 8004da4:	d87e      	bhi.n	8004ea4 <UART_SetConfig+0x238>
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8004da6:	f04f 0800 	mov.w	r8, #0
 8004daa:	b292      	uxth	r2, r2
 8004dac:	2300      	movs	r3, #0
 8004dae:	4641      	mov	r1, r8
 8004db0:	f7fb fa36 	bl	8000220 <__aeabi_uldivmod>
 8004db4:	020f      	lsls	r7, r1, #8
 8004db6:	ea47 6710 	orr.w	r7, r7, r0, lsr #24
 8004dba:	0206      	lsls	r6, r0, #8
 8004dbc:	0868      	lsrs	r0, r5, #1
 8004dbe:	462a      	mov	r2, r5
 8004dc0:	4643      	mov	r3, r8
 8004dc2:	1830      	adds	r0, r6, r0
 8004dc4:	f147 0100 	adc.w	r1, r7, #0
 8004dc8:	f7fb fa2a 	bl	8000220 <__aeabi_uldivmod>
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8004dcc:	f5a0 7240 	sub.w	r2, r0, #768	; 0x300
 8004dd0:	4b40      	ldr	r3, [pc, #256]	; (8004ed4 <UART_SetConfig+0x268>)
 8004dd2:	429a      	cmp	r2, r3
 8004dd4:	d868      	bhi.n	8004ea8 <UART_SetConfig+0x23c>
          huart->Instance->BRR = usartdiv;
 8004dd6:	6823      	ldr	r3, [r4, #0]
 8004dd8:	60d8      	str	r0, [r3, #12]
 8004dda:	4640      	mov	r0, r8
 8004ddc:	e04c      	b.n	8004e78 <UART_SetConfig+0x20c>
        pclk = HAL_RCC_GetSysClockFreq();
 8004dde:	f7fe fad7 	bl	8003390 <HAL_RCC_GetSysClockFreq>
        break;
 8004de2:	e7cf      	b.n	8004d84 <UART_SetConfig+0x118>
        pclk = (uint32_t) HSI_VALUE;
 8004de4:	483c      	ldr	r0, [pc, #240]	; (8004ed8 <UART_SetConfig+0x26c>)
 8004de6:	e7d0      	b.n	8004d8a <UART_SetConfig+0x11e>
    switch (clocksource)
 8004de8:	3b01      	subs	r3, #1
 8004dea:	2b07      	cmp	r3, #7
 8004dec:	d85e      	bhi.n	8004eac <UART_SetConfig+0x240>
 8004dee:	e8df f003 	tbb	[pc, r3]
 8004df2:	0406      	.short	0x0406
 8004df4:	5d5d265d 	.word	0x5d5d265d
 8004df8:	0a5d      	.short	0x0a5d
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004dfa:	4837      	ldr	r0, [pc, #220]	; (8004ed8 <UART_SetConfig+0x26c>)
 8004dfc:	e003      	b.n	8004e06 <UART_SetConfig+0x19a>
        pclk = HAL_RCC_GetPCLK2Freq();
 8004dfe:	f7ff f811 	bl	8003e24 <HAL_RCC_GetPCLK2Freq>
    if (pclk != 0U)
 8004e02:	2800      	cmp	r0, #0
 8004e04:	d054      	beq.n	8004eb0 <UART_SetConfig+0x244>
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8004e06:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8004e08:	4b31      	ldr	r3, [pc, #196]	; (8004ed0 <UART_SetConfig+0x264>)
 8004e0a:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8004e0e:	fbb0 f0f3 	udiv	r0, r0, r3
 8004e12:	6862      	ldr	r2, [r4, #4]
 8004e14:	0853      	lsrs	r3, r2, #1
 8004e16:	eb03 0040 	add.w	r0, r3, r0, lsl #1
 8004e1a:	fbb0 f0f2 	udiv	r0, r0, r2
 8004e1e:	b280      	uxth	r0, r0
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004e20:	f1a0 0210 	sub.w	r2, r0, #16
 8004e24:	f64f 73ef 	movw	r3, #65519	; 0xffef
 8004e28:	429a      	cmp	r2, r3
 8004e2a:	d843      	bhi.n	8004eb4 <UART_SetConfig+0x248>
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8004e2c:	f020 030f 	bic.w	r3, r0, #15
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8004e30:	f3c0 0042 	ubfx	r0, r0, #1, #3
 8004e34:	4318      	orrs	r0, r3
        huart->Instance->BRR = brrtemp;
 8004e36:	6823      	ldr	r3, [r4, #0]
 8004e38:	60d8      	str	r0, [r3, #12]
 8004e3a:	2000      	movs	r0, #0
 8004e3c:	e01c      	b.n	8004e78 <UART_SetConfig+0x20c>
        pclk = HAL_RCC_GetSysClockFreq();
 8004e3e:	f7fe faa7 	bl	8003390 <HAL_RCC_GetSysClockFreq>
        break;
 8004e42:	e7de      	b.n	8004e02 <UART_SetConfig+0x196>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004e44:	4824      	ldr	r0, [pc, #144]	; (8004ed8 <UART_SetConfig+0x26c>)
 8004e46:	e002      	b.n	8004e4e <UART_SetConfig+0x1e2>
        pclk = HAL_RCC_GetPCLK2Freq();
 8004e48:	f7fe ffec 	bl	8003e24 <HAL_RCC_GetPCLK2Freq>
    if (pclk != 0U)
 8004e4c:	b3b0      	cbz	r0, 8004ebc <UART_SetConfig+0x250>
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8004e4e:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8004e50:	4b1f      	ldr	r3, [pc, #124]	; (8004ed0 <UART_SetConfig+0x264>)
 8004e52:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8004e56:	fbb0 f0f3 	udiv	r0, r0, r3
 8004e5a:	6863      	ldr	r3, [r4, #4]
 8004e5c:	eb00 0053 	add.w	r0, r0, r3, lsr #1
 8004e60:	fbb0 f0f3 	udiv	r0, r0, r3
 8004e64:	b280      	uxth	r0, r0
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004e66:	f1a0 0210 	sub.w	r2, r0, #16
 8004e6a:	f64f 73ef 	movw	r3, #65519	; 0xffef
 8004e6e:	429a      	cmp	r2, r3
 8004e70:	d826      	bhi.n	8004ec0 <UART_SetConfig+0x254>
        huart->Instance->BRR = usartdiv;
 8004e72:	6823      	ldr	r3, [r4, #0]
 8004e74:	60d8      	str	r0, [r3, #12]
 8004e76:	2000      	movs	r0, #0
  huart->NbTxDataToProcess = 1;
 8004e78:	2301      	movs	r3, #1
 8004e7a:	f8a4 306a 	strh.w	r3, [r4, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8004e7e:	f8a4 3068 	strh.w	r3, [r4, #104]	; 0x68
  huart->RxISR = NULL;
 8004e82:	2300      	movs	r3, #0
 8004e84:	6723      	str	r3, [r4, #112]	; 0x70
  huart->TxISR = NULL;
 8004e86:	6763      	str	r3, [r4, #116]	; 0x74
}
 8004e88:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        pclk = HAL_RCC_GetSysClockFreq();
 8004e8c:	f7fe fa80 	bl	8003390 <HAL_RCC_GetSysClockFreq>
        break;
 8004e90:	e7dc      	b.n	8004e4c <UART_SetConfig+0x1e0>
        pclk = (uint32_t) LSE_VALUE;
 8004e92:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8004e96:	e7da      	b.n	8004e4e <UART_SetConfig+0x1e2>
  if (UART_INSTANCE_LOWPOWER(huart))
 8004e98:	2001      	movs	r0, #1
 8004e9a:	e7ed      	b.n	8004e78 <UART_SetConfig+0x20c>
 8004e9c:	2000      	movs	r0, #0
 8004e9e:	e7eb      	b.n	8004e78 <UART_SetConfig+0x20c>
        ret = HAL_ERROR;
 8004ea0:	2001      	movs	r0, #1
 8004ea2:	e7e9      	b.n	8004e78 <UART_SetConfig+0x20c>
 8004ea4:	2001      	movs	r0, #1
 8004ea6:	e7e7      	b.n	8004e78 <UART_SetConfig+0x20c>
          ret = HAL_ERROR;
 8004ea8:	2001      	movs	r0, #1
 8004eaa:	e7e5      	b.n	8004e78 <UART_SetConfig+0x20c>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004eac:	2001      	movs	r0, #1
 8004eae:	e7e3      	b.n	8004e78 <UART_SetConfig+0x20c>
 8004eb0:	2000      	movs	r0, #0
 8004eb2:	e7e1      	b.n	8004e78 <UART_SetConfig+0x20c>
        ret = HAL_ERROR;
 8004eb4:	2001      	movs	r0, #1
 8004eb6:	e7df      	b.n	8004e78 <UART_SetConfig+0x20c>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004eb8:	2001      	movs	r0, #1
 8004eba:	e7dd      	b.n	8004e78 <UART_SetConfig+0x20c>
 8004ebc:	2000      	movs	r0, #0
 8004ebe:	e7db      	b.n	8004e78 <UART_SetConfig+0x20c>
        ret = HAL_ERROR;
 8004ec0:	2001      	movs	r0, #1
 8004ec2:	e7d9      	b.n	8004e78 <UART_SetConfig+0x20c>
 8004ec4:	cfff69f3 	.word	0xcfff69f3
 8004ec8:	40008000 	.word	0x40008000
 8004ecc:	40013800 	.word	0x40013800
 8004ed0:	0800877c 	.word	0x0800877c
 8004ed4:	000ffcff 	.word	0x000ffcff
 8004ed8:	00f42400 	.word	0x00f42400

08004edc <UART_AdvFeatureConfig>:
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8004edc:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8004ede:	f013 0f01 	tst.w	r3, #1
 8004ee2:	d006      	beq.n	8004ef2 <UART_AdvFeatureConfig+0x16>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8004ee4:	6802      	ldr	r2, [r0, #0]
 8004ee6:	6853      	ldr	r3, [r2, #4]
 8004ee8:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8004eec:	6ac1      	ldr	r1, [r0, #44]	; 0x2c
 8004eee:	430b      	orrs	r3, r1
 8004ef0:	6053      	str	r3, [r2, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8004ef2:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8004ef4:	f013 0f02 	tst.w	r3, #2
 8004ef8:	d006      	beq.n	8004f08 <UART_AdvFeatureConfig+0x2c>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8004efa:	6802      	ldr	r2, [r0, #0]
 8004efc:	6853      	ldr	r3, [r2, #4]
 8004efe:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004f02:	6b01      	ldr	r1, [r0, #48]	; 0x30
 8004f04:	430b      	orrs	r3, r1
 8004f06:	6053      	str	r3, [r2, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8004f08:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8004f0a:	f013 0f04 	tst.w	r3, #4
 8004f0e:	d006      	beq.n	8004f1e <UART_AdvFeatureConfig+0x42>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8004f10:	6802      	ldr	r2, [r0, #0]
 8004f12:	6853      	ldr	r3, [r2, #4]
 8004f14:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004f18:	6b41      	ldr	r1, [r0, #52]	; 0x34
 8004f1a:	430b      	orrs	r3, r1
 8004f1c:	6053      	str	r3, [r2, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8004f1e:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8004f20:	f013 0f08 	tst.w	r3, #8
 8004f24:	d006      	beq.n	8004f34 <UART_AdvFeatureConfig+0x58>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8004f26:	6802      	ldr	r2, [r0, #0]
 8004f28:	6853      	ldr	r3, [r2, #4]
 8004f2a:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8004f2e:	6b81      	ldr	r1, [r0, #56]	; 0x38
 8004f30:	430b      	orrs	r3, r1
 8004f32:	6053      	str	r3, [r2, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004f34:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8004f36:	f013 0f10 	tst.w	r3, #16
 8004f3a:	d006      	beq.n	8004f4a <UART_AdvFeatureConfig+0x6e>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004f3c:	6802      	ldr	r2, [r0, #0]
 8004f3e:	6893      	ldr	r3, [r2, #8]
 8004f40:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004f44:	6bc1      	ldr	r1, [r0, #60]	; 0x3c
 8004f46:	430b      	orrs	r3, r1
 8004f48:	6093      	str	r3, [r2, #8]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8004f4a:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8004f4c:	f013 0f20 	tst.w	r3, #32
 8004f50:	d006      	beq.n	8004f60 <UART_AdvFeatureConfig+0x84>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8004f52:	6802      	ldr	r2, [r0, #0]
 8004f54:	6893      	ldr	r3, [r2, #8]
 8004f56:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004f5a:	6c01      	ldr	r1, [r0, #64]	; 0x40
 8004f5c:	430b      	orrs	r3, r1
 8004f5e:	6093      	str	r3, [r2, #8]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004f60:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8004f62:	f013 0f40 	tst.w	r3, #64	; 0x40
 8004f66:	d00a      	beq.n	8004f7e <UART_AdvFeatureConfig+0xa2>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004f68:	6802      	ldr	r2, [r0, #0]
 8004f6a:	6853      	ldr	r3, [r2, #4]
 8004f6c:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8004f70:	6c41      	ldr	r1, [r0, #68]	; 0x44
 8004f72:	430b      	orrs	r3, r1
 8004f74:	6053      	str	r3, [r2, #4]
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8004f76:	6c43      	ldr	r3, [r0, #68]	; 0x44
 8004f78:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004f7c:	d00b      	beq.n	8004f96 <UART_AdvFeatureConfig+0xba>
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8004f7e:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8004f80:	f013 0f80 	tst.w	r3, #128	; 0x80
 8004f84:	d006      	beq.n	8004f94 <UART_AdvFeatureConfig+0xb8>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8004f86:	6802      	ldr	r2, [r0, #0]
 8004f88:	6853      	ldr	r3, [r2, #4]
 8004f8a:	f423 2300 	bic.w	r3, r3, #524288	; 0x80000
 8004f8e:	6cc1      	ldr	r1, [r0, #76]	; 0x4c
 8004f90:	430b      	orrs	r3, r1
 8004f92:	6053      	str	r3, [r2, #4]
}
 8004f94:	4770      	bx	lr
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004f96:	6802      	ldr	r2, [r0, #0]
 8004f98:	6853      	ldr	r3, [r2, #4]
 8004f9a:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8004f9e:	6c81      	ldr	r1, [r0, #72]	; 0x48
 8004fa0:	430b      	orrs	r3, r1
 8004fa2:	6053      	str	r3, [r2, #4]
 8004fa4:	e7eb      	b.n	8004f7e <UART_AdvFeatureConfig+0xa2>

08004fa6 <UART_WaitOnFlagUntilTimeout>:
{
 8004fa6:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004faa:	4605      	mov	r5, r0
 8004fac:	460f      	mov	r7, r1
 8004fae:	4616      	mov	r6, r2
 8004fb0:	4699      	mov	r9, r3
 8004fb2:	f8dd 8020 	ldr.w	r8, [sp, #32]
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004fb6:	682c      	ldr	r4, [r5, #0]
 8004fb8:	69e4      	ldr	r4, [r4, #28]
 8004fba:	ea37 0304 	bics.w	r3, r7, r4
 8004fbe:	bf0c      	ite	eq
 8004fc0:	2401      	moveq	r4, #1
 8004fc2:	2400      	movne	r4, #0
 8004fc4:	42b4      	cmp	r4, r6
 8004fc6:	d157      	bne.n	8005078 <UART_WaitOnFlagUntilTimeout+0xd2>
    if (Timeout != HAL_MAX_DELAY)
 8004fc8:	f1b8 3fff 	cmp.w	r8, #4294967295
 8004fcc:	d0f3      	beq.n	8004fb6 <UART_WaitOnFlagUntilTimeout+0x10>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004fce:	f7fc fea3 	bl	8001d18 <HAL_GetTick>
 8004fd2:	eba0 0009 	sub.w	r0, r0, r9
 8004fd6:	4540      	cmp	r0, r8
 8004fd8:	d82f      	bhi.n	800503a <UART_WaitOnFlagUntilTimeout+0x94>
 8004fda:	f1b8 0f00 	cmp.w	r8, #0
 8004fde:	d02c      	beq.n	800503a <UART_WaitOnFlagUntilTimeout+0x94>
      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8004fe0:	682b      	ldr	r3, [r5, #0]
 8004fe2:	681a      	ldr	r2, [r3, #0]
 8004fe4:	f012 0f04 	tst.w	r2, #4
 8004fe8:	d0e5      	beq.n	8004fb6 <UART_WaitOnFlagUntilTimeout+0x10>
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8004fea:	69da      	ldr	r2, [r3, #28]
 8004fec:	f412 6f00 	tst.w	r2, #2048	; 0x800
 8004ff0:	d0e1      	beq.n	8004fb6 <UART_WaitOnFlagUntilTimeout+0x10>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004ff2:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004ff6:	621a      	str	r2, [r3, #32]
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8004ff8:	682a      	ldr	r2, [r5, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004ffa:	e852 3f00 	ldrex	r3, [r2]
 8004ffe:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005002:	e842 3100 	strex	r1, r3, [r2]
 8005006:	2900      	cmp	r1, #0
 8005008:	d1f6      	bne.n	8004ff8 <UART_WaitOnFlagUntilTimeout+0x52>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800500a:	682a      	ldr	r2, [r5, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800500c:	f102 0308 	add.w	r3, r2, #8
 8005010:	e853 3f00 	ldrex	r3, [r3]
 8005014:	f023 0301 	bic.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005018:	3208      	adds	r2, #8
 800501a:	e842 3100 	strex	r1, r3, [r2]
 800501e:	2900      	cmp	r1, #0
 8005020:	d1f3      	bne.n	800500a <UART_WaitOnFlagUntilTimeout+0x64>
          huart->gState = HAL_UART_STATE_READY;
 8005022:	2320      	movs	r3, #32
 8005024:	f8c5 3084 	str.w	r3, [r5, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 8005028:	f8c5 3088 	str.w	r3, [r5, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800502c:	f8c5 308c 	str.w	r3, [r5, #140]	; 0x8c
          __HAL_UNLOCK(huart);
 8005030:	2300      	movs	r3, #0
 8005032:	f885 3080 	strb.w	r3, [r5, #128]	; 0x80
          return HAL_TIMEOUT;
 8005036:	2003      	movs	r0, #3
 8005038:	e01f      	b.n	800507a <UART_WaitOnFlagUntilTimeout+0xd4>
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 800503a:	682a      	ldr	r2, [r5, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800503c:	e852 3f00 	ldrex	r3, [r2]
 8005040:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005044:	e842 3100 	strex	r1, r3, [r2]
 8005048:	2900      	cmp	r1, #0
 800504a:	d1f6      	bne.n	800503a <UART_WaitOnFlagUntilTimeout+0x94>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800504c:	682a      	ldr	r2, [r5, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800504e:	f102 0308 	add.w	r3, r2, #8
 8005052:	e853 3f00 	ldrex	r3, [r3]
 8005056:	f023 0301 	bic.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800505a:	3208      	adds	r2, #8
 800505c:	e842 3100 	strex	r1, r3, [r2]
 8005060:	2900      	cmp	r1, #0
 8005062:	d1f3      	bne.n	800504c <UART_WaitOnFlagUntilTimeout+0xa6>
        huart->gState = HAL_UART_STATE_READY;
 8005064:	2320      	movs	r3, #32
 8005066:	f8c5 3084 	str.w	r3, [r5, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 800506a:	f8c5 3088 	str.w	r3, [r5, #136]	; 0x88
        __HAL_UNLOCK(huart);
 800506e:	2300      	movs	r3, #0
 8005070:	f885 3080 	strb.w	r3, [r5, #128]	; 0x80
        return HAL_TIMEOUT;
 8005074:	2003      	movs	r0, #3
 8005076:	e000      	b.n	800507a <UART_WaitOnFlagUntilTimeout+0xd4>
  return HAL_OK;
 8005078:	2000      	movs	r0, #0
}
 800507a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

0800507e <UART_CheckIdleState>:
{
 800507e:	b530      	push	{r4, r5, lr}
 8005080:	b083      	sub	sp, #12
 8005082:	4604      	mov	r4, r0
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005084:	2300      	movs	r3, #0
 8005086:	f8c0 308c 	str.w	r3, [r0, #140]	; 0x8c
  tickstart = HAL_GetTick();
 800508a:	f7fc fe45 	bl	8001d18 <HAL_GetTick>
 800508e:	4605      	mov	r5, r0
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8005090:	6823      	ldr	r3, [r4, #0]
 8005092:	681b      	ldr	r3, [r3, #0]
 8005094:	f013 0f08 	tst.w	r3, #8
 8005098:	d10f      	bne.n	80050ba <UART_CheckIdleState+0x3c>
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800509a:	6823      	ldr	r3, [r4, #0]
 800509c:	681b      	ldr	r3, [r3, #0]
 800509e:	f013 0f04 	tst.w	r3, #4
 80050a2:	d118      	bne.n	80050d6 <UART_CheckIdleState+0x58>
  huart->gState = HAL_UART_STATE_READY;
 80050a4:	2320      	movs	r3, #32
 80050a6:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 80050aa:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80050ae:	2000      	movs	r0, #0
 80050b0:	66e0      	str	r0, [r4, #108]	; 0x6c
  __HAL_UNLOCK(huart);
 80050b2:	f884 0080 	strb.w	r0, [r4, #128]	; 0x80
}
 80050b6:	b003      	add	sp, #12
 80050b8:	bd30      	pop	{r4, r5, pc}
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80050ba:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80050be:	9300      	str	r3, [sp, #0]
 80050c0:	4603      	mov	r3, r0
 80050c2:	2200      	movs	r2, #0
 80050c4:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80050c8:	4620      	mov	r0, r4
 80050ca:	f7ff ff6c 	bl	8004fa6 <UART_WaitOnFlagUntilTimeout>
 80050ce:	2800      	cmp	r0, #0
 80050d0:	d0e3      	beq.n	800509a <UART_CheckIdleState+0x1c>
      return HAL_TIMEOUT;
 80050d2:	2003      	movs	r0, #3
 80050d4:	e7ef      	b.n	80050b6 <UART_CheckIdleState+0x38>
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80050d6:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80050da:	9300      	str	r3, [sp, #0]
 80050dc:	462b      	mov	r3, r5
 80050de:	2200      	movs	r2, #0
 80050e0:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80050e4:	4620      	mov	r0, r4
 80050e6:	f7ff ff5e 	bl	8004fa6 <UART_WaitOnFlagUntilTimeout>
 80050ea:	2800      	cmp	r0, #0
 80050ec:	d0da      	beq.n	80050a4 <UART_CheckIdleState+0x26>
      return HAL_TIMEOUT;
 80050ee:	2003      	movs	r0, #3
 80050f0:	e7e1      	b.n	80050b6 <UART_CheckIdleState+0x38>

080050f2 <HAL_UART_Init>:
  if (huart == NULL)
 80050f2:	b378      	cbz	r0, 8005154 <HAL_UART_Init+0x62>
{
 80050f4:	b510      	push	{r4, lr}
 80050f6:	4604      	mov	r4, r0
  if (huart->gState == HAL_UART_STATE_RESET)
 80050f8:	f8d0 3084 	ldr.w	r3, [r0, #132]	; 0x84
 80050fc:	b30b      	cbz	r3, 8005142 <HAL_UART_Init+0x50>
  huart->gState = HAL_UART_STATE_BUSY;
 80050fe:	2324      	movs	r3, #36	; 0x24
 8005100:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
  __HAL_UART_DISABLE(huart);
 8005104:	6822      	ldr	r2, [r4, #0]
 8005106:	6813      	ldr	r3, [r2, #0]
 8005108:	f023 0301 	bic.w	r3, r3, #1
 800510c:	6013      	str	r3, [r2, #0]
  if (UART_SetConfig(huart) == HAL_ERROR)
 800510e:	4620      	mov	r0, r4
 8005110:	f7ff fdac 	bl	8004c6c <UART_SetConfig>
 8005114:	2801      	cmp	r0, #1
 8005116:	d013      	beq.n	8005140 <HAL_UART_Init+0x4e>
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8005118:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800511a:	b9bb      	cbnz	r3, 800514c <HAL_UART_Init+0x5a>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800511c:	6822      	ldr	r2, [r4, #0]
 800511e:	6853      	ldr	r3, [r2, #4]
 8005120:	f423 4390 	bic.w	r3, r3, #18432	; 0x4800
 8005124:	6053      	str	r3, [r2, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005126:	6822      	ldr	r2, [r4, #0]
 8005128:	6893      	ldr	r3, [r2, #8]
 800512a:	f023 032a 	bic.w	r3, r3, #42	; 0x2a
 800512e:	6093      	str	r3, [r2, #8]
  __HAL_UART_ENABLE(huart);
 8005130:	6822      	ldr	r2, [r4, #0]
 8005132:	6813      	ldr	r3, [r2, #0]
 8005134:	f043 0301 	orr.w	r3, r3, #1
 8005138:	6013      	str	r3, [r2, #0]
  return (UART_CheckIdleState(huart));
 800513a:	4620      	mov	r0, r4
 800513c:	f7ff ff9f 	bl	800507e <UART_CheckIdleState>
}
 8005140:	bd10      	pop	{r4, pc}
    huart->Lock = HAL_UNLOCKED;
 8005142:	f880 3080 	strb.w	r3, [r0, #128]	; 0x80
    HAL_UART_MspInit(huart);
 8005146:	f7fc fc4f 	bl	80019e8 <HAL_UART_MspInit>
 800514a:	e7d8      	b.n	80050fe <HAL_UART_Init+0xc>
    UART_AdvFeatureConfig(huart);
 800514c:	4620      	mov	r0, r4
 800514e:	f7ff fec5 	bl	8004edc <UART_AdvFeatureConfig>
 8005152:	e7e3      	b.n	800511c <HAL_UART_Init+0x2a>
    return HAL_ERROR;
 8005154:	2001      	movs	r0, #1
}
 8005156:	4770      	bx	lr

08005158 <UARTEx_SetNbDataToProcess>:
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8005158:	6e43      	ldr	r3, [r0, #100]	; 0x64
 800515a:	b92b      	cbnz	r3, 8005168 <UARTEx_SetNbDataToProcess+0x10>
  {
    huart->NbTxDataToProcess = 1U;
 800515c:	2301      	movs	r3, #1
 800515e:	f8a0 306a 	strh.w	r3, [r0, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8005162:	f8a0 3068 	strh.w	r3, [r0, #104]	; 0x68
 8005166:	4770      	bx	lr
{
 8005168:	b430      	push	{r4, r5}
  }
  else
  {
    rx_fifo_depth = RX_FIFO_DEPTH;
    tx_fifo_depth = TX_FIFO_DEPTH;
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800516a:	6803      	ldr	r3, [r0, #0]
 800516c:	689a      	ldr	r2, [r3, #8]
 800516e:	f3c2 6242 	ubfx	r2, r2, #25, #3
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8005172:	6899      	ldr	r1, [r3, #8]
 8005174:	0f49      	lsrs	r1, r1, #29
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8005176:	4d09      	ldr	r5, [pc, #36]	; (800519c <UARTEx_SetNbDataToProcess+0x44>)
 8005178:	5c6b      	ldrb	r3, [r5, r1]
 800517a:	00db      	lsls	r3, r3, #3
                               (uint16_t)denominator[tx_fifo_threshold];
 800517c:	4c08      	ldr	r4, [pc, #32]	; (80051a0 <UARTEx_SetNbDataToProcess+0x48>)
 800517e:	5c61      	ldrb	r1, [r4, r1]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8005180:	fb93 f3f1 	sdiv	r3, r3, r1
 8005184:	f8a0 306a 	strh.w	r3, [r0, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8005188:	5cab      	ldrb	r3, [r5, r2]
 800518a:	00db      	lsls	r3, r3, #3
                               (uint16_t)denominator[rx_fifo_threshold];
 800518c:	5ca2      	ldrb	r2, [r4, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800518e:	fb93 f3f2 	sdiv	r3, r3, r2
 8005192:	f8a0 3068 	strh.w	r3, [r0, #104]	; 0x68
  }
}
 8005196:	bc30      	pop	{r4, r5}
 8005198:	4770      	bx	lr
 800519a:	bf00      	nop
 800519c:	0800879c 	.word	0x0800879c
 80051a0:	08008794 	.word	0x08008794

080051a4 <HAL_UARTEx_WakeupCallback>:
}
 80051a4:	4770      	bx	lr

080051a6 <HAL_UARTEx_RxFifoFullCallback>:
}
 80051a6:	4770      	bx	lr

080051a8 <HAL_UARTEx_TxFifoEmptyCallback>:
}
 80051a8:	4770      	bx	lr

080051aa <HAL_UARTEx_DisableFifoMode>:
  __HAL_LOCK(huart);
 80051aa:	f890 3080 	ldrb.w	r3, [r0, #128]	; 0x80
 80051ae:	2b01      	cmp	r3, #1
 80051b0:	d018      	beq.n	80051e4 <HAL_UARTEx_DisableFifoMode+0x3a>
 80051b2:	2301      	movs	r3, #1
 80051b4:	f880 3080 	strb.w	r3, [r0, #128]	; 0x80
  huart->gState = HAL_UART_STATE_BUSY;
 80051b8:	2324      	movs	r3, #36	; 0x24
 80051ba:	f8c0 3084 	str.w	r3, [r0, #132]	; 0x84
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80051be:	6803      	ldr	r3, [r0, #0]
 80051c0:	681a      	ldr	r2, [r3, #0]
  __HAL_UART_DISABLE(huart);
 80051c2:	6819      	ldr	r1, [r3, #0]
 80051c4:	f021 0101 	bic.w	r1, r1, #1
 80051c8:	6019      	str	r1, [r3, #0]
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 80051ca:	f022 5200 	bic.w	r2, r2, #536870912	; 0x20000000
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 80051ce:	2300      	movs	r3, #0
 80051d0:	6643      	str	r3, [r0, #100]	; 0x64
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80051d2:	6801      	ldr	r1, [r0, #0]
 80051d4:	600a      	str	r2, [r1, #0]
  huart->gState = HAL_UART_STATE_READY;
 80051d6:	2220      	movs	r2, #32
 80051d8:	f8c0 2084 	str.w	r2, [r0, #132]	; 0x84
  __HAL_UNLOCK(huart);
 80051dc:	f880 3080 	strb.w	r3, [r0, #128]	; 0x80
  return HAL_OK;
 80051e0:	4618      	mov	r0, r3
 80051e2:	4770      	bx	lr
  __HAL_LOCK(huart);
 80051e4:	2002      	movs	r0, #2
}
 80051e6:	4770      	bx	lr

080051e8 <HAL_UARTEx_SetTxFifoThreshold>:
{
 80051e8:	b538      	push	{r3, r4, r5, lr}
  __HAL_LOCK(huart);
 80051ea:	f890 3080 	ldrb.w	r3, [r0, #128]	; 0x80
 80051ee:	2b01      	cmp	r3, #1
 80051f0:	d01d      	beq.n	800522e <HAL_UARTEx_SetTxFifoThreshold+0x46>
 80051f2:	4604      	mov	r4, r0
 80051f4:	2301      	movs	r3, #1
 80051f6:	f880 3080 	strb.w	r3, [r0, #128]	; 0x80
  huart->gState = HAL_UART_STATE_BUSY;
 80051fa:	2324      	movs	r3, #36	; 0x24
 80051fc:	f8c0 3084 	str.w	r3, [r0, #132]	; 0x84
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8005200:	6803      	ldr	r3, [r0, #0]
 8005202:	681d      	ldr	r5, [r3, #0]
  __HAL_UART_DISABLE(huart);
 8005204:	681a      	ldr	r2, [r3, #0]
 8005206:	f022 0201 	bic.w	r2, r2, #1
 800520a:	601a      	str	r2, [r3, #0]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800520c:	6802      	ldr	r2, [r0, #0]
 800520e:	6893      	ldr	r3, [r2, #8]
 8005210:	f023 4360 	bic.w	r3, r3, #3758096384	; 0xe0000000
 8005214:	4319      	orrs	r1, r3
 8005216:	6091      	str	r1, [r2, #8]
  UARTEx_SetNbDataToProcess(huart);
 8005218:	f7ff ff9e 	bl	8005158 <UARTEx_SetNbDataToProcess>
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800521c:	6823      	ldr	r3, [r4, #0]
 800521e:	601d      	str	r5, [r3, #0]
  huart->gState = HAL_UART_STATE_READY;
 8005220:	2320      	movs	r3, #32
 8005222:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
  __HAL_UNLOCK(huart);
 8005226:	2000      	movs	r0, #0
 8005228:	f884 0080 	strb.w	r0, [r4, #128]	; 0x80
}
 800522c:	bd38      	pop	{r3, r4, r5, pc}
  __HAL_LOCK(huart);
 800522e:	2002      	movs	r0, #2
 8005230:	e7fc      	b.n	800522c <HAL_UARTEx_SetTxFifoThreshold+0x44>

08005232 <HAL_UARTEx_SetRxFifoThreshold>:
{
 8005232:	b538      	push	{r3, r4, r5, lr}
  __HAL_LOCK(huart);
 8005234:	f890 3080 	ldrb.w	r3, [r0, #128]	; 0x80
 8005238:	2b01      	cmp	r3, #1
 800523a:	d01d      	beq.n	8005278 <HAL_UARTEx_SetRxFifoThreshold+0x46>
 800523c:	4604      	mov	r4, r0
 800523e:	2301      	movs	r3, #1
 8005240:	f880 3080 	strb.w	r3, [r0, #128]	; 0x80
  huart->gState = HAL_UART_STATE_BUSY;
 8005244:	2324      	movs	r3, #36	; 0x24
 8005246:	f8c0 3084 	str.w	r3, [r0, #132]	; 0x84
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800524a:	6803      	ldr	r3, [r0, #0]
 800524c:	681d      	ldr	r5, [r3, #0]
  __HAL_UART_DISABLE(huart);
 800524e:	681a      	ldr	r2, [r3, #0]
 8005250:	f022 0201 	bic.w	r2, r2, #1
 8005254:	601a      	str	r2, [r3, #0]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8005256:	6802      	ldr	r2, [r0, #0]
 8005258:	6893      	ldr	r3, [r2, #8]
 800525a:	f023 6360 	bic.w	r3, r3, #234881024	; 0xe000000
 800525e:	4319      	orrs	r1, r3
 8005260:	6091      	str	r1, [r2, #8]
  UARTEx_SetNbDataToProcess(huart);
 8005262:	f7ff ff79 	bl	8005158 <UARTEx_SetNbDataToProcess>
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8005266:	6823      	ldr	r3, [r4, #0]
 8005268:	601d      	str	r5, [r3, #0]
  huart->gState = HAL_UART_STATE_READY;
 800526a:	2320      	movs	r3, #32
 800526c:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
  __HAL_UNLOCK(huart);
 8005270:	2000      	movs	r0, #0
 8005272:	f884 0080 	strb.w	r0, [r4, #128]	; 0x80
}
 8005276:	bd38      	pop	{r3, r4, r5, pc}
  __HAL_LOCK(huart);
 8005278:	2002      	movs	r0, #2
 800527a:	e7fc      	b.n	8005276 <HAL_UARTEx_SetRxFifoThreshold+0x44>

0800527c <aci_gap_set_non_discoverable>:
 */

#include "ble_gap_aci.h"

tBleStatus aci_gap_set_non_discoverable( void )
{
 800527c:	b510      	push	{r4, lr}
 800527e:	b088      	sub	sp, #32
  struct hci_request rq;
  tBleStatus status = 0;
 8005280:	2400      	movs	r4, #0
 8005282:	f88d 4007 	strb.w	r4, [sp, #7]
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8005286:	2218      	movs	r2, #24
 8005288:	4621      	mov	r1, r4
 800528a:	a802      	add	r0, sp, #8
 800528c:	f000 fbb4 	bl	80059f8 <Osal_MemSet>
  rq.ogf = 0x3f;
 8005290:	233f      	movs	r3, #63	; 0x3f
 8005292:	f8ad 3008 	strh.w	r3, [sp, #8]
  rq.ocf = 0x081;
 8005296:	2381      	movs	r3, #129	; 0x81
 8005298:	f8ad 300a 	strh.w	r3, [sp, #10]
  rq.rparam = &status;
 800529c:	f10d 0307 	add.w	r3, sp, #7
 80052a0:	9306      	str	r3, [sp, #24]
  rq.rlen = 1;
 80052a2:	2301      	movs	r3, #1
 80052a4:	9307      	str	r3, [sp, #28]
  if ( hci_send_req(&rq, FALSE) < 0 )
 80052a6:	4621      	mov	r1, r4
 80052a8:	a802      	add	r0, sp, #8
 80052aa:	f000 fd27 	bl	8005cfc <hci_send_req>
 80052ae:	42a0      	cmp	r0, r4
 80052b0:	db03      	blt.n	80052ba <aci_gap_set_non_discoverable+0x3e>
    return BLE_STATUS_TIMEOUT;
  return status;
 80052b2:	f89d 0007 	ldrb.w	r0, [sp, #7]
}
 80052b6:	b008      	add	sp, #32
 80052b8:	bd10      	pop	{r4, pc}
    return BLE_STATUS_TIMEOUT;
 80052ba:	20ff      	movs	r0, #255	; 0xff
 80052bc:	e7fb      	b.n	80052b6 <aci_gap_set_non_discoverable+0x3a>

080052be <aci_gap_set_discoverable>:
                                     const uint8_t* Local_Name,
                                     uint8_t Service_Uuid_length,
                                     const uint8_t* Service_Uuid_List,
                                     uint16_t Slave_Conn_Interval_Min,
                                     uint16_t Slave_Conn_Interval_Max )
{
 80052be:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80052c2:	b0cb      	sub	sp, #300	; 0x12c
 80052c4:	469c      	mov	ip, r3
 80052c6:	f89d 6154 	ldrb.w	r6, [sp, #340]	; 0x154
 80052ca:	f89d 515c 	ldrb.w	r5, [sp, #348]	; 0x15c
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gap_set_discoverable_cp0 *cp0 = (aci_gap_set_discoverable_cp0*)(cmd_buffer);
  aci_gap_set_discoverable_cp1 *cp1 = (aci_gap_set_discoverable_cp1*)(cmd_buffer + 1 + 2 + 2 + 1 + 1 + 1 + Local_Name_Length * (sizeof(uint8_t)));
 80052ce:	f106 0a08 	add.w	sl, r6, #8
 80052d2:	ac04      	add	r4, sp, #16
 80052d4:	eb04 0b0a 	add.w	fp, r4, sl
  aci_gap_set_discoverable_cp2 *cp2 = (aci_gap_set_discoverable_cp2*)(cmd_buffer + 1 + 2 + 2 + 1 + 1 + 1 + Local_Name_Length * (sizeof(uint8_t)) + 1 + Service_Uuid_length * (sizeof(uint8_t)));
 80052d8:	1977      	adds	r7, r6, r5
 80052da:	3709      	adds	r7, #9
 80052dc:	19e3      	adds	r3, r4, r7
 80052de:	9301      	str	r3, [sp, #4]
  tBleStatus status = 0;
 80052e0:	f10d 090f 	add.w	r9, sp, #15
 80052e4:	f04f 0800 	mov.w	r8, #0
 80052e8:	f88d 800f 	strb.w	r8, [sp, #15]
  int index_input = 0;
  cp0->Advertising_Type = Advertising_Type;
 80052ec:	f88d 0010 	strb.w	r0, [sp, #16]
  index_input += 1;
  cp0->Advertising_Interval_Min = Advertising_Interval_Min;
 80052f0:	f8ad 1011 	strh.w	r1, [sp, #17]
  index_input += 2;
  cp0->Advertising_Interval_Max = Advertising_Interval_Max;
 80052f4:	f8ad 2013 	strh.w	r2, [sp, #19]
  index_input += 2;
  cp0->Own_Address_Type = Own_Address_Type;
 80052f8:	f88d c015 	strb.w	ip, [sp, #21]
  index_input += 1;
  cp0->Advertising_Filter_Policy = Advertising_Filter_Policy;
 80052fc:	f89d 3150 	ldrb.w	r3, [sp, #336]	; 0x150
 8005300:	f88d 3016 	strb.w	r3, [sp, #22]
  index_input += 1;
  cp0->Local_Name_Length = Local_Name_Length;
 8005304:	f88d 6017 	strb.w	r6, [sp, #23]
  index_input += 1;
  /* var_len_data input */
  {
    Osal_MemCpy( (void*)&cp0->Local_Name, (const void*)Local_Name, Local_Name_Length );
 8005308:	4632      	mov	r2, r6
 800530a:	9956      	ldr	r1, [sp, #344]	; 0x158
 800530c:	a806      	add	r0, sp, #24
 800530e:	f000 fb6f 	bl	80059f0 <Osal_MemCpy>
    index_input += Local_Name_Length;
    {
      cp1->Service_Uuid_length = Service_Uuid_length;
 8005312:	f804 500a 	strb.w	r5, [r4, sl]
    }
    index_input += 1;
 8005316:	3609      	adds	r6, #9
    Osal_MemCpy( (void*)&cp1->Service_Uuid_List, (const void*)Service_Uuid_List, Service_Uuid_length );
 8005318:	462a      	mov	r2, r5
 800531a:	9958      	ldr	r1, [sp, #352]	; 0x160
 800531c:	f10b 0001 	add.w	r0, fp, #1
 8005320:	f000 fb66 	bl	80059f0 <Osal_MemCpy>
    index_input += Service_Uuid_length;
 8005324:	4435      	add	r5, r6
    {
      cp2->Slave_Conn_Interval_Min = Slave_Conn_Interval_Min;
 8005326:	f8bd 3164 	ldrh.w	r3, [sp, #356]	; 0x164
 800532a:	53e3      	strh	r3, [r4, r7]
    }
    index_input += 2;
    {
      cp2->Slave_Conn_Interval_Max = Slave_Conn_Interval_Max;
 800532c:	f8bd 3168 	ldrh.w	r3, [sp, #360]	; 0x168
 8005330:	9a01      	ldr	r2, [sp, #4]
 8005332:	8053      	strh	r3, [r2, #2]
    }
    index_input += 2;
 8005334:	3504      	adds	r5, #4
  }
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8005336:	2218      	movs	r2, #24
 8005338:	4641      	mov	r1, r8
 800533a:	a844      	add	r0, sp, #272	; 0x110
 800533c:	f000 fb5c 	bl	80059f8 <Osal_MemSet>
  rq.ogf = 0x3f;
 8005340:	233f      	movs	r3, #63	; 0x3f
 8005342:	f8ad 3110 	strh.w	r3, [sp, #272]	; 0x110
  rq.ocf = 0x083;
 8005346:	2383      	movs	r3, #131	; 0x83
 8005348:	f8ad 3112 	strh.w	r3, [sp, #274]	; 0x112
  rq.cparam = cmd_buffer;
 800534c:	9446      	str	r4, [sp, #280]	; 0x118
  rq.clen = index_input;
 800534e:	9547      	str	r5, [sp, #284]	; 0x11c
  rq.rparam = &status;
 8005350:	f8cd 9120 	str.w	r9, [sp, #288]	; 0x120
  rq.rlen = 1;
 8005354:	2301      	movs	r3, #1
 8005356:	9349      	str	r3, [sp, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 8005358:	4641      	mov	r1, r8
 800535a:	a844      	add	r0, sp, #272	; 0x110
 800535c:	f000 fcce 	bl	8005cfc <hci_send_req>
 8005360:	4540      	cmp	r0, r8
 8005362:	db04      	blt.n	800536e <aci_gap_set_discoverable+0xb0>
    return BLE_STATUS_TIMEOUT;
  return status;
 8005364:	f89d 000f 	ldrb.w	r0, [sp, #15]
}
 8005368:	b04b      	add	sp, #300	; 0x12c
 800536a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    return BLE_STATUS_TIMEOUT;
 800536e:	20ff      	movs	r0, #255	; 0xff
 8005370:	e7fa      	b.n	8005368 <aci_gap_set_discoverable+0xaa>

08005372 <aci_gap_set_io_capability>:
    return BLE_STATUS_TIMEOUT;
  return status;
}

tBleStatus aci_gap_set_io_capability( uint8_t IO_Capability )
{
 8005372:	b570      	push	{r4, r5, r6, lr}
 8005374:	b0c8      	sub	sp, #288	; 0x120
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gap_set_io_capability_cp0 *cp0 = (aci_gap_set_io_capability_cp0*)(cmd_buffer);
  tBleStatus status = 0;
 8005376:	f10d 0507 	add.w	r5, sp, #7
 800537a:	2400      	movs	r4, #0
 800537c:	f88d 4007 	strb.w	r4, [sp, #7]
  int index_input = 0;
  cp0->IO_Capability = IO_Capability;
 8005380:	ae02      	add	r6, sp, #8
 8005382:	f88d 0008 	strb.w	r0, [sp, #8]
  index_input += 1;
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8005386:	2218      	movs	r2, #24
 8005388:	4621      	mov	r1, r4
 800538a:	a842      	add	r0, sp, #264	; 0x108
 800538c:	f000 fb34 	bl	80059f8 <Osal_MemSet>
  rq.ogf = 0x3f;
 8005390:	233f      	movs	r3, #63	; 0x3f
 8005392:	f8ad 3108 	strh.w	r3, [sp, #264]	; 0x108
  rq.ocf = 0x085;
 8005396:	2385      	movs	r3, #133	; 0x85
 8005398:	f8ad 310a 	strh.w	r3, [sp, #266]	; 0x10a
  rq.cparam = cmd_buffer;
 800539c:	9644      	str	r6, [sp, #272]	; 0x110
  rq.clen = index_input;
 800539e:	2301      	movs	r3, #1
 80053a0:	9345      	str	r3, [sp, #276]	; 0x114
  rq.rparam = &status;
 80053a2:	9546      	str	r5, [sp, #280]	; 0x118
  rq.rlen = 1;
 80053a4:	9347      	str	r3, [sp, #284]	; 0x11c
  if ( hci_send_req(&rq, FALSE) < 0 )
 80053a6:	4621      	mov	r1, r4
 80053a8:	a842      	add	r0, sp, #264	; 0x108
 80053aa:	f000 fca7 	bl	8005cfc <hci_send_req>
 80053ae:	42a0      	cmp	r0, r4
 80053b0:	db03      	blt.n	80053ba <aci_gap_set_io_capability+0x48>
    return BLE_STATUS_TIMEOUT;
  return status;
 80053b2:	f89d 0007 	ldrb.w	r0, [sp, #7]
}
 80053b6:	b048      	add	sp, #288	; 0x120
 80053b8:	bd70      	pop	{r4, r5, r6, pc}
    return BLE_STATUS_TIMEOUT;
 80053ba:	20ff      	movs	r0, #255	; 0xff
 80053bc:	e7fb      	b.n	80053b6 <aci_gap_set_io_capability+0x44>

080053be <aci_gap_set_authentication_requirement>:
                                                   uint8_t Min_Encryption_Key_Size,
                                                   uint8_t Max_Encryption_Key_Size,
                                                   uint8_t Use_Fixed_Pin,
                                                   uint32_t Fixed_Pin,
                                                   uint8_t Identity_Address_Type )
{
 80053be:	b570      	push	{r4, r5, r6, lr}
 80053c0:	b0c8      	sub	sp, #288	; 0x120
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gap_set_authentication_requirement_cp0 *cp0 = (aci_gap_set_authentication_requirement_cp0*)(cmd_buffer);
  tBleStatus status = 0;
 80053c2:	f10d 0607 	add.w	r6, sp, #7
 80053c6:	2500      	movs	r5, #0
 80053c8:	f88d 5007 	strb.w	r5, [sp, #7]
  int index_input = 0;
  cp0->Bonding_Mode = Bonding_Mode;
 80053cc:	ac02      	add	r4, sp, #8
 80053ce:	f88d 0008 	strb.w	r0, [sp, #8]
  index_input += 1;
  cp0->MITM_Mode = MITM_Mode;
 80053d2:	f88d 1009 	strb.w	r1, [sp, #9]
  index_input += 1;
  cp0->SC_Support = SC_Support;
 80053d6:	f88d 200a 	strb.w	r2, [sp, #10]
  index_input += 1;
  cp0->KeyPress_Notification_Support = KeyPress_Notification_Support;
 80053da:	f88d 300b 	strb.w	r3, [sp, #11]
  index_input += 1;
  cp0->Min_Encryption_Key_Size = Min_Encryption_Key_Size;
 80053de:	f89d 3130 	ldrb.w	r3, [sp, #304]	; 0x130
 80053e2:	f88d 300c 	strb.w	r3, [sp, #12]
  index_input += 1;
  cp0->Max_Encryption_Key_Size = Max_Encryption_Key_Size;
 80053e6:	f89d 3134 	ldrb.w	r3, [sp, #308]	; 0x134
 80053ea:	f88d 300d 	strb.w	r3, [sp, #13]
  index_input += 1;
  cp0->Use_Fixed_Pin = Use_Fixed_Pin;
 80053ee:	f89d 3138 	ldrb.w	r3, [sp, #312]	; 0x138
 80053f2:	f88d 300e 	strb.w	r3, [sp, #14]
  index_input += 1;
  cp0->Fixed_Pin = Fixed_Pin;
 80053f6:	9b4f      	ldr	r3, [sp, #316]	; 0x13c
 80053f8:	f8cd 300f 	str.w	r3, [sp, #15]
  index_input += 4;
  cp0->Identity_Address_Type = Identity_Address_Type;
 80053fc:	f89d 3140 	ldrb.w	r3, [sp, #320]	; 0x140
 8005400:	f88d 3013 	strb.w	r3, [sp, #19]
  index_input += 1;
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8005404:	2218      	movs	r2, #24
 8005406:	4629      	mov	r1, r5
 8005408:	a842      	add	r0, sp, #264	; 0x108
 800540a:	f000 faf5 	bl	80059f8 <Osal_MemSet>
  rq.ogf = 0x3f;
 800540e:	233f      	movs	r3, #63	; 0x3f
 8005410:	f8ad 3108 	strh.w	r3, [sp, #264]	; 0x108
  rq.ocf = 0x086;
 8005414:	2386      	movs	r3, #134	; 0x86
 8005416:	f8ad 310a 	strh.w	r3, [sp, #266]	; 0x10a
  rq.cparam = cmd_buffer;
 800541a:	9444      	str	r4, [sp, #272]	; 0x110
  rq.clen = index_input;
 800541c:	230c      	movs	r3, #12
 800541e:	9345      	str	r3, [sp, #276]	; 0x114
  rq.rparam = &status;
 8005420:	9646      	str	r6, [sp, #280]	; 0x118
  rq.rlen = 1;
 8005422:	2301      	movs	r3, #1
 8005424:	9347      	str	r3, [sp, #284]	; 0x11c
  if ( hci_send_req(&rq, FALSE) < 0 )
 8005426:	4629      	mov	r1, r5
 8005428:	a842      	add	r0, sp, #264	; 0x108
 800542a:	f000 fc67 	bl	8005cfc <hci_send_req>
 800542e:	42a8      	cmp	r0, r5
 8005430:	db03      	blt.n	800543a <aci_gap_set_authentication_requirement+0x7c>
    return BLE_STATUS_TIMEOUT;
  return status;
 8005432:	f89d 0007 	ldrb.w	r0, [sp, #7]
}
 8005436:	b048      	add	sp, #288	; 0x120
 8005438:	bd70      	pop	{r4, r5, r6, pc}
    return BLE_STATUS_TIMEOUT;
 800543a:	20ff      	movs	r0, #255	; 0xff
 800543c:	e7fb      	b.n	8005436 <aci_gap_set_authentication_requirement+0x78>

0800543e <aci_gap_pass_key_resp>:
  return status;
}

tBleStatus aci_gap_pass_key_resp( uint16_t Connection_Handle,
                                  uint32_t Pass_Key )
{
 800543e:	b570      	push	{r4, r5, r6, lr}
 8005440:	b0c8      	sub	sp, #288	; 0x120
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gap_pass_key_resp_cp0 *cp0 = (aci_gap_pass_key_resp_cp0*)(cmd_buffer);
  tBleStatus status = 0;
 8005442:	f10d 0607 	add.w	r6, sp, #7
 8005446:	2400      	movs	r4, #0
 8005448:	f88d 4007 	strb.w	r4, [sp, #7]
  int index_input = 0;
  cp0->Connection_Handle = Connection_Handle;
 800544c:	ad02      	add	r5, sp, #8
 800544e:	f8ad 0008 	strh.w	r0, [sp, #8]
  index_input += 2;
  cp0->Pass_Key = Pass_Key;
 8005452:	f8cd 100a 	str.w	r1, [sp, #10]
  index_input += 4;
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8005456:	2218      	movs	r2, #24
 8005458:	4621      	mov	r1, r4
 800545a:	a842      	add	r0, sp, #264	; 0x108
 800545c:	f000 facc 	bl	80059f8 <Osal_MemSet>
  rq.ogf = 0x3f;
 8005460:	233f      	movs	r3, #63	; 0x3f
 8005462:	f8ad 3108 	strh.w	r3, [sp, #264]	; 0x108
  rq.ocf = 0x088;
 8005466:	2388      	movs	r3, #136	; 0x88
 8005468:	f8ad 310a 	strh.w	r3, [sp, #266]	; 0x10a
  rq.cparam = cmd_buffer;
 800546c:	9544      	str	r5, [sp, #272]	; 0x110
  rq.clen = index_input;
 800546e:	2306      	movs	r3, #6
 8005470:	9345      	str	r3, [sp, #276]	; 0x114
  rq.rparam = &status;
 8005472:	9646      	str	r6, [sp, #280]	; 0x118
  rq.rlen = 1;
 8005474:	2301      	movs	r3, #1
 8005476:	9347      	str	r3, [sp, #284]	; 0x11c
  if ( hci_send_req(&rq, FALSE) < 0 )
 8005478:	4621      	mov	r1, r4
 800547a:	a842      	add	r0, sp, #264	; 0x108
 800547c:	f000 fc3e 	bl	8005cfc <hci_send_req>
 8005480:	42a0      	cmp	r0, r4
 8005482:	db03      	blt.n	800548c <aci_gap_pass_key_resp+0x4e>
    return BLE_STATUS_TIMEOUT;
  return status;
 8005484:	f89d 0007 	ldrb.w	r0, [sp, #7]
}
 8005488:	b048      	add	sp, #288	; 0x120
 800548a:	bd70      	pop	{r4, r5, r6, pc}
    return BLE_STATUS_TIMEOUT;
 800548c:	20ff      	movs	r0, #255	; 0xff
 800548e:	e7fb      	b.n	8005488 <aci_gap_pass_key_resp+0x4a>

08005490 <aci_gap_init>:
                         uint8_t privacy_enabled,
                         uint8_t device_name_char_len,
                         uint16_t* Service_Handle,
                         uint16_t* Dev_Name_Char_Handle,
                         uint16_t* Appearance_Char_Handle )
{
 8005490:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005494:	b0c8      	sub	sp, #288	; 0x120
 8005496:	4607      	mov	r7, r0
 8005498:	460e      	mov	r6, r1
 800549a:	4615      	mov	r5, r2
 800549c:	4698      	mov	r8, r3
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gap_init_cp0 *cp0 = (aci_gap_init_cp0*)(cmd_buffer);
  aci_gap_init_rp0 resp;
  Osal_MemSet( &resp, 0, sizeof(resp) );
 800549e:	2207      	movs	r2, #7
 80054a0:	2100      	movs	r1, #0
 80054a2:	4668      	mov	r0, sp
 80054a4:	f000 faa8 	bl	80059f8 <Osal_MemSet>
  int index_input = 0;
  cp0->Role = Role;
 80054a8:	ac02      	add	r4, sp, #8
 80054aa:	f88d 7008 	strb.w	r7, [sp, #8]
  index_input += 1;
  cp0->privacy_enabled = privacy_enabled;
 80054ae:	f88d 6009 	strb.w	r6, [sp, #9]
  index_input += 1;
  cp0->device_name_char_len = device_name_char_len;
 80054b2:	f88d 500a 	strb.w	r5, [sp, #10]
  index_input += 1;
  Osal_MemSet( &rq, 0, sizeof(rq) );
 80054b6:	2218      	movs	r2, #24
 80054b8:	2100      	movs	r1, #0
 80054ba:	a842      	add	r0, sp, #264	; 0x108
 80054bc:	f000 fa9c 	bl	80059f8 <Osal_MemSet>
  rq.ogf = 0x3f;
 80054c0:	233f      	movs	r3, #63	; 0x3f
 80054c2:	f8ad 3108 	strh.w	r3, [sp, #264]	; 0x108
  rq.ocf = 0x08a;
 80054c6:	238a      	movs	r3, #138	; 0x8a
 80054c8:	f8ad 310a 	strh.w	r3, [sp, #266]	; 0x10a
  rq.cparam = cmd_buffer;
 80054cc:	9444      	str	r4, [sp, #272]	; 0x110
  rq.clen = index_input;
 80054ce:	2303      	movs	r3, #3
 80054d0:	9345      	str	r3, [sp, #276]	; 0x114
  rq.rparam = &resp;
 80054d2:	f8cd d118 	str.w	sp, [sp, #280]	; 0x118
  rq.rlen = sizeof(resp);
 80054d6:	2307      	movs	r3, #7
 80054d8:	9347      	str	r3, [sp, #284]	; 0x11c
  if ( hci_send_req(&rq, FALSE) < 0 )
 80054da:	2100      	movs	r1, #0
 80054dc:	a842      	add	r0, sp, #264	; 0x108
 80054de:	f000 fc0d 	bl	8005cfc <hci_send_req>
 80054e2:	2800      	cmp	r0, #0
 80054e4:	db11      	blt.n	800550a <aci_gap_init+0x7a>
    return BLE_STATUS_TIMEOUT;
  if ( resp.Status )
 80054e6:	f89d 0000 	ldrb.w	r0, [sp]
 80054ea:	b958      	cbnz	r0, 8005504 <aci_gap_init+0x74>
    return resp.Status;
  *Service_Handle = resp.Service_Handle;
 80054ec:	f8bd 3001 	ldrh.w	r3, [sp, #1]
 80054f0:	f8a8 3000 	strh.w	r3, [r8]
  *Dev_Name_Char_Handle = resp.Dev_Name_Char_Handle;
 80054f4:	f8bd 2003 	ldrh.w	r2, [sp, #3]
 80054f8:	9b4e      	ldr	r3, [sp, #312]	; 0x138
 80054fa:	801a      	strh	r2, [r3, #0]
  *Appearance_Char_Handle = resp.Appearance_Char_Handle;
 80054fc:	f8bd 2005 	ldrh.w	r2, [sp, #5]
 8005500:	9b4f      	ldr	r3, [sp, #316]	; 0x13c
 8005502:	801a      	strh	r2, [r3, #0]
  return BLE_STATUS_SUCCESS;
}
 8005504:	b048      	add	sp, #288	; 0x120
 8005506:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    return BLE_STATUS_TIMEOUT;
 800550a:	20ff      	movs	r0, #255	; 0xff
 800550c:	e7fa      	b.n	8005504 <aci_gap_init+0x74>

0800550e <aci_gap_update_adv_data>:
  return status;
}

tBleStatus aci_gap_update_adv_data( uint8_t AdvDataLen,
                                    const uint8_t* AdvData )
{
 800550e:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005510:	b0c9      	sub	sp, #292	; 0x124
 8005512:	4604      	mov	r4, r0
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gap_update_adv_data_cp0 *cp0 = (aci_gap_update_adv_data_cp0*)(cmd_buffer);
  tBleStatus status = 0;
 8005514:	f10d 0607 	add.w	r6, sp, #7
 8005518:	2500      	movs	r5, #0
 800551a:	f88d 5007 	strb.w	r5, [sp, #7]
  int index_input = 0;
  cp0->AdvDataLen = AdvDataLen;
 800551e:	af02      	add	r7, sp, #8
 8005520:	f88d 0008 	strb.w	r0, [sp, #8]
  index_input += 1;
  Osal_MemCpy( (void*)&cp0->AdvData, (const void*)AdvData, AdvDataLen );
 8005524:	4602      	mov	r2, r0
 8005526:	f10d 0009 	add.w	r0, sp, #9
 800552a:	f000 fa61 	bl	80059f0 <Osal_MemCpy>
  index_input += AdvDataLen;
 800552e:	3401      	adds	r4, #1
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8005530:	2218      	movs	r2, #24
 8005532:	4629      	mov	r1, r5
 8005534:	a842      	add	r0, sp, #264	; 0x108
 8005536:	f000 fa5f 	bl	80059f8 <Osal_MemSet>
  rq.ogf = 0x3f;
 800553a:	233f      	movs	r3, #63	; 0x3f
 800553c:	f8ad 3108 	strh.w	r3, [sp, #264]	; 0x108
  rq.ocf = 0x08e;
 8005540:	238e      	movs	r3, #142	; 0x8e
 8005542:	f8ad 310a 	strh.w	r3, [sp, #266]	; 0x10a
  rq.cparam = cmd_buffer;
 8005546:	9744      	str	r7, [sp, #272]	; 0x110
  rq.clen = index_input;
 8005548:	9445      	str	r4, [sp, #276]	; 0x114
  rq.rparam = &status;
 800554a:	9646      	str	r6, [sp, #280]	; 0x118
  rq.rlen = 1;
 800554c:	2301      	movs	r3, #1
 800554e:	9347      	str	r3, [sp, #284]	; 0x11c
  if ( hci_send_req(&rq, FALSE) < 0 )
 8005550:	4629      	mov	r1, r5
 8005552:	a842      	add	r0, sp, #264	; 0x108
 8005554:	f000 fbd2 	bl	8005cfc <hci_send_req>
 8005558:	42a8      	cmp	r0, r5
 800555a:	db03      	blt.n	8005564 <aci_gap_update_adv_data+0x56>
    return BLE_STATUS_TIMEOUT;
  return status;
 800555c:	f89d 0007 	ldrb.w	r0, [sp, #7]
}
 8005560:	b049      	add	sp, #292	; 0x124
 8005562:	bdf0      	pop	{r4, r5, r6, r7, pc}
    return BLE_STATUS_TIMEOUT;
 8005564:	20ff      	movs	r0, #255	; 0xff
 8005566:	e7fb      	b.n	8005560 <aci_gap_update_adv_data+0x52>

08005568 <aci_gap_configure_whitelist>:
    return BLE_STATUS_TIMEOUT;
  return status;
}

tBleStatus aci_gap_configure_whitelist( void )
{
 8005568:	b510      	push	{r4, lr}
 800556a:	b088      	sub	sp, #32
  struct hci_request rq;
  tBleStatus status = 0;
 800556c:	2400      	movs	r4, #0
 800556e:	f88d 4007 	strb.w	r4, [sp, #7]
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8005572:	2218      	movs	r2, #24
 8005574:	4621      	mov	r1, r4
 8005576:	a802      	add	r0, sp, #8
 8005578:	f000 fa3e 	bl	80059f8 <Osal_MemSet>
  rq.ogf = 0x3f;
 800557c:	233f      	movs	r3, #63	; 0x3f
 800557e:	f8ad 3008 	strh.w	r3, [sp, #8]
  rq.ocf = 0x092;
 8005582:	2392      	movs	r3, #146	; 0x92
 8005584:	f8ad 300a 	strh.w	r3, [sp, #10]
  rq.rparam = &status;
 8005588:	f10d 0307 	add.w	r3, sp, #7
 800558c:	9306      	str	r3, [sp, #24]
  rq.rlen = 1;
 800558e:	2301      	movs	r3, #1
 8005590:	9307      	str	r3, [sp, #28]
  if ( hci_send_req(&rq, FALSE) < 0 )
 8005592:	4621      	mov	r1, r4
 8005594:	a802      	add	r0, sp, #8
 8005596:	f000 fbb1 	bl	8005cfc <hci_send_req>
 800559a:	42a0      	cmp	r0, r4
 800559c:	db03      	blt.n	80055a6 <aci_gap_configure_whitelist+0x3e>
    return BLE_STATUS_TIMEOUT;
  return status;
 800559e:	f89d 0007 	ldrb.w	r0, [sp, #7]
}
 80055a2:	b008      	add	sp, #32
 80055a4:	bd10      	pop	{r4, pc}
    return BLE_STATUS_TIMEOUT;
 80055a6:	20ff      	movs	r0, #255	; 0xff
 80055a8:	e7fb      	b.n	80055a2 <aci_gap_configure_whitelist+0x3a>

080055aa <aci_gap_numeric_comparison_value_confirm_yesno>:
  return status;
}

tBleStatus aci_gap_numeric_comparison_value_confirm_yesno( uint16_t Connection_Handle,
                                                           uint8_t Confirm_Yes_No )
{
 80055aa:	b570      	push	{r4, r5, r6, lr}
 80055ac:	b0c8      	sub	sp, #288	; 0x120
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gap_numeric_comparison_value_confirm_yesno_cp0 *cp0 = (aci_gap_numeric_comparison_value_confirm_yesno_cp0*)(cmd_buffer);
  tBleStatus status = 0;
 80055ae:	f10d 0607 	add.w	r6, sp, #7
 80055b2:	2400      	movs	r4, #0
 80055b4:	f88d 4007 	strb.w	r4, [sp, #7]
  int index_input = 0;
  cp0->Connection_Handle = Connection_Handle;
 80055b8:	ad02      	add	r5, sp, #8
 80055ba:	f8ad 0008 	strh.w	r0, [sp, #8]
  index_input += 2;
  cp0->Confirm_Yes_No = Confirm_Yes_No;
 80055be:	f88d 100a 	strb.w	r1, [sp, #10]
  index_input += 1;
  Osal_MemSet( &rq, 0, sizeof(rq) );
 80055c2:	2218      	movs	r2, #24
 80055c4:	4621      	mov	r1, r4
 80055c6:	a842      	add	r0, sp, #264	; 0x108
 80055c8:	f000 fa16 	bl	80059f8 <Osal_MemSet>
  rq.ogf = 0x3f;
 80055cc:	233f      	movs	r3, #63	; 0x3f
 80055ce:	f8ad 3108 	strh.w	r3, [sp, #264]	; 0x108
  rq.ocf = 0x0a5;
 80055d2:	23a5      	movs	r3, #165	; 0xa5
 80055d4:	f8ad 310a 	strh.w	r3, [sp, #266]	; 0x10a
  rq.cparam = cmd_buffer;
 80055d8:	9544      	str	r5, [sp, #272]	; 0x110
  rq.clen = index_input;
 80055da:	2303      	movs	r3, #3
 80055dc:	9345      	str	r3, [sp, #276]	; 0x114
  rq.rparam = &status;
 80055de:	9646      	str	r6, [sp, #280]	; 0x118
  rq.rlen = 1;
 80055e0:	2301      	movs	r3, #1
 80055e2:	9347      	str	r3, [sp, #284]	; 0x11c
  if ( hci_send_req(&rq, FALSE) < 0 )
 80055e4:	4621      	mov	r1, r4
 80055e6:	a842      	add	r0, sp, #264	; 0x108
 80055e8:	f000 fb88 	bl	8005cfc <hci_send_req>
 80055ec:	42a0      	cmp	r0, r4
 80055ee:	db03      	blt.n	80055f8 <aci_gap_numeric_comparison_value_confirm_yesno+0x4e>
    return BLE_STATUS_TIMEOUT;
  return status;
 80055f0:	f89d 0007 	ldrb.w	r0, [sp, #7]
}
 80055f4:	b048      	add	sp, #288	; 0x120
 80055f6:	bd70      	pop	{r4, r5, r6, pc}
    return BLE_STATUS_TIMEOUT;
 80055f8:	20ff      	movs	r0, #255	; 0xff
 80055fa:	e7fb      	b.n	80055f4 <aci_gap_numeric_comparison_value_confirm_yesno+0x4a>

080055fc <aci_gatt_init>:
 */

#include "ble_gatt_aci.h"

tBleStatus aci_gatt_init( void )
{
 80055fc:	b510      	push	{r4, lr}
 80055fe:	b088      	sub	sp, #32
  struct hci_request rq;
  tBleStatus status = 0;
 8005600:	2400      	movs	r4, #0
 8005602:	f88d 4007 	strb.w	r4, [sp, #7]
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8005606:	2218      	movs	r2, #24
 8005608:	4621      	mov	r1, r4
 800560a:	a802      	add	r0, sp, #8
 800560c:	f000 f9f4 	bl	80059f8 <Osal_MemSet>
  rq.ogf = 0x3f;
 8005610:	233f      	movs	r3, #63	; 0x3f
 8005612:	f8ad 3008 	strh.w	r3, [sp, #8]
  rq.ocf = 0x101;
 8005616:	f240 1301 	movw	r3, #257	; 0x101
 800561a:	f8ad 300a 	strh.w	r3, [sp, #10]
  rq.rparam = &status;
 800561e:	f10d 0307 	add.w	r3, sp, #7
 8005622:	9306      	str	r3, [sp, #24]
  rq.rlen = 1;
 8005624:	2301      	movs	r3, #1
 8005626:	9307      	str	r3, [sp, #28]
  if ( hci_send_req(&rq, FALSE) < 0 )
 8005628:	4621      	mov	r1, r4
 800562a:	a802      	add	r0, sp, #8
 800562c:	f000 fb66 	bl	8005cfc <hci_send_req>
 8005630:	42a0      	cmp	r0, r4
 8005632:	db03      	blt.n	800563c <aci_gatt_init+0x40>
    return BLE_STATUS_TIMEOUT;
  return status;
 8005634:	f89d 0007 	ldrb.w	r0, [sp, #7]
}
 8005638:	b008      	add	sp, #32
 800563a:	bd10      	pop	{r4, pc}
    return BLE_STATUS_TIMEOUT;
 800563c:	20ff      	movs	r0, #255	; 0xff
 800563e:	e7fb      	b.n	8005638 <aci_gatt_init+0x3c>

08005640 <aci_gatt_add_service>:
tBleStatus aci_gatt_add_service( uint8_t Service_UUID_Type,
                                 const Service_UUID_t* Service_UUID,
                                 uint8_t Service_Type,
                                 uint8_t Max_Attribute_Records,
                                 uint16_t* Service_Handle )
{
 8005640:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005644:	b0c8      	sub	sp, #288	; 0x120
 8005646:	4604      	mov	r4, r0
 8005648:	4688      	mov	r8, r1
 800564a:	4617      	mov	r7, r2
 800564c:	461e      	mov	r6, r3
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gatt_add_service_cp0 *cp0 = (aci_gatt_add_service_cp0*)(cmd_buffer);
  aci_gatt_add_service_cp1 *cp1 = (aci_gatt_add_service_cp1*)(cmd_buffer + 1 + (Service_UUID_Type == 1 ? 2 : (Service_UUID_Type == 2 ? 16 : 0)));
 800564e:	2801      	cmp	r0, #1
 8005650:	d03c      	beq.n	80056cc <aci_gatt_add_service+0x8c>
 8005652:	2802      	cmp	r0, #2
 8005654:	d038      	beq.n	80056c8 <aci_gatt_add_service+0x88>
 8005656:	2501      	movs	r5, #1
 8005658:	ab02      	add	r3, sp, #8
 800565a:	441d      	add	r5, r3
  aci_gatt_add_service_rp0 resp;
  Osal_MemSet( &resp, 0, sizeof(resp) );
 800565c:	2203      	movs	r2, #3
 800565e:	2100      	movs	r1, #0
 8005660:	a801      	add	r0, sp, #4
 8005662:	f000 f9c9 	bl	80059f8 <Osal_MemSet>
  int index_input = 0;
  cp0->Service_UUID_Type = Service_UUID_Type;
 8005666:	f88d 4008 	strb.w	r4, [sp, #8]
  index_input += 1;
  /* var_len_data input */
  {
    uint8_t size;
    switch ( Service_UUID_Type )
 800566a:	2c01      	cmp	r4, #1
 800566c:	d030      	beq.n	80056d0 <aci_gatt_add_service+0x90>
 800566e:	2c02      	cmp	r4, #2
 8005670:	d130      	bne.n	80056d4 <aci_gatt_add_service+0x94>
    {
      case 1: size = 2; break;
      case 2: size = 16; break;
 8005672:	2410      	movs	r4, #16
      default: return BLE_STATUS_ERROR;
    }
    Osal_MemCpy( (void*)&cp0->Service_UUID, (const void*)Service_UUID, size );
 8005674:	4622      	mov	r2, r4
 8005676:	4641      	mov	r1, r8
 8005678:	f10d 0009 	add.w	r0, sp, #9
 800567c:	f000 f9b8 	bl	80059f0 <Osal_MemCpy>
    index_input += size;
    {
      cp1->Service_Type = Service_Type;
 8005680:	702f      	strb	r7, [r5, #0]
    }
    index_input += 1;
    {
      cp1->Max_Attribute_Records = Max_Attribute_Records;
 8005682:	706e      	strb	r6, [r5, #1]
    }
    index_input += 1;
 8005684:	3403      	adds	r4, #3
  }
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8005686:	2218      	movs	r2, #24
 8005688:	2100      	movs	r1, #0
 800568a:	a842      	add	r0, sp, #264	; 0x108
 800568c:	f000 f9b4 	bl	80059f8 <Osal_MemSet>
  rq.ogf = 0x3f;
 8005690:	233f      	movs	r3, #63	; 0x3f
 8005692:	f8ad 3108 	strh.w	r3, [sp, #264]	; 0x108
  rq.ocf = 0x102;
 8005696:	f44f 7381 	mov.w	r3, #258	; 0x102
 800569a:	f8ad 310a 	strh.w	r3, [sp, #266]	; 0x10a
  rq.cparam = cmd_buffer;
 800569e:	ab02      	add	r3, sp, #8
 80056a0:	9344      	str	r3, [sp, #272]	; 0x110
  rq.clen = index_input;
 80056a2:	9445      	str	r4, [sp, #276]	; 0x114
  rq.rparam = &resp;
 80056a4:	ab01      	add	r3, sp, #4
 80056a6:	9346      	str	r3, [sp, #280]	; 0x118
  rq.rlen = sizeof(resp);
 80056a8:	2303      	movs	r3, #3
 80056aa:	9347      	str	r3, [sp, #284]	; 0x11c
  if ( hci_send_req(&rq, FALSE) < 0 )
 80056ac:	2100      	movs	r1, #0
 80056ae:	a842      	add	r0, sp, #264	; 0x108
 80056b0:	f000 fb24 	bl	8005cfc <hci_send_req>
 80056b4:	2800      	cmp	r0, #0
 80056b6:	db11      	blt.n	80056dc <aci_gatt_add_service+0x9c>
    return BLE_STATUS_TIMEOUT;
  if ( resp.Status )
 80056b8:	f89d 0004 	ldrb.w	r0, [sp, #4]
 80056bc:	b958      	cbnz	r0, 80056d6 <aci_gatt_add_service+0x96>
    return resp.Status;
  *Service_Handle = resp.Service_Handle;
 80056be:	f8bd 2005 	ldrh.w	r2, [sp, #5]
 80056c2:	9b4e      	ldr	r3, [sp, #312]	; 0x138
 80056c4:	801a      	strh	r2, [r3, #0]
  return BLE_STATUS_SUCCESS;
 80056c6:	e006      	b.n	80056d6 <aci_gatt_add_service+0x96>
  aci_gatt_add_service_cp1 *cp1 = (aci_gatt_add_service_cp1*)(cmd_buffer + 1 + (Service_UUID_Type == 1 ? 2 : (Service_UUID_Type == 2 ? 16 : 0)));
 80056c8:	2511      	movs	r5, #17
 80056ca:	e7c5      	b.n	8005658 <aci_gatt_add_service+0x18>
 80056cc:	2503      	movs	r5, #3
 80056ce:	e7c3      	b.n	8005658 <aci_gatt_add_service+0x18>
    switch ( Service_UUID_Type )
 80056d0:	2402      	movs	r4, #2
 80056d2:	e7cf      	b.n	8005674 <aci_gatt_add_service+0x34>
 80056d4:	2097      	movs	r0, #151	; 0x97
}
 80056d6:	b048      	add	sp, #288	; 0x120
 80056d8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    return BLE_STATUS_TIMEOUT;
 80056dc:	20ff      	movs	r0, #255	; 0xff
 80056de:	e7fa      	b.n	80056d6 <aci_gatt_add_service+0x96>

080056e0 <aci_gatt_add_char>:
                              uint8_t Security_Permissions,
                              uint8_t GATT_Evt_Mask,
                              uint8_t Enc_Key_Size,
                              uint8_t Is_Variable,
                              uint16_t* Char_Handle )
{
 80056e0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80056e4:	b0c8      	sub	sp, #288	; 0x120
 80056e6:	4606      	mov	r6, r0
 80056e8:	460c      	mov	r4, r1
 80056ea:	4690      	mov	r8, r2
 80056ec:	461f      	mov	r7, r3
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gatt_add_char_cp0 *cp0 = (aci_gatt_add_char_cp0*)(cmd_buffer);
  aci_gatt_add_char_cp1 *cp1 = (aci_gatt_add_char_cp1*)(cmd_buffer + 2 + 1 + (Char_UUID_Type == 1 ? 2 : (Char_UUID_Type == 2 ? 16 : 0)));
 80056ee:	2901      	cmp	r1, #1
 80056f0:	d04c      	beq.n	800578c <aci_gatt_add_char+0xac>
 80056f2:	2902      	cmp	r1, #2
 80056f4:	d048      	beq.n	8005788 <aci_gatt_add_char+0xa8>
 80056f6:	2503      	movs	r5, #3
 80056f8:	ab02      	add	r3, sp, #8
 80056fa:	441d      	add	r5, r3
  aci_gatt_add_char_rp0 resp;
  Osal_MemSet( &resp, 0, sizeof(resp) );
 80056fc:	2203      	movs	r2, #3
 80056fe:	2100      	movs	r1, #0
 8005700:	a801      	add	r0, sp, #4
 8005702:	f000 f979 	bl	80059f8 <Osal_MemSet>
  int index_input = 0;
  cp0->Service_Handle = Service_Handle;
 8005706:	f8ad 6008 	strh.w	r6, [sp, #8]
  index_input += 2;
  cp0->Char_UUID_Type = Char_UUID_Type;
 800570a:	f88d 400a 	strb.w	r4, [sp, #10]
  index_input += 1;
  /* var_len_data input */
  {
    uint8_t size;
    switch ( Char_UUID_Type )
 800570e:	2c01      	cmp	r4, #1
 8005710:	d03e      	beq.n	8005790 <aci_gatt_add_char+0xb0>
 8005712:	2c02      	cmp	r4, #2
 8005714:	d13e      	bne.n	8005794 <aci_gatt_add_char+0xb4>
    {
      case 1: size = 2; break;
      case 2: size = 16; break;
 8005716:	2410      	movs	r4, #16
      default: return BLE_STATUS_ERROR;
    }
    Osal_MemCpy( (void*)&cp0->Char_UUID, (const void*)Char_UUID, size );
 8005718:	4622      	mov	r2, r4
 800571a:	4641      	mov	r1, r8
 800571c:	f10d 000b 	add.w	r0, sp, #11
 8005720:	f000 f966 	bl	80059f0 <Osal_MemCpy>
    index_input += size;
    {
      cp1->Char_Value_Length = Char_Value_Length;
 8005724:	802f      	strh	r7, [r5, #0]
    }
    index_input += 2;
    {
      cp1->Char_Properties = Char_Properties;
 8005726:	f89d 3138 	ldrb.w	r3, [sp, #312]	; 0x138
 800572a:	70ab      	strb	r3, [r5, #2]
    }
    index_input += 1;
    {
      cp1->Security_Permissions = Security_Permissions;
 800572c:	f89d 313c 	ldrb.w	r3, [sp, #316]	; 0x13c
 8005730:	70eb      	strb	r3, [r5, #3]
    }
    index_input += 1;
    {
      cp1->GATT_Evt_Mask = GATT_Evt_Mask;
 8005732:	f89d 3140 	ldrb.w	r3, [sp, #320]	; 0x140
 8005736:	712b      	strb	r3, [r5, #4]
    }
    index_input += 1;
    {
      cp1->Enc_Key_Size = Enc_Key_Size;
 8005738:	f89d 3144 	ldrb.w	r3, [sp, #324]	; 0x144
 800573c:	716b      	strb	r3, [r5, #5]
    }
    index_input += 1;
    {
      cp1->Is_Variable = Is_Variable;
 800573e:	f89d 3148 	ldrb.w	r3, [sp, #328]	; 0x148
 8005742:	71ab      	strb	r3, [r5, #6]
    }
    index_input += 1;
 8005744:	340a      	adds	r4, #10
  }
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8005746:	2218      	movs	r2, #24
 8005748:	2100      	movs	r1, #0
 800574a:	a842      	add	r0, sp, #264	; 0x108
 800574c:	f000 f954 	bl	80059f8 <Osal_MemSet>
  rq.ogf = 0x3f;
 8005750:	233f      	movs	r3, #63	; 0x3f
 8005752:	f8ad 3108 	strh.w	r3, [sp, #264]	; 0x108
  rq.ocf = 0x104;
 8005756:	f44f 7382 	mov.w	r3, #260	; 0x104
 800575a:	f8ad 310a 	strh.w	r3, [sp, #266]	; 0x10a
  rq.cparam = cmd_buffer;
 800575e:	ab02      	add	r3, sp, #8
 8005760:	9344      	str	r3, [sp, #272]	; 0x110
  rq.clen = index_input;
 8005762:	9445      	str	r4, [sp, #276]	; 0x114
  rq.rparam = &resp;
 8005764:	ab01      	add	r3, sp, #4
 8005766:	9346      	str	r3, [sp, #280]	; 0x118
  rq.rlen = sizeof(resp);
 8005768:	2303      	movs	r3, #3
 800576a:	9347      	str	r3, [sp, #284]	; 0x11c
  if ( hci_send_req(&rq, FALSE) < 0 )
 800576c:	2100      	movs	r1, #0
 800576e:	a842      	add	r0, sp, #264	; 0x108
 8005770:	f000 fac4 	bl	8005cfc <hci_send_req>
 8005774:	2800      	cmp	r0, #0
 8005776:	db11      	blt.n	800579c <aci_gatt_add_char+0xbc>
    return BLE_STATUS_TIMEOUT;
  if ( resp.Status )
 8005778:	f89d 0004 	ldrb.w	r0, [sp, #4]
 800577c:	b958      	cbnz	r0, 8005796 <aci_gatt_add_char+0xb6>
    return resp.Status;
  *Char_Handle = resp.Char_Handle;
 800577e:	f8bd 2005 	ldrh.w	r2, [sp, #5]
 8005782:	9b53      	ldr	r3, [sp, #332]	; 0x14c
 8005784:	801a      	strh	r2, [r3, #0]
  return BLE_STATUS_SUCCESS;
 8005786:	e006      	b.n	8005796 <aci_gatt_add_char+0xb6>
  aci_gatt_add_char_cp1 *cp1 = (aci_gatt_add_char_cp1*)(cmd_buffer + 2 + 1 + (Char_UUID_Type == 1 ? 2 : (Char_UUID_Type == 2 ? 16 : 0)));
 8005788:	2513      	movs	r5, #19
 800578a:	e7b5      	b.n	80056f8 <aci_gatt_add_char+0x18>
 800578c:	2505      	movs	r5, #5
 800578e:	e7b3      	b.n	80056f8 <aci_gatt_add_char+0x18>
    switch ( Char_UUID_Type )
 8005790:	2402      	movs	r4, #2
 8005792:	e7c1      	b.n	8005718 <aci_gatt_add_char+0x38>
 8005794:	2097      	movs	r0, #151	; 0x97
}
 8005796:	b048      	add	sp, #288	; 0x120
 8005798:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    return BLE_STATUS_TIMEOUT;
 800579c:	20ff      	movs	r0, #255	; 0xff
 800579e:	e7fa      	b.n	8005796 <aci_gatt_add_char+0xb6>

080057a0 <aci_gatt_update_char_value>:
tBleStatus aci_gatt_update_char_value( uint16_t Service_Handle,
                                       uint16_t Char_Handle,
                                       uint8_t Val_Offset,
                                       uint8_t Char_Value_Length,
                                       const uint8_t* Char_Value )
{
 80057a0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80057a2:	b0c9      	sub	sp, #292	; 0x124
 80057a4:	461c      	mov	r4, r3
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gatt_update_char_value_cp0 *cp0 = (aci_gatt_update_char_value_cp0*)(cmd_buffer);
  tBleStatus status = 0;
 80057a6:	f10d 0707 	add.w	r7, sp, #7
 80057aa:	2600      	movs	r6, #0
 80057ac:	f88d 6007 	strb.w	r6, [sp, #7]
  int index_input = 0;
  cp0->Service_Handle = Service_Handle;
 80057b0:	ad02      	add	r5, sp, #8
 80057b2:	f8ad 0008 	strh.w	r0, [sp, #8]
  index_input += 2;
  cp0->Char_Handle = Char_Handle;
 80057b6:	f8ad 100a 	strh.w	r1, [sp, #10]
  index_input += 2;
  cp0->Val_Offset = Val_Offset;
 80057ba:	f88d 200c 	strb.w	r2, [sp, #12]
  index_input += 1;
  cp0->Char_Value_Length = Char_Value_Length;
 80057be:	f88d 300d 	strb.w	r3, [sp, #13]
  index_input += 1;
  Osal_MemCpy( (void*)&cp0->Char_Value, (const void*)Char_Value, Char_Value_Length );
 80057c2:	461a      	mov	r2, r3
 80057c4:	994e      	ldr	r1, [sp, #312]	; 0x138
 80057c6:	f10d 000e 	add.w	r0, sp, #14
 80057ca:	f000 f911 	bl	80059f0 <Osal_MemCpy>
  index_input += Char_Value_Length;
 80057ce:	3406      	adds	r4, #6
  Osal_MemSet( &rq, 0, sizeof(rq) );
 80057d0:	2218      	movs	r2, #24
 80057d2:	4631      	mov	r1, r6
 80057d4:	a842      	add	r0, sp, #264	; 0x108
 80057d6:	f000 f90f 	bl	80059f8 <Osal_MemSet>
  rq.ogf = 0x3f;
 80057da:	233f      	movs	r3, #63	; 0x3f
 80057dc:	f8ad 3108 	strh.w	r3, [sp, #264]	; 0x108
  rq.ocf = 0x106;
 80057e0:	f44f 7383 	mov.w	r3, #262	; 0x106
 80057e4:	f8ad 310a 	strh.w	r3, [sp, #266]	; 0x10a
  rq.cparam = cmd_buffer;
 80057e8:	9544      	str	r5, [sp, #272]	; 0x110
  rq.clen = index_input;
 80057ea:	9445      	str	r4, [sp, #276]	; 0x114
  rq.rparam = &status;
 80057ec:	9746      	str	r7, [sp, #280]	; 0x118
  rq.rlen = 1;
 80057ee:	2301      	movs	r3, #1
 80057f0:	9347      	str	r3, [sp, #284]	; 0x11c
  if ( hci_send_req(&rq, FALSE) < 0 )
 80057f2:	4631      	mov	r1, r6
 80057f4:	a842      	add	r0, sp, #264	; 0x108
 80057f6:	f000 fa81 	bl	8005cfc <hci_send_req>
 80057fa:	42b0      	cmp	r0, r6
 80057fc:	db03      	blt.n	8005806 <aci_gatt_update_char_value+0x66>
    return BLE_STATUS_TIMEOUT;
  return status;
 80057fe:	f89d 0007 	ldrb.w	r0, [sp, #7]
}
 8005802:	b049      	add	sp, #292	; 0x124
 8005804:	bdf0      	pop	{r4, r5, r6, r7, pc}
    return BLE_STATUS_TIMEOUT;
 8005806:	20ff      	movs	r0, #255	; 0xff
 8005808:	e7fb      	b.n	8005802 <aci_gatt_update_char_value+0x62>

0800580a <aci_gatt_allow_read>:
    return BLE_STATUS_TIMEOUT;
  return status;
}

tBleStatus aci_gatt_allow_read( uint16_t Connection_Handle )
{
 800580a:	b570      	push	{r4, r5, r6, lr}
 800580c:	b0c8      	sub	sp, #288	; 0x120
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gatt_allow_read_cp0 *cp0 = (aci_gatt_allow_read_cp0*)(cmd_buffer);
  tBleStatus status = 0;
 800580e:	f10d 0507 	add.w	r5, sp, #7
 8005812:	2400      	movs	r4, #0
 8005814:	f88d 4007 	strb.w	r4, [sp, #7]
  int index_input = 0;
  cp0->Connection_Handle = Connection_Handle;
 8005818:	ae02      	add	r6, sp, #8
 800581a:	f8ad 0008 	strh.w	r0, [sp, #8]
  index_input += 2;
  Osal_MemSet( &rq, 0, sizeof(rq) );
 800581e:	2218      	movs	r2, #24
 8005820:	4621      	mov	r1, r4
 8005822:	a842      	add	r0, sp, #264	; 0x108
 8005824:	f000 f8e8 	bl	80059f8 <Osal_MemSet>
  rq.ogf = 0x3f;
 8005828:	233f      	movs	r3, #63	; 0x3f
 800582a:	f8ad 3108 	strh.w	r3, [sp, #264]	; 0x108
  rq.ocf = 0x127;
 800582e:	f240 1327 	movw	r3, #295	; 0x127
 8005832:	f8ad 310a 	strh.w	r3, [sp, #266]	; 0x10a
  rq.cparam = cmd_buffer;
 8005836:	9644      	str	r6, [sp, #272]	; 0x110
  rq.clen = index_input;
 8005838:	2302      	movs	r3, #2
 800583a:	9345      	str	r3, [sp, #276]	; 0x114
  rq.rparam = &status;
 800583c:	9546      	str	r5, [sp, #280]	; 0x118
  rq.rlen = 1;
 800583e:	2301      	movs	r3, #1
 8005840:	9347      	str	r3, [sp, #284]	; 0x11c
  if ( hci_send_req(&rq, FALSE) < 0 )
 8005842:	4621      	mov	r1, r4
 8005844:	a842      	add	r0, sp, #264	; 0x108
 8005846:	f000 fa59 	bl	8005cfc <hci_send_req>
 800584a:	42a0      	cmp	r0, r4
 800584c:	db03      	blt.n	8005856 <aci_gatt_allow_read+0x4c>
    return BLE_STATUS_TIMEOUT;
  return status;
 800584e:	f89d 0007 	ldrb.w	r0, [sp, #7]
}
 8005852:	b048      	add	sp, #288	; 0x120
 8005854:	bd70      	pop	{r4, r5, r6, pc}
    return BLE_STATUS_TIMEOUT;
 8005856:	20ff      	movs	r0, #255	; 0xff
 8005858:	e7fb      	b.n	8005852 <aci_gatt_allow_read+0x48>

0800585a <aci_hal_write_config_data>:
}

tBleStatus aci_hal_write_config_data( uint8_t Offset,
                                      uint8_t Length,
                                      const uint8_t* Value )
{
 800585a:	b5f0      	push	{r4, r5, r6, r7, lr}
 800585c:	b0c9      	sub	sp, #292	; 0x124
 800585e:	460c      	mov	r4, r1
 8005860:	4611      	mov	r1, r2
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_hal_write_config_data_cp0 *cp0 = (aci_hal_write_config_data_cp0*)(cmd_buffer);
  tBleStatus status = 0;
 8005862:	f10d 0707 	add.w	r7, sp, #7
 8005866:	2500      	movs	r5, #0
 8005868:	f88d 5007 	strb.w	r5, [sp, #7]
  int index_input = 0;
  cp0->Offset = Offset;
 800586c:	ae02      	add	r6, sp, #8
 800586e:	f88d 0008 	strb.w	r0, [sp, #8]
  index_input += 1;
  cp0->Length = Length;
 8005872:	f88d 4009 	strb.w	r4, [sp, #9]
  index_input += 1;
  Osal_MemCpy( (void*)&cp0->Value, (const void*)Value, Length );
 8005876:	4622      	mov	r2, r4
 8005878:	f10d 000a 	add.w	r0, sp, #10
 800587c:	f000 f8b8 	bl	80059f0 <Osal_MemCpy>
  index_input += Length;
 8005880:	3402      	adds	r4, #2
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8005882:	2218      	movs	r2, #24
 8005884:	4629      	mov	r1, r5
 8005886:	a842      	add	r0, sp, #264	; 0x108
 8005888:	f000 f8b6 	bl	80059f8 <Osal_MemSet>
  rq.ogf = 0x3f;
 800588c:	233f      	movs	r3, #63	; 0x3f
 800588e:	f8ad 3108 	strh.w	r3, [sp, #264]	; 0x108
  rq.ocf = 0x00c;
 8005892:	230c      	movs	r3, #12
 8005894:	f8ad 310a 	strh.w	r3, [sp, #266]	; 0x10a
  rq.cparam = cmd_buffer;
 8005898:	9644      	str	r6, [sp, #272]	; 0x110
  rq.clen = index_input;
 800589a:	9445      	str	r4, [sp, #276]	; 0x114
  rq.rparam = &status;
 800589c:	9746      	str	r7, [sp, #280]	; 0x118
  rq.rlen = 1;
 800589e:	2301      	movs	r3, #1
 80058a0:	9347      	str	r3, [sp, #284]	; 0x11c
  if ( hci_send_req(&rq, FALSE) < 0 )
 80058a2:	4629      	mov	r1, r5
 80058a4:	a842      	add	r0, sp, #264	; 0x108
 80058a6:	f000 fa29 	bl	8005cfc <hci_send_req>
 80058aa:	42a8      	cmp	r0, r5
 80058ac:	db03      	blt.n	80058b6 <aci_hal_write_config_data+0x5c>
    return BLE_STATUS_TIMEOUT;
  return status;
 80058ae:	f89d 0007 	ldrb.w	r0, [sp, #7]
}
 80058b2:	b049      	add	sp, #292	; 0x124
 80058b4:	bdf0      	pop	{r4, r5, r6, r7, pc}
    return BLE_STATUS_TIMEOUT;
 80058b6:	20ff      	movs	r0, #255	; 0xff
 80058b8:	e7fb      	b.n	80058b2 <aci_hal_write_config_data+0x58>

080058ba <aci_hal_set_tx_power_level>:
  return BLE_STATUS_SUCCESS;
}

tBleStatus aci_hal_set_tx_power_level( uint8_t En_High_Power,
                                       uint8_t PA_Level )
{
 80058ba:	b570      	push	{r4, r5, r6, lr}
 80058bc:	b0c8      	sub	sp, #288	; 0x120
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_hal_set_tx_power_level_cp0 *cp0 = (aci_hal_set_tx_power_level_cp0*)(cmd_buffer);
  tBleStatus status = 0;
 80058be:	f10d 0607 	add.w	r6, sp, #7
 80058c2:	2400      	movs	r4, #0
 80058c4:	f88d 4007 	strb.w	r4, [sp, #7]
  int index_input = 0;
  cp0->En_High_Power = En_High_Power;
 80058c8:	ad02      	add	r5, sp, #8
 80058ca:	f88d 0008 	strb.w	r0, [sp, #8]
  index_input += 1;
  cp0->PA_Level = PA_Level;
 80058ce:	f88d 1009 	strb.w	r1, [sp, #9]
  index_input += 1;
  Osal_MemSet( &rq, 0, sizeof(rq) );
 80058d2:	2218      	movs	r2, #24
 80058d4:	4621      	mov	r1, r4
 80058d6:	a842      	add	r0, sp, #264	; 0x108
 80058d8:	f000 f88e 	bl	80059f8 <Osal_MemSet>
  rq.ogf = 0x3f;
 80058dc:	233f      	movs	r3, #63	; 0x3f
 80058de:	f8ad 3108 	strh.w	r3, [sp, #264]	; 0x108
  rq.ocf = 0x00f;
 80058e2:	230f      	movs	r3, #15
 80058e4:	f8ad 310a 	strh.w	r3, [sp, #266]	; 0x10a
  rq.cparam = cmd_buffer;
 80058e8:	9544      	str	r5, [sp, #272]	; 0x110
  rq.clen = index_input;
 80058ea:	2302      	movs	r3, #2
 80058ec:	9345      	str	r3, [sp, #276]	; 0x114
  rq.rparam = &status;
 80058ee:	9646      	str	r6, [sp, #280]	; 0x118
  rq.rlen = 1;
 80058f0:	2301      	movs	r3, #1
 80058f2:	9347      	str	r3, [sp, #284]	; 0x11c
  if ( hci_send_req(&rq, FALSE) < 0 )
 80058f4:	4621      	mov	r1, r4
 80058f6:	a842      	add	r0, sp, #264	; 0x108
 80058f8:	f000 fa00 	bl	8005cfc <hci_send_req>
 80058fc:	42a0      	cmp	r0, r4
 80058fe:	db03      	blt.n	8005908 <aci_hal_set_tx_power_level+0x4e>
    return BLE_STATUS_TIMEOUT;
  return status;
 8005900:	f89d 0007 	ldrb.w	r0, [sp, #7]
}
 8005904:	b048      	add	sp, #288	; 0x120
 8005906:	bd70      	pop	{r4, r5, r6, pc}
    return BLE_STATUS_TIMEOUT;
 8005908:	20ff      	movs	r0, #255	; 0xff
 800590a:	e7fb      	b.n	8005904 <aci_hal_set_tx_power_level+0x4a>

0800590c <aci_hal_set_radio_activity_mask>:
  Osal_MemCpy( (void*)Link_Connection_Handle, (const void*)resp.Link_Connection_Handle, 16 );
  return BLE_STATUS_SUCCESS;
}

tBleStatus aci_hal_set_radio_activity_mask( uint16_t Radio_Activity_Mask )
{
 800590c:	b570      	push	{r4, r5, r6, lr}
 800590e:	b0c8      	sub	sp, #288	; 0x120
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_hal_set_radio_activity_mask_cp0 *cp0 = (aci_hal_set_radio_activity_mask_cp0*)(cmd_buffer);
  tBleStatus status = 0;
 8005910:	f10d 0507 	add.w	r5, sp, #7
 8005914:	2400      	movs	r4, #0
 8005916:	f88d 4007 	strb.w	r4, [sp, #7]
  int index_input = 0;
  cp0->Radio_Activity_Mask = Radio_Activity_Mask;
 800591a:	ae02      	add	r6, sp, #8
 800591c:	f8ad 0008 	strh.w	r0, [sp, #8]
  index_input += 2;
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8005920:	2218      	movs	r2, #24
 8005922:	4621      	mov	r1, r4
 8005924:	a842      	add	r0, sp, #264	; 0x108
 8005926:	f000 f867 	bl	80059f8 <Osal_MemSet>
  rq.ogf = 0x3f;
 800592a:	233f      	movs	r3, #63	; 0x3f
 800592c:	f8ad 3108 	strh.w	r3, [sp, #264]	; 0x108
  rq.ocf = 0x018;
 8005930:	2318      	movs	r3, #24
 8005932:	f8ad 310a 	strh.w	r3, [sp, #266]	; 0x10a
  rq.cparam = cmd_buffer;
 8005936:	9644      	str	r6, [sp, #272]	; 0x110
  rq.clen = index_input;
 8005938:	2302      	movs	r3, #2
 800593a:	9345      	str	r3, [sp, #276]	; 0x114
  rq.rparam = &status;
 800593c:	9546      	str	r5, [sp, #280]	; 0x118
  rq.rlen = 1;
 800593e:	2301      	movs	r3, #1
 8005940:	9347      	str	r3, [sp, #284]	; 0x11c
  if ( hci_send_req(&rq, FALSE) < 0 )
 8005942:	4621      	mov	r1, r4
 8005944:	a842      	add	r0, sp, #264	; 0x108
 8005946:	f000 f9d9 	bl	8005cfc <hci_send_req>
 800594a:	42a0      	cmp	r0, r4
 800594c:	db03      	blt.n	8005956 <aci_hal_set_radio_activity_mask+0x4a>
    return BLE_STATUS_TIMEOUT;
  return status;
 800594e:	f89d 0007 	ldrb.w	r0, [sp, #7]
}
 8005952:	b048      	add	sp, #288	; 0x120
 8005954:	bd70      	pop	{r4, r5, r6, pc}
    return BLE_STATUS_TIMEOUT;
 8005956:	20ff      	movs	r0, #255	; 0xff
 8005958:	e7fb      	b.n	8005952 <aci_hal_set_radio_activity_mask+0x46>

0800595a <hci_reset>:
    return BLE_STATUS_TIMEOUT;
  return status;
}

tBleStatus hci_reset( void )
{
 800595a:	b510      	push	{r4, lr}
 800595c:	b088      	sub	sp, #32
  struct hci_request rq;
  tBleStatus status = 0;
 800595e:	2400      	movs	r4, #0
 8005960:	f88d 4007 	strb.w	r4, [sp, #7]
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8005964:	2218      	movs	r2, #24
 8005966:	4621      	mov	r1, r4
 8005968:	a802      	add	r0, sp, #8
 800596a:	f000 f845 	bl	80059f8 <Osal_MemSet>
  rq.ogf = 0x03;
 800596e:	2303      	movs	r3, #3
 8005970:	f8ad 3008 	strh.w	r3, [sp, #8]
  rq.ocf = 0x003;
 8005974:	f8ad 300a 	strh.w	r3, [sp, #10]
  rq.rparam = &status;
 8005978:	f10d 0307 	add.w	r3, sp, #7
 800597c:	9306      	str	r3, [sp, #24]
  rq.rlen = 1;
 800597e:	2301      	movs	r3, #1
 8005980:	9307      	str	r3, [sp, #28]
  if ( hci_send_req(&rq, FALSE) < 0 )
 8005982:	4621      	mov	r1, r4
 8005984:	a802      	add	r0, sp, #8
 8005986:	f000 f9b9 	bl	8005cfc <hci_send_req>
 800598a:	42a0      	cmp	r0, r4
 800598c:	db03      	blt.n	8005996 <hci_reset+0x3c>
    return BLE_STATUS_TIMEOUT;
  return status;
 800598e:	f89d 0007 	ldrb.w	r0, [sp, #7]
}
 8005992:	b008      	add	sp, #32
 8005994:	bd10      	pop	{r4, pc}
    return BLE_STATUS_TIMEOUT;
 8005996:	20ff      	movs	r0, #255	; 0xff
 8005998:	e7fb      	b.n	8005992 <hci_reset+0x38>

0800599a <hci_le_set_default_phy>:
}

tBleStatus hci_le_set_default_phy( uint8_t ALL_PHYS,
                                   uint8_t TX_PHYS,
                                   uint8_t RX_PHYS )
{
 800599a:	b570      	push	{r4, r5, r6, lr}
 800599c:	b0c8      	sub	sp, #288	; 0x120
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  hci_le_set_default_phy_cp0 *cp0 = (hci_le_set_default_phy_cp0*)(cmd_buffer);
  tBleStatus status = 0;
 800599e:	f10d 0607 	add.w	r6, sp, #7
 80059a2:	2500      	movs	r5, #0
 80059a4:	f88d 5007 	strb.w	r5, [sp, #7]
  int index_input = 0;
  cp0->ALL_PHYS = ALL_PHYS;
 80059a8:	ac02      	add	r4, sp, #8
 80059aa:	f88d 0008 	strb.w	r0, [sp, #8]
  index_input += 1;
  cp0->TX_PHYS = TX_PHYS;
 80059ae:	f88d 1009 	strb.w	r1, [sp, #9]
  index_input += 1;
  cp0->RX_PHYS = RX_PHYS;
 80059b2:	f88d 200a 	strb.w	r2, [sp, #10]
  index_input += 1;
  Osal_MemSet( &rq, 0, sizeof(rq) );
 80059b6:	2218      	movs	r2, #24
 80059b8:	4629      	mov	r1, r5
 80059ba:	a842      	add	r0, sp, #264	; 0x108
 80059bc:	f000 f81c 	bl	80059f8 <Osal_MemSet>
  rq.ogf = 0x08;
 80059c0:	2308      	movs	r3, #8
 80059c2:	f8ad 3108 	strh.w	r3, [sp, #264]	; 0x108
  rq.ocf = 0x031;
 80059c6:	2331      	movs	r3, #49	; 0x31
 80059c8:	f8ad 310a 	strh.w	r3, [sp, #266]	; 0x10a
  rq.cparam = cmd_buffer;
 80059cc:	9444      	str	r4, [sp, #272]	; 0x110
  rq.clen = index_input;
 80059ce:	2303      	movs	r3, #3
 80059d0:	9345      	str	r3, [sp, #276]	; 0x114
  rq.rparam = &status;
 80059d2:	9646      	str	r6, [sp, #280]	; 0x118
  rq.rlen = 1;
 80059d4:	2301      	movs	r3, #1
 80059d6:	9347      	str	r3, [sp, #284]	; 0x11c
  if ( hci_send_req(&rq, FALSE) < 0 )
 80059d8:	4629      	mov	r1, r5
 80059da:	a842      	add	r0, sp, #264	; 0x108
 80059dc:	f000 f98e 	bl	8005cfc <hci_send_req>
 80059e0:	42a8      	cmp	r0, r5
 80059e2:	db03      	blt.n	80059ec <hci_le_set_default_phy+0x52>
    return BLE_STATUS_TIMEOUT;
  return status;
 80059e4:	f89d 0007 	ldrb.w	r0, [sp, #7]
}
 80059e8:	b048      	add	sp, #288	; 0x120
 80059ea:	bd70      	pop	{r4, r5, r6, pc}
    return BLE_STATUS_TIMEOUT;
 80059ec:	20ff      	movs	r0, #255	; 0xff
 80059ee:	e7fb      	b.n	80059e8 <hci_le_set_default_phy+0x4e>

080059f0 <Osal_MemCpy>:
 * Osal_MemCpy
 * 
 */
 
void* Osal_MemCpy( void *dest, const void *src, unsigned int size )
{
 80059f0:	b508      	push	{r3, lr}
  return memcpy( dest, src, size ); 
 80059f2:	f001 fc3f 	bl	8007274 <memcpy>
}
 80059f6:	bd08      	pop	{r3, pc}

080059f8 <Osal_MemSet>:
 * Osal_MemSet
 * 
 */
 
void* Osal_MemSet( void *ptr, int value, unsigned int size )
{
 80059f8:	b508      	push	{r3, lr}
  return memset( ptr, value, size );
 80059fa:	f001 fc49 	bl	8007290 <memset>
}
 80059fe:	bd08      	pop	{r3, pc}

08005a00 <BAS_Init>:
void BVOPUS_STM_Init(void);

__weak void BAS_Init( void )
{
  return;
}
 8005a00:	4770      	bx	lr

08005a02 <BLS_Init>:

__weak void BLS_Init( void )
{
  return;
}
 8005a02:	4770      	bx	lr

08005a04 <CRS_STM_Init>:
__weak void CRS_STM_Init( void )
{
  return;
}
 8005a04:	4770      	bx	lr

08005a06 <DIS_Init>:
__weak void DIS_Init( void )
{
  return;
}
 8005a06:	4770      	bx	lr

08005a08 <EDS_STM_Init>:
__weak void EDS_STM_Init( void )
{
  return;
}
 8005a08:	4770      	bx	lr

08005a0a <HIDS_Init>:
__weak void HIDS_Init( void )
{
  return;
}
 8005a0a:	4770      	bx	lr

08005a0c <HRS_Init>:
__weak void HRS_Init( void )
{
  return;
}
 8005a0c:	4770      	bx	lr

08005a0e <HTS_Init>:
__weak void HTS_Init( void )
{
  return;
}
 8005a0e:	4770      	bx	lr

08005a10 <IAS_Init>:
__weak void IAS_Init( void )
{
  return;
}
 8005a10:	4770      	bx	lr

08005a12 <LLS_Init>:
__weak void LLS_Init( void )
{
  return;
}
 8005a12:	4770      	bx	lr

08005a14 <TPS_Init>:
__weak void TPS_Init( void )
{
  return;
}
 8005a14:	4770      	bx	lr

08005a16 <MOTENV_STM_Init>:
__weak void MOTENV_STM_Init( void )
{
  return;
}
 8005a16:	4770      	bx	lr

08005a18 <P2PS_STM_Init>:
__weak void P2PS_STM_Init( void )
{
  return;
}
 8005a18:	4770      	bx	lr

08005a1a <ZDD_STM_Init>:
__weak void ZDD_STM_Init( void )
{
  return;
}
 8005a1a:	4770      	bx	lr

08005a1c <OTAS_STM_Init>:
__weak void OTAS_STM_Init( void )
{
  return;
}
 8005a1c:	4770      	bx	lr

08005a1e <MESH_Init>:
__weak void MESH_Init( void )
{
  return;
}
 8005a1e:	4770      	bx	lr

08005a20 <BVOPUS_STM_Init>:
__weak void BVOPUS_STM_Init( void )
{
  return;
}
 8005a20:	4770      	bx	lr

08005a22 <SVCCTL_SvcInit>:

  return;
}

__weak void SVCCTL_SvcInit(void)
{
 8005a22:	b508      	push	{r3, lr}
  BAS_Init();
 8005a24:	f7ff ffec 	bl	8005a00 <BAS_Init>

  BLS_Init();
 8005a28:	f7ff ffeb 	bl	8005a02 <BLS_Init>

  CRS_STM_Init();
 8005a2c:	f7ff ffea 	bl	8005a04 <CRS_STM_Init>

  DIS_Init();
 8005a30:	f7ff ffe9 	bl	8005a06 <DIS_Init>

  EDS_STM_Init();
 8005a34:	f7ff ffe8 	bl	8005a08 <EDS_STM_Init>

  HIDS_Init();
 8005a38:	f7ff ffe7 	bl	8005a0a <HIDS_Init>

  HRS_Init();
 8005a3c:	f7ff ffe6 	bl	8005a0c <HRS_Init>

  HTS_Init();
 8005a40:	f7ff ffe5 	bl	8005a0e <HTS_Init>

  IAS_Init();
 8005a44:	f7ff ffe4 	bl	8005a10 <IAS_Init>

  LLS_Init();
 8005a48:	f7ff ffe3 	bl	8005a12 <LLS_Init>

  TPS_Init();
 8005a4c:	f7ff ffe2 	bl	8005a14 <TPS_Init>

  MOTENV_STM_Init();
 8005a50:	f7ff ffe1 	bl	8005a16 <MOTENV_STM_Init>

  P2PS_STM_Init();
 8005a54:	f7ff ffe0 	bl	8005a18 <P2PS_STM_Init>

  ZDD_STM_Init();
 8005a58:	f7ff ffdf 	bl	8005a1a <ZDD_STM_Init>

  OTAS_STM_Init();
 8005a5c:	f7ff ffde 	bl	8005a1c <OTAS_STM_Init>
  
  BVOPUS_STM_Init();
 8005a60:	f7ff ffde 	bl	8005a20 <BVOPUS_STM_Init>

  MESH_Init();
 8005a64:	f7ff ffdb 	bl	8005a1e <MESH_Init>

  SVCCTL_InitCustomSvc();
 8005a68:	f001 f8c0 	bl	8006bec <SVCCTL_InitCustomSvc>
  
  return;
}
 8005a6c:	bd08      	pop	{r3, pc}
	...

08005a70 <SVCCTL_Init>:
{
 8005a70:	b508      	push	{r3, lr}
  SVCCTL_EvtHandler.NbreOfRegisteredHandler = 0;
 8005a72:	4b04      	ldr	r3, [pc, #16]	; (8005a84 <SVCCTL_Init+0x14>)
 8005a74:	2200      	movs	r2, #0
 8005a76:	771a      	strb	r2, [r3, #28]
  SVCCTL_CltHandler.NbreOfRegisteredHandler = 0;
 8005a78:	f883 2020 	strb.w	r2, [r3, #32]
  SVCCTL_SvcInit();
 8005a7c:	f7ff ffd1 	bl	8005a22 <SVCCTL_SvcInit>
}
 8005a80:	bd08      	pop	{r3, pc}
 8005a82:	bf00      	nop
 8005a84:	2000012c 	.word	0x2000012c

08005a88 <SVCCTL_RegisterSvcHandler>:
 * @retval None
 */
void SVCCTL_RegisterSvcHandler( SVC_CTL_p_EvtHandler_t pfBLE_SVC_Service_Event_Handler )
{
#if (BLE_CFG_SVC_MAX_NBR_CB > 0)
  SVCCTL_EvtHandler.SVCCTL__SvcHandlerTab[SVCCTL_EvtHandler.NbreOfRegisteredHandler] = pfBLE_SVC_Service_Event_Handler;
 8005a88:	4a03      	ldr	r2, [pc, #12]	; (8005a98 <SVCCTL_RegisterSvcHandler+0x10>)
 8005a8a:	7f13      	ldrb	r3, [r2, #28]
 8005a8c:	f842 0023 	str.w	r0, [r2, r3, lsl #2]
  SVCCTL_EvtHandler.NbreOfRegisteredHandler++;
 8005a90:	3301      	adds	r3, #1
 8005a92:	7713      	strb	r3, [r2, #28]
#else
  (void)(pfBLE_SVC_Service_Event_Handler);
#endif

  return;
}
 8005a94:	4770      	bx	lr
 8005a96:	bf00      	nop
 8005a98:	2000012c 	.word	0x2000012c

08005a9c <SVCCTL_UserEvtRx>:

  return;
}

SVCCTL_UserEvtFlowStatus_t SVCCTL_UserEvtRx( void *pckt )
{
 8005a9c:	b538      	push	{r3, r4, r5, lr}
 8005a9e:	4605      	mov	r5, r0
  uint8_t index;

  event_pckt = (hci_event_pckt*) ((hci_uart_pckt *) pckt)->data;
  event_notification_status = SVCCTL_EvtNotAck;

  switch (event_pckt->evt)
 8005aa0:	7843      	ldrb	r3, [r0, #1]
 8005aa2:	2bff      	cmp	r3, #255	; 0xff
 8005aa4:	d106      	bne.n	8005ab4 <SVCCTL_UserEvtRx+0x18>
  {
    case HCI_VENDOR_SPECIFIC_DEBUG_EVT_CODE:
    {
      blecore_evt = (evt_blecore_aci*) event_pckt->data;

      switch ((blecore_evt->ecode) & SVCCTL_EGID_EVT_MASK)
 8005aa6:	f8b0 3003 	ldrh.w	r3, [r0, #3]
 8005aaa:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8005aae:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8005ab2:	d003      	beq.n	8005abc <SVCCTL_UserEvtRx+0x20>
    case SVCCTL_EvtNotAck:
      /**
       *  The event has NOT been managed.
       *  It shall be passed to the application for processing
       */
      return_status = SVCCTL_App_Notification(pckt);
 8005ab4:	4628      	mov	r0, r5
 8005ab6:	f000 ffab 	bl	8006a10 <SVCCTL_App_Notification>
      return_status = SVCCTL_UserEvtFlowEnable;
      break;
  }

  return (return_status);
}
 8005aba:	bd38      	pop	{r3, r4, r5, pc}
          for (index = 0; index < SVCCTL_EvtHandler.NbreOfRegisteredHandler; index++)
 8005abc:	2400      	movs	r4, #0
  event_notification_status = SVCCTL_EvtNotAck;
 8005abe:	4622      	mov	r2, r4
          for (index = 0; index < SVCCTL_EvtHandler.NbreOfRegisteredHandler; index++)
 8005ac0:	4b0a      	ldr	r3, [pc, #40]	; (8005aec <SVCCTL_UserEvtRx+0x50>)
 8005ac2:	7f1b      	ldrb	r3, [r3, #28]
 8005ac4:	42a3      	cmp	r3, r4
 8005ac6:	d909      	bls.n	8005adc <SVCCTL_UserEvtRx+0x40>
            event_notification_status = SVCCTL_EvtHandler.SVCCTL__SvcHandlerTab[index](pckt);
 8005ac8:	4b08      	ldr	r3, [pc, #32]	; (8005aec <SVCCTL_UserEvtRx+0x50>)
 8005aca:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
 8005ace:	4628      	mov	r0, r5
 8005ad0:	4798      	blx	r3
            if (event_notification_status != SVCCTL_EvtNotAck)
 8005ad2:	4602      	mov	r2, r0
 8005ad4:	b910      	cbnz	r0, 8005adc <SVCCTL_UserEvtRx+0x40>
          for (index = 0; index < SVCCTL_EvtHandler.NbreOfRegisteredHandler; index++)
 8005ad6:	3401      	adds	r4, #1
 8005ad8:	b2e4      	uxtb	r4, r4
 8005ada:	e7f1      	b.n	8005ac0 <SVCCTL_UserEvtRx+0x24>
  switch (event_notification_status)
 8005adc:	2a00      	cmp	r2, #0
 8005ade:	d0e9      	beq.n	8005ab4 <SVCCTL_UserEvtRx+0x18>
 8005ae0:	2a02      	cmp	r2, #2
 8005ae2:	d101      	bne.n	8005ae8 <SVCCTL_UserEvtRx+0x4c>
      return_status = SVCCTL_UserEvtFlowDisable;
 8005ae4:	2000      	movs	r0, #0
 8005ae6:	e7e8      	b.n	8005aba <SVCCTL_UserEvtRx+0x1e>
  switch (event_notification_status)
 8005ae8:	2001      	movs	r0, #1
 8005aea:	e7e6      	b.n	8005aba <SVCCTL_UserEvtRx+0x1e>
 8005aec:	2000012c 	.word	0x2000012c

08005af0 <SHCI_C2_BLE_Init>:

  return (SHCI_CmdStatus_t)(((TL_CcEvt_t*)(p_rsp->evtserial.evt.payload))->payload[0]);
}

SHCI_CmdStatus_t SHCI_C2_BLE_Init( SHCI_C2_Ble_Init_Cmd_Packet_t *pCmdPacket )
{
 8005af0:	b500      	push	{lr}
 8005af2:	b085      	sub	sp, #20
  uint8_t local_buffer[TL_BLEEVT_CS_BUFFER_SIZE];
  TL_EvtPacket_t * p_rsp;

  p_rsp = (TL_EvtPacket_t *)local_buffer;

 shci_send( SHCI_OPCODE_C2_BLE_INIT,
 8005af4:	466b      	mov	r3, sp
 8005af6:	f100 020c 	add.w	r2, r0, #12
 8005afa:	2125      	movs	r1, #37	; 0x25
 8005afc:	f64f 4066 	movw	r0, #64614	; 0xfc66
 8005b00:	f000 fa0a 	bl	8005f18 <shci_send>
            sizeof( SHCI_C2_Ble_Init_Cmd_Param_t ),
            (uint8_t*)&pCmdPacket->Param,
            p_rsp );

  return (SHCI_CmdStatus_t)(((TL_CcEvt_t*)(p_rsp->evtserial.evt.payload))->payload[0]);
}
 8005b04:	f89d 000e 	ldrb.w	r0, [sp, #14]
 8005b08:	b005      	add	sp, #20
 8005b0a:	f85d fb04 	ldr.w	pc, [sp], #4

08005b0e <SHCI_C2_DEBUG_Init>:

  return (SHCI_CmdStatus_t)(((TL_CcEvt_t*)(p_rsp->evtserial.evt.payload))->payload[0]);
}

SHCI_CmdStatus_t SHCI_C2_DEBUG_Init( SHCI_C2_DEBUG_Init_Cmd_Packet_t *pCmdPacket  )
{
 8005b0e:	b500      	push	{lr}
 8005b10:	b085      	sub	sp, #20
  uint8_t local_buffer[TL_BLEEVT_CS_BUFFER_SIZE];
  TL_EvtPacket_t * p_rsp;

  p_rsp = (TL_EvtPacket_t *)local_buffer;

  shci_send( SHCI_OPCODE_C2_DEBUG_INIT,
 8005b12:	466b      	mov	r3, sp
 8005b14:	f100 020c 	add.w	r2, r0, #12
 8005b18:	210f      	movs	r1, #15
 8005b1a:	f64f 4068 	movw	r0, #64616	; 0xfc68
 8005b1e:	f000 f9fb 	bl	8005f18 <shci_send>
             sizeof( SHCI_C2_DEBUG_init_Cmd_Param_t ),
             (uint8_t*)&pCmdPacket->Param,
             p_rsp );

  return (SHCI_CmdStatus_t)(((TL_CcEvt_t*)(p_rsp->evtserial.evt.payload))->payload[0]);
}
 8005b22:	f89d 000e 	ldrb.w	r0, [sp, #14]
 8005b26:	b005      	add	sp, #20
 8005b28:	f85d fb04 	ldr.w	pc, [sp], #4

08005b2c <SHCI_C2_Config>:

  return (SHCI_CmdStatus_t)(((TL_CcEvt_t*)(p_rsp->evtserial.evt.payload))->payload[0]);
}

SHCI_CmdStatus_t SHCI_C2_Config(SHCI_C2_CONFIG_Cmd_Param_t *pCmdPacket)
{
 8005b2c:	b500      	push	{lr}
 8005b2e:	b085      	sub	sp, #20
 8005b30:	4602      	mov	r2, r0
  uint8_t local_buffer[TL_BLEEVT_CS_BUFFER_SIZE];
  TL_EvtPacket_t * p_rsp;

  p_rsp = (TL_EvtPacket_t *)local_buffer;

  shci_send( SHCI_OPCODE_C2_CONFIG,
 8005b32:	466b      	mov	r3, sp
 8005b34:	210e      	movs	r1, #14
 8005b36:	f64f 4075 	movw	r0, #64629	; 0xfc75
 8005b3a:	f000 f9ed 	bl	8005f18 <shci_send>
             sizeof(SHCI_C2_CONFIG_Cmd_Param_t),
             (uint8_t*)pCmdPacket,
             p_rsp );

  return (SHCI_CmdStatus_t)(((TL_CcEvt_t*)(p_rsp->evtserial.evt.payload))->payload[0]);
}
 8005b3e:	f89d 000e 	ldrb.w	r0, [sp, #14]
 8005b42:	b005      	add	sp, #20
 8005b44:	f85d fb04 	ldr.w	pc, [sp], #4

08005b48 <SHCI_GetWirelessFwInfo>:
 *  Local System COMMAND
 *  These commands are NOT sent to the CPU2
 */

SHCI_CmdStatus_t SHCI_GetWirelessFwInfo( WirelessFwInfo_t* pWirelessInfo )
{
 8005b48:	b470      	push	{r4, r5, r6}
  uint32_t wireless_firmware_infoStack = 0;
  MB_FUS_DeviceInfoTable_t * p_fus_device_info_table = NULL;
  uint32_t fus_version = 0;
  uint32_t fus_memorySize = 0;

  ipccdba = READ_BIT( FLASH->IPCCBR, FLASH_IPCCBR_IPCCDBA );
 8005b4a:	4b1d      	ldr	r3, [pc, #116]	; (8005bc0 <SHCI_GetWirelessFwInfo+0x78>)
 8005b4c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005b4e:	f3c3 030d 	ubfx	r3, r3, #0, #14
  /**
   * The Device Info Table mapping depends on which firmware is running on CPU2.
   * If the FUS is running on CPU2, FUS_DEVICE_INFO_TABLE_VALIDITY_KEYWORD shall be written in the table.
   * Otherwise, it means the Wireless Firmware is running on the CPU2
   */
  p_fus_device_info_table = (MB_FUS_DeviceInfoTable_t*)(*(uint32_t*)((ipccdba<<2) + SRAM2A_BASE));
 8005b52:	009b      	lsls	r3, r3, #2
 8005b54:	f103 5300 	add.w	r3, r3, #536870912	; 0x20000000
 8005b58:	f503 3340 	add.w	r3, r3, #196608	; 0x30000
 8005b5c:	681a      	ldr	r2, [r3, #0]

  if(p_fus_device_info_table->DeviceInfoTableState == FUS_DEVICE_INFO_TABLE_VALIDITY_KEYWORD)
 8005b5e:	6811      	ldr	r1, [r2, #0]
 8005b60:	4b18      	ldr	r3, [pc, #96]	; (8005bc4 <SHCI_GetWirelessFwInfo+0x7c>)
 8005b62:	4299      	cmp	r1, r3
 8005b64:	d026      	beq.n	8005bb4 <SHCI_GetWirelessFwInfo+0x6c>

    /**
     *  Retrieve the WirelessFwInfoTable
     *  This table is stored in RAM at startup during the TL (transport layer) initialization
     */
    wireless_firmware_version =  p_RefTable->p_device_info_table->WirelessFwInfoTable.Version;
 8005b66:	6913      	ldr	r3, [r2, #16]
    wireless_firmware_memorySize =  p_RefTable->p_device_info_table->WirelessFwInfoTable.MemorySize;
 8005b68:	6954      	ldr	r4, [r2, #20]
    wireless_firmware_infoStack =  p_RefTable->p_device_info_table->WirelessFwInfoTable.InfoStack;
 8005b6a:	6995      	ldr	r5, [r2, #24]

    /**
     *  Retrieve the FusInfoTable
     *  This table is stored in RAM at startup during the TL (transport layer) initialization
     */
    fus_version =  p_RefTable->p_device_info_table->FusInfoTable.Version;
 8005b6c:	6851      	ldr	r1, [r2, #4]
    fus_memorySize =  p_RefTable->p_device_info_table->FusInfoTable.MemorySize;
 8005b6e:	6892      	ldr	r2, [r2, #8]

  /**
   *  Retrieve the WirelessFwInfoTable
   *  This table is stored in RAM at startup during the TL (transport layer) initialization
   */
  pWirelessInfo->VersionMajor       = ((wireless_firmware_version & INFO_VERSION_MAJOR_MASK) >> INFO_VERSION_MAJOR_OFFSET);
 8005b70:	0e1e      	lsrs	r6, r3, #24
 8005b72:	7006      	strb	r6, [r0, #0]
  pWirelessInfo->VersionMinor       = ((wireless_firmware_version & INFO_VERSION_MINOR_MASK) >> INFO_VERSION_MINOR_OFFSET);
 8005b74:	0c1e      	lsrs	r6, r3, #16
 8005b76:	7046      	strb	r6, [r0, #1]
  pWirelessInfo->VersionSub         = ((wireless_firmware_version & INFO_VERSION_SUB_MASK) >> INFO_VERSION_SUB_OFFSET);
 8005b78:	0a1e      	lsrs	r6, r3, #8
 8005b7a:	7086      	strb	r6, [r0, #2]
  pWirelessInfo->VersionBranch      = ((wireless_firmware_version & INFO_VERSION_BRANCH_MASK) >> INFO_VERSION_BRANCH_OFFSET);
 8005b7c:	f3c3 1603 	ubfx	r6, r3, #4, #4
 8005b80:	70c6      	strb	r6, [r0, #3]
  pWirelessInfo->VersionReleaseType = ((wireless_firmware_version & INFO_VERSION_TYPE_MASK) >> INFO_VERSION_TYPE_OFFSET);
 8005b82:	f003 030f 	and.w	r3, r3, #15
 8005b86:	7103      	strb	r3, [r0, #4]

  pWirelessInfo->MemorySizeSram2B   = ((wireless_firmware_memorySize & INFO_SIZE_SRAM2B_MASK) >> INFO_SIZE_SRAM2B_OFFSET);
 8005b88:	0e23      	lsrs	r3, r4, #24
 8005b8a:	7143      	strb	r3, [r0, #5]
  pWirelessInfo->MemorySizeSram2A   = ((wireless_firmware_memorySize & INFO_SIZE_SRAM2A_MASK) >> INFO_SIZE_SRAM2A_OFFSET);
 8005b8c:	0c23      	lsrs	r3, r4, #16
 8005b8e:	7183      	strb	r3, [r0, #6]
  pWirelessInfo->MemorySizeSram1    = ((wireless_firmware_memorySize & INFO_SIZE_SRAM1_MASK) >> INFO_SIZE_SRAM1_OFFSET);
 8005b90:	0a23      	lsrs	r3, r4, #8
 8005b92:	71c3      	strb	r3, [r0, #7]
  pWirelessInfo->MemorySizeFlash    = ((wireless_firmware_memorySize & INFO_SIZE_FLASH_MASK) >> INFO_SIZE_FLASH_OFFSET);
 8005b94:	7204      	strb	r4, [r0, #8]

  pWirelessInfo->StackType          = ((wireless_firmware_infoStack & INFO_STACK_TYPE_MASK) >> INFO_STACK_TYPE_OFFSET);
 8005b96:	7245      	strb	r5, [r0, #9]

  /**
   *  Retrieve the FusInfoTable
   *  This table is stored in RAM at startup during the TL (transport layer) initialization
   */
  pWirelessInfo->FusVersionMajor       = ((fus_version & INFO_VERSION_MAJOR_MASK) >> INFO_VERSION_MAJOR_OFFSET);
 8005b98:	0e0b      	lsrs	r3, r1, #24
 8005b9a:	7283      	strb	r3, [r0, #10]
  pWirelessInfo->FusVersionMinor       = ((fus_version & INFO_VERSION_MINOR_MASK) >> INFO_VERSION_MINOR_OFFSET);
 8005b9c:	0c0b      	lsrs	r3, r1, #16
 8005b9e:	72c3      	strb	r3, [r0, #11]
  pWirelessInfo->FusVersionSub         = ((fus_version & INFO_VERSION_SUB_MASK) >> INFO_VERSION_SUB_OFFSET);
 8005ba0:	0a09      	lsrs	r1, r1, #8
 8005ba2:	7301      	strb	r1, [r0, #12]

  pWirelessInfo->FusMemorySizeSram2B   = ((fus_memorySize & INFO_SIZE_SRAM2B_MASK) >> INFO_SIZE_SRAM2B_OFFSET);
 8005ba4:	0e13      	lsrs	r3, r2, #24
 8005ba6:	7343      	strb	r3, [r0, #13]
  pWirelessInfo->FusMemorySizeSram2A   = ((fus_memorySize & INFO_SIZE_SRAM2A_MASK) >> INFO_SIZE_SRAM2A_OFFSET);
 8005ba8:	0c13      	lsrs	r3, r2, #16
 8005baa:	7383      	strb	r3, [r0, #14]
  pWirelessInfo->FusMemorySizeFlash    = ((fus_memorySize & INFO_SIZE_FLASH_MASK) >> INFO_SIZE_FLASH_OFFSET);
 8005bac:	73c2      	strb	r2, [r0, #15]

  return (SHCI_Success);
}
 8005bae:	2000      	movs	r0, #0
 8005bb0:	bc70      	pop	{r4, r5, r6}
 8005bb2:	4770      	bx	lr
    wireless_firmware_version =  p_fus_device_info_table->WirelessStackVersion;
 8005bb4:	6953      	ldr	r3, [r2, #20]
    wireless_firmware_memorySize =  p_fus_device_info_table->WirelessStackMemorySize;
 8005bb6:	6994      	ldr	r4, [r2, #24]
    wireless_firmware_infoStack =  p_fus_device_info_table->WirelessFirmwareBleInfo;
 8005bb8:	69d5      	ldr	r5, [r2, #28]
    fus_version =  p_fus_device_info_table->FusVersion;
 8005bba:	68d1      	ldr	r1, [r2, #12]
    fus_memorySize =  p_fus_device_info_table->FusMemorySize;
 8005bbc:	6912      	ldr	r2, [r2, #16]
 8005bbe:	e7d7      	b.n	8005b70 <SHCI_GetWirelessFwInfo+0x28>
 8005bc0:	58004000 	.word	0x58004000
 8005bc4:	a94656b9 	.word	0xa94656b9

08005bc8 <NotifyCmdStatus>:

  return;
}

static void NotifyCmdStatus(HCI_TL_CmdStatus_t hcicmdstatus)
{
 8005bc8:	b508      	push	{r3, lr}
  if(hcicmdstatus == HCI_TL_CmdBusy)
 8005bca:	b920      	cbnz	r0, 8005bd6 <NotifyCmdStatus+0xe>
  {
    if(StatusNotCallBackFunction != 0)
 8005bcc:	4b05      	ldr	r3, [pc, #20]	; (8005be4 <NotifyCmdStatus+0x1c>)
 8005bce:	681b      	ldr	r3, [r3, #0]
 8005bd0:	b103      	cbz	r3, 8005bd4 <NotifyCmdStatus+0xc>
    {
      StatusNotCallBackFunction(HCI_TL_CmdBusy);
 8005bd2:	4798      	blx	r3
      StatusNotCallBackFunction(HCI_TL_CmdAvailable);
    }
  }

  return;
}
 8005bd4:	bd08      	pop	{r3, pc}
    if(StatusNotCallBackFunction != 0)
 8005bd6:	4b03      	ldr	r3, [pc, #12]	; (8005be4 <NotifyCmdStatus+0x1c>)
 8005bd8:	681b      	ldr	r3, [r3, #0]
 8005bda:	2b00      	cmp	r3, #0
 8005bdc:	d0fa      	beq.n	8005bd4 <NotifyCmdStatus+0xc>
      StatusNotCallBackFunction(HCI_TL_CmdAvailable);
 8005bde:	2001      	movs	r0, #1
 8005be0:	4798      	blx	r3
  return;
 8005be2:	e7f7      	b.n	8005bd4 <NotifyCmdStatus+0xc>
 8005be4:	20000238 	.word	0x20000238

08005be8 <TlInit>:
{
 8005be8:	b530      	push	{r4, r5, lr}
 8005bea:	b085      	sub	sp, #20
 8005bec:	4604      	mov	r4, r0
  LST_init_head (&HciCmdEventQueue);
 8005bee:	480a      	ldr	r0, [pc, #40]	; (8005c18 <TlInit+0x30>)
 8005bf0:	f000 fb8c 	bl	800630c <LST_init_head>
  pCmdBuffer = p_cmdbuffer;
 8005bf4:	4d09      	ldr	r5, [pc, #36]	; (8005c1c <TlInit+0x34>)
 8005bf6:	4628      	mov	r0, r5
 8005bf8:	f840 4b04 	str.w	r4, [r0], #4
  LST_init_head (&HciAsynchEventQueue);
 8005bfc:	f000 fb86 	bl	800630c <LST_init_head>
  UserEventFlow = HCI_TL_UserEventFlow_Enable;
 8005c00:	2301      	movs	r3, #1
 8005c02:	732b      	strb	r3, [r5, #12]
  if (hciContext.io.Init)
 8005c04:	4b06      	ldr	r3, [pc, #24]	; (8005c20 <TlInit+0x38>)
 8005c06:	681b      	ldr	r3, [r3, #0]
 8005c08:	b123      	cbz	r3, 8005c14 <TlInit+0x2c>
    Conf.p_cmdbuffer = (uint8_t *)p_cmdbuffer;
 8005c0a:	9402      	str	r4, [sp, #8]
    Conf.IoBusEvtCallBack = TlEvtReceived;
 8005c0c:	4a05      	ldr	r2, [pc, #20]	; (8005c24 <TlInit+0x3c>)
 8005c0e:	9200      	str	r2, [sp, #0]
    hciContext.io.Init(&Conf);
 8005c10:	4668      	mov	r0, sp
 8005c12:	4798      	blx	r3
}
 8005c14:	b005      	add	sp, #20
 8005c16:	bd30      	pop	{r4, r5, pc}
 8005c18:	20000230 	.word	0x20000230
 8005c1c:	20000150 	.word	0x20000150
 8005c20:	2000023c 	.word	0x2000023c
 8005c24:	08005da1 	.word	0x08005da1

08005c28 <SendCmd>:
{
 8005c28:	b510      	push	{r4, lr}
 8005c2a:	460b      	mov	r3, r1
 8005c2c:	4611      	mov	r1, r2
  pCmdBuffer->cmdserial.cmd.cmdcode = opcode;
 8005c2e:	4a08      	ldr	r2, [pc, #32]	; (8005c50 <SendCmd+0x28>)
 8005c30:	6814      	ldr	r4, [r2, #0]
 8005c32:	f8a4 0009 	strh.w	r0, [r4, #9]
  pCmdBuffer->cmdserial.cmd.plen = plen;
 8005c36:	72e3      	strb	r3, [r4, #11]
  memcpy( pCmdBuffer->cmdserial.cmd.payload, param, plen );
 8005c38:	461a      	mov	r2, r3
 8005c3a:	f104 000c 	add.w	r0, r4, #12
 8005c3e:	f001 fb19 	bl	8007274 <memcpy>
  hciContext.io.Send(0,0);
 8005c42:	4b04      	ldr	r3, [pc, #16]	; (8005c54 <SendCmd+0x2c>)
 8005c44:	691b      	ldr	r3, [r3, #16]
 8005c46:	2100      	movs	r1, #0
 8005c48:	4608      	mov	r0, r1
 8005c4a:	4798      	blx	r3
}
 8005c4c:	bd10      	pop	{r4, pc}
 8005c4e:	bf00      	nop
 8005c50:	20000150 	.word	0x20000150
 8005c54:	2000023c 	.word	0x2000023c

08005c58 <hci_init>:
{
 8005c58:	b510      	push	{r4, lr}
 8005c5a:	460c      	mov	r4, r1
  StatusNotCallBackFunction = ((HCI_TL_HciInitConf_t *)pConf)->StatusNotCallBack;
 8005c5c:	684a      	ldr	r2, [r1, #4]
 8005c5e:	4b05      	ldr	r3, [pc, #20]	; (8005c74 <hci_init+0x1c>)
 8005c60:	601a      	str	r2, [r3, #0]
  hciContext.UserEvtRx = UserEvtRx;
 8005c62:	4b05      	ldr	r3, [pc, #20]	; (8005c78 <hci_init+0x20>)
 8005c64:	61d8      	str	r0, [r3, #28]
  hci_register_io_bus (&hciContext.io);
 8005c66:	4618      	mov	r0, r3
 8005c68:	f000 f8b4 	bl	8005dd4 <hci_register_io_bus>
  TlInit((TL_CmdPacket_t *)(((HCI_TL_HciInitConf_t *)pConf)->p_cmdbuffer));
 8005c6c:	6820      	ldr	r0, [r4, #0]
 8005c6e:	f7ff ffbb 	bl	8005be8 <TlInit>
}
 8005c72:	bd10      	pop	{r4, pc}
 8005c74:	20000238 	.word	0x20000238
 8005c78:	2000023c 	.word	0x2000023c

08005c7c <hci_user_evt_proc>:
{
 8005c7c:	b500      	push	{lr}
 8005c7e:	b085      	sub	sp, #20
  if((LST_is_empty(&HciAsynchEventQueue) == FALSE) && (UserEventFlow != HCI_TL_UserEventFlow_Disable))
 8005c80:	481b      	ldr	r0, [pc, #108]	; (8005cf0 <hci_user_evt_proc+0x74>)
 8005c82:	f000 fb46 	bl	8006312 <LST_is_empty>
 8005c86:	b910      	cbnz	r0, 8005c8e <hci_user_evt_proc+0x12>
 8005c88:	4b1a      	ldr	r3, [pc, #104]	; (8005cf4 <hci_user_evt_proc+0x78>)
 8005c8a:	7b1b      	ldrb	r3, [r3, #12]
 8005c8c:	b94b      	cbnz	r3, 8005ca2 <hci_user_evt_proc+0x26>
  if((LST_is_empty(&HciAsynchEventQueue) == FALSE) && (UserEventFlow != HCI_TL_UserEventFlow_Disable))
 8005c8e:	4818      	ldr	r0, [pc, #96]	; (8005cf0 <hci_user_evt_proc+0x74>)
 8005c90:	f000 fb3f 	bl	8006312 <LST_is_empty>
 8005c94:	b910      	cbnz	r0, 8005c9c <hci_user_evt_proc+0x20>
 8005c96:	4b17      	ldr	r3, [pc, #92]	; (8005cf4 <hci_user_evt_proc+0x78>)
 8005c98:	7b1b      	ldrb	r3, [r3, #12]
 8005c9a:	bb23      	cbnz	r3, 8005ce6 <hci_user_evt_proc+0x6a>
}
 8005c9c:	b005      	add	sp, #20
 8005c9e:	f85d fb04 	ldr.w	pc, [sp], #4
    LST_remove_head ( &HciAsynchEventQueue, (tListNode **)&phcievtbuffer );
 8005ca2:	a903      	add	r1, sp, #12
 8005ca4:	4812      	ldr	r0, [pc, #72]	; (8005cf0 <hci_user_evt_proc+0x74>)
 8005ca6:	f000 fb64 	bl	8006372 <LST_remove_head>
    if (hciContext.UserEvtRx != NULL)
 8005caa:	4b13      	ldr	r3, [pc, #76]	; (8005cf8 <hci_user_evt_proc+0x7c>)
 8005cac:	69db      	ldr	r3, [r3, #28]
 8005cae:	b18b      	cbz	r3, 8005cd4 <hci_user_evt_proc+0x58>
      UserEvtRxParam.pckt = phcievtbuffer;
 8005cb0:	9a03      	ldr	r2, [sp, #12]
 8005cb2:	9202      	str	r2, [sp, #8]
      UserEvtRxParam.status = HCI_TL_UserEventFlow_Enable;
 8005cb4:	2201      	movs	r2, #1
 8005cb6:	f88d 2004 	strb.w	r2, [sp, #4]
      hciContext.UserEvtRx((void *)&UserEvtRxParam);
 8005cba:	a801      	add	r0, sp, #4
 8005cbc:	4798      	blx	r3
      UserEventFlow = UserEvtRxParam.status;
 8005cbe:	f89d 2004 	ldrb.w	r2, [sp, #4]
 8005cc2:	4b0c      	ldr	r3, [pc, #48]	; (8005cf4 <hci_user_evt_proc+0x78>)
 8005cc4:	731a      	strb	r2, [r3, #12]
    if(UserEventFlow != HCI_TL_UserEventFlow_Disable)
 8005cc6:	4b0b      	ldr	r3, [pc, #44]	; (8005cf4 <hci_user_evt_proc+0x78>)
 8005cc8:	7b1b      	ldrb	r3, [r3, #12]
 8005cca:	b13b      	cbz	r3, 8005cdc <hci_user_evt_proc+0x60>
      TL_MM_EvtDone( phcievtbuffer );
 8005ccc:	9803      	ldr	r0, [sp, #12]
 8005cce:	f000 fa65 	bl	800619c <TL_MM_EvtDone>
 8005cd2:	e7dc      	b.n	8005c8e <hci_user_evt_proc+0x12>
      UserEventFlow = HCI_TL_UserEventFlow_Enable;
 8005cd4:	4b07      	ldr	r3, [pc, #28]	; (8005cf4 <hci_user_evt_proc+0x78>)
 8005cd6:	2201      	movs	r2, #1
 8005cd8:	731a      	strb	r2, [r3, #12]
 8005cda:	e7f4      	b.n	8005cc6 <hci_user_evt_proc+0x4a>
      LST_insert_head ( &HciAsynchEventQueue, (tListNode *)phcievtbuffer );
 8005cdc:	9903      	ldr	r1, [sp, #12]
 8005cde:	4804      	ldr	r0, [pc, #16]	; (8005cf0 <hci_user_evt_proc+0x74>)
 8005ce0:	f000 fb23 	bl	800632a <LST_insert_head>
 8005ce4:	e7d3      	b.n	8005c8e <hci_user_evt_proc+0x12>
    hci_notify_asynch_evt((void*) &HciAsynchEventQueue);
 8005ce6:	4802      	ldr	r0, [pc, #8]	; (8005cf0 <hci_user_evt_proc+0x74>)
 8005ce8:	f000 ff2e 	bl	8006b48 <hci_notify_asynch_evt>
  return;
 8005cec:	e7d6      	b.n	8005c9c <hci_user_evt_proc+0x20>
 8005cee:	bf00      	nop
 8005cf0:	20000154 	.word	0x20000154
 8005cf4:	20000150 	.word	0x20000150
 8005cf8:	2000023c 	.word	0x2000023c

08005cfc <hci_send_req>:
{
 8005cfc:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005cfe:	b083      	sub	sp, #12
 8005d00:	4607      	mov	r7, r0
  NotifyCmdStatus(HCI_TL_CmdBusy);
 8005d02:	2000      	movs	r0, #0
 8005d04:	f7ff ff60 	bl	8005bc8 <NotifyCmdStatus>
  opcode = ((p_cmd->ocf) & 0x03ff) | ((p_cmd->ogf) << 10);
 8005d08:	f9b7 5002 	ldrsh.w	r5, [r7, #2]
 8005d0c:	f3c5 0509 	ubfx	r5, r5, #0, #10
 8005d10:	883b      	ldrh	r3, [r7, #0]
 8005d12:	ea45 2583 	orr.w	r5, r5, r3, lsl #10
 8005d16:	b2ad      	uxth	r5, r5
  SendCmd(opcode, p_cmd->clen, p_cmd->cparam);
 8005d18:	68ba      	ldr	r2, [r7, #8]
 8005d1a:	7b39      	ldrb	r1, [r7, #12]
 8005d1c:	4628      	mov	r0, r5
 8005d1e:	f7ff ff83 	bl	8005c28 <SendCmd>
  local_cmd_status = HCI_TL_CmdBusy;
 8005d22:	2600      	movs	r6, #0
  while(local_cmd_status == HCI_TL_CmdBusy)
 8005d24:	2e00      	cmp	r6, #0
 8005d26:	d133      	bne.n	8005d90 <hci_send_req+0x94>
    hci_cmd_resp_wait(HCI_TL_DEFAULT_TIMEOUT);
 8005d28:	f248 00e8 	movw	r0, #33000	; 0x80e8
 8005d2c:	f000 ff17 	bl	8006b5e <hci_cmd_resp_wait>
    while(LST_is_empty(&HciCmdEventQueue) == FALSE)
 8005d30:	e005      	b.n	8005d3e <hci_send_req+0x42>
        if(pcommand_status_event->cmdcode == opcode)
 8005d32:	f8b4 300d 	ldrh.w	r3, [r4, #13]
 8005d36:	42ab      	cmp	r3, r5
 8005d38:	d016      	beq.n	8005d68 <hci_send_req+0x6c>
        if(pcommand_status_event->numcmd != 0)
 8005d3a:	7b23      	ldrb	r3, [r4, #12]
 8005d3c:	bb33      	cbnz	r3, 8005d8c <hci_send_req+0x90>
    while(LST_is_empty(&HciCmdEventQueue) == FALSE)
 8005d3e:	4817      	ldr	r0, [pc, #92]	; (8005d9c <hci_send_req+0xa0>)
 8005d40:	f000 fae7 	bl	8006312 <LST_is_empty>
 8005d44:	2800      	cmp	r0, #0
 8005d46:	d1ed      	bne.n	8005d24 <hci_send_req+0x28>
      LST_remove_head (&HciCmdEventQueue, (tListNode **)&pevtpacket);
 8005d48:	a901      	add	r1, sp, #4
 8005d4a:	4814      	ldr	r0, [pc, #80]	; (8005d9c <hci_send_req+0xa0>)
 8005d4c:	f000 fb11 	bl	8006372 <LST_remove_head>
      if(pevtpacket->evtserial.evt.evtcode == TL_BLEEVT_CS_OPCODE)
 8005d50:	9c01      	ldr	r4, [sp, #4]
 8005d52:	7a63      	ldrb	r3, [r4, #9]
 8005d54:	2b0f      	cmp	r3, #15
 8005d56:	d0ec      	beq.n	8005d32 <hci_send_req+0x36>
        if(pcommand_complete_event->cmdcode == opcode)
 8005d58:	89a3      	ldrh	r3, [r4, #12]
 8005d5a:	42ab      	cmp	r3, r5
 8005d5c:	d008      	beq.n	8005d70 <hci_send_req+0x74>
        if(pcommand_complete_event->numcmd != 0)
 8005d5e:	7ae3      	ldrb	r3, [r4, #11]
 8005d60:	2b00      	cmp	r3, #0
 8005d62:	d0ec      	beq.n	8005d3e <hci_send_req+0x42>
          local_cmd_status = HCI_TL_CmdAvailable;
 8005d64:	2601      	movs	r6, #1
 8005d66:	e7ea      	b.n	8005d3e <hci_send_req+0x42>
          *(uint8_t *)(p_cmd->rparam) = pcommand_status_event->status;
 8005d68:	693b      	ldr	r3, [r7, #16]
 8005d6a:	7ae2      	ldrb	r2, [r4, #11]
 8005d6c:	701a      	strb	r2, [r3, #0]
 8005d6e:	e7e4      	b.n	8005d3a <hci_send_req+0x3e>
          hci_cmd_complete_return_parameters_length = pevtpacket->evtserial.evt.plen - TL_EVT_HDR_SIZE;
 8005d70:	7aa2      	ldrb	r2, [r4, #10]
 8005d72:	3a03      	subs	r2, #3
 8005d74:	b2d2      	uxtb	r2, r2
          p_cmd->rlen = MIN(hci_cmd_complete_return_parameters_length, p_cmd->rlen);
 8005d76:	697b      	ldr	r3, [r7, #20]
 8005d78:	429a      	cmp	r2, r3
 8005d7a:	bfa8      	it	ge
 8005d7c:	461a      	movge	r2, r3
 8005d7e:	617a      	str	r2, [r7, #20]
          memcpy(p_cmd->rparam, pcommand_complete_event->payload, p_cmd->rlen);
 8005d80:	f104 010e 	add.w	r1, r4, #14
 8005d84:	6938      	ldr	r0, [r7, #16]
 8005d86:	f001 fa75 	bl	8007274 <memcpy>
 8005d8a:	e7e8      	b.n	8005d5e <hci_send_req+0x62>
          local_cmd_status = HCI_TL_CmdAvailable;
 8005d8c:	2601      	movs	r6, #1
 8005d8e:	e7d6      	b.n	8005d3e <hci_send_req+0x42>
  NotifyCmdStatus(HCI_TL_CmdAvailable);
 8005d90:	2001      	movs	r0, #1
 8005d92:	f7ff ff19 	bl	8005bc8 <NotifyCmdStatus>
}
 8005d96:	2000      	movs	r0, #0
 8005d98:	b003      	add	sp, #12
 8005d9a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005d9c:	20000230 	.word	0x20000230

08005da0 <TlEvtReceived>:

static void TlEvtReceived(TL_EvtPacket_t *hcievt)
{
 8005da0:	b510      	push	{r4, lr}
 8005da2:	4601      	mov	r1, r0
  if ( ((hcievt->evtserial.evt.evtcode) == TL_BLEEVT_CS_OPCODE) || ((hcievt->evtserial.evt.evtcode) == TL_BLEEVT_CC_OPCODE ) )
 8005da4:	7a43      	ldrb	r3, [r0, #9]
 8005da6:	3b0e      	subs	r3, #14
 8005da8:	b2db      	uxtb	r3, r3
 8005daa:	2b01      	cmp	r3, #1
 8005dac:	d907      	bls.n	8005dbe <TlEvtReceived+0x1e>
    LST_insert_tail(&HciCmdEventQueue, (tListNode *)hcievt);
    hci_cmd_resp_release(0); /**< Notify the application a full Cmd Event has been received */
  }
  else
  {
    LST_insert_tail(&HciAsynchEventQueue, (tListNode *)hcievt);
 8005dae:	4c07      	ldr	r4, [pc, #28]	; (8005dcc <TlEvtReceived+0x2c>)
 8005db0:	4620      	mov	r0, r4
 8005db2:	f000 fac6 	bl	8006342 <LST_insert_tail>
    hci_notify_asynch_evt((void*) &HciAsynchEventQueue); /**< Notify the application a full HCI event has been received */
 8005db6:	4620      	mov	r0, r4
 8005db8:	f000 fec6 	bl	8006b48 <hci_notify_asynch_evt>
  }

  return;
}
 8005dbc:	bd10      	pop	{r4, pc}
    LST_insert_tail(&HciCmdEventQueue, (tListNode *)hcievt);
 8005dbe:	4804      	ldr	r0, [pc, #16]	; (8005dd0 <TlEvtReceived+0x30>)
 8005dc0:	f000 fabf 	bl	8006342 <LST_insert_tail>
    hci_cmd_resp_release(0); /**< Notify the application a full Cmd Event has been received */
 8005dc4:	2000      	movs	r0, #0
 8005dc6:	f000 fec5 	bl	8006b54 <hci_cmd_resp_release>
 8005dca:	e7f7      	b.n	8005dbc <TlEvtReceived+0x1c>
 8005dcc:	20000154 	.word	0x20000154
 8005dd0:	20000230 	.word	0x20000230

08005dd4 <hci_register_io_bus>:


void hci_register_io_bus(tHciIO* fops)
{
  /* Register IO bus services */
  fops->Init    = TL_BLE_Init;
 8005dd4:	4b02      	ldr	r3, [pc, #8]	; (8005de0 <hci_register_io_bus+0xc>)
 8005dd6:	6003      	str	r3, [r0, #0]
  fops->Send    = TL_BLE_SendCmd;
 8005dd8:	4b02      	ldr	r3, [pc, #8]	; (8005de4 <hci_register_io_bus+0x10>)
 8005dda:	6103      	str	r3, [r0, #16]

  return;
}
 8005ddc:	4770      	bx	lr
 8005dde:	bf00      	nop
 8005de0:	0800601d 	.word	0x0800601d
 8005de4:	08006065 	.word	0x08006065

08005de8 <Cmd_SetStatus>:

  return;
}

static void Cmd_SetStatus(SHCI_TL_CmdStatus_t shcicmdstatus)
{
 8005de8:	b508      	push	{r3, lr}
  if(shcicmdstatus == SHCI_TL_CmdBusy)
 8005dea:	b938      	cbnz	r0, 8005dfc <Cmd_SetStatus+0x14>
  {
    if(StatusNotCallBackFunction != 0)
 8005dec:	4b08      	ldr	r3, [pc, #32]	; (8005e10 <Cmd_SetStatus+0x28>)
 8005dee:	681b      	ldr	r3, [r3, #0]
 8005df0:	b103      	cbz	r3, 8005df4 <Cmd_SetStatus+0xc>
    {
      StatusNotCallBackFunction( SHCI_TL_CmdBusy );
 8005df2:	4798      	blx	r3
    }
    SHCICmdStatus = SHCI_TL_CmdBusy;
 8005df4:	4b07      	ldr	r3, [pc, #28]	; (8005e14 <Cmd_SetStatus+0x2c>)
 8005df6:	2200      	movs	r2, #0
 8005df8:	701a      	strb	r2, [r3, #0]
      StatusNotCallBackFunction( SHCI_TL_CmdAvailable );
    }
  }

  return;
}
 8005dfa:	bd08      	pop	{r3, pc}
    SHCICmdStatus = SHCI_TL_CmdAvailable;
 8005dfc:	4b05      	ldr	r3, [pc, #20]	; (8005e14 <Cmd_SetStatus+0x2c>)
 8005dfe:	2201      	movs	r2, #1
 8005e00:	701a      	strb	r2, [r3, #0]
    if(StatusNotCallBackFunction != 0)
 8005e02:	4b03      	ldr	r3, [pc, #12]	; (8005e10 <Cmd_SetStatus+0x28>)
 8005e04:	681b      	ldr	r3, [r3, #0]
 8005e06:	2b00      	cmp	r3, #0
 8005e08:	d0f7      	beq.n	8005dfa <Cmd_SetStatus+0x12>
      StatusNotCallBackFunction( SHCI_TL_CmdAvailable );
 8005e0a:	4610      	mov	r0, r2
 8005e0c:	4798      	blx	r3
  return;
 8005e0e:	e7f4      	b.n	8005dfa <Cmd_SetStatus+0x12>
 8005e10:	2000025c 	.word	0x2000025c
 8005e14:	2000016c 	.word	0x2000016c

08005e18 <TlInit>:
{
 8005e18:	b530      	push	{r4, r5, lr}
 8005e1a:	b085      	sub	sp, #20
 8005e1c:	4604      	mov	r4, r0
  pCmdBuffer = p_cmdbuffer;
 8005e1e:	4d0b      	ldr	r5, [pc, #44]	; (8005e4c <TlInit+0x34>)
 8005e20:	6068      	str	r0, [r5, #4]
  LST_init_head (&SHciAsynchEventQueue);
 8005e22:	f105 0008 	add.w	r0, r5, #8
 8005e26:	f000 fa71 	bl	800630c <LST_init_head>
  Cmd_SetStatus(SHCI_TL_CmdAvailable);
 8005e2a:	2001      	movs	r0, #1
 8005e2c:	f7ff ffdc 	bl	8005de8 <Cmd_SetStatus>
  SHCI_TL_UserEventFlow = SHCI_TL_UserEventFlow_Enable;
 8005e30:	2301      	movs	r3, #1
 8005e32:	742b      	strb	r3, [r5, #16]
  if (shciContext.io.Init)
 8005e34:	4b06      	ldr	r3, [pc, #24]	; (8005e50 <TlInit+0x38>)
 8005e36:	681b      	ldr	r3, [r3, #0]
 8005e38:	b133      	cbz	r3, 8005e48 <TlInit+0x30>
    Conf.p_cmdbuffer = (uint8_t *)p_cmdbuffer;
 8005e3a:	9403      	str	r4, [sp, #12]
    Conf.IoBusCallBackCmdEvt = TlCmdEvtReceived;
 8005e3c:	4a05      	ldr	r2, [pc, #20]	; (8005e54 <TlInit+0x3c>)
 8005e3e:	9201      	str	r2, [sp, #4]
    Conf.IoBusCallBackUserEvt = TlUserEvtReceived;
 8005e40:	4a05      	ldr	r2, [pc, #20]	; (8005e58 <TlInit+0x40>)
 8005e42:	9202      	str	r2, [sp, #8]
    shciContext.io.Init(&Conf);
 8005e44:	a801      	add	r0, sp, #4
 8005e46:	4798      	blx	r3
}
 8005e48:	b005      	add	sp, #20
 8005e4a:	bd30      	pop	{r4, r5, pc}
 8005e4c:	2000016c 	.word	0x2000016c
 8005e50:	20000260 	.word	0x20000260
 8005e54:	08005f79 	.word	0x08005f79
 8005e58:	08005e5d 	.word	0x08005e5d

08005e5c <TlUserEvtReceived>:

  return;
}

static void TlUserEvtReceived(TL_EvtPacket_t *shcievt)
{
 8005e5c:	b510      	push	{r4, lr}
 8005e5e:	4601      	mov	r1, r0
  LST_insert_tail(&SHciAsynchEventQueue, (tListNode *)shcievt);
 8005e60:	4c03      	ldr	r4, [pc, #12]	; (8005e70 <TlUserEvtReceived+0x14>)
 8005e62:	4620      	mov	r0, r4
 8005e64:	f000 fa6d 	bl	8006342 <LST_insert_tail>
  shci_notify_asynch_evt((void*) &SHciAsynchEventQueue); /**< Notify the application a full HCI event has been received */
 8005e68:	4620      	mov	r0, r4
 8005e6a:	f7fa fe12 	bl	8000a92 <shci_notify_asynch_evt>

  return;
}
 8005e6e:	bd10      	pop	{r4, pc}
 8005e70:	20000174 	.word	0x20000174

08005e74 <shci_init>:
{
 8005e74:	b510      	push	{r4, lr}
 8005e76:	460c      	mov	r4, r1
  StatusNotCallBackFunction = ((SHCI_TL_HciInitConf_t *)pConf)->StatusNotCallBack;
 8005e78:	684a      	ldr	r2, [r1, #4]
 8005e7a:	4b05      	ldr	r3, [pc, #20]	; (8005e90 <shci_init+0x1c>)
 8005e7c:	601a      	str	r2, [r3, #0]
  shciContext.UserEvtRx = UserEvtRx;
 8005e7e:	4b05      	ldr	r3, [pc, #20]	; (8005e94 <shci_init+0x20>)
 8005e80:	61d8      	str	r0, [r3, #28]
  shci_register_io_bus (&shciContext.io);
 8005e82:	4618      	mov	r0, r3
 8005e84:	f000 f87e 	bl	8005f84 <shci_register_io_bus>
  TlInit((TL_CmdPacket_t *)(((SHCI_TL_HciInitConf_t *)pConf)->p_cmdbuffer));
 8005e88:	6820      	ldr	r0, [r4, #0]
 8005e8a:	f7ff ffc5 	bl	8005e18 <TlInit>
}
 8005e8e:	bd10      	pop	{r4, pc}
 8005e90:	2000025c 	.word	0x2000025c
 8005e94:	20000260 	.word	0x20000260

08005e98 <shci_user_evt_proc>:
{
 8005e98:	b500      	push	{lr}
 8005e9a:	b085      	sub	sp, #20
  if((LST_is_empty(&SHciAsynchEventQueue) == FALSE) && (SHCI_TL_UserEventFlow != SHCI_TL_UserEventFlow_Disable))
 8005e9c:	481b      	ldr	r0, [pc, #108]	; (8005f0c <shci_user_evt_proc+0x74>)
 8005e9e:	f000 fa38 	bl	8006312 <LST_is_empty>
 8005ea2:	b910      	cbnz	r0, 8005eaa <shci_user_evt_proc+0x12>
 8005ea4:	4b1a      	ldr	r3, [pc, #104]	; (8005f10 <shci_user_evt_proc+0x78>)
 8005ea6:	7c1b      	ldrb	r3, [r3, #16]
 8005ea8:	b94b      	cbnz	r3, 8005ebe <shci_user_evt_proc+0x26>
  if((LST_is_empty(&SHciAsynchEventQueue) == FALSE) && (SHCI_TL_UserEventFlow != SHCI_TL_UserEventFlow_Disable))
 8005eaa:	4818      	ldr	r0, [pc, #96]	; (8005f0c <shci_user_evt_proc+0x74>)
 8005eac:	f000 fa31 	bl	8006312 <LST_is_empty>
 8005eb0:	b910      	cbnz	r0, 8005eb8 <shci_user_evt_proc+0x20>
 8005eb2:	4b17      	ldr	r3, [pc, #92]	; (8005f10 <shci_user_evt_proc+0x78>)
 8005eb4:	7c1b      	ldrb	r3, [r3, #16]
 8005eb6:	bb23      	cbnz	r3, 8005f02 <shci_user_evt_proc+0x6a>
}
 8005eb8:	b005      	add	sp, #20
 8005eba:	f85d fb04 	ldr.w	pc, [sp], #4
    LST_remove_head ( &SHciAsynchEventQueue, (tListNode **)&phcievtbuffer );
 8005ebe:	a903      	add	r1, sp, #12
 8005ec0:	4812      	ldr	r0, [pc, #72]	; (8005f0c <shci_user_evt_proc+0x74>)
 8005ec2:	f000 fa56 	bl	8006372 <LST_remove_head>
    if (shciContext.UserEvtRx != NULL)
 8005ec6:	4b13      	ldr	r3, [pc, #76]	; (8005f14 <shci_user_evt_proc+0x7c>)
 8005ec8:	69db      	ldr	r3, [r3, #28]
 8005eca:	b18b      	cbz	r3, 8005ef0 <shci_user_evt_proc+0x58>
      UserEvtRxParam.pckt = phcievtbuffer;
 8005ecc:	9a03      	ldr	r2, [sp, #12]
 8005ece:	9202      	str	r2, [sp, #8]
      UserEvtRxParam.status = SHCI_TL_UserEventFlow_Enable;
 8005ed0:	2201      	movs	r2, #1
 8005ed2:	f88d 2004 	strb.w	r2, [sp, #4]
      shciContext.UserEvtRx((void *)&UserEvtRxParam);
 8005ed6:	a801      	add	r0, sp, #4
 8005ed8:	4798      	blx	r3
      SHCI_TL_UserEventFlow = UserEvtRxParam.status;
 8005eda:	f89d 2004 	ldrb.w	r2, [sp, #4]
 8005ede:	4b0c      	ldr	r3, [pc, #48]	; (8005f10 <shci_user_evt_proc+0x78>)
 8005ee0:	741a      	strb	r2, [r3, #16]
    if(SHCI_TL_UserEventFlow != SHCI_TL_UserEventFlow_Disable)
 8005ee2:	4b0b      	ldr	r3, [pc, #44]	; (8005f10 <shci_user_evt_proc+0x78>)
 8005ee4:	7c1b      	ldrb	r3, [r3, #16]
 8005ee6:	b13b      	cbz	r3, 8005ef8 <shci_user_evt_proc+0x60>
      TL_MM_EvtDone( phcievtbuffer );
 8005ee8:	9803      	ldr	r0, [sp, #12]
 8005eea:	f000 f957 	bl	800619c <TL_MM_EvtDone>
 8005eee:	e7dc      	b.n	8005eaa <shci_user_evt_proc+0x12>
      SHCI_TL_UserEventFlow = SHCI_TL_UserEventFlow_Enable;
 8005ef0:	4b07      	ldr	r3, [pc, #28]	; (8005f10 <shci_user_evt_proc+0x78>)
 8005ef2:	2201      	movs	r2, #1
 8005ef4:	741a      	strb	r2, [r3, #16]
 8005ef6:	e7f4      	b.n	8005ee2 <shci_user_evt_proc+0x4a>
      LST_insert_head ( &SHciAsynchEventQueue, (tListNode *)phcievtbuffer );
 8005ef8:	9903      	ldr	r1, [sp, #12]
 8005efa:	4804      	ldr	r0, [pc, #16]	; (8005f0c <shci_user_evt_proc+0x74>)
 8005efc:	f000 fa15 	bl	800632a <LST_insert_head>
 8005f00:	e7d3      	b.n	8005eaa <shci_user_evt_proc+0x12>
    shci_notify_asynch_evt((void*) &SHciAsynchEventQueue);
 8005f02:	4802      	ldr	r0, [pc, #8]	; (8005f0c <shci_user_evt_proc+0x74>)
 8005f04:	f7fa fdc5 	bl	8000a92 <shci_notify_asynch_evt>
  return;
 8005f08:	e7d6      	b.n	8005eb8 <shci_user_evt_proc+0x20>
 8005f0a:	bf00      	nop
 8005f0c:	20000174 	.word	0x20000174
 8005f10:	2000016c 	.word	0x2000016c
 8005f14:	20000260 	.word	0x20000260

08005f18 <shci_send>:
{
 8005f18:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005f1c:	4607      	mov	r7, r0
 8005f1e:	460c      	mov	r4, r1
 8005f20:	4616      	mov	r6, r2
 8005f22:	461d      	mov	r5, r3
  Cmd_SetStatus(SHCI_TL_CmdBusy);
 8005f24:	2000      	movs	r0, #0
 8005f26:	f7ff ff5f 	bl	8005de8 <Cmd_SetStatus>
  pCmdBuffer->cmdserial.cmd.cmdcode = cmd_code;
 8005f2a:	f8df 8048 	ldr.w	r8, [pc, #72]	; 8005f74 <shci_send+0x5c>
 8005f2e:	f8d8 0004 	ldr.w	r0, [r8, #4]
 8005f32:	f8a0 7009 	strh.w	r7, [r0, #9]
  pCmdBuffer->cmdserial.cmd.plen = len_cmd_payload;
 8005f36:	72c4      	strb	r4, [r0, #11]
  memcpy(pCmdBuffer->cmdserial.cmd.payload, p_cmd_payload, len_cmd_payload );
 8005f38:	4622      	mov	r2, r4
 8005f3a:	4631      	mov	r1, r6
 8005f3c:	300c      	adds	r0, #12
 8005f3e:	f001 f999 	bl	8007274 <memcpy>
  shciContext.io.Send(0,0);
 8005f42:	4b0b      	ldr	r3, [pc, #44]	; (8005f70 <shci_send+0x58>)
 8005f44:	691b      	ldr	r3, [r3, #16]
 8005f46:	2100      	movs	r1, #0
 8005f48:	4608      	mov	r0, r1
 8005f4a:	4798      	blx	r3
  shci_cmd_resp_wait(SHCI_TL_DEFAULT_TIMEOUT);
 8005f4c:	f248 00e8 	movw	r0, #33000	; 0x80e8
 8005f50:	f7fa fdaa 	bl	8000aa8 <shci_cmd_resp_wait>
  memcpy( &(p_rsp->evtserial), pCmdBuffer, ((TL_EvtSerial_t*)pCmdBuffer)->evt.plen + TL_EVT_HDR_SIZE );
 8005f54:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8005f58:	788a      	ldrb	r2, [r1, #2]
 8005f5a:	3203      	adds	r2, #3
 8005f5c:	f105 0008 	add.w	r0, r5, #8
 8005f60:	f001 f988 	bl	8007274 <memcpy>
  Cmd_SetStatus(SHCI_TL_CmdAvailable);
 8005f64:	2001      	movs	r0, #1
 8005f66:	f7ff ff3f 	bl	8005de8 <Cmd_SetStatus>
}
 8005f6a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005f6e:	bf00      	nop
 8005f70:	20000260 	.word	0x20000260
 8005f74:	2000016c 	.word	0x2000016c

08005f78 <TlCmdEvtReceived>:
{
 8005f78:	b508      	push	{r3, lr}
  shci_cmd_resp_release(0); /**< Notify the application the Cmd response has been received */
 8005f7a:	2000      	movs	r0, #0
 8005f7c:	f7fa fd8f 	bl	8000a9e <shci_cmd_resp_release>
}
 8005f80:	bd08      	pop	{r3, pc}
	...

08005f84 <shci_register_io_bus>:


void shci_register_io_bus(tSHciIO* fops)
{
  /* Register IO bus services */
  fops->Init    = TL_SYS_Init;
 8005f84:	4b02      	ldr	r3, [pc, #8]	; (8005f90 <shci_register_io_bus+0xc>)
 8005f86:	6003      	str	r3, [r0, #0]
  fops->Send    = TL_SYS_SendCmd;
 8005f88:	4b02      	ldr	r3, [pc, #8]	; (8005f94 <shci_register_io_bus+0x10>)
 8005f8a:	6103      	str	r3, [r0, #16]

  return;
}
 8005f8c:	4770      	bx	lr
 8005f8e:	bf00      	nop
 8005f90:	080060bd 	.word	0x080060bd
 8005f94:	080060f9 	.word	0x080060f9

08005f98 <SendFreeBuf>:

  return;
}

static void SendFreeBuf( void )
{
 8005f98:	b500      	push	{lr}
 8005f9a:	b083      	sub	sp, #12
  tListNode *p_node;

  while ( FALSE == LST_is_empty (&LocalFreeBufQueue) )
 8005f9c:	4808      	ldr	r0, [pc, #32]	; (8005fc0 <SendFreeBuf+0x28>)
 8005f9e:	f000 f9b8 	bl	8006312 <LST_is_empty>
 8005fa2:	b950      	cbnz	r0, 8005fba <SendFreeBuf+0x22>
  {
    LST_remove_head( &LocalFreeBufQueue, (tListNode **)&p_node );
 8005fa4:	a901      	add	r1, sp, #4
 8005fa6:	4806      	ldr	r0, [pc, #24]	; (8005fc0 <SendFreeBuf+0x28>)
 8005fa8:	f000 f9e3 	bl	8006372 <LST_remove_head>
    LST_insert_tail( (tListNode*)(TL_RefTable.p_mem_manager_table->pevt_free_buffer_queue), p_node );
 8005fac:	4b05      	ldr	r3, [pc, #20]	; (8005fc4 <SendFreeBuf+0x2c>)
 8005fae:	691b      	ldr	r3, [r3, #16]
 8005fb0:	9901      	ldr	r1, [sp, #4]
 8005fb2:	6918      	ldr	r0, [r3, #16]
 8005fb4:	f000 f9c5 	bl	8006342 <LST_insert_tail>
 8005fb8:	e7f0      	b.n	8005f9c <SendFreeBuf+0x4>
  }

  return;
}
 8005fba:	b003      	add	sp, #12
 8005fbc:	f85d fb04 	ldr.w	pc, [sp], #4
 8005fc0:	20000288 	.word	0x20000288
 8005fc4:	20030000 	.word	0x20030000

08005fc8 <TL_Enable>:
{
 8005fc8:	b508      	push	{r3, lr}
  HW_IPCC_Enable();
 8005fca:	f000 fead 	bl	8006d28 <HW_IPCC_Enable>
}
 8005fce:	bd08      	pop	{r3, pc}

08005fd0 <TL_Init>:
{
 8005fd0:	b508      	push	{r3, lr}
  TL_RefTable.p_device_info_table = &TL_DeviceInfoTable;
 8005fd2:	4a10      	ldr	r2, [pc, #64]	; (8006014 <TL_Init+0x44>)
 8005fd4:	4b10      	ldr	r3, [pc, #64]	; (8006018 <TL_Init+0x48>)
 8005fd6:	6013      	str	r3, [r2, #0]
  TL_RefTable.p_ble_table = &TL_BleTable;
 8005fd8:	f103 0120 	add.w	r1, r3, #32
 8005fdc:	6051      	str	r1, [r2, #4]
  TL_RefTable.p_thread_table = &TL_ThreadTable;
 8005fde:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8005fe2:	6091      	str	r1, [r2, #8]
  TL_RefTable.p_lld_tests_table = &TL_LldTestsTable;
 8005fe4:	f103 013c 	add.w	r1, r3, #60	; 0x3c
 8005fe8:	6211      	str	r1, [r2, #32]
  TL_RefTable.p_ble_lld_table = &TL_BleLldTable;
 8005fea:	f103 0144 	add.w	r1, r3, #68	; 0x44
 8005fee:	6251      	str	r1, [r2, #36]	; 0x24
  TL_RefTable.p_sys_table = &TL_SysTable;
 8005ff0:	f103 014c 	add.w	r1, r3, #76	; 0x4c
 8005ff4:	60d1      	str	r1, [r2, #12]
  TL_RefTable.p_mem_manager_table = &TL_MemManagerTable;
 8005ff6:	f103 0154 	add.w	r1, r3, #84	; 0x54
 8005ffa:	6111      	str	r1, [r2, #16]
  TL_RefTable.p_traces_table = &TL_TracesTable;
 8005ffc:	f103 0170 	add.w	r1, r3, #112	; 0x70
 8006000:	6151      	str	r1, [r2, #20]
  TL_RefTable.p_mac_802_15_4_table = &TL_Mac_802_15_4_Table;
 8006002:	f103 0174 	add.w	r1, r3, #116	; 0x74
 8006006:	6191      	str	r1, [r2, #24]
  TL_RefTable.p_zigbee_table = &TL_Zigbee_Table;
 8006008:	3380      	adds	r3, #128	; 0x80
 800600a:	61d3      	str	r3, [r2, #28]
  HW_IPCC_Init();
 800600c:	f000 feb4 	bl	8006d78 <HW_IPCC_Init>
}
 8006010:	bd08      	pop	{r3, pc}
 8006012:	bf00      	nop
 8006014:	20030000 	.word	0x20030000
 8006018:	20030028 	.word	0x20030028

0800601c <TL_BLE_Init>:
{
 800601c:	b538      	push	{r3, r4, r5, lr}
 800601e:	4604      	mov	r4, r0
  LST_init_head (&EvtQueue);
 8006020:	4d0b      	ldr	r5, [pc, #44]	; (8006050 <TL_BLE_Init+0x34>)
 8006022:	4628      	mov	r0, r5
 8006024:	f000 f972 	bl	800630c <LST_init_head>
  p_bletable = TL_RefTable.p_ble_table;
 8006028:	4b0a      	ldr	r3, [pc, #40]	; (8006054 <TL_BLE_Init+0x38>)
 800602a:	685b      	ldr	r3, [r3, #4]
  p_bletable->pcmd_buffer = pInitHciConf->p_cmdbuffer;
 800602c:	68a2      	ldr	r2, [r4, #8]
 800602e:	601a      	str	r2, [r3, #0]
  p_bletable->phci_acl_data_buffer = pInitHciConf->p_AclDataBuffer;
 8006030:	68e2      	ldr	r2, [r4, #12]
 8006032:	60da      	str	r2, [r3, #12]
  p_bletable->pcs_buffer  = (uint8_t*)CsBuffer;
 8006034:	4a08      	ldr	r2, [pc, #32]	; (8006058 <TL_BLE_Init+0x3c>)
 8006036:	605a      	str	r2, [r3, #4]
  p_bletable->pevt_queue  = (uint8_t*)&EvtQueue;
 8006038:	609d      	str	r5, [r3, #8]
  HW_IPCC_BLE_Init();
 800603a:	f000 febf 	bl	8006dbc <HW_IPCC_BLE_Init>
  BLE_IoBusEvtCallBackFunction = pInitHciConf->IoBusEvtCallBack;
 800603e:	6822      	ldr	r2, [r4, #0]
 8006040:	4b06      	ldr	r3, [pc, #24]	; (800605c <TL_BLE_Init+0x40>)
 8006042:	601a      	str	r2, [r3, #0]
  BLE_IoBusAclDataTxAck = pInitHciConf->IoBusAclDataTxAck;
 8006044:	6862      	ldr	r2, [r4, #4]
 8006046:	4b06      	ldr	r3, [pc, #24]	; (8006060 <TL_BLE_Init+0x44>)
 8006048:	601a      	str	r2, [r3, #0]
}
 800604a:	2000      	movs	r0, #0
 800604c:	bd38      	pop	{r3, r4, r5, pc}
 800604e:	bf00      	nop
 8006050:	200300b4 	.word	0x200300b4
 8006054:	20030000 	.word	0x20030000
 8006058:	20030a48 	.word	0x20030a48
 800605c:	20000284 	.word	0x20000284
 8006060:	20000280 	.word	0x20000280

08006064 <TL_BLE_SendCmd>:
{
 8006064:	b508      	push	{r3, lr}
  ((TL_CmdPacket_t*)(TL_RefTable.p_ble_table->pcmd_buffer))->cmdserial.type = TL_BLECMD_PKT_TYPE;
 8006066:	4b05      	ldr	r3, [pc, #20]	; (800607c <TL_BLE_SendCmd+0x18>)
 8006068:	685a      	ldr	r2, [r3, #4]
 800606a:	6812      	ldr	r2, [r2, #0]
 800606c:	2101      	movs	r1, #1
 800606e:	7211      	strb	r1, [r2, #8]
  OutputDbgTrace(TL_MB_BLE_CMD, TL_RefTable.p_ble_table->pcmd_buffer);
 8006070:	685b      	ldr	r3, [r3, #4]
  HW_IPCC_BLE_SendCmd();
 8006072:	f000 feab 	bl	8006dcc <HW_IPCC_BLE_SendCmd>
}
 8006076:	2000      	movs	r0, #0
 8006078:	bd08      	pop	{r3, pc}
 800607a:	bf00      	nop
 800607c:	20030000 	.word	0x20030000

08006080 <HW_IPCC_BLE_RxEvtNot>:
{
 8006080:	b500      	push	{lr}
 8006082:	b083      	sub	sp, #12
  while(LST_is_empty(&EvtQueue) == FALSE)
 8006084:	4807      	ldr	r0, [pc, #28]	; (80060a4 <HW_IPCC_BLE_RxEvtNot+0x24>)
 8006086:	f000 f944 	bl	8006312 <LST_is_empty>
 800608a:	b940      	cbnz	r0, 800609e <HW_IPCC_BLE_RxEvtNot+0x1e>
    LST_remove_head (&EvtQueue, (tListNode **)&phcievt);
 800608c:	a901      	add	r1, sp, #4
 800608e:	4805      	ldr	r0, [pc, #20]	; (80060a4 <HW_IPCC_BLE_RxEvtNot+0x24>)
 8006090:	f000 f96f 	bl	8006372 <LST_remove_head>
    BLE_IoBusEvtCallBackFunction(phcievt);
 8006094:	4b04      	ldr	r3, [pc, #16]	; (80060a8 <HW_IPCC_BLE_RxEvtNot+0x28>)
 8006096:	681b      	ldr	r3, [r3, #0]
 8006098:	9801      	ldr	r0, [sp, #4]
 800609a:	4798      	blx	r3
 800609c:	e7f2      	b.n	8006084 <HW_IPCC_BLE_RxEvtNot+0x4>
}
 800609e:	b003      	add	sp, #12
 80060a0:	f85d fb04 	ldr.w	pc, [sp], #4
 80060a4:	200300b4 	.word	0x200300b4
 80060a8:	20000284 	.word	0x20000284

080060ac <HW_IPCC_BLE_AclDataAckNot>:
{
 80060ac:	b508      	push	{r3, lr}
  BLE_IoBusAclDataTxAck( );
 80060ae:	4b02      	ldr	r3, [pc, #8]	; (80060b8 <HW_IPCC_BLE_AclDataAckNot+0xc>)
 80060b0:	681b      	ldr	r3, [r3, #0]
 80060b2:	4798      	blx	r3
}
 80060b4:	bd08      	pop	{r3, pc}
 80060b6:	bf00      	nop
 80060b8:	20000280 	.word	0x20000280

080060bc <TL_SYS_Init>:
{
 80060bc:	b538      	push	{r3, r4, r5, lr}
 80060be:	4604      	mov	r4, r0
  LST_init_head (&SystemEvtQueue);
 80060c0:	4d09      	ldr	r5, [pc, #36]	; (80060e8 <TL_SYS_Init+0x2c>)
 80060c2:	4628      	mov	r0, r5
 80060c4:	f000 f922 	bl	800630c <LST_init_head>
  p_systable = TL_RefTable.p_sys_table;
 80060c8:	4b08      	ldr	r3, [pc, #32]	; (80060ec <TL_SYS_Init+0x30>)
 80060ca:	68db      	ldr	r3, [r3, #12]
  p_systable->pcmd_buffer = pInitHciConf->p_cmdbuffer;
 80060cc:	68a2      	ldr	r2, [r4, #8]
 80060ce:	601a      	str	r2, [r3, #0]
  p_systable->sys_queue = (uint8_t*)&SystemEvtQueue;
 80060d0:	605d      	str	r5, [r3, #4]
  HW_IPCC_SYS_Init();
 80060d2:	f000 fe99 	bl	8006e08 <HW_IPCC_SYS_Init>
  SYS_CMD_IoBusCallBackFunction = pInitHciConf->IoBusCallBackCmdEvt;
 80060d6:	6822      	ldr	r2, [r4, #0]
 80060d8:	4b05      	ldr	r3, [pc, #20]	; (80060f0 <TL_SYS_Init+0x34>)
 80060da:	601a      	str	r2, [r3, #0]
  SYS_EVT_IoBusCallBackFunction = pInitHciConf->IoBusCallBackUserEvt;
 80060dc:	6862      	ldr	r2, [r4, #4]
 80060de:	4b05      	ldr	r3, [pc, #20]	; (80060f4 <TL_SYS_Init+0x38>)
 80060e0:	601a      	str	r2, [r3, #0]
}
 80060e2:	2000      	movs	r0, #0
 80060e4:	bd38      	pop	{r3, r4, r5, pc}
 80060e6:	bf00      	nop
 80060e8:	200300bc 	.word	0x200300bc
 80060ec:	20030000 	.word	0x20030000
 80060f0:	20000290 	.word	0x20000290
 80060f4:	20000294 	.word	0x20000294

080060f8 <TL_SYS_SendCmd>:
{
 80060f8:	b508      	push	{r3, lr}
  ((TL_CmdPacket_t *)(TL_RefTable.p_sys_table->pcmd_buffer))->cmdserial.type = TL_SYSCMD_PKT_TYPE;
 80060fa:	4b05      	ldr	r3, [pc, #20]	; (8006110 <TL_SYS_SendCmd+0x18>)
 80060fc:	68da      	ldr	r2, [r3, #12]
 80060fe:	6812      	ldr	r2, [r2, #0]
 8006100:	2110      	movs	r1, #16
 8006102:	7211      	strb	r1, [r2, #8]
  OutputDbgTrace(TL_MB_SYS_CMD, TL_RefTable.p_sys_table->pcmd_buffer);
 8006104:	68db      	ldr	r3, [r3, #12]
  HW_IPCC_SYS_SendCmd();
 8006106:	f000 fe87 	bl	8006e18 <HW_IPCC_SYS_SendCmd>
}
 800610a:	2000      	movs	r0, #0
 800610c:	bd08      	pop	{r3, pc}
 800610e:	bf00      	nop
 8006110:	20030000 	.word	0x20030000

08006114 <HW_IPCC_SYS_CmdEvtNot>:
{
 8006114:	b508      	push	{r3, lr}
  OutputDbgTrace(TL_MB_SYS_CMD_RSP, (uint8_t*)(TL_RefTable.p_sys_table->pcmd_buffer) );
 8006116:	4b04      	ldr	r3, [pc, #16]	; (8006128 <HW_IPCC_SYS_CmdEvtNot+0x14>)
 8006118:	68da      	ldr	r2, [r3, #12]
  SYS_CMD_IoBusCallBackFunction( (TL_EvtPacket_t*)(TL_RefTable.p_sys_table->pcmd_buffer) );
 800611a:	68da      	ldr	r2, [r3, #12]
 800611c:	4b03      	ldr	r3, [pc, #12]	; (800612c <HW_IPCC_SYS_CmdEvtNot+0x18>)
 800611e:	681b      	ldr	r3, [r3, #0]
 8006120:	6810      	ldr	r0, [r2, #0]
 8006122:	4798      	blx	r3
}
 8006124:	bd08      	pop	{r3, pc}
 8006126:	bf00      	nop
 8006128:	20030000 	.word	0x20030000
 800612c:	20000290 	.word	0x20000290

08006130 <HW_IPCC_SYS_EvtNot>:
{
 8006130:	b500      	push	{lr}
 8006132:	b083      	sub	sp, #12
  while(LST_is_empty(&SystemEvtQueue) == FALSE)
 8006134:	4807      	ldr	r0, [pc, #28]	; (8006154 <HW_IPCC_SYS_EvtNot+0x24>)
 8006136:	f000 f8ec 	bl	8006312 <LST_is_empty>
 800613a:	b940      	cbnz	r0, 800614e <HW_IPCC_SYS_EvtNot+0x1e>
    LST_remove_head (&SystemEvtQueue, (tListNode **)&p_evt);
 800613c:	a901      	add	r1, sp, #4
 800613e:	4805      	ldr	r0, [pc, #20]	; (8006154 <HW_IPCC_SYS_EvtNot+0x24>)
 8006140:	f000 f917 	bl	8006372 <LST_remove_head>
    SYS_EVT_IoBusCallBackFunction( p_evt );
 8006144:	4b04      	ldr	r3, [pc, #16]	; (8006158 <HW_IPCC_SYS_EvtNot+0x28>)
 8006146:	681b      	ldr	r3, [r3, #0]
 8006148:	9801      	ldr	r0, [sp, #4]
 800614a:	4798      	blx	r3
 800614c:	e7f2      	b.n	8006134 <HW_IPCC_SYS_EvtNot+0x4>
}
 800614e:	b003      	add	sp, #12
 8006150:	f85d fb04 	ldr.w	pc, [sp], #4
 8006154:	200300bc 	.word	0x200300bc
 8006158:	20000294 	.word	0x20000294

0800615c <TL_MM_Init>:
{
 800615c:	b538      	push	{r3, r4, r5, lr}
 800615e:	4604      	mov	r4, r0
  LST_init_head (&FreeBufQueue);
 8006160:	4d0b      	ldr	r5, [pc, #44]	; (8006190 <TL_MM_Init+0x34>)
 8006162:	4628      	mov	r0, r5
 8006164:	f000 f8d2 	bl	800630c <LST_init_head>
  LST_init_head (&LocalFreeBufQueue);
 8006168:	480a      	ldr	r0, [pc, #40]	; (8006194 <TL_MM_Init+0x38>)
 800616a:	f000 f8cf 	bl	800630c <LST_init_head>
  p_mem_manager_table = TL_RefTable.p_mem_manager_table;
 800616e:	4b0a      	ldr	r3, [pc, #40]	; (8006198 <TL_MM_Init+0x3c>)
 8006170:	691b      	ldr	r3, [r3, #16]
  p_mem_manager_table->blepool = p_Config->p_AsynchEvtPool;
 8006172:	68a2      	ldr	r2, [r4, #8]
 8006174:	609a      	str	r2, [r3, #8]
  p_mem_manager_table->blepoolsize = p_Config->AsynchEvtPoolSize;
 8006176:	68e2      	ldr	r2, [r4, #12]
 8006178:	60da      	str	r2, [r3, #12]
  p_mem_manager_table->pevt_free_buffer_queue = (uint8_t*)&FreeBufQueue;
 800617a:	611d      	str	r5, [r3, #16]
  p_mem_manager_table->spare_ble_buffer = p_Config->p_BleSpareEvtBuffer;
 800617c:	6822      	ldr	r2, [r4, #0]
 800617e:	601a      	str	r2, [r3, #0]
  p_mem_manager_table->spare_sys_buffer = p_Config->p_SystemSpareEvtBuffer;
 8006180:	6862      	ldr	r2, [r4, #4]
 8006182:	605a      	str	r2, [r3, #4]
  p_mem_manager_table->traces_evt_pool = p_Config->p_TracesEvtPool;
 8006184:	6922      	ldr	r2, [r4, #16]
 8006186:	615a      	str	r2, [r3, #20]
  p_mem_manager_table->tracespoolsize = p_Config->TracesEvtPoolSize;
 8006188:	6962      	ldr	r2, [r4, #20]
 800618a:	619a      	str	r2, [r3, #24]
}
 800618c:	bd38      	pop	{r3, r4, r5, pc}
 800618e:	bf00      	nop
 8006190:	200300c4 	.word	0x200300c4
 8006194:	20000288 	.word	0x20000288
 8006198:	20030000 	.word	0x20030000

0800619c <TL_MM_EvtDone>:
{
 800619c:	b508      	push	{r3, lr}
 800619e:	4601      	mov	r1, r0
  LST_insert_tail(&LocalFreeBufQueue, (tListNode *)phcievt);
 80061a0:	4803      	ldr	r0, [pc, #12]	; (80061b0 <TL_MM_EvtDone+0x14>)
 80061a2:	f000 f8ce 	bl	8006342 <LST_insert_tail>
  HW_IPCC_MM_SendFreeBuf( SendFreeBuf );
 80061a6:	4803      	ldr	r0, [pc, #12]	; (80061b4 <TL_MM_EvtDone+0x18>)
 80061a8:	f000 fe84 	bl	8006eb4 <HW_IPCC_MM_SendFreeBuf>
}
 80061ac:	bd08      	pop	{r3, pc}
 80061ae:	bf00      	nop
 80061b0:	20000288 	.word	0x20000288
 80061b4:	08005f99 	.word	0x08005f99

080061b8 <TL_TRACES_Init>:

/******************************************************************************
 * TRACES
 ******************************************************************************/
void TL_TRACES_Init( void )
{
 80061b8:	b510      	push	{r4, lr}
  LST_init_head (&TracesEvtQueue);
 80061ba:	4c05      	ldr	r4, [pc, #20]	; (80061d0 <TL_TRACES_Init+0x18>)
 80061bc:	4620      	mov	r0, r4
 80061be:	f000 f8a5 	bl	800630c <LST_init_head>

  TL_RefTable.p_traces_table->traces_queue = (uint8_t*)&TracesEvtQueue;
 80061c2:	4b04      	ldr	r3, [pc, #16]	; (80061d4 <TL_TRACES_Init+0x1c>)
 80061c4:	695b      	ldr	r3, [r3, #20]
 80061c6:	601c      	str	r4, [r3, #0]

  HW_IPCC_TRACES_Init();
 80061c8:	f000 fe8c 	bl	8006ee4 <HW_IPCC_TRACES_Init>

  return;
}
 80061cc:	bd10      	pop	{r4, pc}
 80061ce:	bf00      	nop
 80061d0:	200300cc 	.word	0x200300cc
 80061d4:	20030000 	.word	0x20030000

080061d8 <TL_TRACES_EvtReceived>:
}

__WEAK void TL_TRACES_EvtReceived( TL_EvtPacket_t * hcievt )
{
  (void)(hcievt);
}
 80061d8:	4770      	bx	lr
	...

080061dc <HW_IPCC_TRACES_EvtNot>:
{
 80061dc:	b500      	push	{lr}
 80061de:	b083      	sub	sp, #12
  while(LST_is_empty(&TracesEvtQueue) == FALSE)
 80061e0:	4807      	ldr	r0, [pc, #28]	; (8006200 <HW_IPCC_TRACES_EvtNot+0x24>)
 80061e2:	f000 f896 	bl	8006312 <LST_is_empty>
 80061e6:	b938      	cbnz	r0, 80061f8 <HW_IPCC_TRACES_EvtNot+0x1c>
    LST_remove_head (&TracesEvtQueue, (tListNode **)&phcievt);
 80061e8:	a901      	add	r1, sp, #4
 80061ea:	4805      	ldr	r0, [pc, #20]	; (8006200 <HW_IPCC_TRACES_EvtNot+0x24>)
 80061ec:	f000 f8c1 	bl	8006372 <LST_remove_head>
    TL_TRACES_EvtReceived( phcievt );
 80061f0:	9801      	ldr	r0, [sp, #4]
 80061f2:	f7ff fff1 	bl	80061d8 <TL_TRACES_EvtReceived>
 80061f6:	e7f3      	b.n	80061e0 <HW_IPCC_TRACES_EvtNot+0x4>
}
 80061f8:	b003      	add	sp, #12
 80061fa:	f85d fb04 	ldr.w	pc, [sp], #4
 80061fe:	bf00      	nop
 8006200:	200300cc 	.word	0x200300cc

08006204 <DbgTrace_TxCpltCallback>:
 * @note   Indicate the end of the transmission of a DBG_TRACE trace buffer to DBG_TRACE USART. If queue
 *         contains new trace data to transmit, start a new transmission.
 * @retval None
 */
static void DbgTrace_TxCpltCallback(void)
{
 8006204:	b530      	push	{r4, r5, lr}
 8006206:	b083      	sub	sp, #12
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006208:	f3ef 8510 	mrs	r5, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 800620c:	b672      	cpsid	i

  BACKUP_PRIMASK();

  DISABLE_IRQ();			/**< Disable all interrupts by setting PRIMASK bit on Cortex*/
  /* Remove element just sent to UART */
  CircularQueue_Remove(&MsgDbgTraceQueue,&bufSize);
 800620e:	4c0d      	ldr	r4, [pc, #52]	; (8006244 <DbgTrace_TxCpltCallback+0x40>)
 8006210:	f10d 0106 	add.w	r1, sp, #6
 8006214:	4620      	mov	r0, r4
 8006216:	f000 f9ec 	bl	80065f2 <CircularQueue_Remove>

  /* Sense if new data to be sent */
  buf=CircularQueue_Sense(&MsgDbgTraceQueue,&bufSize);
 800621a:	f10d 0106 	add.w	r1, sp, #6
 800621e:	4620      	mov	r0, r4
 8006220:	f000 fa55 	bl	80066ce <CircularQueue_Sense>


  if ( buf != NULL) 
 8006224:	b140      	cbz	r0, 8006238 <DbgTrace_TxCpltCallback+0x34>
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006226:	f385 8810 	msr	PRIMASK, r5
  {
    RESTORE_PRIMASK();
    DbgOutputTraces((uint8_t*)buf, bufSize, DbgTrace_TxCpltCallback);
 800622a:	4a07      	ldr	r2, [pc, #28]	; (8006248 <DbgTrace_TxCpltCallback+0x44>)
 800622c:	f8bd 1006 	ldrh.w	r1, [sp, #6]
 8006230:	f7fa fa4c 	bl	80006cc <DbgOutputTraces>

  DbgTracePeripheralReady = SET;

  RESTORE_PRIMASK();
#endif
}
 8006234:	b003      	add	sp, #12
 8006236:	bd30      	pop	{r4, r5, pc}
    DbgTracePeripheralReady = SET;
 8006238:	4b04      	ldr	r3, [pc, #16]	; (800624c <DbgTrace_TxCpltCallback+0x48>)
 800623a:	2201      	movs	r2, #1
 800623c:	701a      	strb	r2, [r3, #0]
 800623e:	f385 8810 	msr	PRIMASK, r5
}
 8006242:	e7f7      	b.n	8006234 <DbgTrace_TxCpltCallback+0x30>
 8006244:	20000298 	.word	0x20000298
 8006248:	08006205 	.word	0x08006205
 800624c:	20000010 	.word	0x20000010

08006250 <DbgTraceInit>:
#endif

void DbgTraceInit( void )
{
 8006250:	b500      	push	{lr}
 8006252:	b083      	sub	sp, #12
#if (( CFG_DEBUG_TRACE_FULL != 0 ) || ( CFG_DEBUG_TRACE_LIGHT != 0 ))
  DbgOutputInit();
 8006254:	f7fa fa36 	bl	80006c4 <DbgOutputInit>
#if (DBG_TRACE_USE_CIRCULAR_QUEUE != 0)
  CircularQueue_Init(&MsgDbgTraceQueue, MsgDbgTraceQueueBuff, DBG_TRACE_MSG_QUEUE_SIZE, 0, CIRCULAR_QUEUE_SPLIT_IF_WRAPPING_FLAG);
 8006258:	2302      	movs	r3, #2
 800625a:	9300      	str	r3, [sp, #0]
 800625c:	2300      	movs	r3, #0
 800625e:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8006262:	4903      	ldr	r1, [pc, #12]	; (8006270 <DbgTraceInit+0x20>)
 8006264:	4803      	ldr	r0, [pc, #12]	; (8006274 <DbgTraceInit+0x24>)
 8006266:	f000 f890 	bl	800638a <CircularQueue_Init>
#endif 
#endif
  return;
}
 800626a:	b003      	add	sp, #12
 800626c:	f85d fb04 	ldr.w	pc, [sp], #4
 8006270:	200002b8 	.word	0x200002b8
 8006274:	20000298 	.word	0x20000298

08006278 <DbgTraceWrite>:
 * @param buf buffer to write
 * @param bufsize buffer size
 * @retval Number of elements written
 */
size_t DbgTraceWrite(int handle, const unsigned char * buf, size_t bufSize)
{
 8006278:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800627a:	f3ef 8510 	mrs	r5, PRIMASK
  uint8_t* buffer;

  BACKUP_PRIMASK();

  /* Ignore flushes */
  if ( handle == -1 )
 800627e:	f1b0 3fff 	cmp.w	r0, #4294967295
 8006282:	d020      	beq.n	80062c6 <DbgTraceWrite+0x4e>
 8006284:	4614      	mov	r4, r2
  {
    chars_written = ( size_t ) 0;
  }
  /* Only allow stdout/stderr output */
  else if ( ( handle != 1 ) && ( handle != 2 ) )
 8006286:	3801      	subs	r0, #1
 8006288:	2801      	cmp	r0, #1
 800628a:	d81e      	bhi.n	80062ca <DbgTraceWrite+0x52>
  {
    chars_written = ( size_t ) - 1;
  }
  /* Parameters OK, call the low-level character output routine */
  else if (bufSize != 0)
 800628c:	b90a      	cbnz	r2, 8006292 <DbgTraceWrite+0x1a>
  size_t chars_written = 0;
 800628e:	4610      	mov	r0, r2
    DbgOutputTraces((uint8_t*)buf, bufSize, DbgTrace_TxCpltCallback);
    while (!DbgTracePeripheralReady);
#endif
    /* CS END */
  }
  return ( chars_written );
 8006290:	e01a      	b.n	80062c8 <DbgTraceWrite+0x50>
  __ASM volatile ("cpsid i" : : : "memory");
 8006292:	b672      	cpsid	i
    buffer=CircularQueue_Add(&MsgDbgTraceQueue,(uint8_t*)buf, bufSize,1);
 8006294:	b296      	uxth	r6, r2
 8006296:	2301      	movs	r3, #1
 8006298:	4632      	mov	r2, r6
 800629a:	480d      	ldr	r0, [pc, #52]	; (80062d0 <DbgTraceWrite+0x58>)
 800629c:	f000 f88e 	bl	80063bc <CircularQueue_Add>
    if (buffer && DbgTracePeripheralReady)
 80062a0:	b110      	cbz	r0, 80062a8 <DbgTraceWrite+0x30>
 80062a2:	4b0c      	ldr	r3, [pc, #48]	; (80062d4 <DbgTraceWrite+0x5c>)
 80062a4:	781b      	ldrb	r3, [r3, #0]
 80062a6:	b91b      	cbnz	r3, 80062b0 <DbgTraceWrite+0x38>
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80062a8:	f385 8810 	msr	PRIMASK, r5
    chars_written = bufSize;
 80062ac:	4620      	mov	r0, r4
}
 80062ae:	e00b      	b.n	80062c8 <DbgTraceWrite+0x50>
      DbgTracePeripheralReady = RESET;
 80062b0:	4b08      	ldr	r3, [pc, #32]	; (80062d4 <DbgTraceWrite+0x5c>)
 80062b2:	2200      	movs	r2, #0
 80062b4:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80062b6:	f385 8810 	msr	PRIMASK, r5
      DbgOutputTraces((uint8_t*)buffer, bufSize, DbgTrace_TxCpltCallback);
 80062ba:	4a07      	ldr	r2, [pc, #28]	; (80062d8 <DbgTraceWrite+0x60>)
 80062bc:	4631      	mov	r1, r6
 80062be:	f7fa fa05 	bl	80006cc <DbgOutputTraces>
    chars_written = bufSize;
 80062c2:	4620      	mov	r0, r4
      DbgOutputTraces((uint8_t*)buffer, bufSize, DbgTrace_TxCpltCallback);
 80062c4:	e000      	b.n	80062c8 <DbgTraceWrite+0x50>
    chars_written = ( size_t ) 0;
 80062c6:	2000      	movs	r0, #0
}
 80062c8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    chars_written = ( size_t ) - 1;
 80062ca:	f04f 30ff 	mov.w	r0, #4294967295
 80062ce:	e7fb      	b.n	80062c8 <DbgTraceWrite+0x50>
 80062d0:	20000298 	.word	0x20000298
 80062d4:	20000010 	.word	0x20000010
 80062d8:	08006205 	.word	0x08006205

080062dc <_write>:
{
 80062dc:	b508      	push	{r3, lr}
  return ( DbgTraceWrite(handle, buf, bufSize) );
 80062de:	f7ff ffcb 	bl	8006278 <DbgTraceWrite>
}
 80062e2:	bd08      	pop	{r3, pc}

080062e4 <OTP_Read>:
/* Global variables ----------------------------------------------------------*/
/* Private function prototypes -----------------------------------------------*/
/* Functions Definition ------------------------------------------------------*/

uint8_t * OTP_Read( uint8_t id )
{
 80062e4:	4601      	mov	r1, r0
  uint8_t *p_id;

  p_id = (uint8_t*)(CFG_OTP_END_ADRESS - 7) ;
 80062e6:	4807      	ldr	r0, [pc, #28]	; (8006304 <OTP_Read+0x20>)

  while( ((*( p_id + 7 )) != id) && ( p_id != (uint8_t*)CFG_OTP_BASE_ADDRESS) )
 80062e8:	79c3      	ldrb	r3, [r0, #7]
 80062ea:	428b      	cmp	r3, r1
 80062ec:	d004      	beq.n	80062f8 <OTP_Read+0x14>
 80062ee:	4a06      	ldr	r2, [pc, #24]	; (8006308 <OTP_Read+0x24>)
 80062f0:	4290      	cmp	r0, r2
 80062f2:	d001      	beq.n	80062f8 <OTP_Read+0x14>
  {
    p_id -= 8 ;
 80062f4:	3808      	subs	r0, #8
 80062f6:	e7f7      	b.n	80062e8 <OTP_Read+0x4>
  }

  if((*( p_id + 7 )) != id)
 80062f8:	428b      	cmp	r3, r1
 80062fa:	d100      	bne.n	80062fe <OTP_Read+0x1a>
  {
    p_id = 0 ;
  }

  return p_id ;
}
 80062fc:	4770      	bx	lr
    p_id = 0 ;
 80062fe:	2000      	movs	r0, #0
  return p_id ;
 8006300:	e7fc      	b.n	80062fc <OTP_Read+0x18>
 8006302:	bf00      	nop
 8006304:	1fff73f8 	.word	0x1fff73f8
 8006308:	1fff7000 	.word	0x1fff7000

0800630c <LST_init_head>:
/******************************************************************************
 * Function Definitions 
 ******************************************************************************/
void LST_init_head (tListNode * listHead)
{
  listHead->next = listHead;
 800630c:	6000      	str	r0, [r0, #0]
  listHead->prev = listHead;
 800630e:	6040      	str	r0, [r0, #4]
}
 8006310:	4770      	bx	lr

08006312 <LST_is_empty>:
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006312:	f3ef 8310 	mrs	r3, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 8006316:	b672      	cpsid	i
  uint32_t primask_bit;
  uint8_t return_value;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
  if(listHead->next == listHead)
 8006318:	6802      	ldr	r2, [r0, #0]
 800631a:	4282      	cmp	r2, r0
 800631c:	d003      	beq.n	8006326 <LST_is_empty+0x14>
  {
    return_value = TRUE;
  }
  else
  {
    return_value = FALSE;
 800631e:	2000      	movs	r0, #0
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006320:	f383 8810 	msr	PRIMASK, r3
  }
  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/

  return return_value;
}
 8006324:	4770      	bx	lr
    return_value = TRUE;
 8006326:	2001      	movs	r0, #1
 8006328:	e7fa      	b.n	8006320 <LST_is_empty+0xe>

0800632a <LST_insert_head>:
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800632a:	f3ef 8310 	mrs	r3, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 800632e:	b672      	cpsid	i
  uint32_t primask_bit;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/

  node->next = listHead->next;
 8006330:	6802      	ldr	r2, [r0, #0]
 8006332:	600a      	str	r2, [r1, #0]
  node->prev = listHead;
 8006334:	6048      	str	r0, [r1, #4]
  listHead->next = node;
 8006336:	6001      	str	r1, [r0, #0]
  (node->next)->prev = node;
 8006338:	680a      	ldr	r2, [r1, #0]
 800633a:	6051      	str	r1, [r2, #4]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800633c:	f383 8810 	msr	PRIMASK, r3

  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/
}
 8006340:	4770      	bx	lr

08006342 <LST_insert_tail>:
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006342:	f3ef 8310 	mrs	r3, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 8006346:	b672      	cpsid	i
  uint32_t primask_bit;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/

  node->next = listHead;
 8006348:	6008      	str	r0, [r1, #0]
  node->prev = listHead->prev;
 800634a:	6842      	ldr	r2, [r0, #4]
 800634c:	604a      	str	r2, [r1, #4]
  listHead->prev = node;
 800634e:	6041      	str	r1, [r0, #4]
  (node->prev)->next = node;
 8006350:	684a      	ldr	r2, [r1, #4]
 8006352:	6011      	str	r1, [r2, #0]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006354:	f383 8810 	msr	PRIMASK, r3

  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/
}
 8006358:	4770      	bx	lr

0800635a <LST_remove_node>:
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800635a:	f3ef 8310 	mrs	r3, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 800635e:	b672      	cpsid	i
  uint32_t primask_bit;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/

  (node->prev)->next = node->next;
 8006360:	6842      	ldr	r2, [r0, #4]
 8006362:	6801      	ldr	r1, [r0, #0]
 8006364:	6011      	str	r1, [r2, #0]
  (node->next)->prev = node->prev;
 8006366:	6802      	ldr	r2, [r0, #0]
 8006368:	6841      	ldr	r1, [r0, #4]
 800636a:	6051      	str	r1, [r2, #4]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800636c:	f383 8810 	msr	PRIMASK, r3

  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/
}
 8006370:	4770      	bx	lr

08006372 <LST_remove_head>:


void LST_remove_head (tListNode * listHead, tListNode ** node )
{
 8006372:	b510      	push	{r4, lr}
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006374:	f3ef 8410 	mrs	r4, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 8006378:	b672      	cpsid	i
  uint32_t primask_bit;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/

  *node = listHead->next;
 800637a:	6803      	ldr	r3, [r0, #0]
 800637c:	600b      	str	r3, [r1, #0]
  LST_remove_node (listHead->next);
 800637e:	6800      	ldr	r0, [r0, #0]
 8006380:	f7ff ffeb 	bl	800635a <LST_remove_node>
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006384:	f384 8810 	msr	PRIMASK, r4

  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/
}
 8006388:	bd10      	pop	{r4, pc}

0800638a <CircularQueue_Init>:
  * @param  queueSize:  Size of Queue Buffer
  * @param  elementSize: Size of an element in the queue. if =0, the queue will manage variable sizze elements
  * @retval   always 0
  */
int CircularQueue_Init(queue_t *q, uint8_t* queueBuffer, uint32_t queueSize, uint16_t elementSize, uint8_t optionFlags)
{
 800638a:	b410      	push	{r4}
 800638c:	f89d 4004 	ldrb.w	r4, [sp, #4]
  q->qBuff = queueBuffer;
 8006390:	6001      	str	r1, [r0, #0]
  q->first = 0;
 8006392:	2100      	movs	r1, #0
 8006394:	60c1      	str	r1, [r0, #12]
  q->last = 0; /* queueSize-1; */
 8006396:	6101      	str	r1, [r0, #16]
  q->byteCount = 0;
 8006398:	6141      	str	r1, [r0, #20]
  q->elementCount = 0;
 800639a:	6181      	str	r1, [r0, #24]
  q->queueMaxSize = queueSize;
 800639c:	6042      	str	r2, [r0, #4]
  q->elementSize = elementSize;
 800639e:	8103      	strh	r3, [r0, #8]
  q->optionFlags = optionFlags;
 80063a0:	7704      	strb	r4, [r0, #28]

   if ((optionFlags & CIRCULAR_QUEUE_SPLIT_IF_WRAPPING_FLAG) && q-> elementSize)
 80063a2:	f014 0f02 	tst.w	r4, #2
 80063a6:	d002      	beq.n	80063ae <CircularQueue_Init+0x24>
 80063a8:	b92b      	cbnz	r3, 80063b6 <CircularQueue_Init+0x2c>
   {
    /* can not deal with splitting at the end of buffer with fixed size element */
    return -1;
  }
  return 0;
 80063aa:	4608      	mov	r0, r1
 80063ac:	e000      	b.n	80063b0 <CircularQueue_Init+0x26>
 80063ae:	2000      	movs	r0, #0
}
 80063b0:	f85d 4b04 	ldr.w	r4, [sp], #4
 80063b4:	4770      	bx	lr
    return -1;
 80063b6:	f04f 30ff 	mov.w	r0, #4294967295
 80063ba:	e7f9      	b.n	80063b0 <CircularQueue_Init+0x26>

080063bc <CircularQueue_Add>:
  * @param  elementSize:  Size of element to be added to the queue. Only used if the queue manage variable size elements
  * @param  nbElements:  number of elements in the in buffer pointed by x
  * @retval  pointer on last element just added to the queue, NULL if the element to be added do not fit in the queue (too big)
  */
uint8_t* CircularQueue_Add(queue_t *q, uint8_t* x, uint16_t elementSize, uint32_t nbElements)
{
 80063bc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80063c0:	b085      	sub	sp, #20
 80063c2:	4604      	mov	r4, r0
 80063c4:	9102      	str	r1, [sp, #8]
 80063c6:	469a      	mov	sl, r3
  uint8_t  wrapped_element_eob_size;              /* In case of Wrap around, indicat size of parta of elemenet that fit at thened of the queuue  buffer */
  uint16_t overhead = 0;                          /* In case of CIRCULAR_QUEUE_SPLIT_IF_WRAPPING_FLAG or CIRCULAR_QUEUE_NO_WRAP_FLAG options, 
                                                     indcate the size overhead that will be generated by adding the element with wrap management (split or no wrap ) */ 
  
  
  elemSizeStorageRoom  = (q->elementSize == 0) ? 2 : 0;
 80063c8:	8906      	ldrh	r6, [r0, #8]
 80063ca:	b9c6      	cbnz	r6, 80063fe <CircularQueue_Add+0x42>
 80063cc:	f04f 0b02 	mov.w	fp, #2
  /* retrieve the size of last element sored: the value stored at the beginning of the queue element if element size is variable otherwise take it from fixed element Size member */
  if (q->byteCount)
 80063d0:	6961      	ldr	r1, [r4, #20]
 80063d2:	b1b9      	cbz	r1, 8006404 <CircularQueue_Add+0x48>
  {
    curElementSize = (q->elementSize == 0) ? q->qBuff[q->last] + ((q->qBuff[MOD((q->last+1), q->queueMaxSize)])<<8) + 2 : q->elementSize;
 80063d4:	bb16      	cbnz	r6, 800641c <CircularQueue_Add+0x60>
 80063d6:	6825      	ldr	r5, [r4, #0]
 80063d8:	6923      	ldr	r3, [r4, #16]
 80063da:	f815 8003 	ldrb.w	r8, [r5, r3]
 80063de:	1c58      	adds	r0, r3, #1
 80063e0:	6867      	ldr	r7, [r4, #4]
 80063e2:	42b8      	cmp	r0, r7
 80063e4:	d301      	bcc.n	80063ea <CircularQueue_Add+0x2e>
 80063e6:	1bdb      	subs	r3, r3, r7
 80063e8:	1c58      	adds	r0, r3, #1
 80063ea:	5c2b      	ldrb	r3, [r5, r0]
 80063ec:	eb08 2803 	add.w	r8, r8, r3, lsl #8
 80063f0:	fa1f f888 	uxth.w	r8, r8
 80063f4:	f108 0802 	add.w	r8, r8, #2
 80063f8:	fa1f f888 	uxth.w	r8, r8
 80063fc:	e004      	b.n	8006408 <CircularQueue_Add+0x4c>
  elemSizeStorageRoom  = (q->elementSize == 0) ? 2 : 0;
 80063fe:	f04f 0b00 	mov.w	fp, #0
 8006402:	e7e5      	b.n	80063d0 <CircularQueue_Add+0x14>
  uint16_t curElementSize = 0;              /* the size of the element currently  stored at q->last position */
 8006404:	f04f 0800 	mov.w	r8, #0
  }
  /* if queue element have fixed size , reset the elementSize arg with fixed element size value */
  if (q->elementSize > 0)               
 8006408:	b906      	cbnz	r6, 800640c <CircularQueue_Add+0x50>
 800640a:	4616      	mov	r6, r2
  {
    elementSize = q->elementSize;
  }

   eob_free_size = (q->last >= q->first) ? q->queueMaxSize - (q->last + curElementSize) : 0;
 800640c:	6922      	ldr	r2, [r4, #16]
 800640e:	68e3      	ldr	r3, [r4, #12]
 8006410:	429a      	cmp	r2, r3
 8006412:	d305      	bcc.n	8006420 <CircularQueue_Add+0x64>
 8006414:	6863      	ldr	r3, [r4, #4]
 8006416:	4442      	add	r2, r8
 8006418:	1a9a      	subs	r2, r3, r2
 800641a:	e002      	b.n	8006422 <CircularQueue_Add+0x66>
    curElementSize = (q->elementSize == 0) ? q->qBuff[q->last] + ((q->qBuff[MOD((q->last+1), q->queueMaxSize)])<<8) + 2 : q->elementSize;
 800641c:	46b0      	mov	r8, r6
 800641e:	e7f3      	b.n	8006408 <CircularQueue_Add+0x4c>
   eob_free_size = (q->last >= q->first) ? q->queueMaxSize - (q->last + curElementSize) : 0;
 8006420:	2200      	movs	r2, #0

   /* check how many bytes of wrapped element (if anay) are at end of buffer */
   wrapped_element_eob_size = (((elementSize + elemSizeStorageRoom )*nbElements) < eob_free_size) ? 0 : (eob_free_size % (elementSize + elemSizeStorageRoom));
 8006422:	eb06 000b 	add.w	r0, r6, fp
 8006426:	fb0a f500 	mul.w	r5, sl, r0
 800642a:	4295      	cmp	r5, r2
 800642c:	d305      	bcc.n	800643a <CircularQueue_Add+0x7e>
 800642e:	fbb2 f3f0 	udiv	r3, r2, r0
 8006432:	fb00 2313 	mls	r3, r0, r3, r2
 8006436:	b2db      	uxtb	r3, r3
 8006438:	e000      	b.n	800643c <CircularQueue_Add+0x80>
 800643a:	2300      	movs	r3, #0
   wrap_will_occur  = wrapped_element_eob_size > elemSizeStorageRoom;

   overhead = (wrap_will_occur && (q->optionFlags & CIRCULAR_QUEUE_NO_WRAP_FLAG)) ? wrapped_element_eob_size : overhead;
 800643c:	459b      	cmp	fp, r3
 800643e:	d205      	bcs.n	800644c <CircularQueue_Add+0x90>
 8006440:	7f22      	ldrb	r2, [r4, #28]
 8006442:	f012 0f01 	tst.w	r2, #1
 8006446:	d016      	beq.n	8006476 <CircularQueue_Add+0xba>
 8006448:	b29a      	uxth	r2, r3
 800644a:	e000      	b.n	800644e <CircularQueue_Add+0x92>
 800644c:	2200      	movs	r2, #0
   overhead = (wrap_will_occur && (q->optionFlags & CIRCULAR_QUEUE_SPLIT_IF_WRAPPING_FLAG)) ? elemSizeStorageRoom  : overhead;
 800644e:	459b      	cmp	fp, r3
 8006450:	d205      	bcs.n	800645e <CircularQueue_Add+0xa2>
 8006452:	7f23      	ldrb	r3, [r4, #28]
 8006454:	f013 0f02 	tst.w	r3, #2
 8006458:	d001      	beq.n	800645e <CircularQueue_Add+0xa2>
 800645a:	fa1f f28b 	uxth.w	r2, fp
   
   
  /* Store now the elements if ennough room for all elements */
  if (elementSize && ((q->byteCount + ((elementSize + elemSizeStorageRoom )*nbElements) + overhead) <= q->queueMaxSize)) 
 800645e:	2e00      	cmp	r6, #0
 8006460:	f000 80c3 	beq.w	80065ea <CircularQueue_Add+0x22e>
 8006464:	4429      	add	r1, r5
 8006466:	4411      	add	r1, r2
 8006468:	6863      	ldr	r3, [r4, #4]
 800646a:	4299      	cmp	r1, r3
 800646c:	d805      	bhi.n	800647a <CircularQueue_Add+0xbe>
  uint32_t NbBytesToCopy = 0, NbCopiedBytes = 0 ; /* Indicators for copying bytes in queue */
 800646e:	2300      	movs	r3, #0
 8006470:	9301      	str	r3, [sp, #4]
  { 
    /* loop to add all elements  */
    for (i=0; i < nbElements; i++) 
 8006472:	461f      	mov	r7, r3
 8006474:	e01d      	b.n	80064b2 <CircularQueue_Add+0xf6>
   overhead = (wrap_will_occur && (q->optionFlags & CIRCULAR_QUEUE_NO_WRAP_FLAG)) ? wrapped_element_eob_size : overhead;
 8006476:	2200      	movs	r2, #0
 8006478:	e7e9      	b.n	800644e <CircularQueue_Add+0x92>
    ptr = q->qBuff + (MOD((q->last+elemSizeStorageRoom ),q->queueMaxSize));
  }
  /* for Breakpoint only...to remove */
  else
  {
    return NULL;
 800647a:	2000      	movs	r0, #0
 800647c:	e0b2      	b.n	80065e4 <CircularQueue_Add+0x228>
        memcpy(&q->qBuff[curBuffPosition],&x[i*elementSize],NbBytesToCopy);
 800647e:	6820      	ldr	r0, [r4, #0]
 8006480:	462a      	mov	r2, r5
 8006482:	9902      	ldr	r1, [sp, #8]
 8006484:	fb07 1109 	mla	r1, r7, r9, r1
 8006488:	4418      	add	r0, r3
 800648a:	f000 fef3 	bl	8007274 <memcpy>
        q->byteCount += NbBytesToCopy;
 800648e:	6963      	ldr	r3, [r4, #20]
 8006490:	442b      	add	r3, r5
 8006492:	6163      	str	r3, [r4, #20]
        curElementSize = (elementSize) + elemSizeStorageRoom ;
 8006494:	eb0b 0806 	add.w	r8, fp, r6
 8006498:	fa1f f888 	uxth.w	r8, r8
        NbCopiedBytes = NbBytesToCopy;
 800649c:	9501      	str	r5, [sp, #4]
        NbBytesToCopy = elementSize - NbBytesToCopy;
 800649e:	eba9 0505 	sub.w	r5, r9, r5
        curBuffPosition = 0; 
 80064a2:	2300      	movs	r3, #0
      if (NbBytesToCopy)      
 80064a4:	2d00      	cmp	r5, #0
 80064a6:	f040 8084 	bne.w	80065b2 <CircularQueue_Add+0x1f6>
      q->elementCount++;
 80064aa:	69a3      	ldr	r3, [r4, #24]
 80064ac:	3301      	adds	r3, #1
 80064ae:	61a3      	str	r3, [r4, #24]
    for (i=0; i < nbElements; i++) 
 80064b0:	3701      	adds	r7, #1
 80064b2:	4557      	cmp	r7, sl
 80064b4:	f080 808d 	bcs.w	80065d2 <CircularQueue_Add+0x216>
      q->last = MOD ((q->last + curElementSize),q->queueMaxSize);
 80064b8:	6923      	ldr	r3, [r4, #16]
 80064ba:	4443      	add	r3, r8
 80064bc:	6862      	ldr	r2, [r4, #4]
 80064be:	4293      	cmp	r3, r2
 80064c0:	d300      	bcc.n	80064c4 <CircularQueue_Add+0x108>
 80064c2:	1a9b      	subs	r3, r3, r2
 80064c4:	6123      	str	r3, [r4, #16]
      if (q->elementSize == 0) 
 80064c6:	8922      	ldrh	r2, [r4, #8]
 80064c8:	b98a      	cbnz	r2, 80064ee <CircularQueue_Add+0x132>
        q->qBuff[curBuffPosition++]= elementSize & 0xFF;
 80064ca:	6821      	ldr	r1, [r4, #0]
 80064cc:	1c5a      	adds	r2, r3, #1
 80064ce:	54ce      	strb	r6, [r1, r3]
        curBuffPosition = MOD(curBuffPosition, q->queueMaxSize);
 80064d0:	6863      	ldr	r3, [r4, #4]
 80064d2:	4293      	cmp	r3, r2
 80064d4:	d800      	bhi.n	80064d8 <CircularQueue_Add+0x11c>
 80064d6:	1ad2      	subs	r2, r2, r3
        q->qBuff[curBuffPosition++]= (elementSize & 0xFF00) >> 8 ;
 80064d8:	0a31      	lsrs	r1, r6, #8
 80064da:	6820      	ldr	r0, [r4, #0]
 80064dc:	1c53      	adds	r3, r2, #1
 80064de:	5481      	strb	r1, [r0, r2]
        curBuffPosition = MOD(curBuffPosition, q->queueMaxSize);
 80064e0:	6862      	ldr	r2, [r4, #4]
 80064e2:	429a      	cmp	r2, r3
 80064e4:	d800      	bhi.n	80064e8 <CircularQueue_Add+0x12c>
 80064e6:	1a9b      	subs	r3, r3, r2
        q->byteCount += 2;
 80064e8:	6962      	ldr	r2, [r4, #20]
 80064ea:	3202      	adds	r2, #2
 80064ec:	6162      	str	r2, [r4, #20]
      NbBytesToCopy = MIN((q->queueMaxSize-curBuffPosition),elementSize);
 80064ee:	46b1      	mov	r9, r6
 80064f0:	6865      	ldr	r5, [r4, #4]
 80064f2:	1aed      	subs	r5, r5, r3
 80064f4:	42b5      	cmp	r5, r6
 80064f6:	bf28      	it	cs
 80064f8:	4635      	movcs	r5, r6
      if ((NbBytesToCopy == elementSize) || ((NbBytesToCopy < elementSize) && (q->optionFlags == CIRCULAR_QUEUE_NO_FLAG)))
 80064fa:	42ae      	cmp	r6, r5
 80064fc:	d0bf      	beq.n	800647e <CircularQueue_Add+0xc2>
 80064fe:	d902      	bls.n	8006506 <CircularQueue_Add+0x14a>
 8006500:	7f22      	ldrb	r2, [r4, #28]
 8006502:	2a00      	cmp	r2, #0
 8006504:	d0bb      	beq.n	800647e <CircularQueue_Add+0xc2>
      else if (NbBytesToCopy)  /* We have a wrap  to manage */
 8006506:	2d00      	cmp	r5, #0
 8006508:	d0cc      	beq.n	80064a4 <CircularQueue_Add+0xe8>
         if (q->optionFlags & CIRCULAR_QUEUE_NO_WRAP_FLAG)
 800650a:	7f22      	ldrb	r2, [r4, #28]
 800650c:	f012 0f01 	tst.w	r2, #1
 8006510:	d022      	beq.n	8006558 <CircularQueue_Add+0x19c>
          if (q->elementSize == 0)
 8006512:	8922      	ldrh	r2, [r4, #8]
 8006514:	b932      	cbnz	r2, 8006524 <CircularQueue_Add+0x168>
             q->qBuff[curBuffPosition-2] = 0xFF;
 8006516:	6820      	ldr	r0, [r4, #0]
 8006518:	1e99      	subs	r1, r3, #2
 800651a:	22ff      	movs	r2, #255	; 0xff
 800651c:	5442      	strb	r2, [r0, r1]
             q->qBuff[curBuffPosition-1] = 0xFF;
 800651e:	6821      	ldr	r1, [r4, #0]
 8006520:	3b01      	subs	r3, #1
 8006522:	54ca      	strb	r2, [r1, r3]
          q->byteCount += NbBytesToCopy;  /* invalid data at the end of buffer are take into account in byteCount */
 8006524:	6963      	ldr	r3, [r4, #20]
 8006526:	441d      	add	r5, r3
 8006528:	6165      	str	r5, [r4, #20]
          if (q->elementSize == 0)
 800652a:	8923      	ldrh	r3, [r4, #8]
 800652c:	2b00      	cmp	r3, #0
 800652e:	d13c      	bne.n	80065aa <CircularQueue_Add+0x1ee>
            q->qBuff[curBuffPosition++] = NbBytesToCopy & 0xFF;
 8006530:	6823      	ldr	r3, [r4, #0]
 8006532:	701e      	strb	r6, [r3, #0]
            q->qBuff[curBuffPosition++] = (NbBytesToCopy & 0xFF00) >> 8 ;
 8006534:	ea4f 2319 	mov.w	r3, r9, lsr #8
 8006538:	6822      	ldr	r2, [r4, #0]
 800653a:	7053      	strb	r3, [r2, #1]
            q->byteCount += 2;   
 800653c:	6963      	ldr	r3, [r4, #20]
 800653e:	3302      	adds	r3, #2
 8006540:	6163      	str	r3, [r4, #20]
          NbBytesToCopy = elementSize; 
 8006542:	464d      	mov	r5, r9
          NbCopiedBytes = 0;
 8006544:	2300      	movs	r3, #0
 8006546:	9301      	str	r3, [sp, #4]
            q->qBuff[curBuffPosition++] = (NbBytesToCopy & 0xFF00) >> 8 ;
 8006548:	2302      	movs	r3, #2
        curElementSize = (NbBytesToCopy) + elemSizeStorageRoom ;
 800654a:	fa1b f885 	uxtah	r8, fp, r5
 800654e:	fa1f f888 	uxth.w	r8, r8
        q->last = 0;        
 8006552:	2200      	movs	r2, #0
 8006554:	6122      	str	r2, [r4, #16]
 8006556:	e7a5      	b.n	80064a4 <CircularQueue_Add+0xe8>
        else if (q->optionFlags & CIRCULAR_QUEUE_SPLIT_IF_WRAPPING_FLAG)
 8006558:	f012 0f02 	tst.w	r2, #2
 800655c:	d0f5      	beq.n	800654a <CircularQueue_Add+0x18e>
          if (q->elementSize == 0)
 800655e:	8922      	ldrh	r2, [r4, #8]
 8006560:	2a00      	cmp	r2, #0
 8006562:	d144      	bne.n	80065ee <CircularQueue_Add+0x232>
             q->qBuff[curBuffPosition-2] = NbBytesToCopy & 0xFF;
 8006564:	6821      	ldr	r1, [r4, #0]
 8006566:	1e9a      	subs	r2, r3, #2
 8006568:	548d      	strb	r5, [r1, r2]
             q->qBuff[curBuffPosition-1] = (NbBytesToCopy & 0xFF00) >> 8 ;
 800656a:	0a28      	lsrs	r0, r5, #8
 800656c:	6821      	ldr	r1, [r4, #0]
 800656e:	1e5a      	subs	r2, r3, #1
 8006570:	5488      	strb	r0, [r1, r2]
             memcpy(&q->qBuff[curBuffPosition],&x[i*elementSize],NbBytesToCopy);
 8006572:	6820      	ldr	r0, [r4, #0]
 8006574:	462a      	mov	r2, r5
 8006576:	9902      	ldr	r1, [sp, #8]
 8006578:	fb07 1109 	mla	r1, r7, r9, r1
 800657c:	4418      	add	r0, r3
 800657e:	f000 fe79 	bl	8007274 <memcpy>
             q->byteCount += NbBytesToCopy; 
 8006582:	6963      	ldr	r3, [r4, #20]
 8006584:	442b      	add	r3, r5
 8006586:	6163      	str	r3, [r4, #20]
             NbBytesToCopy = elementSize - NbBytesToCopy;
 8006588:	eba9 0205 	sub.w	r2, r9, r5
             q->elementCount++;
 800658c:	69a3      	ldr	r3, [r4, #24]
 800658e:	3301      	adds	r3, #1
 8006590:	61a3      	str	r3, [r4, #24]
             q->qBuff[curBuffPosition++] = NbBytesToCopy & 0xFF;
 8006592:	6823      	ldr	r3, [r4, #0]
 8006594:	701a      	strb	r2, [r3, #0]
             q->qBuff[curBuffPosition++] = (NbBytesToCopy & 0xFF00) >> 8 ;
 8006596:	0a11      	lsrs	r1, r2, #8
 8006598:	6823      	ldr	r3, [r4, #0]
 800659a:	7059      	strb	r1, [r3, #1]
             q->byteCount += 2;              
 800659c:	6963      	ldr	r3, [r4, #20]
 800659e:	3302      	adds	r3, #2
 80065a0:	6163      	str	r3, [r4, #20]
             NbCopiedBytes = NbBytesToCopy;             
 80065a2:	9501      	str	r5, [sp, #4]
             NbBytesToCopy = elementSize - NbBytesToCopy;
 80065a4:	4615      	mov	r5, r2
             q->qBuff[curBuffPosition++] = (NbBytesToCopy & 0xFF00) >> 8 ;
 80065a6:	2302      	movs	r3, #2
 80065a8:	e7cf      	b.n	800654a <CircularQueue_Add+0x18e>
          NbBytesToCopy = elementSize; 
 80065aa:	464d      	mov	r5, r9
          NbCopiedBytes = 0;
 80065ac:	2300      	movs	r3, #0
 80065ae:	9301      	str	r3, [sp, #4]
 80065b0:	e7cb      	b.n	800654a <CircularQueue_Add+0x18e>
        memcpy(&q->qBuff[curBuffPosition],&x[(i*elementSize)+NbCopiedBytes],NbBytesToCopy);
 80065b2:	6820      	ldr	r0, [r4, #0]
 80065b4:	9003      	str	r0, [sp, #12]
 80065b6:	9a01      	ldr	r2, [sp, #4]
 80065b8:	fb07 2109 	mla	r1, r7, r9, r2
 80065bc:	462a      	mov	r2, r5
 80065be:	9802      	ldr	r0, [sp, #8]
 80065c0:	4401      	add	r1, r0
 80065c2:	9803      	ldr	r0, [sp, #12]
 80065c4:	4418      	add	r0, r3
 80065c6:	f000 fe55 	bl	8007274 <memcpy>
        q->byteCount += NbBytesToCopy;
 80065ca:	6963      	ldr	r3, [r4, #20]
 80065cc:	441d      	add	r5, r3
 80065ce:	6165      	str	r5, [r4, #20]
 80065d0:	e76b      	b.n	80064aa <CircularQueue_Add+0xee>
    ptr = q->qBuff + (MOD((q->last+elemSizeStorageRoom ),q->queueMaxSize));
 80065d2:	6820      	ldr	r0, [r4, #0]
 80065d4:	6923      	ldr	r3, [r4, #16]
 80065d6:	449b      	add	fp, r3
 80065d8:	6863      	ldr	r3, [r4, #4]
 80065da:	459b      	cmp	fp, r3
 80065dc:	d301      	bcc.n	80065e2 <CircularQueue_Add+0x226>
 80065de:	ebab 0b03 	sub.w	fp, fp, r3
 80065e2:	4458      	add	r0, fp
  }
  return ptr;
}
 80065e4:	b005      	add	sp, #20
 80065e6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    return NULL;
 80065ea:	2000      	movs	r0, #0
 80065ec:	e7fa      	b.n	80065e4 <CircularQueue_Add+0x228>
            return NULL;
 80065ee:	2000      	movs	r0, #0
 80065f0:	e7f8      	b.n	80065e4 <CircularQueue_Add+0x228>

080065f2 <CircularQueue_Remove>:
  * @param  q: pointer on queue structure  to be handled
  * @param  elementSize: Pointer to return Size of element to be removed (ignored if NULL)
  * @retval Pointer on removed element. NULL if queue was empty
  */
uint8_t* CircularQueue_Remove(queue_t *q, uint16_t* elementSize)
{
 80065f2:	b5f0      	push	{r4, r5, r6, r7, lr}
 80065f4:	4603      	mov	r3, r0
  uint8_t  elemSizeStorageRoom = 0;
  uint8_t* ptr= NULL;
  elemSizeStorageRoom = (q->elementSize == 0) ? 2 : 0;
 80065f6:	8900      	ldrh	r0, [r0, #8]
 80065f8:	2800      	cmp	r0, #0
 80065fa:	d139      	bne.n	8006670 <CircularQueue_Remove+0x7e>
 80065fc:	2402      	movs	r4, #2
  uint16_t eltSize = 0;
  if (q->byteCount > 0) 
 80065fe:	695e      	ldr	r6, [r3, #20]
 8006600:	2e00      	cmp	r6, #0
 8006602:	d061      	beq.n	80066c8 <CircularQueue_Remove+0xd6>
  {
    /* retreive element Size */
    eltSize = (q->elementSize == 0) ? q->qBuff[q->first] + ((q->qBuff[MOD((q->first+1), q->queueMaxSize)])<<8) : q->elementSize;
 8006604:	2800      	cmp	r0, #0
 8006606:	d135      	bne.n	8006674 <CircularQueue_Remove+0x82>
 8006608:	f8d3 c000 	ldr.w	ip, [r3]
 800660c:	68dd      	ldr	r5, [r3, #12]
 800660e:	f81c 2005 	ldrb.w	r2, [ip, r5]
 8006612:	1c6f      	adds	r7, r5, #1
 8006614:	f8d3 e004 	ldr.w	lr, [r3, #4]
 8006618:	4577      	cmp	r7, lr
 800661a:	d302      	bcc.n	8006622 <CircularQueue_Remove+0x30>
 800661c:	eba5 050e 	sub.w	r5, r5, lr
 8006620:	1c6f      	adds	r7, r5, #1
 8006622:	f81c 5007 	ldrb.w	r5, [ip, r7]
 8006626:	eb02 2205 	add.w	r2, r2, r5, lsl #8
 800662a:	b292      	uxth	r2, r2

     if ((q->optionFlags & CIRCULAR_QUEUE_NO_WRAP_FLAG) && !(q->optionFlags & CIRCULAR_QUEUE_SPLIT_IF_WRAPPING_FLAG))
 800662c:	7f1d      	ldrb	r5, [r3, #28]
 800662e:	f005 0503 	and.w	r5, r5, #3
 8006632:	2d01      	cmp	r5, #1
 8006634:	d020      	beq.n	8006678 <CircularQueue_Remove+0x86>
          eltSize = (q->elementSize == 0) ? q->qBuff[q->first] + ((q->qBuff[MOD((q->first+1), q->queueMaxSize)])<<8) : q->elementSize;
       }
     }

    /* retreive element */
    ptr = q->qBuff + (MOD((q->first + elemSizeStorageRoom), q->queueMaxSize));
 8006636:	681d      	ldr	r5, [r3, #0]
 8006638:	68de      	ldr	r6, [r3, #12]
 800663a:	4627      	mov	r7, r4
 800663c:	1930      	adds	r0, r6, r4
 800663e:	f8d3 c004 	ldr.w	ip, [r3, #4]
 8006642:	4560      	cmp	r0, ip
 8006644:	d301      	bcc.n	800664a <CircularQueue_Remove+0x58>
 8006646:	eba0 000c 	sub.w	r0, r0, ip
 800664a:	4428      	add	r0, r5

    /* adjust byte count */
    q->byteCount -= (eltSize + elemSizeStorageRoom) ;
 800664c:	4414      	add	r4, r2
 800664e:	695d      	ldr	r5, [r3, #20]
 8006650:	1b2c      	subs	r4, r5, r4
 8006652:	615c      	str	r4, [r3, #20]
    
    /* Adjust q->first */
    if (q->byteCount > 0)
 8006654:	b134      	cbz	r4, 8006664 <CircularQueue_Remove+0x72>
    {
      q->first = MOD((q->first+ eltSize + elemSizeStorageRoom ), q->queueMaxSize);
 8006656:	4416      	add	r6, r2
 8006658:	443e      	add	r6, r7
 800665a:	45b4      	cmp	ip, r6
 800665c:	d801      	bhi.n	8006662 <CircularQueue_Remove+0x70>
 800665e:	eba6 060c 	sub.w	r6, r6, ip
 8006662:	60de      	str	r6, [r3, #12]
    }    
    /* adjust element count */    
    --q->elementCount;    
 8006664:	699c      	ldr	r4, [r3, #24]
 8006666:	3c01      	subs	r4, #1
 8006668:	619c      	str	r4, [r3, #24]
  }
  if (elementSize != NULL)
 800666a:	b101      	cbz	r1, 800666e <CircularQueue_Remove+0x7c>
  {
    *elementSize = eltSize;
 800666c:	800a      	strh	r2, [r1, #0]
  }
  return ptr;
}
 800666e:	bdf0      	pop	{r4, r5, r6, r7, pc}
  elemSizeStorageRoom = (q->elementSize == 0) ? 2 : 0;
 8006670:	2400      	movs	r4, #0
 8006672:	e7c4      	b.n	80065fe <CircularQueue_Remove+0xc>
    eltSize = (q->elementSize == 0) ? q->qBuff[q->first] + ((q->qBuff[MOD((q->first+1), q->queueMaxSize)])<<8) : q->elementSize;
 8006674:	4602      	mov	r2, r0
 8006676:	e7d9      	b.n	800662c <CircularQueue_Remove+0x3a>
       if (((eltSize == 0xFFFF) && q->elementSize == 0 ) ||
 8006678:	f64f 75ff 	movw	r5, #65535	; 0xffff
 800667c:	42aa      	cmp	r2, r5
 800667e:	d00a      	beq.n	8006696 <CircularQueue_Remove+0xa4>
           ((q->first > q->last) && q->elementSize && ((q->queueMaxSize - q->first) < q->elementSize))) 
 8006680:	68dd      	ldr	r5, [r3, #12]
 8006682:	691f      	ldr	r7, [r3, #16]
       if (((eltSize == 0xFFFF) && q->elementSize == 0 ) ||
 8006684:	42bd      	cmp	r5, r7
 8006686:	d9d6      	bls.n	8006636 <CircularQueue_Remove+0x44>
           ((q->first > q->last) && q->elementSize && ((q->queueMaxSize - q->first) < q->elementSize))) 
 8006688:	2800      	cmp	r0, #0
 800668a:	d0d4      	beq.n	8006636 <CircularQueue_Remove+0x44>
 800668c:	685f      	ldr	r7, [r3, #4]
 800668e:	1b7d      	subs	r5, r7, r5
 8006690:	4285      	cmp	r5, r0
 8006692:	d2d0      	bcs.n	8006636 <CircularQueue_Remove+0x44>
 8006694:	e001      	b.n	800669a <CircularQueue_Remove+0xa8>
       if (((eltSize == 0xFFFF) && q->elementSize == 0 ) ||
 8006696:	2800      	cmp	r0, #0
 8006698:	d1f2      	bne.n	8006680 <CircularQueue_Remove+0x8e>
          q->byteCount -= (q->queueMaxSize - q->first);
 800669a:	68da      	ldr	r2, [r3, #12]
 800669c:	685d      	ldr	r5, [r3, #4]
 800669e:	1b52      	subs	r2, r2, r5
 80066a0:	4416      	add	r6, r2
 80066a2:	615e      	str	r6, [r3, #20]
          q->first = 0;
 80066a4:	2200      	movs	r2, #0
 80066a6:	60da      	str	r2, [r3, #12]
          eltSize = (q->elementSize == 0) ? q->qBuff[q->first] + ((q->qBuff[MOD((q->first+1), q->queueMaxSize)])<<8) : q->elementSize;
 80066a8:	b960      	cbnz	r0, 80066c4 <CircularQueue_Remove+0xd2>
 80066aa:	6818      	ldr	r0, [r3, #0]
 80066ac:	7802      	ldrb	r2, [r0, #0]
 80066ae:	2d01      	cmp	r5, #1
 80066b0:	d905      	bls.n	80066be <CircularQueue_Remove+0xcc>
 80066b2:	2501      	movs	r5, #1
 80066b4:	5d40      	ldrb	r0, [r0, r5]
 80066b6:	eb02 2200 	add.w	r2, r2, r0, lsl #8
 80066ba:	b292      	uxth	r2, r2
 80066bc:	e7bb      	b.n	8006636 <CircularQueue_Remove+0x44>
 80066be:	f1c5 0501 	rsb	r5, r5, #1
 80066c2:	e7f7      	b.n	80066b4 <CircularQueue_Remove+0xc2>
 80066c4:	4602      	mov	r2, r0
 80066c6:	e7b6      	b.n	8006636 <CircularQueue_Remove+0x44>
  uint16_t eltSize = 0;
 80066c8:	2200      	movs	r2, #0
  uint8_t* ptr= NULL;
 80066ca:	4610      	mov	r0, r2
 80066cc:	e7cd      	b.n	800666a <CircularQueue_Remove+0x78>

080066ce <CircularQueue_Sense>:
  * @param  q: pointer on queue structure  to be handled
  * @param  elementSize:  Pointer to return Size of element to be removed (ignored if NULL)
  * @retval Pointer on sensed element. NULL if queue was empty
  */
uint8_t* CircularQueue_Sense(queue_t *q, uint16_t* elementSize)
{
 80066ce:	b4f0      	push	{r4, r5, r6, r7}
  uint8_t  elemSizeStorageRoom = 0;
  uint8_t* x= NULL;
  elemSizeStorageRoom = (q->elementSize == 0) ? 2 : 0;
 80066d0:	8905      	ldrh	r5, [r0, #8]
 80066d2:	bb25      	cbnz	r5, 800671e <CircularQueue_Sense+0x50>
 80066d4:	2302      	movs	r3, #2
  uint16_t eltSize = 0;
  uint32_t FirstElemetPos = 0;
    
  if (q->byteCount > 0) 
 80066d6:	6942      	ldr	r2, [r0, #20]
 80066d8:	2a00      	cmp	r2, #0
 80066da:	d047      	beq.n	800676c <CircularQueue_Sense+0x9e>
  {
    FirstElemetPos = q->first;
 80066dc:	68c6      	ldr	r6, [r0, #12]
    eltSize = (q->elementSize == 0) ? q->qBuff[q->first] + ((q->qBuff[MOD((q->first+1), q->queueMaxSize)])<<8) : q->elementSize;
 80066de:	bb05      	cbnz	r5, 8006722 <CircularQueue_Sense+0x54>
 80066e0:	f8d0 c000 	ldr.w	ip, [r0]
 80066e4:	f81c 2006 	ldrb.w	r2, [ip, r6]
 80066e8:	1c74      	adds	r4, r6, #1
 80066ea:	6847      	ldr	r7, [r0, #4]
 80066ec:	42bc      	cmp	r4, r7
 80066ee:	d301      	bcc.n	80066f4 <CircularQueue_Sense+0x26>
 80066f0:	1bf4      	subs	r4, r6, r7
 80066f2:	3401      	adds	r4, #1
 80066f4:	f81c 4004 	ldrb.w	r4, [ip, r4]
 80066f8:	eb02 2204 	add.w	r2, r2, r4, lsl #8
 80066fc:	b292      	uxth	r2, r2
    
    if ((q->optionFlags & CIRCULAR_QUEUE_NO_WRAP_FLAG) && !(q->optionFlags & CIRCULAR_QUEUE_SPLIT_IF_WRAPPING_FLAG))
 80066fe:	7f04      	ldrb	r4, [r0, #28]
 8006700:	f004 0403 	and.w	r4, r4, #3
 8006704:	2c01      	cmp	r4, #1
 8006706:	d00e      	beq.n	8006726 <CircularQueue_Sense+0x58>
        /* retrieve the rigth size after the wrap [if varaible size element] */
        eltSize = (q->elementSize == 0) ? q->qBuff[FirstElemetPos]+ ((q->qBuff[MOD((FirstElemetPos+1), q->queueMaxSize)])<<8) : q->elementSize;
      }
   }
   /* retrieve element */
    x = q->qBuff + (MOD((FirstElemetPos + elemSizeStorageRoom), q->queueMaxSize));
 8006708:	6804      	ldr	r4, [r0, #0]
 800670a:	4433      	add	r3, r6
 800670c:	6840      	ldr	r0, [r0, #4]
 800670e:	4283      	cmp	r3, r0
 8006710:	d300      	bcc.n	8006714 <CircularQueue_Sense+0x46>
 8006712:	1a1b      	subs	r3, r3, r0
 8006714:	18e0      	adds	r0, r4, r3
  }
  if (elementSize != NULL)
 8006716:	b101      	cbz	r1, 800671a <CircularQueue_Sense+0x4c>
  {
    *elementSize = eltSize;
 8006718:	800a      	strh	r2, [r1, #0]
  }
  return x;
}
 800671a:	bcf0      	pop	{r4, r5, r6, r7}
 800671c:	4770      	bx	lr
  elemSizeStorageRoom = (q->elementSize == 0) ? 2 : 0;
 800671e:	2300      	movs	r3, #0
 8006720:	e7d9      	b.n	80066d6 <CircularQueue_Sense+0x8>
    eltSize = (q->elementSize == 0) ? q->qBuff[q->first] + ((q->qBuff[MOD((q->first+1), q->queueMaxSize)])<<8) : q->elementSize;
 8006722:	462a      	mov	r2, r5
 8006724:	e7eb      	b.n	80066fe <CircularQueue_Sense+0x30>
      if (((eltSize == 0xFFFF) && q->elementSize == 0 ) ||
 8006726:	f64f 74ff 	movw	r4, #65535	; 0xffff
 800672a:	42a2      	cmp	r2, r4
 800672c:	d009      	beq.n	8006742 <CircularQueue_Sense+0x74>
          ((q->first > q->last) && q->elementSize && ((q->queueMaxSize - q->first) < q->elementSize))) 
 800672e:	6904      	ldr	r4, [r0, #16]
      if (((eltSize == 0xFFFF) && q->elementSize == 0 ) ||
 8006730:	42b4      	cmp	r4, r6
 8006732:	d2e9      	bcs.n	8006708 <CircularQueue_Sense+0x3a>
          ((q->first > q->last) && q->elementSize && ((q->queueMaxSize - q->first) < q->elementSize))) 
 8006734:	2d00      	cmp	r5, #0
 8006736:	d0e7      	beq.n	8006708 <CircularQueue_Sense+0x3a>
 8006738:	6844      	ldr	r4, [r0, #4]
 800673a:	1ba4      	subs	r4, r4, r6
 800673c:	42ac      	cmp	r4, r5
 800673e:	d2e3      	bcs.n	8006708 <CircularQueue_Sense+0x3a>
 8006740:	e001      	b.n	8006746 <CircularQueue_Sense+0x78>
      if (((eltSize == 0xFFFF) && q->elementSize == 0 ) ||
 8006742:	2d00      	cmp	r5, #0
 8006744:	d1f3      	bne.n	800672e <CircularQueue_Sense+0x60>
        eltSize = (q->elementSize == 0) ? q->qBuff[FirstElemetPos]+ ((q->qBuff[MOD((FirstElemetPos+1), q->queueMaxSize)])<<8) : q->elementSize;
 8006746:	b975      	cbnz	r5, 8006766 <CircularQueue_Sense+0x98>
 8006748:	6805      	ldr	r5, [r0, #0]
 800674a:	782a      	ldrb	r2, [r5, #0]
 800674c:	6844      	ldr	r4, [r0, #4]
 800674e:	2c01      	cmp	r4, #1
 8006750:	d906      	bls.n	8006760 <CircularQueue_Sense+0x92>
 8006752:	2401      	movs	r4, #1
 8006754:	5d2c      	ldrb	r4, [r5, r4]
 8006756:	eb02 2204 	add.w	r2, r2, r4, lsl #8
 800675a:	b292      	uxth	r2, r2
        FirstElemetPos = 0; /* wrap to the begiining of buffer */
 800675c:	2600      	movs	r6, #0
 800675e:	e7d3      	b.n	8006708 <CircularQueue_Sense+0x3a>
 8006760:	f1c4 0401 	rsb	r4, r4, #1
 8006764:	e7f6      	b.n	8006754 <CircularQueue_Sense+0x86>
        eltSize = (q->elementSize == 0) ? q->qBuff[FirstElemetPos]+ ((q->qBuff[MOD((FirstElemetPos+1), q->queueMaxSize)])<<8) : q->elementSize;
 8006766:	462a      	mov	r2, r5
        FirstElemetPos = 0; /* wrap to the begiining of buffer */
 8006768:	2600      	movs	r6, #0
 800676a:	e7cd      	b.n	8006708 <CircularQueue_Sense+0x3a>
  uint16_t eltSize = 0;
 800676c:	2200      	movs	r2, #0
  uint8_t* x= NULL;
 800676e:	4610      	mov	r0, r2
 8006770:	e7d1      	b.n	8006716 <CircularQueue_Sense+0x48>
	...

08006774 <Adv_Cancel>:
 *
 *SPECIFIC FUNCTIONS FOR CUSTOM
 *
 *************************************************************/
static void Adv_Cancel( void )
{
 8006774:	b508      	push	{r3, lr}
/* USER CODE BEGIN Adv_Cancel_1 */

/* USER CODE END Adv_Cancel_1 */

  if (BleApplicationContext.Device_Connection_Status != APP_BLE_CONNECTED_SERVER)
 8006776:	4b0c      	ldr	r3, [pc, #48]	; (80067a8 <Adv_Cancel+0x34>)
 8006778:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800677c:	2b05      	cmp	r3, #5
 800677e:	d100      	bne.n	8006782 <Adv_Cancel+0xe>

/* USER CODE BEGIN Adv_Cancel_2 */

/* USER CODE END Adv_Cancel_2 */
  return;
}
 8006780:	bd08      	pop	{r3, pc}
    result = aci_gap_set_non_discoverable();
 8006782:	f7fe fd7b 	bl	800527c <aci_gap_set_non_discoverable>
    BleApplicationContext.Device_Connection_Status = APP_BLE_IDLE;
 8006786:	4b08      	ldr	r3, [pc, #32]	; (80067a8 <Adv_Cancel+0x34>)
 8006788:	2200      	movs	r2, #0
 800678a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    if (result == BLE_STATUS_SUCCESS)
 800678e:	b930      	cbnz	r0, 800679e <Adv_Cancel+0x2a>
      APP_DBG_MSG("  \r\n\r");APP_DBG_MSG("** STOP ADVERTISING **  \r\n\r");
 8006790:	4806      	ldr	r0, [pc, #24]	; (80067ac <Adv_Cancel+0x38>)
 8006792:	f000 fd85 	bl	80072a0 <iprintf>
 8006796:	4806      	ldr	r0, [pc, #24]	; (80067b0 <Adv_Cancel+0x3c>)
 8006798:	f000 fd82 	bl	80072a0 <iprintf>
 800679c:	e7f0      	b.n	8006780 <Adv_Cancel+0xc>
      APP_DBG_MSG("** STOP ADVERTISING **  Failed \r\n\r");
 800679e:	4805      	ldr	r0, [pc, #20]	; (80067b4 <Adv_Cancel+0x40>)
 80067a0:	f000 fd7e 	bl	80072a0 <iprintf>
  return;
 80067a4:	e7ec      	b.n	8006780 <Adv_Cancel+0xc>
 80067a6:	bf00      	nop
 80067a8:	20000180 	.word	0x20000180
 80067ac:	080087a4 	.word	0x080087a4
 80067b0:	080087ac 	.word	0x080087ac
 80067b4:	080087c8 	.word	0x080087c8

080067b8 <Ble_Tl_Init>:
{
 80067b8:	b500      	push	{lr}
 80067ba:	b083      	sub	sp, #12
  Hci_Tl_Init_Conf.p_cmdbuffer = (uint8_t*)&BleCmdBuffer;
 80067bc:	4b05      	ldr	r3, [pc, #20]	; (80067d4 <Ble_Tl_Init+0x1c>)
 80067be:	9300      	str	r3, [sp, #0]
  Hci_Tl_Init_Conf.StatusNotCallBack = BLE_StatusNot;
 80067c0:	4b05      	ldr	r3, [pc, #20]	; (80067d8 <Ble_Tl_Init+0x20>)
 80067c2:	9301      	str	r3, [sp, #4]
  hci_init(BLE_UserEvtRx, (void*) &Hci_Tl_Init_Conf);
 80067c4:	4669      	mov	r1, sp
 80067c6:	4805      	ldr	r0, [pc, #20]	; (80067dc <Ble_Tl_Init+0x24>)
 80067c8:	f7ff fa46 	bl	8005c58 <hci_init>
}
 80067cc:	b003      	add	sp, #12
 80067ce:	f85d fb04 	ldr.w	pc, [sp], #4
 80067d2:	bf00      	nop
 80067d4:	200300d4 	.word	0x200300d4
 80067d8:	080067fb 	.word	0x080067fb
 80067dc:	080067e1 	.word	0x080067e1

080067e0 <BLE_UserEvtRx>:
  UTIL_SEQ_WaitEvt(1 << CFG_IDLEEVT_HCI_CMD_EVT_RSP_ID);
  return;
}

static void BLE_UserEvtRx( void * pPayload )
{
 80067e0:	b510      	push	{r4, lr}
 80067e2:	4604      	mov	r4, r0
  SVCCTL_UserEvtFlowStatus_t svctl_return_status;
  tHCI_UserEvtRxParam *pParam;

  pParam = (tHCI_UserEvtRxParam *)pPayload;

  svctl_return_status = SVCCTL_UserEvtRx((void *)&(pParam->pckt->evtserial));
 80067e4:	6840      	ldr	r0, [r0, #4]
 80067e6:	3008      	adds	r0, #8
 80067e8:	f7ff f958 	bl	8005a9c <SVCCTL_UserEvtRx>
  if (svctl_return_status != SVCCTL_UserEvtFlowDisable)
 80067ec:	b110      	cbz	r0, 80067f4 <BLE_UserEvtRx+0x14>
  {
    pParam->status = HCI_TL_UserEventFlow_Enable;
 80067ee:	2301      	movs	r3, #1
 80067f0:	7023      	strb	r3, [r4, #0]
  {
    pParam->status = HCI_TL_UserEventFlow_Disable;
  }

  return;
}
 80067f2:	bd10      	pop	{r4, pc}
    pParam->status = HCI_TL_UserEventFlow_Disable;
 80067f4:	2300      	movs	r3, #0
 80067f6:	7023      	strb	r3, [r4, #0]
  return;
 80067f8:	e7fb      	b.n	80067f2 <BLE_UserEvtRx+0x12>

080067fa <BLE_StatusNot>:

static void BLE_StatusNot( HCI_TL_CmdStatus_t status )
{
 80067fa:	b508      	push	{r3, lr}
  uint32_t task_id_list;
  switch (status)
 80067fc:	b110      	cbz	r0, 8006804 <BLE_StatusNot+0xa>
 80067fe:	2801      	cmp	r0, #1
 8006800:	d004      	beq.n	800680c <BLE_StatusNot+0x12>

    default:
      break;
  }
  return;
}
 8006802:	bd08      	pop	{r3, pc}
      UTIL_SEQ_PauseTask(task_id_list);
 8006804:	200f      	movs	r0, #15
 8006806:	f000 fbf9 	bl	8006ffc <UTIL_SEQ_PauseTask>
      break;
 800680a:	e7fa      	b.n	8006802 <BLE_StatusNot+0x8>
      UTIL_SEQ_ResumeTask(task_id_list);
 800680c:	200f      	movs	r0, #15
 800680e:	f000 fc03 	bl	8007018 <UTIL_SEQ_ResumeTask>
  return;
 8006812:	e7f6      	b.n	8006802 <BLE_StatusNot+0x8>

08006814 <BleGetBdAddress>:
{
 8006814:	b508      	push	{r3, lr}
  *         802.15.4 64-bit Device Address EUI-64.
  * @retval Values between Min_Data=0x00 and Max_Data=0xFFFF
  */
__STATIC_INLINE uint32_t LL_FLASH_GetUDN(void)
{
  return (uint32_t)(READ_REG(*((uint32_t *)UID64_BASE)));
 8006816:	4b0e      	ldr	r3, [pc, #56]	; (8006850 <BleGetBdAddress+0x3c>)
 8006818:	681a      	ldr	r2, [r3, #0]
  if(udn != 0xFFFFFFFF)
 800681a:	f1b2 3fff 	cmp.w	r2, #4294967295
 800681e:	d010      	beq.n	8006842 <BleGetBdAddress+0x2e>
  *         For STM32WBxxxx devices, the ST Company ID is 0x0080E1
  * @retval Values between Min_Data=0x00 and Max_Data=0xFFFFFF (ex: ST Company ID is 0x0080E1)
  */
__STATIC_INLINE uint32_t LL_FLASH_GetSTCompanyID(void)
{
  return (uint32_t)(((READ_REG(*((uint32_t *)UID64_BASE + 1U))) >> 8U ) & 0x00FFFFFFU);
 8006820:	3304      	adds	r3, #4
 8006822:	681b      	ldr	r3, [r3, #0]
    bd_addr_udn[0] = (uint8_t)(udn & 0x000000FF);
 8006824:	480b      	ldr	r0, [pc, #44]	; (8006854 <BleGetBdAddress+0x40>)
 8006826:	7002      	strb	r2, [r0, #0]
    bd_addr_udn[1] = (uint8_t)( (udn & 0x0000FF00) >> 8 );
 8006828:	f3c2 2207 	ubfx	r2, r2, #8, #8
 800682c:	7042      	strb	r2, [r0, #1]
    bd_addr_udn[2] = (uint8_t)device_id;
 800682e:	7083      	strb	r3, [r0, #2]
    bd_addr_udn[3] = (uint8_t)(company_id & 0x000000FF);
 8006830:	f3c3 2207 	ubfx	r2, r3, #8, #8
 8006834:	70c2      	strb	r2, [r0, #3]
    bd_addr_udn[4] = (uint8_t)( (company_id & 0x0000FF00) >> 8 );
 8006836:	f3c3 4207 	ubfx	r2, r3, #16, #8
 800683a:	7102      	strb	r2, [r0, #4]
    bd_addr_udn[5] = (uint8_t)( (company_id & 0x00FF0000) >> 16 );
 800683c:	0e1b      	lsrs	r3, r3, #24
 800683e:	7143      	strb	r3, [r0, #5]
}
 8006840:	bd08      	pop	{r3, pc}
    otp_addr = OTP_Read(0);
 8006842:	2000      	movs	r0, #0
 8006844:	f7ff fd4e 	bl	80062e4 <OTP_Read>
    if(otp_addr)
 8006848:	2800      	cmp	r0, #0
 800684a:	d1f9      	bne.n	8006840 <BleGetBdAddress+0x2c>
      bd_addr = M_bd_addr;
 800684c:	4802      	ldr	r0, [pc, #8]	; (8006858 <BleGetBdAddress+0x44>)
  return bd_addr;
 800684e:	e7f7      	b.n	8006840 <BleGetBdAddress+0x2c>
 8006850:	1fff7580 	.word	0x1fff7580
 8006854:	200012b8 	.word	0x200012b8
 8006858:	080089d8 	.word	0x080089d8

0800685c <Ble_Hci_Gap_Gatt_Init>:
static void Ble_Hci_Gap_Gatt_Init(void){
 800685c:	b570      	push	{r4, r5, r6, lr}
 800685e:	b088      	sub	sp, #32
  uint16_t appearance[1] = { BLE_CFG_GAP_APPEARANCE };
 8006860:	2400      	movs	r4, #0
 8006862:	f8ad 4018 	strh.w	r4, [sp, #24]
  hci_reset();
 8006866:	f7ff f878 	bl	800595a <hci_reset>
  bd_addr = BleGetBdAddress();
 800686a:	f7ff ffd3 	bl	8006814 <BleGetBdAddress>
 800686e:	4602      	mov	r2, r0
  aci_hal_write_config_data(CONFIG_DATA_PUBADDR_OFFSET,
 8006870:	2106      	movs	r1, #6
 8006872:	4620      	mov	r0, r4
 8006874:	f7fe fff1 	bl	800585a <aci_hal_write_config_data>
  aci_hal_write_config_data( CONFIG_DATA_IR_OFFSET, CONFIG_DATA_IR_LEN, (uint8_t*)BLE_CFG_IR_VALUE );
 8006878:	4a2a      	ldr	r2, [pc, #168]	; (8006924 <Ble_Hci_Gap_Gatt_Init+0xc8>)
 800687a:	2110      	movs	r1, #16
 800687c:	2018      	movs	r0, #24
 800687e:	f7fe ffec 	bl	800585a <aci_hal_write_config_data>
  aci_hal_write_config_data( CONFIG_DATA_ER_OFFSET, CONFIG_DATA_ER_LEN, (uint8_t*)BLE_CFG_ER_VALUE );
 8006882:	4a29      	ldr	r2, [pc, #164]	; (8006928 <Ble_Hci_Gap_Gatt_Init+0xcc>)
 8006884:	2110      	movs	r1, #16
 8006886:	2008      	movs	r0, #8
 8006888:	f7fe ffe7 	bl	800585a <aci_hal_write_config_data>
  aci_hal_set_tx_power_level(1, CFG_TX_POWER);
 800688c:	2118      	movs	r1, #24
 800688e:	2001      	movs	r0, #1
 8006890:	f7ff f813 	bl	80058ba <aci_hal_set_tx_power_level>
  aci_gatt_init();
 8006894:	f7fe feb2 	bl	80055fc <aci_gatt_init>
    aci_gap_init(role,
 8006898:	f10d 031a 	add.w	r3, sp, #26
 800689c:	9301      	str	r3, [sp, #4]
 800689e:	ab07      	add	r3, sp, #28
 80068a0:	9300      	str	r3, [sp, #0]
 80068a2:	f10d 031e 	add.w	r3, sp, #30
 80068a6:	2208      	movs	r2, #8
 80068a8:	4621      	mov	r1, r4
 80068aa:	2001      	movs	r0, #1
 80068ac:	f7fe fdf0 	bl	8005490 <aci_gap_init>
    if (aci_gatt_update_char_value(gap_service_handle, gap_dev_name_char_handle, 0, strlen(name), (uint8_t *) name))
 80068b0:	4b1e      	ldr	r3, [pc, #120]	; (800692c <Ble_Hci_Gap_Gatt_Init+0xd0>)
 80068b2:	9300      	str	r3, [sp, #0]
 80068b4:	2308      	movs	r3, #8
 80068b6:	4622      	mov	r2, r4
 80068b8:	f8bd 101c 	ldrh.w	r1, [sp, #28]
 80068bc:	f8bd 001e 	ldrh.w	r0, [sp, #30]
 80068c0:	f7fe ff6e 	bl	80057a0 <aci_gatt_update_char_value>
  if(aci_gatt_update_char_value(gap_service_handle,
 80068c4:	ab06      	add	r3, sp, #24
 80068c6:	9300      	str	r3, [sp, #0]
 80068c8:	2302      	movs	r3, #2
 80068ca:	4622      	mov	r2, r4
 80068cc:	f8bd 101a 	ldrh.w	r1, [sp, #26]
 80068d0:	f8bd 001e 	ldrh.w	r0, [sp, #30]
 80068d4:	f7fe ff64 	bl	80057a0 <aci_gatt_update_char_value>
  hci_le_set_default_phy(ALL_PHYS_PREFERENCE,TX_2M_PREFERRED,RX_2M_PREFERRED);
 80068d8:	2202      	movs	r2, #2
 80068da:	4611      	mov	r1, r2
 80068dc:	4620      	mov	r0, r4
 80068de:	f7ff f85c 	bl	800599a <hci_le_set_default_phy>
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.ioCapability = CFG_IO_CAPABILITY;
 80068e2:	4d13      	ldr	r5, [pc, #76]	; (8006930 <Ble_Hci_Gap_Gatt_Init+0xd4>)
 80068e4:	2601      	movs	r6, #1
 80068e6:	702e      	strb	r6, [r5, #0]
  aci_gap_set_io_capability(BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.ioCapability);
 80068e8:	4630      	mov	r0, r6
 80068ea:	f7fe fd42 	bl	8005372 <aci_gap_set_io_capability>
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.mitm_mode = CFG_MITM_PROTECTION;
 80068ee:	706e      	strb	r6, [r5, #1]
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.encryptionKeySizeMin = CFG_ENCRYPTION_KEY_SIZE_MIN;
 80068f0:	2308      	movs	r3, #8
 80068f2:	712b      	strb	r3, [r5, #4]
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.encryptionKeySizeMax = CFG_ENCRYPTION_KEY_SIZE_MAX;
 80068f4:	2210      	movs	r2, #16
 80068f6:	716a      	strb	r2, [r5, #5]
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.Use_Fixed_Pin = CFG_USED_FIXED_PIN;
 80068f8:	70ec      	strb	r4, [r5, #3]
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.Fixed_Pin = CFG_FIXED_PIN;
 80068fa:	490e      	ldr	r1, [pc, #56]	; (8006934 <Ble_Hci_Gap_Gatt_Init+0xd8>)
 80068fc:	60a9      	str	r1, [r5, #8]
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.bonding_mode = CFG_BONDING_MODE;
 80068fe:	70ac      	strb	r4, [r5, #2]
  aci_gap_set_authentication_requirement(BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.bonding_mode,
 8006900:	9404      	str	r4, [sp, #16]
 8006902:	9103      	str	r1, [sp, #12]
 8006904:	9402      	str	r4, [sp, #8]
 8006906:	9201      	str	r2, [sp, #4]
 8006908:	9300      	str	r3, [sp, #0]
 800690a:	4623      	mov	r3, r4
 800690c:	4632      	mov	r2, r6
 800690e:	4631      	mov	r1, r6
 8006910:	4620      	mov	r0, r4
 8006912:	f7fe fd54 	bl	80053be <aci_gap_set_authentication_requirement>
   if (BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.bonding_mode)
 8006916:	78ab      	ldrb	r3, [r5, #2]
 8006918:	b90b      	cbnz	r3, 800691e <Ble_Hci_Gap_Gatt_Init+0xc2>
}
 800691a:	b008      	add	sp, #32
 800691c:	bd70      	pop	{r4, r5, r6, pc}
     aci_gap_configure_whitelist();
 800691e:	f7fe fe23 	bl	8005568 <aci_gap_configure_whitelist>
}
 8006922:	e7fa      	b.n	800691a <Ble_Hci_Gap_Gatt_Init+0xbe>
 8006924:	080089c8 	.word	0x080089c8
 8006928:	080089b8 	.word	0x080089b8
 800692c:	080087ec 	.word	0x080087ec
 8006930:	20000180 	.word	0x20000180
 8006934:	0001b207 	.word	0x0001b207

08006938 <Adv_Request>:
{
 8006938:	b500      	push	{lr}
 800693a:	b089      	sub	sp, #36	; 0x24
    BleApplicationContext.Device_Connection_Status = New_Status;
 800693c:	4b0f      	ldr	r3, [pc, #60]	; (800697c <Adv_Request+0x44>)
 800693e:	f883 0080 	strb.w	r0, [r3, #128]	; 0x80
    ret = aci_gap_set_discoverable(
 8006942:	2000      	movs	r0, #0
 8006944:	9006      	str	r0, [sp, #24]
 8006946:	9005      	str	r0, [sp, #20]
 8006948:	9004      	str	r0, [sp, #16]
 800694a:	9003      	str	r0, [sp, #12]
 800694c:	9002      	str	r0, [sp, #8]
 800694e:	9001      	str	r0, [sp, #4]
 8006950:	9000      	str	r0, [sp, #0]
 8006952:	4603      	mov	r3, r0
 8006954:	22a0      	movs	r2, #160	; 0xa0
 8006956:	2180      	movs	r1, #128	; 0x80
 8006958:	f7fe fcb1 	bl	80052be <aci_gap_set_discoverable>
    ret = aci_gap_update_adv_data(sizeof(ad_data), (uint8_t*) ad_data);
 800695c:	4908      	ldr	r1, [pc, #32]	; (8006980 <Adv_Request+0x48>)
 800695e:	200d      	movs	r0, #13
 8006960:	f7fe fdd5 	bl	800550e <aci_gap_update_adv_data>
    if (ret == BLE_STATUS_SUCCESS)
 8006964:	b928      	cbnz	r0, 8006972 <Adv_Request+0x3a>
        APP_DBG_MSG("Successfully Start Fast Advertising \n" );
 8006966:	4807      	ldr	r0, [pc, #28]	; (8006984 <Adv_Request+0x4c>)
 8006968:	f000 fd20 	bl	80073ac <puts>
}
 800696c:	b009      	add	sp, #36	; 0x24
 800696e:	f85d fb04 	ldr.w	pc, [sp], #4
 8006972:	4601      	mov	r1, r0
        APP_DBG_MSG("Start Fast Advertising Failed , result: %d \n", ret);
 8006974:	4804      	ldr	r0, [pc, #16]	; (8006988 <Adv_Request+0x50>)
 8006976:	f000 fc93 	bl	80072a0 <iprintf>
  return;
 800697a:	e7f7      	b.n	800696c <Adv_Request+0x34>
 800697c:	20000180 	.word	0x20000180
 8006980:	20000014 	.word	0x20000014
 8006984:	080087f8 	.word	0x080087f8
 8006988:	08008820 	.word	0x08008820

0800698c <APP_BLE_Init>:
{
 800698c:	b530      	push	{r4, r5, lr}
 800698e:	b08f      	sub	sp, #60	; 0x3c
  SHCI_C2_Ble_Init_Cmd_Packet_t ble_init_cmd_packet =
 8006990:	ac01      	add	r4, sp, #4
 8006992:	4d1b      	ldr	r5, [pc, #108]	; (8006a00 <APP_BLE_Init+0x74>)
 8006994:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8006996:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006998:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800699a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800699c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800699e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80069a0:	682b      	ldr	r3, [r5, #0]
 80069a2:	7023      	strb	r3, [r4, #0]
  Ble_Tl_Init( );
 80069a4:	f7ff ff08 	bl	80067b8 <Ble_Tl_Init>
  UTIL_LPM_SetOffMode(1 << CFG_LPM_APP_BLE, UTIL_LPM_DISABLE);
 80069a8:	2101      	movs	r1, #1
 80069aa:	2002      	movs	r0, #2
 80069ac:	f000 faf8 	bl	8006fa0 <UTIL_LPM_SetOffMode>
  UTIL_SEQ_RegTask( 1<<CFG_TASK_HCI_ASYNCH_EVT_ID, UTIL_SEQ_RFU, hci_user_evt_proc);
 80069b0:	4a14      	ldr	r2, [pc, #80]	; (8006a04 <APP_BLE_Init+0x78>)
 80069b2:	2100      	movs	r1, #0
 80069b4:	2002      	movs	r0, #2
 80069b6:	f000 fc23 	bl	8007200 <UTIL_SEQ_RegTask>
  if (SHCI_C2_BLE_Init( &ble_init_cmd_packet ) != SHCI_Success)
 80069ba:	a801      	add	r0, sp, #4
 80069bc:	f7ff f898 	bl	8005af0 <SHCI_C2_BLE_Init>
 80069c0:	b9d8      	cbnz	r0, 80069fa <APP_BLE_Init+0x6e>
  Ble_Hci_Gap_Gatt_Init();
 80069c2:	f7ff ff4b 	bl	800685c <Ble_Hci_Gap_Gatt_Init>
  SVCCTL_Init();
 80069c6:	f7ff f853 	bl	8005a70 <SVCCTL_Init>
  BleApplicationContext.Device_Connection_Status = APP_BLE_IDLE;
 80069ca:	4c0f      	ldr	r4, [pc, #60]	; (8006a08 <APP_BLE_Init+0x7c>)
 80069cc:	2500      	movs	r5, #0
 80069ce:	f884 5080 	strb.w	r5, [r4, #128]	; 0x80
  BleApplicationContext.BleApplicationContext_legacy.connectionHandle = 0xFFFF;
 80069d2:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80069d6:	82e3      	strh	r3, [r4, #22]
  UTIL_SEQ_RegTask( 1<<CFG_TASK_ADV_CANCEL_ID, UTIL_SEQ_RFU, Adv_Cancel);
 80069d8:	4a0c      	ldr	r2, [pc, #48]	; (8006a0c <APP_BLE_Init+0x80>)
 80069da:	4629      	mov	r1, r5
 80069dc:	2001      	movs	r0, #1
 80069de:	f000 fc0f 	bl	8007200 <UTIL_SEQ_RegTask>
  aci_hal_set_radio_activity_mask(0x0006);
 80069e2:	2006      	movs	r0, #6
 80069e4:	f7fe ff92 	bl	800590c <aci_hal_set_radio_activity_mask>
  Custom_APP_Init();
 80069e8:	f000 f8c0 	bl	8006b6c <Custom_APP_Init>
  BleApplicationContext.BleApplicationContext_legacy.advtServUUID[0] = NULL;
 80069ec:	7665      	strb	r5, [r4, #25]
  BleApplicationContext.BleApplicationContext_legacy.advtServUUIDlen = 0;
 80069ee:	7625      	strb	r5, [r4, #24]
   Adv_Request(APP_BLE_FAST_ADV);
 80069f0:	2001      	movs	r0, #1
 80069f2:	f7ff ffa1 	bl	8006938 <Adv_Request>
}
 80069f6:	b00f      	add	sp, #60	; 0x3c
 80069f8:	bd30      	pop	{r4, r5, pc}
    Error_Handler();
 80069fa:	f7fa fccd 	bl	8001398 <Error_Handler>
 80069fe:	e7e0      	b.n	80069c2 <APP_BLE_Init+0x36>
 8006a00:	08008298 	.word	0x08008298
 8006a04:	08005c7d 	.word	0x08005c7d
 8006a08:	20000180 	.word	0x20000180
 8006a0c:	08006775 	.word	0x08006775

08006a10 <SVCCTL_App_Notification>:
{
 8006a10:	b510      	push	{r4, lr}
 8006a12:	4604      	mov	r4, r0
  switch (event_pckt->evt)
 8006a14:	7843      	ldrb	r3, [r0, #1]
 8006a16:	2b3e      	cmp	r3, #62	; 0x3e
 8006a18:	d01f      	beq.n	8006a5a <SVCCTL_App_Notification+0x4a>
 8006a1a:	2bff      	cmp	r3, #255	; 0xff
 8006a1c:	d044      	beq.n	8006aa8 <SVCCTL_App_Notification+0x98>
 8006a1e:	2b05      	cmp	r3, #5
 8006a20:	d001      	beq.n	8006a26 <SVCCTL_App_Notification+0x16>
}
 8006a22:	2001      	movs	r0, #1
 8006a24:	bd10      	pop	{r4, pc}
      if (disconnection_complete_event->Connection_Handle == BleApplicationContext.BleApplicationContext_legacy.connectionHandle)
 8006a26:	8882      	ldrh	r2, [r0, #4]
 8006a28:	4b3d      	ldr	r3, [pc, #244]	; (8006b20 <SVCCTL_App_Notification+0x110>)
 8006a2a:	8adb      	ldrh	r3, [r3, #22]
 8006a2c:	429a      	cmp	r2, r3
 8006a2e:	d00b      	beq.n	8006a48 <SVCCTL_App_Notification+0x38>
      Adv_Request(APP_BLE_FAST_ADV);
 8006a30:	2001      	movs	r0, #1
 8006a32:	f7ff ff81 	bl	8006938 <Adv_Request>
      handleNotification.Custom_Evt_Opcode = CUSTOM_DISCON_HANDLE_EVT;
 8006a36:	483b      	ldr	r0, [pc, #236]	; (8006b24 <SVCCTL_App_Notification+0x114>)
 8006a38:	2301      	movs	r3, #1
 8006a3a:	7003      	strb	r3, [r0, #0]
      handleNotification.ConnectionHandle = BleApplicationContext.BleApplicationContext_legacy.connectionHandle;
 8006a3c:	4b38      	ldr	r3, [pc, #224]	; (8006b20 <SVCCTL_App_Notification+0x110>)
 8006a3e:	8adb      	ldrh	r3, [r3, #22]
 8006a40:	8043      	strh	r3, [r0, #2]
      Custom_APP_Notification(&handleNotification);
 8006a42:	f000 f891 	bl	8006b68 <Custom_APP_Notification>
    break; /* HCI_DISCONNECTION_COMPLETE_EVT_CODE */
 8006a46:	e7ec      	b.n	8006a22 <SVCCTL_App_Notification+0x12>
        BleApplicationContext.BleApplicationContext_legacy.connectionHandle = 0;
 8006a48:	4b35      	ldr	r3, [pc, #212]	; (8006b20 <SVCCTL_App_Notification+0x110>)
 8006a4a:	2200      	movs	r2, #0
 8006a4c:	82da      	strh	r2, [r3, #22]
        BleApplicationContext.Device_Connection_Status = APP_BLE_IDLE;
 8006a4e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
        APP_DBG_MSG("\r\n\r** DISCONNECTION EVENT WITH CLIENT \n");
 8006a52:	4835      	ldr	r0, [pc, #212]	; (8006b28 <SVCCTL_App_Notification+0x118>)
 8006a54:	f000 fcaa 	bl	80073ac <puts>
 8006a58:	e7ea      	b.n	8006a30 <SVCCTL_App_Notification+0x20>
      switch (meta_evt->subevent)
 8006a5a:	78c3      	ldrb	r3, [r0, #3]
 8006a5c:	2b01      	cmp	r3, #1
 8006a5e:	d005      	beq.n	8006a6c <SVCCTL_App_Notification+0x5c>
 8006a60:	2b03      	cmp	r3, #3
 8006a62:	d1de      	bne.n	8006a22 <SVCCTL_App_Notification+0x12>
          APP_DBG_MSG("\r\n\r** CONNECTION UPDATE EVENT WITH CLIENT \n");
 8006a64:	4831      	ldr	r0, [pc, #196]	; (8006b2c <SVCCTL_App_Notification+0x11c>)
 8006a66:	f000 fca1 	bl	80073ac <puts>
          break;
 8006a6a:	e7da      	b.n	8006a22 <SVCCTL_App_Notification+0x12>
          APP_DBG_MSG("HCI_LE_CONNECTION_COMPLETE_SUBEVT_CODE for connection handle 0x%x\n", connection_complete_event->Connection_Handle);
 8006a6c:	f8b0 1005 	ldrh.w	r1, [r0, #5]
 8006a70:	482f      	ldr	r0, [pc, #188]	; (8006b30 <SVCCTL_App_Notification+0x120>)
 8006a72:	f000 fc15 	bl	80072a0 <iprintf>
          if (BleApplicationContext.Device_Connection_Status == APP_BLE_LP_CONNECTING)
 8006a76:	4b2a      	ldr	r3, [pc, #168]	; (8006b20 <SVCCTL_App_Notification+0x110>)
 8006a78:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8006a7c:	2b04      	cmp	r3, #4
 8006a7e:	d00e      	beq.n	8006a9e <SVCCTL_App_Notification+0x8e>
            BleApplicationContext.Device_Connection_Status = APP_BLE_CONNECTED_SERVER;
 8006a80:	4b27      	ldr	r3, [pc, #156]	; (8006b20 <SVCCTL_App_Notification+0x110>)
 8006a82:	2205      	movs	r2, #5
 8006a84:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
          BleApplicationContext.BleApplicationContext_legacy.connectionHandle = connection_complete_event->Connection_Handle;
 8006a88:	f8b4 3005 	ldrh.w	r3, [r4, #5]
 8006a8c:	4a24      	ldr	r2, [pc, #144]	; (8006b20 <SVCCTL_App_Notification+0x110>)
 8006a8e:	82d3      	strh	r3, [r2, #22]
          handleNotification.Custom_Evt_Opcode = CUSTOM_CONN_HANDLE_EVT;
 8006a90:	4824      	ldr	r0, [pc, #144]	; (8006b24 <SVCCTL_App_Notification+0x114>)
 8006a92:	2200      	movs	r2, #0
 8006a94:	7002      	strb	r2, [r0, #0]
          handleNotification.ConnectionHandle = BleApplicationContext.BleApplicationContext_legacy.connectionHandle;
 8006a96:	8043      	strh	r3, [r0, #2]
          Custom_APP_Notification(&handleNotification);
 8006a98:	f000 f866 	bl	8006b68 <Custom_APP_Notification>
        break; /* HCI_LE_CONNECTION_COMPLETE_SUBEVT_CODE */
 8006a9c:	e7c1      	b.n	8006a22 <SVCCTL_App_Notification+0x12>
            BleApplicationContext.Device_Connection_Status = APP_BLE_CONNECTED_CLIENT;
 8006a9e:	4b20      	ldr	r3, [pc, #128]	; (8006b20 <SVCCTL_App_Notification+0x110>)
 8006aa0:	2206      	movs	r2, #6
 8006aa2:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
 8006aa6:	e7ef      	b.n	8006a88 <SVCCTL_App_Notification+0x78>
      switch (blecore_evt->ecode)
 8006aa8:	f8b0 3003 	ldrh.w	r3, [r0, #3]
 8006aac:	f2a3 4301 	subw	r3, r3, #1025	; 0x401
 8006ab0:	2b09      	cmp	r3, #9
 8006ab2:	d8b6      	bhi.n	8006a22 <SVCCTL_App_Notification+0x12>
 8006ab4:	a201      	add	r2, pc, #4	; (adr r2, 8006abc <SVCCTL_App_Notification+0xac>)
 8006ab6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006aba:	bf00      	nop
 8006abc:	08006b17 	.word	0x08006b17
 8006ac0:	08006af5 	.word	0x08006af5
 8006ac4:	08006a23 	.word	0x08006a23
 8006ac8:	08006a23 	.word	0x08006a23
 8006acc:	08006a23 	.word	0x08006a23
 8006ad0:	08006a23 	.word	0x08006a23
 8006ad4:	08006ae5 	.word	0x08006ae5
 8006ad8:	08006a23 	.word	0x08006a23
 8006adc:	08006b01 	.word	0x08006b01
 8006ae0:	08006aed 	.word	0x08006aed
        APP_DBG_MSG("\r\n\r** ACI_GAP_PROC_COMPLETE_VSEVT_CODE \n");
 8006ae4:	4813      	ldr	r0, [pc, #76]	; (8006b34 <SVCCTL_App_Notification+0x124>)
 8006ae6:	f000 fc61 	bl	80073ac <puts>
          break; /* ACI_GAP_PROC_COMPLETE_VSEVT_CODE */
 8006aea:	e79a      	b.n	8006a22 <SVCCTL_App_Notification+0x12>
         APP_DBG_MSG("\r\n\r** ACI_GAP_KEYPRESS_NOTIFICATION_VSEVT_CODE \n");
 8006aec:	4812      	ldr	r0, [pc, #72]	; (8006b38 <SVCCTL_App_Notification+0x128>)
 8006aee:	f000 fc5d 	bl	80073ac <puts>
        break;
 8006af2:	e796      	b.n	8006a22 <SVCCTL_App_Notification+0x12>
            aci_gap_pass_key_resp(BleApplicationContext.BleApplicationContext_legacy.connectionHandle, CFG_FIXED_PIN);
 8006af4:	4911      	ldr	r1, [pc, #68]	; (8006b3c <SVCCTL_App_Notification+0x12c>)
 8006af6:	4b0a      	ldr	r3, [pc, #40]	; (8006b20 <SVCCTL_App_Notification+0x110>)
 8006af8:	8ad8      	ldrh	r0, [r3, #22]
 8006afa:	f7fe fca0 	bl	800543e <aci_gap_pass_key_resp>
        break;
 8006afe:	e790      	b.n	8006a22 <SVCCTL_App_Notification+0x12>
            APP_DBG_MSG("numeric_value = %ld\n", numeric_value);
 8006b00:	f8d0 1007 	ldr.w	r1, [r0, #7]
 8006b04:	480e      	ldr	r0, [pc, #56]	; (8006b40 <SVCCTL_App_Notification+0x130>)
 8006b06:	f000 fbcb 	bl	80072a0 <iprintf>
            aci_gap_numeric_comparison_value_confirm_yesno(BleApplicationContext.BleApplicationContext_legacy.connectionHandle, YES);
 8006b0a:	2101      	movs	r1, #1
 8006b0c:	4b04      	ldr	r3, [pc, #16]	; (8006b20 <SVCCTL_App_Notification+0x110>)
 8006b0e:	8ad8      	ldrh	r0, [r3, #22]
 8006b10:	f7fe fd4b 	bl	80055aa <aci_gap_numeric_comparison_value_confirm_yesno>
        break;
 8006b14:	e785      	b.n	8006a22 <SVCCTL_App_Notification+0x12>
            APP_DBG_MSG("BLE_CTRL_App_Notification: ACI_GAP_PAIRING_COMPLETE_VSEVT_CODE, pairing_complete->Status = %d\n",pairing_complete->Status);
 8006b16:	79c1      	ldrb	r1, [r0, #7]
 8006b18:	480a      	ldr	r0, [pc, #40]	; (8006b44 <SVCCTL_App_Notification+0x134>)
 8006b1a:	f000 fbc1 	bl	80072a0 <iprintf>
        break;
 8006b1e:	e780      	b.n	8006a22 <SVCCTL_App_Notification+0x12>
 8006b20:	20000180 	.word	0x20000180
 8006b24:	20001620 	.word	0x20001620
 8006b28:	08008850 	.word	0x08008850
 8006b2c:	08008878 	.word	0x08008878
 8006b30:	080088a4 	.word	0x080088a4
 8006b34:	080088e8 	.word	0x080088e8
 8006b38:	08008910 	.word	0x08008910
 8006b3c:	0001b207 	.word	0x0001b207
 8006b40:	08008940 	.word	0x08008940
 8006b44:	08008958 	.word	0x08008958

08006b48 <hci_notify_asynch_evt>:
{
 8006b48:	b508      	push	{r3, lr}
  UTIL_SEQ_SetTask(1 << CFG_TASK_HCI_ASYNCH_EVT_ID, CFG_SCH_PRIO_0);
 8006b4a:	2100      	movs	r1, #0
 8006b4c:	2002      	movs	r0, #2
 8006b4e:	f000 fa3d 	bl	8006fcc <UTIL_SEQ_SetTask>
}
 8006b52:	bd08      	pop	{r3, pc}

08006b54 <hci_cmd_resp_release>:
{
 8006b54:	b508      	push	{r3, lr}
  UTIL_SEQ_SetEvt(1 << CFG_IDLEEVT_HCI_CMD_EVT_RSP_ID);
 8006b56:	2001      	movs	r0, #1
 8006b58:	f000 fa6a 	bl	8007030 <UTIL_SEQ_SetEvt>
}
 8006b5c:	bd08      	pop	{r3, pc}

08006b5e <hci_cmd_resp_wait>:
{
 8006b5e:	b508      	push	{r3, lr}
  UTIL_SEQ_WaitEvt(1 << CFG_IDLEEVT_HCI_CMD_EVT_RSP_ID);
 8006b60:	2001      	movs	r0, #1
 8006b62:	f000 fb21 	bl	80071a8 <UTIL_SEQ_WaitEvt>
}
 8006b66:	bd08      	pop	{r3, pc}

08006b68 <Custom_APP_Notification>:
  /* USER CODE BEGIN CUSTOM_APP_Notification_2 */

  /* USER CODE END CUSTOM_APP_Notification_2 */

  return;
}
 8006b68:	4770      	bx	lr
	...

08006b6c <Custom_APP_Init>:

void Custom_APP_Init(void)
{
 8006b6c:	b508      	push	{r3, lr}
  /* USER CODE BEGIN CUSTOM_APP_Init */

	My_app_Init();
 8006b6e:	f7fa fde3 	bl	8001738 <My_app_Init>

	APP_DBG_MSG("Custom_APP Init Done \n");
 8006b72:	4802      	ldr	r0, [pc, #8]	; (8006b7c <Custom_APP_Init+0x10>)
 8006b74:	f000 fc1a 	bl	80073ac <puts>

  /* USER CODE END CUSTOM_APP_Init */
  return;
}
 8006b78:	bd08      	pop	{r3, pc}
 8006b7a:	bf00      	nop
 8006b7c:	080089e0 	.word	0x080089e0

08006b80 <Custom_STM_Event_Handler>:
 * @brief  Event handler
 * @param  Event: Address of the buffer holding the Event
 * @retval Ack: Return whether the Event has been managed or not
 */
static SVCCTL_EvtAckStatus_t Custom_STM_Event_Handler(void *Event)
{
 8006b80:	b508      	push	{r3, lr}
  /* USER CODE END Custom_STM_Event_Handler_1 */

  return_value = SVCCTL_EvtNotAck;
  event_pckt = (hci_event_pckt *)(((hci_uart_pckt*)Event)->data);

  switch(event_pckt->evt)
 8006b82:	7843      	ldrb	r3, [r0, #1]
 8006b84:	2bff      	cmp	r3, #255	; 0xff
 8006b86:	d001      	beq.n	8006b8c <Custom_STM_Event_Handler+0xc>
  return_value = SVCCTL_EvtNotAck;
 8006b88:	2000      	movs	r0, #0
  /* USER CODE BEGIN Custom_STM_Event_Handler_2 */

  /* USER CODE END Custom_STM_Event_Handler_2 */

  return(return_value);
}/* end Custom_STM_Event_Handler */
 8006b8a:	bd08      	pop	{r3, pc}
      switch(blecore_evt->ecode)
 8006b8c:	f8b0 2003 	ldrh.w	r2, [r0, #3]
 8006b90:	f640 4314 	movw	r3, #3092	; 0xc14
 8006b94:	429a      	cmp	r2, r3
 8006b96:	d001      	beq.n	8006b9c <Custom_STM_Event_Handler+0x1c>
  return_value = SVCCTL_EvtNotAck;
 8006b98:	2000      	movs	r0, #0
 8006b9a:	e7f6      	b.n	8006b8a <Custom_STM_Event_Handler+0xa>
          if(read_req->Attribute_Handle == (CustomContext.CustomLnfHdle + CHARACTERISTIC_VALUE_ATTRIBUTE_OFFSET))
 8006b9c:	f8b0 2007 	ldrh.w	r2, [r0, #7]
 8006ba0:	4b11      	ldr	r3, [pc, #68]	; (8006be8 <Custom_STM_Event_Handler+0x68>)
 8006ba2:	885b      	ldrh	r3, [r3, #2]
 8006ba4:	3301      	adds	r3, #1
 8006ba6:	429a      	cmp	r2, r3
 8006ba8:	d00b      	beq.n	8006bc2 <Custom_STM_Event_Handler+0x42>
          else if(read_req->Attribute_Handle == (CustomContext.CustomLscHdle + CHARACTERISTIC_VALUE_ATTRIBUTE_OFFSET))
 8006baa:	4b0f      	ldr	r3, [pc, #60]	; (8006be8 <Custom_STM_Event_Handler+0x68>)
 8006bac:	889b      	ldrh	r3, [r3, #4]
 8006bae:	3301      	adds	r3, #1
 8006bb0:	429a      	cmp	r2, r3
 8006bb2:	d00c      	beq.n	8006bce <Custom_STM_Event_Handler+0x4e>
          else if(read_req->Attribute_Handle == (CustomContext.CustomBatlvlHdle + CHARACTERISTIC_VALUE_ATTRIBUTE_OFFSET))
 8006bb4:	4b0c      	ldr	r3, [pc, #48]	; (8006be8 <Custom_STM_Event_Handler+0x68>)
 8006bb6:	891b      	ldrh	r3, [r3, #8]
 8006bb8:	3301      	adds	r3, #1
 8006bba:	429a      	cmp	r2, r3
 8006bbc:	d00d      	beq.n	8006bda <Custom_STM_Event_Handler+0x5a>
  return_value = SVCCTL_EvtNotAck;
 8006bbe:	2000      	movs	r0, #0
 8006bc0:	e7e3      	b.n	8006b8a <Custom_STM_Event_Handler+0xa>
            aci_gatt_allow_read(read_req->Connection_Handle);
 8006bc2:	f8b0 0005 	ldrh.w	r0, [r0, #5]
 8006bc6:	f7fe fe20 	bl	800580a <aci_gatt_allow_read>
            return_value = SVCCTL_EvtAckFlowEnable;
 8006bca:	2001      	movs	r0, #1
 8006bcc:	e7dd      	b.n	8006b8a <Custom_STM_Event_Handler+0xa>
            aci_gatt_allow_read(read_req->Connection_Handle);
 8006bce:	f8b0 0005 	ldrh.w	r0, [r0, #5]
 8006bd2:	f7fe fe1a 	bl	800580a <aci_gatt_allow_read>
            return_value = SVCCTL_EvtAckFlowEnable;
 8006bd6:	2001      	movs	r0, #1
 8006bd8:	e7d7      	b.n	8006b8a <Custom_STM_Event_Handler+0xa>
            aci_gatt_allow_read(read_req->Connection_Handle);
 8006bda:	f8b0 0005 	ldrh.w	r0, [r0, #5]
 8006bde:	f7fe fe14 	bl	800580a <aci_gatt_allow_read>
            return_value = SVCCTL_EvtAckFlowEnable;
 8006be2:	2001      	movs	r0, #1
 8006be4:	e7d1      	b.n	8006b8a <Custom_STM_Event_Handler+0xa>
 8006be6:	bf00      	nop
 8006be8:	20000160 	.word	0x20000160

08006bec <SVCCTL_InitCustomSvc>:
 * @brief  Service initialization
 * @param  None
 * @retval None
 */
void SVCCTL_InitCustomSvc(void)
{
 8006bec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006bf0:	b08a      	sub	sp, #40	; 0x28
  /* USER CODE END SVCCTL_InitCustomSvc_1 */

  /**
   *  Register the event handler to the BLE controller
   */
  SVCCTL_RegisterSvcHandler(Custom_STM_Event_Handler);
 8006bf2:	482e      	ldr	r0, [pc, #184]	; (8006cac <SVCCTL_InitCustomSvc+0xc0>)
 8006bf4:	f7fe ff48 	bl	8005a88 <SVCCTL_RegisterSvcHandler>
   *                                1 for LNFeature broadcast property +
   *                                1 for LocationandSpeed broadcast property +
   *                              = 7
   */

  uuid.Char_UUID_16 = 0x1819;
 8006bf8:	f641 0319 	movw	r3, #6169	; 0x1819
 8006bfc:	f8ad 3018 	strh.w	r3, [sp, #24]
  aci_gatt_add_service(UUID_TYPE_16,
 8006c00:	4c2b      	ldr	r4, [pc, #172]	; (8006cb0 <SVCCTL_InitCustomSvc+0xc4>)
 8006c02:	9400      	str	r4, [sp, #0]
 8006c04:	2307      	movs	r3, #7
 8006c06:	2201      	movs	r2, #1
 8006c08:	a906      	add	r1, sp, #24
 8006c0a:	4610      	mov	r0, r2
 8006c0c:	f7fe fd18 	bl	8005640 <aci_gatt_add_service>
                       &(CustomContext.CustomLsHdle));

  /**
   *  LNFeature
   */
  uuid.Char_UUID_16 = 0x2a6a;
 8006c10:	f642 236a 	movw	r3, #10858	; 0x2a6a
 8006c14:	f8ad 3018 	strh.w	r3, [sp, #24]
  aci_gatt_add_char(CustomContext.CustomLsHdle,
 8006c18:	4623      	mov	r3, r4
 8006c1a:	f833 0b02 	ldrh.w	r0, [r3], #2
 8006c1e:	9305      	str	r3, [sp, #20]
 8006c20:	2500      	movs	r5, #0
 8006c22:	9504      	str	r5, [sp, #16]
 8006c24:	2710      	movs	r7, #16
 8006c26:	9703      	str	r7, [sp, #12]
 8006c28:	2607      	movs	r6, #7
 8006c2a:	9602      	str	r6, [sp, #8]
 8006c2c:	9501      	str	r5, [sp, #4]
 8006c2e:	f04f 0803 	mov.w	r8, #3
 8006c32:	f8cd 8000 	str.w	r8, [sp]
 8006c36:	2301      	movs	r3, #1
 8006c38:	aa06      	add	r2, sp, #24
 8006c3a:	4619      	mov	r1, r3
 8006c3c:	f7fe fd50 	bl	80056e0 <aci_gatt_add_char>
                    CHAR_VALUE_LEN_CONSTANT,
                    &(CustomContext.CustomLnfHdle));
  /**
   *  LocationandSpeed
   */
  uuid.Char_UUID_16 = 0x2a67;
 8006c40:	f642 2367 	movw	r3, #10855	; 0x2a67
 8006c44:	f8ad 3018 	strh.w	r3, [sp, #24]
  aci_gatt_add_char(CustomContext.CustomLsHdle,
 8006c48:	4623      	mov	r3, r4
 8006c4a:	f833 0b04 	ldrh.w	r0, [r3], #4
 8006c4e:	9305      	str	r3, [sp, #20]
 8006c50:	9504      	str	r5, [sp, #16]
 8006c52:	9703      	str	r7, [sp, #12]
 8006c54:	9602      	str	r6, [sp, #8]
 8006c56:	9501      	str	r5, [sp, #4]
 8006c58:	f8cd 8000 	str.w	r8, [sp]
 8006c5c:	2301      	movs	r3, #1
 8006c5e:	aa06      	add	r2, sp, #24
 8006c60:	4619      	mov	r1, r3
 8006c62:	f7fe fd3d 	bl	80056e0 <aci_gatt_add_char>
   * service_max_attribute_record = 1 for BatteryService +
   *                                2 for BatteryLevel +
   *                              = 3
   */

  uuid.Char_UUID_16 = 0x180f;
 8006c66:	f641 030f 	movw	r3, #6159	; 0x180f
 8006c6a:	f8ad 3018 	strh.w	r3, [sp, #24]
  aci_gatt_add_service(UUID_TYPE_16,
 8006c6e:	1da3      	adds	r3, r4, #6
 8006c70:	9300      	str	r3, [sp, #0]
 8006c72:	4643      	mov	r3, r8
 8006c74:	2201      	movs	r2, #1
 8006c76:	a906      	add	r1, sp, #24
 8006c78:	4610      	mov	r0, r2
 8006c7a:	f7fe fce1 	bl	8005640 <aci_gatt_add_service>
                       &(CustomContext.CustomBatservHdle));

  /**
   *  BatteryLevel
   */
  uuid.Char_UUID_16 = 0x2a19;
 8006c7e:	f642 2319 	movw	r3, #10777	; 0x2a19
 8006c82:	f8ad 3018 	strh.w	r3, [sp, #24]
  aci_gatt_add_char(CustomContext.CustomBatservHdle,
 8006c86:	f104 0308 	add.w	r3, r4, #8
 8006c8a:	9305      	str	r3, [sp, #20]
 8006c8c:	9504      	str	r5, [sp, #16]
 8006c8e:	9703      	str	r7, [sp, #12]
 8006c90:	9602      	str	r6, [sp, #8]
 8006c92:	9501      	str	r5, [sp, #4]
 8006c94:	2302      	movs	r3, #2
 8006c96:	9300      	str	r3, [sp, #0]
 8006c98:	2301      	movs	r3, #1
 8006c9a:	aa06      	add	r2, sp, #24
 8006c9c:	4619      	mov	r1, r3
 8006c9e:	88e0      	ldrh	r0, [r4, #6]
 8006ca0:	f7fe fd1e 	bl	80056e0 <aci_gatt_add_char>
  /* USER CODE BEGIN SVCCTL_InitCustomSvc_2 */

  /* USER CODE END SVCCTL_InitCustomSvc_2 */

  return;
}
 8006ca4:	b00a      	add	sp, #40	; 0x28
 8006ca6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006caa:	bf00      	nop
 8006cac:	08006b81 	.word	0x08006b81
 8006cb0:	20000160 	.word	0x20000160

08006cb4 <Custom_STM_App_Update_Char>:
 * @param  CharOpcode: Characteristic identifier
 * @param  Service_Instance: Instance of the service to which the characteristic belongs
 *
 */
tBleStatus Custom_STM_App_Update_Char(Custom_STM_Char_Opcode_t CharOpcode, uint8_t *pPayload)
{
 8006cb4:	b500      	push	{lr}
 8006cb6:	b083      	sub	sp, #12
  tBleStatus result = BLE_STATUS_INVALID_PARAMS;
  /* USER CODE BEGIN Custom_STM_App_Update_Char_1 */

  /* USER CODE END Custom_STM_App_Update_Char_1 */

  switch(CharOpcode)
 8006cb8:	2801      	cmp	r0, #1
 8006cba:	d00f      	beq.n	8006cdc <Custom_STM_App_Update_Char+0x28>
 8006cbc:	2802      	cmp	r0, #2
 8006cbe:	d016      	beq.n	8006cee <Custom_STM_App_Update_Char+0x3a>
 8006cc0:	b118      	cbz	r0, 8006cca <Custom_STM_App_Update_Char+0x16>
 8006cc2:	2092      	movs	r0, #146	; 0x92
  /* USER CODE BEGIN Custom_STM_App_Update_Char_2 */

  /* USER CODE END Custom_STM_App_Update_Char_2 */

  return result;
}
 8006cc4:	b003      	add	sp, #12
 8006cc6:	f85d fb04 	ldr.w	pc, [sp], #4
      result = aci_gatt_update_char_value(CustomContext.CustomLsHdle,
 8006cca:	480d      	ldr	r0, [pc, #52]	; (8006d00 <Custom_STM_App_Update_Char+0x4c>)
 8006ccc:	9100      	str	r1, [sp, #0]
 8006cce:	2301      	movs	r3, #1
 8006cd0:	2200      	movs	r2, #0
 8006cd2:	8841      	ldrh	r1, [r0, #2]
 8006cd4:	8800      	ldrh	r0, [r0, #0]
 8006cd6:	f7fe fd63 	bl	80057a0 <aci_gatt_update_char_value>
      break;
 8006cda:	e7f3      	b.n	8006cc4 <Custom_STM_App_Update_Char+0x10>
      result = aci_gatt_update_char_value(CustomContext.CustomLsHdle,
 8006cdc:	4808      	ldr	r0, [pc, #32]	; (8006d00 <Custom_STM_App_Update_Char+0x4c>)
 8006cde:	9100      	str	r1, [sp, #0]
 8006ce0:	2301      	movs	r3, #1
 8006ce2:	2200      	movs	r2, #0
 8006ce4:	8881      	ldrh	r1, [r0, #4]
 8006ce6:	8800      	ldrh	r0, [r0, #0]
 8006ce8:	f7fe fd5a 	bl	80057a0 <aci_gatt_update_char_value>
      break;
 8006cec:	e7ea      	b.n	8006cc4 <Custom_STM_App_Update_Char+0x10>
      result = aci_gatt_update_char_value(CustomContext.CustomBatservHdle,
 8006cee:	4804      	ldr	r0, [pc, #16]	; (8006d00 <Custom_STM_App_Update_Char+0x4c>)
 8006cf0:	9100      	str	r1, [sp, #0]
 8006cf2:	2301      	movs	r3, #1
 8006cf4:	2200      	movs	r2, #0
 8006cf6:	8901      	ldrh	r1, [r0, #8]
 8006cf8:	88c0      	ldrh	r0, [r0, #6]
 8006cfa:	f7fe fd51 	bl	80057a0 <aci_gatt_update_char_value>
      break;
 8006cfe:	e7e1      	b.n	8006cc4 <Custom_STM_App_Update_Char+0x10>
 8006d00:	20000160 	.word	0x20000160

08006d04 <HW_IPCC_MM_FreeBufHandler>:

  return;
}

static void HW_IPCC_MM_FreeBufHandler( void )
{
 8006d04:	b510      	push	{r4, lr}
  SET_BIT(IPCCx->C1MR, Channel << IPCC_C1MR_CH1FM_Pos);
 8006d06:	4c06      	ldr	r4, [pc, #24]	; (8006d20 <HW_IPCC_MM_FreeBufHandler+0x1c>)
 8006d08:	6863      	ldr	r3, [r4, #4]
 8006d0a:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8006d0e:	6063      	str	r3, [r4, #4]
  LL_C1_IPCC_DisableTransmitChannel( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL );

  FreeBufCb();
 8006d10:	4b04      	ldr	r3, [pc, #16]	; (8006d24 <HW_IPCC_MM_FreeBufHandler+0x20>)
 8006d12:	681b      	ldr	r3, [r3, #0]
 8006d14:	4798      	blx	r3
  WRITE_REG(IPCCx->C1SCR, Channel << IPCC_C1SCR_CH1S_Pos);
 8006d16:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8006d1a:	60a3      	str	r3, [r4, #8]

  LL_C1_IPCC_SetFlag_CHx( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL );

  return;
}
 8006d1c:	bd10      	pop	{r4, pc}
 8006d1e:	bf00      	nop
 8006d20:	58000c00 	.word	0x58000c00
 8006d24:	200012c0 	.word	0x200012c0

08006d28 <HW_IPCC_Enable>:
{
 8006d28:	b082      	sub	sp, #8
  * @retval None
  */
__STATIC_INLINE void LL_C2_AHB3_GRP1_EnableClock(uint32_t Periphs)
{
  __IO uint32_t tmpreg;
  SET_BIT(RCC->C2AHB3ENR, Periphs);
 8006d2a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006d2e:	f8d3 2150 	ldr.w	r2, [r3, #336]	; 0x150
 8006d32:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8006d36:	f8c3 2150 	str.w	r2, [r3, #336]	; 0x150
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->C2AHB3ENR, Periphs);
 8006d3a:	f8d3 3150 	ldr.w	r3, [r3, #336]	; 0x150
 8006d3e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8006d42:	9301      	str	r3, [sp, #4]
  (void)tmpreg;
 8006d44:	9b01      	ldr	r3, [sp, #4]
  SET_BIT(EXTI->C2EMR2, ExtiLine);
 8006d46:	4b0a      	ldr	r3, [pc, #40]	; (8006d70 <HW_IPCC_Enable+0x48>)
 8006d48:	f8d3 20d4 	ldr.w	r2, [r3, #212]	; 0xd4
 8006d4c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006d50:	f8c3 20d4 	str.w	r2, [r3, #212]	; 0xd4
  *         (*) value not defined in all devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableRisingTrig_32_63(uint32_t ExtiLine)
{
  SET_BIT(EXTI->RTSR2, ExtiLine);
 8006d54:	6a1a      	ldr	r2, [r3, #32]
 8006d56:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006d5a:	621a      	str	r2, [r3, #32]
  __SEV( );       /* Set the internal event flag and send an event to the CPU2 */
 8006d5c:	bf40      	sev
  __WFE( );       /* Clear the internal event flag */
 8006d5e:	bf20      	wfe
  SET_BIT(PWR->CR4, PWR_CR4_C2BOOT);
 8006d60:	4a04      	ldr	r2, [pc, #16]	; (8006d74 <HW_IPCC_Enable+0x4c>)
 8006d62:	68d3      	ldr	r3, [r2, #12]
 8006d64:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006d68:	60d3      	str	r3, [r2, #12]
}
 8006d6a:	b002      	add	sp, #8
 8006d6c:	4770      	bx	lr
 8006d6e:	bf00      	nop
 8006d70:	58000800 	.word	0x58000800
 8006d74:	58000400 	.word	0x58000400

08006d78 <HW_IPCC_Init>:
{
 8006d78:	b500      	push	{lr}
 8006d7a:	b083      	sub	sp, #12
  SET_BIT(RCC->AHB3ENR, Periphs);
 8006d7c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006d80:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8006d82:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8006d86:	651a      	str	r2, [r3, #80]	; 0x50
  tmpreg = READ_BIT(RCC->AHB3ENR, Periphs);
 8006d88:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006d8a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8006d8e:	9301      	str	r3, [sp, #4]
  (void)tmpreg;
 8006d90:	9b01      	ldr	r3, [sp, #4]
  SET_BIT(IPCCx->C1CR, IPCC_C1CR_RXOIE);
 8006d92:	4b09      	ldr	r3, [pc, #36]	; (8006db8 <HW_IPCC_Init+0x40>)
 8006d94:	681a      	ldr	r2, [r3, #0]
 8006d96:	f042 0201 	orr.w	r2, r2, #1
 8006d9a:	601a      	str	r2, [r3, #0]
  SET_BIT(IPCCx->C1CR, IPCC_C1CR_TXFIE);
 8006d9c:	681a      	ldr	r2, [r3, #0]
 8006d9e:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8006da2:	601a      	str	r2, [r3, #0]
  HAL_NVIC_EnableIRQ(IPCC_C1_RX_IRQn);
 8006da4:	202c      	movs	r0, #44	; 0x2c
 8006da6:	f7fb ff0b 	bl	8002bc0 <HAL_NVIC_EnableIRQ>
  HAL_NVIC_EnableIRQ(IPCC_C1_TX_IRQn);
 8006daa:	202d      	movs	r0, #45	; 0x2d
 8006dac:	f7fb ff08 	bl	8002bc0 <HAL_NVIC_EnableIRQ>
}
 8006db0:	b003      	add	sp, #12
 8006db2:	f85d fb04 	ldr.w	pc, [sp], #4
 8006db6:	bf00      	nop
 8006db8:	58000c00 	.word	0x58000c00

08006dbc <HW_IPCC_BLE_Init>:
  CLEAR_BIT(IPCCx->C1MR, Channel);
 8006dbc:	4a02      	ldr	r2, [pc, #8]	; (8006dc8 <HW_IPCC_BLE_Init+0xc>)
 8006dbe:	6853      	ldr	r3, [r2, #4]
 8006dc0:	f023 0301 	bic.w	r3, r3, #1
 8006dc4:	6053      	str	r3, [r2, #4]
}
 8006dc6:	4770      	bx	lr
 8006dc8:	58000c00 	.word	0x58000c00

08006dcc <HW_IPCC_BLE_SendCmd>:
  WRITE_REG(IPCCx->C1SCR, Channel << IPCC_C1SCR_CH1S_Pos);
 8006dcc:	4b02      	ldr	r3, [pc, #8]	; (8006dd8 <HW_IPCC_BLE_SendCmd+0xc>)
 8006dce:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8006dd2:	609a      	str	r2, [r3, #8]
}
 8006dd4:	4770      	bx	lr
 8006dd6:	bf00      	nop
 8006dd8:	58000c00 	.word	0x58000c00

08006ddc <HW_IPCC_BLE_AclDataEvtHandler>:
{
 8006ddc:	b508      	push	{r3, lr}
  SET_BIT(IPCCx->C1MR, Channel << IPCC_C1MR_CH1FM_Pos);
 8006dde:	4a04      	ldr	r2, [pc, #16]	; (8006df0 <HW_IPCC_BLE_AclDataEvtHandler+0x14>)
 8006de0:	6853      	ldr	r3, [r2, #4]
 8006de2:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8006de6:	6053      	str	r3, [r2, #4]
  HW_IPCC_BLE_AclDataAckNot();
 8006de8:	f7ff f960 	bl	80060ac <HW_IPCC_BLE_AclDataAckNot>
}
 8006dec:	bd08      	pop	{r3, pc}
 8006dee:	bf00      	nop
 8006df0:	58000c00 	.word	0x58000c00

08006df4 <HW_IPCC_BLE_EvtHandler>:
{
 8006df4:	b508      	push	{r3, lr}
  HW_IPCC_BLE_RxEvtNot();
 8006df6:	f7ff f943 	bl	8006080 <HW_IPCC_BLE_RxEvtNot>
  WRITE_REG(IPCCx->C1SCR, Channel);
 8006dfa:	4b02      	ldr	r3, [pc, #8]	; (8006e04 <HW_IPCC_BLE_EvtHandler+0x10>)
 8006dfc:	2201      	movs	r2, #1
 8006dfe:	609a      	str	r2, [r3, #8]
}
 8006e00:	bd08      	pop	{r3, pc}
 8006e02:	bf00      	nop
 8006e04:	58000c00 	.word	0x58000c00

08006e08 <HW_IPCC_SYS_Init>:
  CLEAR_BIT(IPCCx->C1MR, Channel);
 8006e08:	4a02      	ldr	r2, [pc, #8]	; (8006e14 <HW_IPCC_SYS_Init+0xc>)
 8006e0a:	6853      	ldr	r3, [r2, #4]
 8006e0c:	f023 0302 	bic.w	r3, r3, #2
 8006e10:	6053      	str	r3, [r2, #4]
}
 8006e12:	4770      	bx	lr
 8006e14:	58000c00 	.word	0x58000c00

08006e18 <HW_IPCC_SYS_SendCmd>:
  WRITE_REG(IPCCx->C1SCR, Channel << IPCC_C1SCR_CH1S_Pos);
 8006e18:	4b04      	ldr	r3, [pc, #16]	; (8006e2c <HW_IPCC_SYS_SendCmd+0x14>)
 8006e1a:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8006e1e:	609a      	str	r2, [r3, #8]
  CLEAR_BIT(IPCCx->C1MR, Channel << IPCC_C1MR_CH1FM_Pos);
 8006e20:	685a      	ldr	r2, [r3, #4]
 8006e22:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
 8006e26:	605a      	str	r2, [r3, #4]
}
 8006e28:	4770      	bx	lr
 8006e2a:	bf00      	nop
 8006e2c:	58000c00 	.word	0x58000c00

08006e30 <HW_IPCC_SYS_CmdEvtHandler>:
{
 8006e30:	b508      	push	{r3, lr}
  SET_BIT(IPCCx->C1MR, Channel << IPCC_C1MR_CH1FM_Pos);
 8006e32:	4a04      	ldr	r2, [pc, #16]	; (8006e44 <HW_IPCC_SYS_CmdEvtHandler+0x14>)
 8006e34:	6853      	ldr	r3, [r2, #4]
 8006e36:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006e3a:	6053      	str	r3, [r2, #4]
  HW_IPCC_SYS_CmdEvtNot();
 8006e3c:	f7ff f96a 	bl	8006114 <HW_IPCC_SYS_CmdEvtNot>
}
 8006e40:	bd08      	pop	{r3, pc}
 8006e42:	bf00      	nop
 8006e44:	58000c00 	.word	0x58000c00

08006e48 <HW_IPCC_Tx_Handler>:
{
 8006e48:	b508      	push	{r3, lr}
  return ((READ_BIT(IPCCx->C1TOC2SR, Channel) == (Channel)) ? 1UL : 0UL);
 8006e4a:	4b14      	ldr	r3, [pc, #80]	; (8006e9c <HW_IPCC_Tx_Handler+0x54>)
 8006e4c:	68db      	ldr	r3, [r3, #12]
 8006e4e:	f013 0f02 	tst.w	r3, #2
 8006e52:	d104      	bne.n	8006e5e <HW_IPCC_Tx_Handler+0x16>
  if (HW_IPCC_TX_PENDING( HW_IPCC_SYSTEM_CMD_RSP_CHANNEL ))
 8006e54:	4b11      	ldr	r3, [pc, #68]	; (8006e9c <HW_IPCC_Tx_Handler+0x54>)
 8006e56:	685b      	ldr	r3, [r3, #4]
 8006e58:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 8006e5c:	d014      	beq.n	8006e88 <HW_IPCC_Tx_Handler+0x40>
 8006e5e:	4b0f      	ldr	r3, [pc, #60]	; (8006e9c <HW_IPCC_Tx_Handler+0x54>)
 8006e60:	68db      	ldr	r3, [r3, #12]
 8006e62:	f013 0f08 	tst.w	r3, #8
 8006e66:	d104      	bne.n	8006e72 <HW_IPCC_Tx_Handler+0x2a>
  else if (HW_IPCC_TX_PENDING( HW_IPCC_MM_RELEASE_BUFFER_CHANNEL ))
 8006e68:	4b0c      	ldr	r3, [pc, #48]	; (8006e9c <HW_IPCC_Tx_Handler+0x54>)
 8006e6a:	685b      	ldr	r3, [r3, #4]
 8006e6c:	f413 2f00 	tst.w	r3, #524288	; 0x80000
 8006e70:	d00d      	beq.n	8006e8e <HW_IPCC_Tx_Handler+0x46>
 8006e72:	4b0a      	ldr	r3, [pc, #40]	; (8006e9c <HW_IPCC_Tx_Handler+0x54>)
 8006e74:	68db      	ldr	r3, [r3, #12]
 8006e76:	f013 0f20 	tst.w	r3, #32
 8006e7a:	d104      	bne.n	8006e86 <HW_IPCC_Tx_Handler+0x3e>
  else if (HW_IPCC_TX_PENDING( HW_IPCC_HCI_ACL_DATA_CHANNEL ))
 8006e7c:	4b07      	ldr	r3, [pc, #28]	; (8006e9c <HW_IPCC_Tx_Handler+0x54>)
 8006e7e:	685b      	ldr	r3, [r3, #4]
 8006e80:	f413 1f00 	tst.w	r3, #2097152	; 0x200000
 8006e84:	d006      	beq.n	8006e94 <HW_IPCC_Tx_Handler+0x4c>
}
 8006e86:	bd08      	pop	{r3, pc}
    HW_IPCC_SYS_CmdEvtHandler();
 8006e88:	f7ff ffd2 	bl	8006e30 <HW_IPCC_SYS_CmdEvtHandler>
 8006e8c:	e7fb      	b.n	8006e86 <HW_IPCC_Tx_Handler+0x3e>
    HW_IPCC_MM_FreeBufHandler();
 8006e8e:	f7ff ff39 	bl	8006d04 <HW_IPCC_MM_FreeBufHandler>
 8006e92:	e7f8      	b.n	8006e86 <HW_IPCC_Tx_Handler+0x3e>
    HW_IPCC_BLE_AclDataEvtHandler();
 8006e94:	f7ff ffa2 	bl	8006ddc <HW_IPCC_BLE_AclDataEvtHandler>
  return;
 8006e98:	e7f5      	b.n	8006e86 <HW_IPCC_Tx_Handler+0x3e>
 8006e9a:	bf00      	nop
 8006e9c:	58000c00 	.word	0x58000c00

08006ea0 <HW_IPCC_SYS_EvtHandler>:
{
 8006ea0:	b508      	push	{r3, lr}
  HW_IPCC_SYS_EvtNot();
 8006ea2:	f7ff f945 	bl	8006130 <HW_IPCC_SYS_EvtNot>
  WRITE_REG(IPCCx->C1SCR, Channel);
 8006ea6:	4b02      	ldr	r3, [pc, #8]	; (8006eb0 <HW_IPCC_SYS_EvtHandler+0x10>)
 8006ea8:	2202      	movs	r2, #2
 8006eaa:	609a      	str	r2, [r3, #8]
}
 8006eac:	bd08      	pop	{r3, pc}
 8006eae:	bf00      	nop
 8006eb0:	58000c00 	.word	0x58000c00

08006eb4 <HW_IPCC_MM_SendFreeBuf>:
{
 8006eb4:	b508      	push	{r3, lr}
  return ((READ_BIT(IPCCx->C1TOC2SR, Channel) == (Channel)) ? 1UL : 0UL);
 8006eb6:	4b09      	ldr	r3, [pc, #36]	; (8006edc <HW_IPCC_MM_SendFreeBuf+0x28>)
 8006eb8:	68db      	ldr	r3, [r3, #12]
 8006eba:	f013 0f08 	tst.w	r3, #8
 8006ebe:	d105      	bne.n	8006ecc <HW_IPCC_MM_SendFreeBuf+0x18>
    cb();
 8006ec0:	4780      	blx	r0
  WRITE_REG(IPCCx->C1SCR, Channel << IPCC_C1SCR_CH1S_Pos);
 8006ec2:	4b06      	ldr	r3, [pc, #24]	; (8006edc <HW_IPCC_MM_SendFreeBuf+0x28>)
 8006ec4:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8006ec8:	609a      	str	r2, [r3, #8]
}
 8006eca:	bd08      	pop	{r3, pc}
    FreeBufCb = cb;
 8006ecc:	4b04      	ldr	r3, [pc, #16]	; (8006ee0 <HW_IPCC_MM_SendFreeBuf+0x2c>)
 8006ece:	6018      	str	r0, [r3, #0]
  CLEAR_BIT(IPCCx->C1MR, Channel << IPCC_C1MR_CH1FM_Pos);
 8006ed0:	4a02      	ldr	r2, [pc, #8]	; (8006edc <HW_IPCC_MM_SendFreeBuf+0x28>)
 8006ed2:	6853      	ldr	r3, [r2, #4]
 8006ed4:	f423 2300 	bic.w	r3, r3, #524288	; 0x80000
 8006ed8:	6053      	str	r3, [r2, #4]
}
 8006eda:	e7f6      	b.n	8006eca <HW_IPCC_MM_SendFreeBuf+0x16>
 8006edc:	58000c00 	.word	0x58000c00
 8006ee0:	200012c0 	.word	0x200012c0

08006ee4 <HW_IPCC_TRACES_Init>:
  CLEAR_BIT(IPCCx->C1MR, Channel);
 8006ee4:	4a02      	ldr	r2, [pc, #8]	; (8006ef0 <HW_IPCC_TRACES_Init+0xc>)
 8006ee6:	6853      	ldr	r3, [r2, #4]
 8006ee8:	f023 0308 	bic.w	r3, r3, #8
 8006eec:	6053      	str	r3, [r2, #4]
void HW_IPCC_TRACES_Init( void )
{
  LL_C1_IPCC_EnableReceiveChannel( IPCC, HW_IPCC_TRACES_CHANNEL );

  return;
}
 8006eee:	4770      	bx	lr
 8006ef0:	58000c00 	.word	0x58000c00

08006ef4 <HW_IPCC_TRACES_EvtHandler>:

static void HW_IPCC_TRACES_EvtHandler( void )
{
 8006ef4:	b508      	push	{r3, lr}
  HW_IPCC_TRACES_EvtNot();
 8006ef6:	f7ff f971 	bl	80061dc <HW_IPCC_TRACES_EvtNot>
  WRITE_REG(IPCCx->C1SCR, Channel);
 8006efa:	4b02      	ldr	r3, [pc, #8]	; (8006f04 <HW_IPCC_TRACES_EvtHandler+0x10>)
 8006efc:	2208      	movs	r2, #8
 8006efe:	609a      	str	r2, [r3, #8]

  LL_C1_IPCC_ClearFlag_CHx( IPCC, HW_IPCC_TRACES_CHANNEL );

  return;
}
 8006f00:	bd08      	pop	{r3, pc}
 8006f02:	bf00      	nop
 8006f04:	58000c00 	.word	0x58000c00

08006f08 <HW_IPCC_Rx_Handler>:
{
 8006f08:	b508      	push	{r3, lr}
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_C2_IPCC_IsActiveFlag_CHx(IPCC_TypeDef  const *const IPCCx, uint32_t Channel)
{
  return ((READ_BIT(IPCCx->C2TOC1SR, Channel) == (Channel)) ? 1UL : 0UL);
 8006f0a:	4b14      	ldr	r3, [pc, #80]	; (8006f5c <HW_IPCC_Rx_Handler+0x54>)
 8006f0c:	69db      	ldr	r3, [r3, #28]
 8006f0e:	f013 0f02 	tst.w	r3, #2
 8006f12:	d10a      	bne.n	8006f2a <HW_IPCC_Rx_Handler+0x22>
 8006f14:	4b11      	ldr	r3, [pc, #68]	; (8006f5c <HW_IPCC_Rx_Handler+0x54>)
 8006f16:	69db      	ldr	r3, [r3, #28]
 8006f18:	f013 0f01 	tst.w	r3, #1
 8006f1c:	d10d      	bne.n	8006f3a <HW_IPCC_Rx_Handler+0x32>
 8006f1e:	4b0f      	ldr	r3, [pc, #60]	; (8006f5c <HW_IPCC_Rx_Handler+0x54>)
 8006f20:	69db      	ldr	r3, [r3, #28]
 8006f22:	f013 0f08 	tst.w	r3, #8
 8006f26:	d110      	bne.n	8006f4a <HW_IPCC_Rx_Handler+0x42>
}
 8006f28:	bd08      	pop	{r3, pc}
  if (HW_IPCC_RX_PENDING( HW_IPCC_SYSTEM_EVENT_CHANNEL ))
 8006f2a:	4b0c      	ldr	r3, [pc, #48]	; (8006f5c <HW_IPCC_Rx_Handler+0x54>)
 8006f2c:	685b      	ldr	r3, [r3, #4]
 8006f2e:	f013 0f02 	tst.w	r3, #2
 8006f32:	d1ef      	bne.n	8006f14 <HW_IPCC_Rx_Handler+0xc>
      HW_IPCC_SYS_EvtHandler();
 8006f34:	f7ff ffb4 	bl	8006ea0 <HW_IPCC_SYS_EvtHandler>
 8006f38:	e7f6      	b.n	8006f28 <HW_IPCC_Rx_Handler+0x20>
  else if (HW_IPCC_RX_PENDING( HW_IPCC_BLE_EVENT_CHANNEL ))
 8006f3a:	4b08      	ldr	r3, [pc, #32]	; (8006f5c <HW_IPCC_Rx_Handler+0x54>)
 8006f3c:	685b      	ldr	r3, [r3, #4]
 8006f3e:	f013 0f01 	tst.w	r3, #1
 8006f42:	d1ec      	bne.n	8006f1e <HW_IPCC_Rx_Handler+0x16>
    HW_IPCC_BLE_EvtHandler();
 8006f44:	f7ff ff56 	bl	8006df4 <HW_IPCC_BLE_EvtHandler>
 8006f48:	e7ee      	b.n	8006f28 <HW_IPCC_Rx_Handler+0x20>
  else if (HW_IPCC_RX_PENDING( HW_IPCC_TRACES_CHANNEL ))
 8006f4a:	4b04      	ldr	r3, [pc, #16]	; (8006f5c <HW_IPCC_Rx_Handler+0x54>)
 8006f4c:	685b      	ldr	r3, [r3, #4]
 8006f4e:	f013 0f08 	tst.w	r3, #8
 8006f52:	d1e9      	bne.n	8006f28 <HW_IPCC_Rx_Handler+0x20>
    HW_IPCC_TRACES_EvtHandler();
 8006f54:	f7ff ffce 	bl	8006ef4 <HW_IPCC_TRACES_EvtHandler>
  return;
 8006f58:	e7e6      	b.n	8006f28 <HW_IPCC_Rx_Handler+0x20>
 8006f5a:	bf00      	nop
 8006f5c:	58000c00 	.word	0x58000c00

08006f60 <UTIL_LPM_Init>:
/** @addtogroup TINY_LPM_Exported_function
  * @{
  */
void UTIL_LPM_Init( void )
{
  StopModeDisable = UTIL_LPM_NO_BIT_SET;
 8006f60:	2300      	movs	r3, #0
 8006f62:	4a02      	ldr	r2, [pc, #8]	; (8006f6c <UTIL_LPM_Init+0xc>)
 8006f64:	6013      	str	r3, [r2, #0]
  OffModeDisable = UTIL_LPM_NO_BIT_SET;
 8006f66:	4a02      	ldr	r2, [pc, #8]	; (8006f70 <UTIL_LPM_Init+0x10>)
 8006f68:	6013      	str	r3, [r2, #0]
  UTIL_LPM_INIT_CRITICAL_SECTION( );
}
 8006f6a:	4770      	bx	lr
 8006f6c:	200012c8 	.word	0x200012c8
 8006f70:	200012c4 	.word	0x200012c4

08006f74 <UTIL_LPM_SetStopMode>:
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006f74:	f3ef 8310 	mrs	r3, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 8006f78:	b672      	cpsid	i

void UTIL_LPM_SetStopMode( UTIL_LPM_bm_t lpm_id_bm, UTIL_LPM_State_t state )
{
  UTIL_LPM_ENTER_CRITICAL_SECTION( );
  
  switch( state )
 8006f7a:	b141      	cbz	r1, 8006f8e <UTIL_LPM_SetStopMode+0x1a>
 8006f7c:	2901      	cmp	r1, #1
 8006f7e:	d103      	bne.n	8006f88 <UTIL_LPM_SetStopMode+0x14>
  {
  case UTIL_LPM_DISABLE:
    {
      StopModeDisable |= lpm_id_bm;
 8006f80:	4906      	ldr	r1, [pc, #24]	; (8006f9c <UTIL_LPM_SetStopMode+0x28>)
 8006f82:	680a      	ldr	r2, [r1, #0]
 8006f84:	4310      	orrs	r0, r2
 8006f86:	6008      	str	r0, [r1, #0]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006f88:	f383 8810 	msr	PRIMASK, r3
      break;
    }
  }
  
  UTIL_LPM_EXIT_CRITICAL_SECTION( );
}
 8006f8c:	4770      	bx	lr
      StopModeDisable &= ( ~lpm_id_bm );
 8006f8e:	4903      	ldr	r1, [pc, #12]	; (8006f9c <UTIL_LPM_SetStopMode+0x28>)
 8006f90:	680a      	ldr	r2, [r1, #0]
 8006f92:	ea22 0000 	bic.w	r0, r2, r0
 8006f96:	6008      	str	r0, [r1, #0]
      break;
 8006f98:	e7f6      	b.n	8006f88 <UTIL_LPM_SetStopMode+0x14>
 8006f9a:	bf00      	nop
 8006f9c:	200012c8 	.word	0x200012c8

08006fa0 <UTIL_LPM_SetOffMode>:
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006fa0:	f3ef 8310 	mrs	r3, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 8006fa4:	b672      	cpsid	i

void UTIL_LPM_SetOffMode( UTIL_LPM_bm_t lpm_id_bm, UTIL_LPM_State_t state )
{
  UTIL_LPM_ENTER_CRITICAL_SECTION( );
  
  switch(state)
 8006fa6:	b141      	cbz	r1, 8006fba <UTIL_LPM_SetOffMode+0x1a>
 8006fa8:	2901      	cmp	r1, #1
 8006faa:	d103      	bne.n	8006fb4 <UTIL_LPM_SetOffMode+0x14>
  {
  case UTIL_LPM_DISABLE:
    {
      OffModeDisable |= lpm_id_bm;
 8006fac:	4906      	ldr	r1, [pc, #24]	; (8006fc8 <UTIL_LPM_SetOffMode+0x28>)
 8006fae:	680a      	ldr	r2, [r1, #0]
 8006fb0:	4310      	orrs	r0, r2
 8006fb2:	6008      	str	r0, [r1, #0]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006fb4:	f383 8810 	msr	PRIMASK, r3
      break;
    }
  }
  
  UTIL_LPM_EXIT_CRITICAL_SECTION( );
}
 8006fb8:	4770      	bx	lr
      OffModeDisable &= ( ~lpm_id_bm );
 8006fba:	4903      	ldr	r1, [pc, #12]	; (8006fc8 <UTIL_LPM_SetOffMode+0x28>)
 8006fbc:	680a      	ldr	r2, [r1, #0]
 8006fbe:	ea22 0000 	bic.w	r0, r2, r0
 8006fc2:	6008      	str	r0, [r1, #0]
      break;
 8006fc4:	e7f6      	b.n	8006fb4 <UTIL_LPM_SetOffMode+0x14>
 8006fc6:	bf00      	nop
 8006fc8:	200012c4 	.word	0x200012c4

08006fcc <UTIL_SEQ_SetTask>:

  return;
}

void UTIL_SEQ_SetTask( UTIL_SEQ_bm_t TaskId_bm , uint32_t Task_Prio )
{
 8006fcc:	b410      	push	{r4}
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006fce:	f3ef 8410 	mrs	r4, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 8006fd2:	b672      	cpsid	i
  UTIL_SEQ_ENTER_CRITICAL_SECTION( );

  TaskSet |= TaskId_bm;
 8006fd4:	4a07      	ldr	r2, [pc, #28]	; (8006ff4 <UTIL_SEQ_SetTask+0x28>)
 8006fd6:	6813      	ldr	r3, [r2, #0]
 8006fd8:	4303      	orrs	r3, r0
 8006fda:	6013      	str	r3, [r2, #0]
  TaskPrio[Task_Prio].priority |= TaskId_bm;
 8006fdc:	4a06      	ldr	r2, [pc, #24]	; (8006ff8 <UTIL_SEQ_SetTask+0x2c>)
 8006fde:	f852 3031 	ldr.w	r3, [r2, r1, lsl #3]
 8006fe2:	4318      	orrs	r0, r3
 8006fe4:	f842 0031 	str.w	r0, [r2, r1, lsl #3]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006fe8:	f384 8810 	msr	PRIMASK, r4

  UTIL_SEQ_EXIT_CRITICAL_SECTION( );

  return;
}
 8006fec:	f85d 4b04 	ldr.w	r4, [sp], #4
 8006ff0:	4770      	bx	lr
 8006ff2:	bf00      	nop
 8006ff4:	20001368 	.word	0x20001368
 8006ff8:	20001358 	.word	0x20001358

08006ffc <UTIL_SEQ_PauseTask>:
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006ffc:	f3ef 8110 	mrs	r1, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 8007000:	b672      	cpsid	i

void UTIL_SEQ_PauseTask( UTIL_SEQ_bm_t TaskId_bm )
{
  UTIL_SEQ_ENTER_CRITICAL_SECTION( );

  TaskMask &= (~TaskId_bm);
 8007002:	4a04      	ldr	r2, [pc, #16]	; (8007014 <UTIL_SEQ_PauseTask+0x18>)
 8007004:	6813      	ldr	r3, [r2, #0]
 8007006:	ea23 0000 	bic.w	r0, r3, r0
 800700a:	6010      	str	r0, [r2, #0]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800700c:	f381 8810 	msr	PRIMASK, r1

  UTIL_SEQ_EXIT_CRITICAL_SECTION( );

  return;
}
 8007010:	4770      	bx	lr
 8007012:	bf00      	nop
 8007014:	20000028 	.word	0x20000028

08007018 <UTIL_SEQ_ResumeTask>:
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007018:	f3ef 8110 	mrs	r1, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 800701c:	b672      	cpsid	i

void UTIL_SEQ_ResumeTask( UTIL_SEQ_bm_t TaskId_bm )
{
  UTIL_SEQ_ENTER_CRITICAL_SECTION( );

  TaskMask |= TaskId_bm;
 800701e:	4a03      	ldr	r2, [pc, #12]	; (800702c <UTIL_SEQ_ResumeTask+0x14>)
 8007020:	6813      	ldr	r3, [r2, #0]
 8007022:	4318      	orrs	r0, r3
 8007024:	6010      	str	r0, [r2, #0]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007026:	f381 8810 	msr	PRIMASK, r1

  UTIL_SEQ_EXIT_CRITICAL_SECTION( );

  return;
}
 800702a:	4770      	bx	lr
 800702c:	20000028 	.word	0x20000028

08007030 <UTIL_SEQ_SetEvt>:
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007030:	f3ef 8110 	mrs	r1, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 8007034:	b672      	cpsid	i

void UTIL_SEQ_SetEvt( UTIL_SEQ_bm_t EvtId_bm )
{
  UTIL_SEQ_ENTER_CRITICAL_SECTION( );

  EvtSet |= EvtId_bm;
 8007036:	4a03      	ldr	r2, [pc, #12]	; (8007044 <UTIL_SEQ_SetEvt+0x14>)
 8007038:	6813      	ldr	r3, [r2, #0]
 800703a:	4318      	orrs	r0, r3
 800703c:	6010      	str	r0, [r2, #0]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800703e:	f381 8810 	msr	PRIMASK, r1

  UTIL_SEQ_EXIT_CRITICAL_SECTION( );

  return;
}
 8007042:	4770      	bx	lr
 8007044:	200012d0 	.word	0x200012d0

08007048 <UTIL_SEQ_PreIdle>:
{
  /**
   * Unless specified by the application, there is nothing to be done
   */
  return;
}
 8007048:	4770      	bx	lr

0800704a <UTIL_SEQ_PostIdle>:
{
  /**
   * Unless specified by the application, there is nothing to be done
   */
  return;
}
 800704a:	4770      	bx	lr

0800704c <SEQ_BitPosition>:
 */
uint8_t SEQ_BitPosition(uint32_t Value)
{
  uint8_t n = 0U;

  if ((Value & 0xFFFF0000U) == 0U)  { n  = 16U; Value <<= 16U;  }
 800704c:	0c03      	lsrs	r3, r0, #16
 800704e:	041b      	lsls	r3, r3, #16
 8007050:	b9b3      	cbnz	r3, 8007080 <SEQ_BitPosition+0x34>
 8007052:	0400      	lsls	r0, r0, #16
 8007054:	2310      	movs	r3, #16
  if ((Value & 0xFF000000U) == 0U)  { n +=  8U; Value <<=  8U;  }
 8007056:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800705a:	d102      	bne.n	8007062 <SEQ_BitPosition+0x16>
 800705c:	3308      	adds	r3, #8
 800705e:	b2db      	uxtb	r3, r3
 8007060:	0200      	lsls	r0, r0, #8
  if ((Value & 0xF0000000U) == 0U)  { n +=  4U; Value <<=  4U;  }
 8007062:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8007066:	d102      	bne.n	800706e <SEQ_BitPosition+0x22>
 8007068:	3304      	adds	r3, #4
 800706a:	b2db      	uxtb	r3, r3
 800706c:	0100      	lsls	r0, r0, #4

  n += SEQ_clz_table_4bit[Value >> (32-4)];
 800706e:	0f00      	lsrs	r0, r0, #28
 8007070:	4a04      	ldr	r2, [pc, #16]	; (8007084 <SEQ_BitPosition+0x38>)
 8007072:	5c10      	ldrb	r0, [r2, r0]
 8007074:	4418      	add	r0, r3
 8007076:	b2c0      	uxtb	r0, r0

  return (uint8_t)(31U-n);
 8007078:	f1c0 001f 	rsb	r0, r0, #31
}
 800707c:	b2c0      	uxtb	r0, r0
 800707e:	4770      	bx	lr
  uint8_t n = 0U;
 8007080:	2300      	movs	r3, #0
 8007082:	e7e8      	b.n	8007056 <SEQ_BitPosition+0xa>
 8007084:	080089f8 	.word	0x080089f8

08007088 <UTIL_SEQ_Run>:
{
 8007088:	b570      	push	{r4, r5, r6, lr}
  super_mask_backup = SuperMask;
 800708a:	4b3f      	ldr	r3, [pc, #252]	; (8007188 <UTIL_SEQ_Run+0x100>)
 800708c:	681c      	ldr	r4, [r3, #0]
  SuperMask &= Mask_bm;
 800708e:	4020      	ands	r0, r4
 8007090:	6018      	str	r0, [r3, #0]
  local_taskset = TaskSet;
 8007092:	4b3e      	ldr	r3, [pc, #248]	; (800718c <UTIL_SEQ_Run+0x104>)
 8007094:	6819      	ldr	r1, [r3, #0]
  while(((local_taskset & TaskMask & SuperMask) != 0U) && ((EvtSet & EvtWaited)==0U))
 8007096:	e014      	b.n	80070c2 <UTIL_SEQ_Run+0x3a>
      counter++;
 8007098:	3301      	adds	r3, #1
 800709a:	e01f      	b.n	80070dc <UTIL_SEQ_Run+0x54>
      TaskPrio[counter - 1U].priority &= ~(1U << CurrentTaskIdx);
 800709c:	3b01      	subs	r3, #1
 800709e:	493c      	ldr	r1, [pc, #240]	; (8007190 <UTIL_SEQ_Run+0x108>)
 80070a0:	f851 2033 	ldr.w	r2, [r1, r3, lsl #3]
 80070a4:	4002      	ands	r2, r0
 80070a6:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
    for (counter = UTIL_SEQ_CONF_PRIO_NBR; counter != 0U; counter--)
 80070aa:	2b00      	cmp	r3, #0
 80070ac:	d1f6      	bne.n	800709c <UTIL_SEQ_Run+0x14>
 80070ae:	f385 8810 	msr	PRIMASK, r5
    TaskCb[CurrentTaskIdx]( );
 80070b2:	4b38      	ldr	r3, [pc, #224]	; (8007194 <UTIL_SEQ_Run+0x10c>)
 80070b4:	681a      	ldr	r2, [r3, #0]
 80070b6:	4b38      	ldr	r3, [pc, #224]	; (8007198 <UTIL_SEQ_Run+0x110>)
 80070b8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80070bc:	4798      	blx	r3
    local_taskset = TaskSet;
 80070be:	4b33      	ldr	r3, [pc, #204]	; (800718c <UTIL_SEQ_Run+0x104>)
 80070c0:	6819      	ldr	r1, [r3, #0]
  while(((local_taskset & TaskMask & SuperMask) != 0U) && ((EvtSet & EvtWaited)==0U))
 80070c2:	4a36      	ldr	r2, [pc, #216]	; (800719c <UTIL_SEQ_Run+0x114>)
 80070c4:	6813      	ldr	r3, [r2, #0]
 80070c6:	400b      	ands	r3, r1
 80070c8:	4a2f      	ldr	r2, [pc, #188]	; (8007188 <UTIL_SEQ_Run+0x100>)
 80070ca:	6810      	ldr	r0, [r2, #0]
 80070cc:	4203      	tst	r3, r0
 80070ce:	d039      	beq.n	8007144 <UTIL_SEQ_Run+0xbc>
 80070d0:	4b33      	ldr	r3, [pc, #204]	; (80071a0 <UTIL_SEQ_Run+0x118>)
 80070d2:	681b      	ldr	r3, [r3, #0]
 80070d4:	4a33      	ldr	r2, [pc, #204]	; (80071a4 <UTIL_SEQ_Run+0x11c>)
 80070d6:	6812      	ldr	r2, [r2, #0]
 80070d8:	4013      	ands	r3, r2
 80070da:	d133      	bne.n	8007144 <UTIL_SEQ_Run+0xbc>
    while((TaskPrio[counter].priority & TaskMask & SuperMask)== 0U)
 80070dc:	4a2c      	ldr	r2, [pc, #176]	; (8007190 <UTIL_SEQ_Run+0x108>)
 80070de:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 80070e2:	492e      	ldr	r1, [pc, #184]	; (800719c <UTIL_SEQ_Run+0x114>)
 80070e4:	6809      	ldr	r1, [r1, #0]
 80070e6:	4011      	ands	r1, r2
 80070e8:	4201      	tst	r1, r0
 80070ea:	d0d5      	beq.n	8007098 <UTIL_SEQ_Run+0x10>
    current_task_set = TaskPrio[counter].priority & TaskMask & SuperMask;
 80070ec:	492b      	ldr	r1, [pc, #172]	; (800719c <UTIL_SEQ_Run+0x114>)
 80070ee:	6809      	ldr	r1, [r1, #0]
 80070f0:	400a      	ands	r2, r1
 80070f2:	4010      	ands	r0, r2
    if ((TaskPrio[counter].round_robin & current_task_set) == 0U)
 80070f4:	4a26      	ldr	r2, [pc, #152]	; (8007190 <UTIL_SEQ_Run+0x108>)
 80070f6:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
 80070fa:	6852      	ldr	r2, [r2, #4]
 80070fc:	4202      	tst	r2, r0
 80070fe:	d105      	bne.n	800710c <UTIL_SEQ_Run+0x84>
      TaskPrio[counter].round_robin = UTIL_SEQ_ALL_BIT_SET;
 8007100:	4a23      	ldr	r2, [pc, #140]	; (8007190 <UTIL_SEQ_Run+0x108>)
 8007102:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
 8007106:	f04f 31ff 	mov.w	r1, #4294967295
 800710a:	6051      	str	r1, [r2, #4]
    CurrentTaskIdx = (SEQ_BitPosition(current_task_set & TaskPrio[counter].round_robin));
 800710c:	4d20      	ldr	r5, [pc, #128]	; (8007190 <UTIL_SEQ_Run+0x108>)
 800710e:	eb05 05c3 	add.w	r5, r5, r3, lsl #3
 8007112:	686e      	ldr	r6, [r5, #4]
 8007114:	4030      	ands	r0, r6
 8007116:	f7ff ff99 	bl	800704c <SEQ_BitPosition>
 800711a:	4a1e      	ldr	r2, [pc, #120]	; (8007194 <UTIL_SEQ_Run+0x10c>)
 800711c:	6010      	str	r0, [r2, #0]
    TaskPrio[counter].round_robin &= ~(1U << CurrentTaskIdx);
 800711e:	2301      	movs	r3, #1
 8007120:	fa03 f000 	lsl.w	r0, r3, r0
 8007124:	ea26 0000 	bic.w	r0, r6, r0
 8007128:	6068      	str	r0, [r5, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800712a:	f3ef 8510 	mrs	r5, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 800712e:	b672      	cpsid	i
    TaskSet &= ~(1U << CurrentTaskIdx);
 8007130:	6812      	ldr	r2, [r2, #0]
 8007132:	4093      	lsls	r3, r2
 8007134:	43d8      	mvns	r0, r3
 8007136:	4915      	ldr	r1, [pc, #84]	; (800718c <UTIL_SEQ_Run+0x104>)
 8007138:	680a      	ldr	r2, [r1, #0]
 800713a:	ea22 0303 	bic.w	r3, r2, r3
 800713e:	600b      	str	r3, [r1, #0]
    for (counter = UTIL_SEQ_CONF_PRIO_NBR; counter != 0U; counter--)
 8007140:	2302      	movs	r3, #2
 8007142:	e7b2      	b.n	80070aa <UTIL_SEQ_Run+0x22>
  CurrentTaskIdx = UTIL_SEQ_NOTASKRUNNING;
 8007144:	4b13      	ldr	r3, [pc, #76]	; (8007194 <UTIL_SEQ_Run+0x10c>)
 8007146:	f04f 32ff 	mov.w	r2, #4294967295
 800714a:	601a      	str	r2, [r3, #0]
  UTIL_SEQ_PreIdle( );
 800714c:	f7ff ff7c 	bl	8007048 <UTIL_SEQ_PreIdle>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007150:	f3ef 8510 	mrs	r5, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 8007154:	b672      	cpsid	i
  local_taskset = TaskSet;
 8007156:	4b0d      	ldr	r3, [pc, #52]	; (800718c <UTIL_SEQ_Run+0x104>)
 8007158:	681a      	ldr	r2, [r3, #0]
  if (!(((local_taskset & TaskMask & SuperMask) != 0U) || ((EvtSet & EvtWaited)!= 0U))) 
 800715a:	4b10      	ldr	r3, [pc, #64]	; (800719c <UTIL_SEQ_Run+0x114>)
 800715c:	681b      	ldr	r3, [r3, #0]
 800715e:	4013      	ands	r3, r2
 8007160:	4a09      	ldr	r2, [pc, #36]	; (8007188 <UTIL_SEQ_Run+0x100>)
 8007162:	6812      	ldr	r2, [r2, #0]
 8007164:	4213      	tst	r3, r2
 8007166:	d105      	bne.n	8007174 <UTIL_SEQ_Run+0xec>
 8007168:	4b0d      	ldr	r3, [pc, #52]	; (80071a0 <UTIL_SEQ_Run+0x118>)
 800716a:	681a      	ldr	r2, [r3, #0]
 800716c:	4b0d      	ldr	r3, [pc, #52]	; (80071a4 <UTIL_SEQ_Run+0x11c>)
 800716e:	681b      	ldr	r3, [r3, #0]
 8007170:	421a      	tst	r2, r3
 8007172:	d006      	beq.n	8007182 <UTIL_SEQ_Run+0xfa>
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007174:	f385 8810 	msr	PRIMASK, r5
  UTIL_SEQ_PostIdle( );
 8007178:	f7ff ff67 	bl	800704a <UTIL_SEQ_PostIdle>
  SuperMask = super_mask_backup;
 800717c:	4b02      	ldr	r3, [pc, #8]	; (8007188 <UTIL_SEQ_Run+0x100>)
 800717e:	601c      	str	r4, [r3, #0]
}
 8007180:	bd70      	pop	{r4, r5, r6, pc}
	UTIL_SEQ_Idle( );
 8007182:	f7f9 fc7f 	bl	8000a84 <UTIL_SEQ_Idle>
 8007186:	e7f5      	b.n	8007174 <UTIL_SEQ_Run+0xec>
 8007188:	20000024 	.word	0x20000024
 800718c:	20001368 	.word	0x20001368
 8007190:	20001358 	.word	0x20001358
 8007194:	200012cc 	.word	0x200012cc
 8007198:	200012d8 	.word	0x200012d8
 800719c:	20000028 	.word	0x20000028
 80071a0:	200012d0 	.word	0x200012d0
 80071a4:	200012d4 	.word	0x200012d4

080071a8 <UTIL_SEQ_WaitEvt>:
{
 80071a8:	b570      	push	{r4, r5, r6, lr}
  current_task_idx = CurrentTaskIdx;
 80071aa:	4b12      	ldr	r3, [pc, #72]	; (80071f4 <UTIL_SEQ_WaitEvt+0x4c>)
 80071ac:	681e      	ldr	r6, [r3, #0]
  if(UTIL_SEQ_NOTASKRUNNING == CurrentTaskIdx)
 80071ae:	f1b6 3fff 	cmp.w	r6, #4294967295
 80071b2:	d00e      	beq.n	80071d2 <UTIL_SEQ_WaitEvt+0x2a>
    wait_task_idx = 1 << CurrentTaskIdx;
 80071b4:	2401      	movs	r4, #1
 80071b6:	40b4      	lsls	r4, r6
  event_waited_id_backup = EvtWaited;
 80071b8:	4b0f      	ldr	r3, [pc, #60]	; (80071f8 <UTIL_SEQ_WaitEvt+0x50>)
 80071ba:	681d      	ldr	r5, [r3, #0]
  EvtWaited = EvtId_bm;
 80071bc:	6018      	str	r0, [r3, #0]
  while ((EvtSet & EvtWaited) == 0U)
 80071be:	4b0f      	ldr	r3, [pc, #60]	; (80071fc <UTIL_SEQ_WaitEvt+0x54>)
 80071c0:	681b      	ldr	r3, [r3, #0]
 80071c2:	4a0d      	ldr	r2, [pc, #52]	; (80071f8 <UTIL_SEQ_WaitEvt+0x50>)
 80071c4:	6811      	ldr	r1, [r2, #0]
 80071c6:	420b      	tst	r3, r1
 80071c8:	d105      	bne.n	80071d6 <UTIL_SEQ_WaitEvt+0x2e>
    UTIL_SEQ_EvtIdle(wait_task_idx, EvtWaited);
 80071ca:	4620      	mov	r0, r4
 80071cc:	f7f9 fc5b 	bl	8000a86 <UTIL_SEQ_EvtIdle>
 80071d0:	e7f5      	b.n	80071be <UTIL_SEQ_WaitEvt+0x16>
    wait_task_idx = 0;
 80071d2:	2400      	movs	r4, #0
 80071d4:	e7f0      	b.n	80071b8 <UTIL_SEQ_WaitEvt+0x10>
  CurrentTaskIdx = current_task_idx;
 80071d6:	4b07      	ldr	r3, [pc, #28]	; (80071f4 <UTIL_SEQ_WaitEvt+0x4c>)
 80071d8:	601e      	str	r6, [r3, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80071da:	f3ef 8010 	mrs	r0, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 80071de:	b672      	cpsid	i
  EvtSet &= (~EvtWaited);
 80071e0:	6814      	ldr	r4, [r2, #0]
 80071e2:	4906      	ldr	r1, [pc, #24]	; (80071fc <UTIL_SEQ_WaitEvt+0x54>)
 80071e4:	680b      	ldr	r3, [r1, #0]
 80071e6:	ea23 0304 	bic.w	r3, r3, r4
 80071ea:	600b      	str	r3, [r1, #0]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80071ec:	f380 8810 	msr	PRIMASK, r0
  EvtWaited = event_waited_id_backup;
 80071f0:	6015      	str	r5, [r2, #0]
}
 80071f2:	bd70      	pop	{r4, r5, r6, pc}
 80071f4:	200012cc 	.word	0x200012cc
 80071f8:	200012d4 	.word	0x200012d4
 80071fc:	200012d0 	.word	0x200012d0

08007200 <UTIL_SEQ_RegTask>:
{
 8007200:	b538      	push	{r3, r4, r5, lr}
 8007202:	4614      	mov	r4, r2
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007204:	f3ef 8510 	mrs	r5, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 8007208:	b672      	cpsid	i
  TaskCb[SEQ_BitPosition(TaskId_bm)] = Task;
 800720a:	f7ff ff1f 	bl	800704c <SEQ_BitPosition>
 800720e:	4b03      	ldr	r3, [pc, #12]	; (800721c <UTIL_SEQ_RegTask+0x1c>)
 8007210:	f843 4020 	str.w	r4, [r3, r0, lsl #2]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007214:	f385 8810 	msr	PRIMASK, r5
}
 8007218:	bd38      	pop	{r3, r4, r5, pc}
 800721a:	bf00      	nop
 800721c:	200012d8 	.word	0x200012d8

08007220 <__errno>:
 8007220:	4b01      	ldr	r3, [pc, #4]	; (8007228 <__errno+0x8>)
 8007222:	6818      	ldr	r0, [r3, #0]
 8007224:	4770      	bx	lr
 8007226:	bf00      	nop
 8007228:	2000002c 	.word	0x2000002c

0800722c <__libc_init_array>:
 800722c:	b570      	push	{r4, r5, r6, lr}
 800722e:	4d0d      	ldr	r5, [pc, #52]	; (8007264 <__libc_init_array+0x38>)
 8007230:	4c0d      	ldr	r4, [pc, #52]	; (8007268 <__libc_init_array+0x3c>)
 8007232:	1b64      	subs	r4, r4, r5
 8007234:	10a4      	asrs	r4, r4, #2
 8007236:	2600      	movs	r6, #0
 8007238:	42a6      	cmp	r6, r4
 800723a:	d109      	bne.n	8007250 <__libc_init_array+0x24>
 800723c:	4d0b      	ldr	r5, [pc, #44]	; (800726c <__libc_init_array+0x40>)
 800723e:	4c0c      	ldr	r4, [pc, #48]	; (8007270 <__libc_init_array+0x44>)
 8007240:	f000 fffa 	bl	8008238 <_init>
 8007244:	1b64      	subs	r4, r4, r5
 8007246:	10a4      	asrs	r4, r4, #2
 8007248:	2600      	movs	r6, #0
 800724a:	42a6      	cmp	r6, r4
 800724c:	d105      	bne.n	800725a <__libc_init_array+0x2e>
 800724e:	bd70      	pop	{r4, r5, r6, pc}
 8007250:	f855 3b04 	ldr.w	r3, [r5], #4
 8007254:	4798      	blx	r3
 8007256:	3601      	adds	r6, #1
 8007258:	e7ee      	b.n	8007238 <__libc_init_array+0xc>
 800725a:	f855 3b04 	ldr.w	r3, [r5], #4
 800725e:	4798      	blx	r3
 8007260:	3601      	adds	r6, #1
 8007262:	e7f2      	b.n	800724a <__libc_init_array+0x1e>
 8007264:	08008aa8 	.word	0x08008aa8
 8007268:	08008aa8 	.word	0x08008aa8
 800726c:	08008aa8 	.word	0x08008aa8
 8007270:	08008aac 	.word	0x08008aac

08007274 <memcpy>:
 8007274:	440a      	add	r2, r1
 8007276:	4291      	cmp	r1, r2
 8007278:	f100 33ff 	add.w	r3, r0, #4294967295
 800727c:	d100      	bne.n	8007280 <memcpy+0xc>
 800727e:	4770      	bx	lr
 8007280:	b510      	push	{r4, lr}
 8007282:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007286:	f803 4f01 	strb.w	r4, [r3, #1]!
 800728a:	4291      	cmp	r1, r2
 800728c:	d1f9      	bne.n	8007282 <memcpy+0xe>
 800728e:	bd10      	pop	{r4, pc}

08007290 <memset>:
 8007290:	4402      	add	r2, r0
 8007292:	4603      	mov	r3, r0
 8007294:	4293      	cmp	r3, r2
 8007296:	d100      	bne.n	800729a <memset+0xa>
 8007298:	4770      	bx	lr
 800729a:	f803 1b01 	strb.w	r1, [r3], #1
 800729e:	e7f9      	b.n	8007294 <memset+0x4>

080072a0 <iprintf>:
 80072a0:	b40f      	push	{r0, r1, r2, r3}
 80072a2:	4b0a      	ldr	r3, [pc, #40]	; (80072cc <iprintf+0x2c>)
 80072a4:	b513      	push	{r0, r1, r4, lr}
 80072a6:	681c      	ldr	r4, [r3, #0]
 80072a8:	b124      	cbz	r4, 80072b4 <iprintf+0x14>
 80072aa:	69a3      	ldr	r3, [r4, #24]
 80072ac:	b913      	cbnz	r3, 80072b4 <iprintf+0x14>
 80072ae:	4620      	mov	r0, r4
 80072b0:	f000 fa5e 	bl	8007770 <__sinit>
 80072b4:	ab05      	add	r3, sp, #20
 80072b6:	9a04      	ldr	r2, [sp, #16]
 80072b8:	68a1      	ldr	r1, [r4, #8]
 80072ba:	9301      	str	r3, [sp, #4]
 80072bc:	4620      	mov	r0, r4
 80072be:	f000 fc2f 	bl	8007b20 <_vfiprintf_r>
 80072c2:	b002      	add	sp, #8
 80072c4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80072c8:	b004      	add	sp, #16
 80072ca:	4770      	bx	lr
 80072cc:	2000002c 	.word	0x2000002c

080072d0 <_puts_r>:
 80072d0:	b570      	push	{r4, r5, r6, lr}
 80072d2:	460e      	mov	r6, r1
 80072d4:	4605      	mov	r5, r0
 80072d6:	b118      	cbz	r0, 80072e0 <_puts_r+0x10>
 80072d8:	6983      	ldr	r3, [r0, #24]
 80072da:	b90b      	cbnz	r3, 80072e0 <_puts_r+0x10>
 80072dc:	f000 fa48 	bl	8007770 <__sinit>
 80072e0:	69ab      	ldr	r3, [r5, #24]
 80072e2:	68ac      	ldr	r4, [r5, #8]
 80072e4:	b913      	cbnz	r3, 80072ec <_puts_r+0x1c>
 80072e6:	4628      	mov	r0, r5
 80072e8:	f000 fa42 	bl	8007770 <__sinit>
 80072ec:	4b2c      	ldr	r3, [pc, #176]	; (80073a0 <_puts_r+0xd0>)
 80072ee:	429c      	cmp	r4, r3
 80072f0:	d120      	bne.n	8007334 <_puts_r+0x64>
 80072f2:	686c      	ldr	r4, [r5, #4]
 80072f4:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80072f6:	07db      	lsls	r3, r3, #31
 80072f8:	d405      	bmi.n	8007306 <_puts_r+0x36>
 80072fa:	89a3      	ldrh	r3, [r4, #12]
 80072fc:	0598      	lsls	r0, r3, #22
 80072fe:	d402      	bmi.n	8007306 <_puts_r+0x36>
 8007300:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007302:	f000 fad3 	bl	80078ac <__retarget_lock_acquire_recursive>
 8007306:	89a3      	ldrh	r3, [r4, #12]
 8007308:	0719      	lsls	r1, r3, #28
 800730a:	d51d      	bpl.n	8007348 <_puts_r+0x78>
 800730c:	6923      	ldr	r3, [r4, #16]
 800730e:	b1db      	cbz	r3, 8007348 <_puts_r+0x78>
 8007310:	3e01      	subs	r6, #1
 8007312:	68a3      	ldr	r3, [r4, #8]
 8007314:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8007318:	3b01      	subs	r3, #1
 800731a:	60a3      	str	r3, [r4, #8]
 800731c:	bb39      	cbnz	r1, 800736e <_puts_r+0x9e>
 800731e:	2b00      	cmp	r3, #0
 8007320:	da38      	bge.n	8007394 <_puts_r+0xc4>
 8007322:	4622      	mov	r2, r4
 8007324:	210a      	movs	r1, #10
 8007326:	4628      	mov	r0, r5
 8007328:	f000 f848 	bl	80073bc <__swbuf_r>
 800732c:	3001      	adds	r0, #1
 800732e:	d011      	beq.n	8007354 <_puts_r+0x84>
 8007330:	250a      	movs	r5, #10
 8007332:	e011      	b.n	8007358 <_puts_r+0x88>
 8007334:	4b1b      	ldr	r3, [pc, #108]	; (80073a4 <_puts_r+0xd4>)
 8007336:	429c      	cmp	r4, r3
 8007338:	d101      	bne.n	800733e <_puts_r+0x6e>
 800733a:	68ac      	ldr	r4, [r5, #8]
 800733c:	e7da      	b.n	80072f4 <_puts_r+0x24>
 800733e:	4b1a      	ldr	r3, [pc, #104]	; (80073a8 <_puts_r+0xd8>)
 8007340:	429c      	cmp	r4, r3
 8007342:	bf08      	it	eq
 8007344:	68ec      	ldreq	r4, [r5, #12]
 8007346:	e7d5      	b.n	80072f4 <_puts_r+0x24>
 8007348:	4621      	mov	r1, r4
 800734a:	4628      	mov	r0, r5
 800734c:	f000 f888 	bl	8007460 <__swsetup_r>
 8007350:	2800      	cmp	r0, #0
 8007352:	d0dd      	beq.n	8007310 <_puts_r+0x40>
 8007354:	f04f 35ff 	mov.w	r5, #4294967295
 8007358:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800735a:	07da      	lsls	r2, r3, #31
 800735c:	d405      	bmi.n	800736a <_puts_r+0x9a>
 800735e:	89a3      	ldrh	r3, [r4, #12]
 8007360:	059b      	lsls	r3, r3, #22
 8007362:	d402      	bmi.n	800736a <_puts_r+0x9a>
 8007364:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007366:	f000 faa2 	bl	80078ae <__retarget_lock_release_recursive>
 800736a:	4628      	mov	r0, r5
 800736c:	bd70      	pop	{r4, r5, r6, pc}
 800736e:	2b00      	cmp	r3, #0
 8007370:	da04      	bge.n	800737c <_puts_r+0xac>
 8007372:	69a2      	ldr	r2, [r4, #24]
 8007374:	429a      	cmp	r2, r3
 8007376:	dc06      	bgt.n	8007386 <_puts_r+0xb6>
 8007378:	290a      	cmp	r1, #10
 800737a:	d004      	beq.n	8007386 <_puts_r+0xb6>
 800737c:	6823      	ldr	r3, [r4, #0]
 800737e:	1c5a      	adds	r2, r3, #1
 8007380:	6022      	str	r2, [r4, #0]
 8007382:	7019      	strb	r1, [r3, #0]
 8007384:	e7c5      	b.n	8007312 <_puts_r+0x42>
 8007386:	4622      	mov	r2, r4
 8007388:	4628      	mov	r0, r5
 800738a:	f000 f817 	bl	80073bc <__swbuf_r>
 800738e:	3001      	adds	r0, #1
 8007390:	d1bf      	bne.n	8007312 <_puts_r+0x42>
 8007392:	e7df      	b.n	8007354 <_puts_r+0x84>
 8007394:	6823      	ldr	r3, [r4, #0]
 8007396:	250a      	movs	r5, #10
 8007398:	1c5a      	adds	r2, r3, #1
 800739a:	6022      	str	r2, [r4, #0]
 800739c:	701d      	strb	r5, [r3, #0]
 800739e:	e7db      	b.n	8007358 <_puts_r+0x88>
 80073a0:	08008a2c 	.word	0x08008a2c
 80073a4:	08008a4c 	.word	0x08008a4c
 80073a8:	08008a0c 	.word	0x08008a0c

080073ac <puts>:
 80073ac:	4b02      	ldr	r3, [pc, #8]	; (80073b8 <puts+0xc>)
 80073ae:	4601      	mov	r1, r0
 80073b0:	6818      	ldr	r0, [r3, #0]
 80073b2:	f7ff bf8d 	b.w	80072d0 <_puts_r>
 80073b6:	bf00      	nop
 80073b8:	2000002c 	.word	0x2000002c

080073bc <__swbuf_r>:
 80073bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80073be:	460e      	mov	r6, r1
 80073c0:	4614      	mov	r4, r2
 80073c2:	4605      	mov	r5, r0
 80073c4:	b118      	cbz	r0, 80073ce <__swbuf_r+0x12>
 80073c6:	6983      	ldr	r3, [r0, #24]
 80073c8:	b90b      	cbnz	r3, 80073ce <__swbuf_r+0x12>
 80073ca:	f000 f9d1 	bl	8007770 <__sinit>
 80073ce:	4b21      	ldr	r3, [pc, #132]	; (8007454 <__swbuf_r+0x98>)
 80073d0:	429c      	cmp	r4, r3
 80073d2:	d12b      	bne.n	800742c <__swbuf_r+0x70>
 80073d4:	686c      	ldr	r4, [r5, #4]
 80073d6:	69a3      	ldr	r3, [r4, #24]
 80073d8:	60a3      	str	r3, [r4, #8]
 80073da:	89a3      	ldrh	r3, [r4, #12]
 80073dc:	071a      	lsls	r2, r3, #28
 80073de:	d52f      	bpl.n	8007440 <__swbuf_r+0x84>
 80073e0:	6923      	ldr	r3, [r4, #16]
 80073e2:	b36b      	cbz	r3, 8007440 <__swbuf_r+0x84>
 80073e4:	6923      	ldr	r3, [r4, #16]
 80073e6:	6820      	ldr	r0, [r4, #0]
 80073e8:	1ac0      	subs	r0, r0, r3
 80073ea:	6963      	ldr	r3, [r4, #20]
 80073ec:	b2f6      	uxtb	r6, r6
 80073ee:	4283      	cmp	r3, r0
 80073f0:	4637      	mov	r7, r6
 80073f2:	dc04      	bgt.n	80073fe <__swbuf_r+0x42>
 80073f4:	4621      	mov	r1, r4
 80073f6:	4628      	mov	r0, r5
 80073f8:	f000 f926 	bl	8007648 <_fflush_r>
 80073fc:	bb30      	cbnz	r0, 800744c <__swbuf_r+0x90>
 80073fe:	68a3      	ldr	r3, [r4, #8]
 8007400:	3b01      	subs	r3, #1
 8007402:	60a3      	str	r3, [r4, #8]
 8007404:	6823      	ldr	r3, [r4, #0]
 8007406:	1c5a      	adds	r2, r3, #1
 8007408:	6022      	str	r2, [r4, #0]
 800740a:	701e      	strb	r6, [r3, #0]
 800740c:	6963      	ldr	r3, [r4, #20]
 800740e:	3001      	adds	r0, #1
 8007410:	4283      	cmp	r3, r0
 8007412:	d004      	beq.n	800741e <__swbuf_r+0x62>
 8007414:	89a3      	ldrh	r3, [r4, #12]
 8007416:	07db      	lsls	r3, r3, #31
 8007418:	d506      	bpl.n	8007428 <__swbuf_r+0x6c>
 800741a:	2e0a      	cmp	r6, #10
 800741c:	d104      	bne.n	8007428 <__swbuf_r+0x6c>
 800741e:	4621      	mov	r1, r4
 8007420:	4628      	mov	r0, r5
 8007422:	f000 f911 	bl	8007648 <_fflush_r>
 8007426:	b988      	cbnz	r0, 800744c <__swbuf_r+0x90>
 8007428:	4638      	mov	r0, r7
 800742a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800742c:	4b0a      	ldr	r3, [pc, #40]	; (8007458 <__swbuf_r+0x9c>)
 800742e:	429c      	cmp	r4, r3
 8007430:	d101      	bne.n	8007436 <__swbuf_r+0x7a>
 8007432:	68ac      	ldr	r4, [r5, #8]
 8007434:	e7cf      	b.n	80073d6 <__swbuf_r+0x1a>
 8007436:	4b09      	ldr	r3, [pc, #36]	; (800745c <__swbuf_r+0xa0>)
 8007438:	429c      	cmp	r4, r3
 800743a:	bf08      	it	eq
 800743c:	68ec      	ldreq	r4, [r5, #12]
 800743e:	e7ca      	b.n	80073d6 <__swbuf_r+0x1a>
 8007440:	4621      	mov	r1, r4
 8007442:	4628      	mov	r0, r5
 8007444:	f000 f80c 	bl	8007460 <__swsetup_r>
 8007448:	2800      	cmp	r0, #0
 800744a:	d0cb      	beq.n	80073e4 <__swbuf_r+0x28>
 800744c:	f04f 37ff 	mov.w	r7, #4294967295
 8007450:	e7ea      	b.n	8007428 <__swbuf_r+0x6c>
 8007452:	bf00      	nop
 8007454:	08008a2c 	.word	0x08008a2c
 8007458:	08008a4c 	.word	0x08008a4c
 800745c:	08008a0c 	.word	0x08008a0c

08007460 <__swsetup_r>:
 8007460:	4b32      	ldr	r3, [pc, #200]	; (800752c <__swsetup_r+0xcc>)
 8007462:	b570      	push	{r4, r5, r6, lr}
 8007464:	681d      	ldr	r5, [r3, #0]
 8007466:	4606      	mov	r6, r0
 8007468:	460c      	mov	r4, r1
 800746a:	b125      	cbz	r5, 8007476 <__swsetup_r+0x16>
 800746c:	69ab      	ldr	r3, [r5, #24]
 800746e:	b913      	cbnz	r3, 8007476 <__swsetup_r+0x16>
 8007470:	4628      	mov	r0, r5
 8007472:	f000 f97d 	bl	8007770 <__sinit>
 8007476:	4b2e      	ldr	r3, [pc, #184]	; (8007530 <__swsetup_r+0xd0>)
 8007478:	429c      	cmp	r4, r3
 800747a:	d10f      	bne.n	800749c <__swsetup_r+0x3c>
 800747c:	686c      	ldr	r4, [r5, #4]
 800747e:	89a3      	ldrh	r3, [r4, #12]
 8007480:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8007484:	0719      	lsls	r1, r3, #28
 8007486:	d42c      	bmi.n	80074e2 <__swsetup_r+0x82>
 8007488:	06dd      	lsls	r5, r3, #27
 800748a:	d411      	bmi.n	80074b0 <__swsetup_r+0x50>
 800748c:	2309      	movs	r3, #9
 800748e:	6033      	str	r3, [r6, #0]
 8007490:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8007494:	81a3      	strh	r3, [r4, #12]
 8007496:	f04f 30ff 	mov.w	r0, #4294967295
 800749a:	e03e      	b.n	800751a <__swsetup_r+0xba>
 800749c:	4b25      	ldr	r3, [pc, #148]	; (8007534 <__swsetup_r+0xd4>)
 800749e:	429c      	cmp	r4, r3
 80074a0:	d101      	bne.n	80074a6 <__swsetup_r+0x46>
 80074a2:	68ac      	ldr	r4, [r5, #8]
 80074a4:	e7eb      	b.n	800747e <__swsetup_r+0x1e>
 80074a6:	4b24      	ldr	r3, [pc, #144]	; (8007538 <__swsetup_r+0xd8>)
 80074a8:	429c      	cmp	r4, r3
 80074aa:	bf08      	it	eq
 80074ac:	68ec      	ldreq	r4, [r5, #12]
 80074ae:	e7e6      	b.n	800747e <__swsetup_r+0x1e>
 80074b0:	0758      	lsls	r0, r3, #29
 80074b2:	d512      	bpl.n	80074da <__swsetup_r+0x7a>
 80074b4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80074b6:	b141      	cbz	r1, 80074ca <__swsetup_r+0x6a>
 80074b8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80074bc:	4299      	cmp	r1, r3
 80074be:	d002      	beq.n	80074c6 <__swsetup_r+0x66>
 80074c0:	4630      	mov	r0, r6
 80074c2:	f000 fa59 	bl	8007978 <_free_r>
 80074c6:	2300      	movs	r3, #0
 80074c8:	6363      	str	r3, [r4, #52]	; 0x34
 80074ca:	89a3      	ldrh	r3, [r4, #12]
 80074cc:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80074d0:	81a3      	strh	r3, [r4, #12]
 80074d2:	2300      	movs	r3, #0
 80074d4:	6063      	str	r3, [r4, #4]
 80074d6:	6923      	ldr	r3, [r4, #16]
 80074d8:	6023      	str	r3, [r4, #0]
 80074da:	89a3      	ldrh	r3, [r4, #12]
 80074dc:	f043 0308 	orr.w	r3, r3, #8
 80074e0:	81a3      	strh	r3, [r4, #12]
 80074e2:	6923      	ldr	r3, [r4, #16]
 80074e4:	b94b      	cbnz	r3, 80074fa <__swsetup_r+0x9a>
 80074e6:	89a3      	ldrh	r3, [r4, #12]
 80074e8:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80074ec:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80074f0:	d003      	beq.n	80074fa <__swsetup_r+0x9a>
 80074f2:	4621      	mov	r1, r4
 80074f4:	4630      	mov	r0, r6
 80074f6:	f000 f9ff 	bl	80078f8 <__smakebuf_r>
 80074fa:	89a0      	ldrh	r0, [r4, #12]
 80074fc:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8007500:	f010 0301 	ands.w	r3, r0, #1
 8007504:	d00a      	beq.n	800751c <__swsetup_r+0xbc>
 8007506:	2300      	movs	r3, #0
 8007508:	60a3      	str	r3, [r4, #8]
 800750a:	6963      	ldr	r3, [r4, #20]
 800750c:	425b      	negs	r3, r3
 800750e:	61a3      	str	r3, [r4, #24]
 8007510:	6923      	ldr	r3, [r4, #16]
 8007512:	b943      	cbnz	r3, 8007526 <__swsetup_r+0xc6>
 8007514:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8007518:	d1ba      	bne.n	8007490 <__swsetup_r+0x30>
 800751a:	bd70      	pop	{r4, r5, r6, pc}
 800751c:	0781      	lsls	r1, r0, #30
 800751e:	bf58      	it	pl
 8007520:	6963      	ldrpl	r3, [r4, #20]
 8007522:	60a3      	str	r3, [r4, #8]
 8007524:	e7f4      	b.n	8007510 <__swsetup_r+0xb0>
 8007526:	2000      	movs	r0, #0
 8007528:	e7f7      	b.n	800751a <__swsetup_r+0xba>
 800752a:	bf00      	nop
 800752c:	2000002c 	.word	0x2000002c
 8007530:	08008a2c 	.word	0x08008a2c
 8007534:	08008a4c 	.word	0x08008a4c
 8007538:	08008a0c 	.word	0x08008a0c

0800753c <__sflush_r>:
 800753c:	898a      	ldrh	r2, [r1, #12]
 800753e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007542:	4605      	mov	r5, r0
 8007544:	0710      	lsls	r0, r2, #28
 8007546:	460c      	mov	r4, r1
 8007548:	d458      	bmi.n	80075fc <__sflush_r+0xc0>
 800754a:	684b      	ldr	r3, [r1, #4]
 800754c:	2b00      	cmp	r3, #0
 800754e:	dc05      	bgt.n	800755c <__sflush_r+0x20>
 8007550:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8007552:	2b00      	cmp	r3, #0
 8007554:	dc02      	bgt.n	800755c <__sflush_r+0x20>
 8007556:	2000      	movs	r0, #0
 8007558:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800755c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800755e:	2e00      	cmp	r6, #0
 8007560:	d0f9      	beq.n	8007556 <__sflush_r+0x1a>
 8007562:	2300      	movs	r3, #0
 8007564:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8007568:	682f      	ldr	r7, [r5, #0]
 800756a:	602b      	str	r3, [r5, #0]
 800756c:	d032      	beq.n	80075d4 <__sflush_r+0x98>
 800756e:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8007570:	89a3      	ldrh	r3, [r4, #12]
 8007572:	075a      	lsls	r2, r3, #29
 8007574:	d505      	bpl.n	8007582 <__sflush_r+0x46>
 8007576:	6863      	ldr	r3, [r4, #4]
 8007578:	1ac0      	subs	r0, r0, r3
 800757a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800757c:	b10b      	cbz	r3, 8007582 <__sflush_r+0x46>
 800757e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8007580:	1ac0      	subs	r0, r0, r3
 8007582:	2300      	movs	r3, #0
 8007584:	4602      	mov	r2, r0
 8007586:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8007588:	6a21      	ldr	r1, [r4, #32]
 800758a:	4628      	mov	r0, r5
 800758c:	47b0      	blx	r6
 800758e:	1c43      	adds	r3, r0, #1
 8007590:	89a3      	ldrh	r3, [r4, #12]
 8007592:	d106      	bne.n	80075a2 <__sflush_r+0x66>
 8007594:	6829      	ldr	r1, [r5, #0]
 8007596:	291d      	cmp	r1, #29
 8007598:	d82c      	bhi.n	80075f4 <__sflush_r+0xb8>
 800759a:	4a2a      	ldr	r2, [pc, #168]	; (8007644 <__sflush_r+0x108>)
 800759c:	40ca      	lsrs	r2, r1
 800759e:	07d6      	lsls	r6, r2, #31
 80075a0:	d528      	bpl.n	80075f4 <__sflush_r+0xb8>
 80075a2:	2200      	movs	r2, #0
 80075a4:	6062      	str	r2, [r4, #4]
 80075a6:	04d9      	lsls	r1, r3, #19
 80075a8:	6922      	ldr	r2, [r4, #16]
 80075aa:	6022      	str	r2, [r4, #0]
 80075ac:	d504      	bpl.n	80075b8 <__sflush_r+0x7c>
 80075ae:	1c42      	adds	r2, r0, #1
 80075b0:	d101      	bne.n	80075b6 <__sflush_r+0x7a>
 80075b2:	682b      	ldr	r3, [r5, #0]
 80075b4:	b903      	cbnz	r3, 80075b8 <__sflush_r+0x7c>
 80075b6:	6560      	str	r0, [r4, #84]	; 0x54
 80075b8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80075ba:	602f      	str	r7, [r5, #0]
 80075bc:	2900      	cmp	r1, #0
 80075be:	d0ca      	beq.n	8007556 <__sflush_r+0x1a>
 80075c0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80075c4:	4299      	cmp	r1, r3
 80075c6:	d002      	beq.n	80075ce <__sflush_r+0x92>
 80075c8:	4628      	mov	r0, r5
 80075ca:	f000 f9d5 	bl	8007978 <_free_r>
 80075ce:	2000      	movs	r0, #0
 80075d0:	6360      	str	r0, [r4, #52]	; 0x34
 80075d2:	e7c1      	b.n	8007558 <__sflush_r+0x1c>
 80075d4:	6a21      	ldr	r1, [r4, #32]
 80075d6:	2301      	movs	r3, #1
 80075d8:	4628      	mov	r0, r5
 80075da:	47b0      	blx	r6
 80075dc:	1c41      	adds	r1, r0, #1
 80075de:	d1c7      	bne.n	8007570 <__sflush_r+0x34>
 80075e0:	682b      	ldr	r3, [r5, #0]
 80075e2:	2b00      	cmp	r3, #0
 80075e4:	d0c4      	beq.n	8007570 <__sflush_r+0x34>
 80075e6:	2b1d      	cmp	r3, #29
 80075e8:	d001      	beq.n	80075ee <__sflush_r+0xb2>
 80075ea:	2b16      	cmp	r3, #22
 80075ec:	d101      	bne.n	80075f2 <__sflush_r+0xb6>
 80075ee:	602f      	str	r7, [r5, #0]
 80075f0:	e7b1      	b.n	8007556 <__sflush_r+0x1a>
 80075f2:	89a3      	ldrh	r3, [r4, #12]
 80075f4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80075f8:	81a3      	strh	r3, [r4, #12]
 80075fa:	e7ad      	b.n	8007558 <__sflush_r+0x1c>
 80075fc:	690f      	ldr	r7, [r1, #16]
 80075fe:	2f00      	cmp	r7, #0
 8007600:	d0a9      	beq.n	8007556 <__sflush_r+0x1a>
 8007602:	0793      	lsls	r3, r2, #30
 8007604:	680e      	ldr	r6, [r1, #0]
 8007606:	bf08      	it	eq
 8007608:	694b      	ldreq	r3, [r1, #20]
 800760a:	600f      	str	r7, [r1, #0]
 800760c:	bf18      	it	ne
 800760e:	2300      	movne	r3, #0
 8007610:	eba6 0807 	sub.w	r8, r6, r7
 8007614:	608b      	str	r3, [r1, #8]
 8007616:	f1b8 0f00 	cmp.w	r8, #0
 800761a:	dd9c      	ble.n	8007556 <__sflush_r+0x1a>
 800761c:	6a21      	ldr	r1, [r4, #32]
 800761e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8007620:	4643      	mov	r3, r8
 8007622:	463a      	mov	r2, r7
 8007624:	4628      	mov	r0, r5
 8007626:	47b0      	blx	r6
 8007628:	2800      	cmp	r0, #0
 800762a:	dc06      	bgt.n	800763a <__sflush_r+0xfe>
 800762c:	89a3      	ldrh	r3, [r4, #12]
 800762e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007632:	81a3      	strh	r3, [r4, #12]
 8007634:	f04f 30ff 	mov.w	r0, #4294967295
 8007638:	e78e      	b.n	8007558 <__sflush_r+0x1c>
 800763a:	4407      	add	r7, r0
 800763c:	eba8 0800 	sub.w	r8, r8, r0
 8007640:	e7e9      	b.n	8007616 <__sflush_r+0xda>
 8007642:	bf00      	nop
 8007644:	20400001 	.word	0x20400001

08007648 <_fflush_r>:
 8007648:	b538      	push	{r3, r4, r5, lr}
 800764a:	690b      	ldr	r3, [r1, #16]
 800764c:	4605      	mov	r5, r0
 800764e:	460c      	mov	r4, r1
 8007650:	b913      	cbnz	r3, 8007658 <_fflush_r+0x10>
 8007652:	2500      	movs	r5, #0
 8007654:	4628      	mov	r0, r5
 8007656:	bd38      	pop	{r3, r4, r5, pc}
 8007658:	b118      	cbz	r0, 8007662 <_fflush_r+0x1a>
 800765a:	6983      	ldr	r3, [r0, #24]
 800765c:	b90b      	cbnz	r3, 8007662 <_fflush_r+0x1a>
 800765e:	f000 f887 	bl	8007770 <__sinit>
 8007662:	4b14      	ldr	r3, [pc, #80]	; (80076b4 <_fflush_r+0x6c>)
 8007664:	429c      	cmp	r4, r3
 8007666:	d11b      	bne.n	80076a0 <_fflush_r+0x58>
 8007668:	686c      	ldr	r4, [r5, #4]
 800766a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800766e:	2b00      	cmp	r3, #0
 8007670:	d0ef      	beq.n	8007652 <_fflush_r+0xa>
 8007672:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8007674:	07d0      	lsls	r0, r2, #31
 8007676:	d404      	bmi.n	8007682 <_fflush_r+0x3a>
 8007678:	0599      	lsls	r1, r3, #22
 800767a:	d402      	bmi.n	8007682 <_fflush_r+0x3a>
 800767c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800767e:	f000 f915 	bl	80078ac <__retarget_lock_acquire_recursive>
 8007682:	4628      	mov	r0, r5
 8007684:	4621      	mov	r1, r4
 8007686:	f7ff ff59 	bl	800753c <__sflush_r>
 800768a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800768c:	07da      	lsls	r2, r3, #31
 800768e:	4605      	mov	r5, r0
 8007690:	d4e0      	bmi.n	8007654 <_fflush_r+0xc>
 8007692:	89a3      	ldrh	r3, [r4, #12]
 8007694:	059b      	lsls	r3, r3, #22
 8007696:	d4dd      	bmi.n	8007654 <_fflush_r+0xc>
 8007698:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800769a:	f000 f908 	bl	80078ae <__retarget_lock_release_recursive>
 800769e:	e7d9      	b.n	8007654 <_fflush_r+0xc>
 80076a0:	4b05      	ldr	r3, [pc, #20]	; (80076b8 <_fflush_r+0x70>)
 80076a2:	429c      	cmp	r4, r3
 80076a4:	d101      	bne.n	80076aa <_fflush_r+0x62>
 80076a6:	68ac      	ldr	r4, [r5, #8]
 80076a8:	e7df      	b.n	800766a <_fflush_r+0x22>
 80076aa:	4b04      	ldr	r3, [pc, #16]	; (80076bc <_fflush_r+0x74>)
 80076ac:	429c      	cmp	r4, r3
 80076ae:	bf08      	it	eq
 80076b0:	68ec      	ldreq	r4, [r5, #12]
 80076b2:	e7da      	b.n	800766a <_fflush_r+0x22>
 80076b4:	08008a2c 	.word	0x08008a2c
 80076b8:	08008a4c 	.word	0x08008a4c
 80076bc:	08008a0c 	.word	0x08008a0c

080076c0 <std>:
 80076c0:	2300      	movs	r3, #0
 80076c2:	b510      	push	{r4, lr}
 80076c4:	4604      	mov	r4, r0
 80076c6:	e9c0 3300 	strd	r3, r3, [r0]
 80076ca:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80076ce:	6083      	str	r3, [r0, #8]
 80076d0:	8181      	strh	r1, [r0, #12]
 80076d2:	6643      	str	r3, [r0, #100]	; 0x64
 80076d4:	81c2      	strh	r2, [r0, #14]
 80076d6:	6183      	str	r3, [r0, #24]
 80076d8:	4619      	mov	r1, r3
 80076da:	2208      	movs	r2, #8
 80076dc:	305c      	adds	r0, #92	; 0x5c
 80076de:	f7ff fdd7 	bl	8007290 <memset>
 80076e2:	4b05      	ldr	r3, [pc, #20]	; (80076f8 <std+0x38>)
 80076e4:	6263      	str	r3, [r4, #36]	; 0x24
 80076e6:	4b05      	ldr	r3, [pc, #20]	; (80076fc <std+0x3c>)
 80076e8:	62a3      	str	r3, [r4, #40]	; 0x28
 80076ea:	4b05      	ldr	r3, [pc, #20]	; (8007700 <std+0x40>)
 80076ec:	62e3      	str	r3, [r4, #44]	; 0x2c
 80076ee:	4b05      	ldr	r3, [pc, #20]	; (8007704 <std+0x44>)
 80076f0:	6224      	str	r4, [r4, #32]
 80076f2:	6323      	str	r3, [r4, #48]	; 0x30
 80076f4:	bd10      	pop	{r4, pc}
 80076f6:	bf00      	nop
 80076f8:	080080c9 	.word	0x080080c9
 80076fc:	080080eb 	.word	0x080080eb
 8007700:	08008123 	.word	0x08008123
 8007704:	08008147 	.word	0x08008147

08007708 <_cleanup_r>:
 8007708:	4901      	ldr	r1, [pc, #4]	; (8007710 <_cleanup_r+0x8>)
 800770a:	f000 b8af 	b.w	800786c <_fwalk_reent>
 800770e:	bf00      	nop
 8007710:	08007649 	.word	0x08007649

08007714 <__sfmoreglue>:
 8007714:	b570      	push	{r4, r5, r6, lr}
 8007716:	1e4a      	subs	r2, r1, #1
 8007718:	2568      	movs	r5, #104	; 0x68
 800771a:	4355      	muls	r5, r2
 800771c:	460e      	mov	r6, r1
 800771e:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8007722:	f000 f979 	bl	8007a18 <_malloc_r>
 8007726:	4604      	mov	r4, r0
 8007728:	b140      	cbz	r0, 800773c <__sfmoreglue+0x28>
 800772a:	2100      	movs	r1, #0
 800772c:	e9c0 1600 	strd	r1, r6, [r0]
 8007730:	300c      	adds	r0, #12
 8007732:	60a0      	str	r0, [r4, #8]
 8007734:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8007738:	f7ff fdaa 	bl	8007290 <memset>
 800773c:	4620      	mov	r0, r4
 800773e:	bd70      	pop	{r4, r5, r6, pc}

08007740 <__sfp_lock_acquire>:
 8007740:	4801      	ldr	r0, [pc, #4]	; (8007748 <__sfp_lock_acquire+0x8>)
 8007742:	f000 b8b3 	b.w	80078ac <__retarget_lock_acquire_recursive>
 8007746:	bf00      	nop
 8007748:	2000162c 	.word	0x2000162c

0800774c <__sfp_lock_release>:
 800774c:	4801      	ldr	r0, [pc, #4]	; (8007754 <__sfp_lock_release+0x8>)
 800774e:	f000 b8ae 	b.w	80078ae <__retarget_lock_release_recursive>
 8007752:	bf00      	nop
 8007754:	2000162c 	.word	0x2000162c

08007758 <__sinit_lock_acquire>:
 8007758:	4801      	ldr	r0, [pc, #4]	; (8007760 <__sinit_lock_acquire+0x8>)
 800775a:	f000 b8a7 	b.w	80078ac <__retarget_lock_acquire_recursive>
 800775e:	bf00      	nop
 8007760:	20001627 	.word	0x20001627

08007764 <__sinit_lock_release>:
 8007764:	4801      	ldr	r0, [pc, #4]	; (800776c <__sinit_lock_release+0x8>)
 8007766:	f000 b8a2 	b.w	80078ae <__retarget_lock_release_recursive>
 800776a:	bf00      	nop
 800776c:	20001627 	.word	0x20001627

08007770 <__sinit>:
 8007770:	b510      	push	{r4, lr}
 8007772:	4604      	mov	r4, r0
 8007774:	f7ff fff0 	bl	8007758 <__sinit_lock_acquire>
 8007778:	69a3      	ldr	r3, [r4, #24]
 800777a:	b11b      	cbz	r3, 8007784 <__sinit+0x14>
 800777c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007780:	f7ff bff0 	b.w	8007764 <__sinit_lock_release>
 8007784:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8007788:	6523      	str	r3, [r4, #80]	; 0x50
 800778a:	4b13      	ldr	r3, [pc, #76]	; (80077d8 <__sinit+0x68>)
 800778c:	4a13      	ldr	r2, [pc, #76]	; (80077dc <__sinit+0x6c>)
 800778e:	681b      	ldr	r3, [r3, #0]
 8007790:	62a2      	str	r2, [r4, #40]	; 0x28
 8007792:	42a3      	cmp	r3, r4
 8007794:	bf04      	itt	eq
 8007796:	2301      	moveq	r3, #1
 8007798:	61a3      	streq	r3, [r4, #24]
 800779a:	4620      	mov	r0, r4
 800779c:	f000 f820 	bl	80077e0 <__sfp>
 80077a0:	6060      	str	r0, [r4, #4]
 80077a2:	4620      	mov	r0, r4
 80077a4:	f000 f81c 	bl	80077e0 <__sfp>
 80077a8:	60a0      	str	r0, [r4, #8]
 80077aa:	4620      	mov	r0, r4
 80077ac:	f000 f818 	bl	80077e0 <__sfp>
 80077b0:	2200      	movs	r2, #0
 80077b2:	60e0      	str	r0, [r4, #12]
 80077b4:	2104      	movs	r1, #4
 80077b6:	6860      	ldr	r0, [r4, #4]
 80077b8:	f7ff ff82 	bl	80076c0 <std>
 80077bc:	68a0      	ldr	r0, [r4, #8]
 80077be:	2201      	movs	r2, #1
 80077c0:	2109      	movs	r1, #9
 80077c2:	f7ff ff7d 	bl	80076c0 <std>
 80077c6:	68e0      	ldr	r0, [r4, #12]
 80077c8:	2202      	movs	r2, #2
 80077ca:	2112      	movs	r1, #18
 80077cc:	f7ff ff78 	bl	80076c0 <std>
 80077d0:	2301      	movs	r3, #1
 80077d2:	61a3      	str	r3, [r4, #24]
 80077d4:	e7d2      	b.n	800777c <__sinit+0xc>
 80077d6:	bf00      	nop
 80077d8:	08008a08 	.word	0x08008a08
 80077dc:	08007709 	.word	0x08007709

080077e0 <__sfp>:
 80077e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80077e2:	4607      	mov	r7, r0
 80077e4:	f7ff ffac 	bl	8007740 <__sfp_lock_acquire>
 80077e8:	4b1e      	ldr	r3, [pc, #120]	; (8007864 <__sfp+0x84>)
 80077ea:	681e      	ldr	r6, [r3, #0]
 80077ec:	69b3      	ldr	r3, [r6, #24]
 80077ee:	b913      	cbnz	r3, 80077f6 <__sfp+0x16>
 80077f0:	4630      	mov	r0, r6
 80077f2:	f7ff ffbd 	bl	8007770 <__sinit>
 80077f6:	3648      	adds	r6, #72	; 0x48
 80077f8:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 80077fc:	3b01      	subs	r3, #1
 80077fe:	d503      	bpl.n	8007808 <__sfp+0x28>
 8007800:	6833      	ldr	r3, [r6, #0]
 8007802:	b30b      	cbz	r3, 8007848 <__sfp+0x68>
 8007804:	6836      	ldr	r6, [r6, #0]
 8007806:	e7f7      	b.n	80077f8 <__sfp+0x18>
 8007808:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800780c:	b9d5      	cbnz	r5, 8007844 <__sfp+0x64>
 800780e:	4b16      	ldr	r3, [pc, #88]	; (8007868 <__sfp+0x88>)
 8007810:	60e3      	str	r3, [r4, #12]
 8007812:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8007816:	6665      	str	r5, [r4, #100]	; 0x64
 8007818:	f000 f847 	bl	80078aa <__retarget_lock_init_recursive>
 800781c:	f7ff ff96 	bl	800774c <__sfp_lock_release>
 8007820:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8007824:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8007828:	6025      	str	r5, [r4, #0]
 800782a:	61a5      	str	r5, [r4, #24]
 800782c:	2208      	movs	r2, #8
 800782e:	4629      	mov	r1, r5
 8007830:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8007834:	f7ff fd2c 	bl	8007290 <memset>
 8007838:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800783c:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8007840:	4620      	mov	r0, r4
 8007842:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007844:	3468      	adds	r4, #104	; 0x68
 8007846:	e7d9      	b.n	80077fc <__sfp+0x1c>
 8007848:	2104      	movs	r1, #4
 800784a:	4638      	mov	r0, r7
 800784c:	f7ff ff62 	bl	8007714 <__sfmoreglue>
 8007850:	4604      	mov	r4, r0
 8007852:	6030      	str	r0, [r6, #0]
 8007854:	2800      	cmp	r0, #0
 8007856:	d1d5      	bne.n	8007804 <__sfp+0x24>
 8007858:	f7ff ff78 	bl	800774c <__sfp_lock_release>
 800785c:	230c      	movs	r3, #12
 800785e:	603b      	str	r3, [r7, #0]
 8007860:	e7ee      	b.n	8007840 <__sfp+0x60>
 8007862:	bf00      	nop
 8007864:	08008a08 	.word	0x08008a08
 8007868:	ffff0001 	.word	0xffff0001

0800786c <_fwalk_reent>:
 800786c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007870:	4606      	mov	r6, r0
 8007872:	4688      	mov	r8, r1
 8007874:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8007878:	2700      	movs	r7, #0
 800787a:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800787e:	f1b9 0901 	subs.w	r9, r9, #1
 8007882:	d505      	bpl.n	8007890 <_fwalk_reent+0x24>
 8007884:	6824      	ldr	r4, [r4, #0]
 8007886:	2c00      	cmp	r4, #0
 8007888:	d1f7      	bne.n	800787a <_fwalk_reent+0xe>
 800788a:	4638      	mov	r0, r7
 800788c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007890:	89ab      	ldrh	r3, [r5, #12]
 8007892:	2b01      	cmp	r3, #1
 8007894:	d907      	bls.n	80078a6 <_fwalk_reent+0x3a>
 8007896:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800789a:	3301      	adds	r3, #1
 800789c:	d003      	beq.n	80078a6 <_fwalk_reent+0x3a>
 800789e:	4629      	mov	r1, r5
 80078a0:	4630      	mov	r0, r6
 80078a2:	47c0      	blx	r8
 80078a4:	4307      	orrs	r7, r0
 80078a6:	3568      	adds	r5, #104	; 0x68
 80078a8:	e7e9      	b.n	800787e <_fwalk_reent+0x12>

080078aa <__retarget_lock_init_recursive>:
 80078aa:	4770      	bx	lr

080078ac <__retarget_lock_acquire_recursive>:
 80078ac:	4770      	bx	lr

080078ae <__retarget_lock_release_recursive>:
 80078ae:	4770      	bx	lr

080078b0 <__swhatbuf_r>:
 80078b0:	b570      	push	{r4, r5, r6, lr}
 80078b2:	460e      	mov	r6, r1
 80078b4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80078b8:	2900      	cmp	r1, #0
 80078ba:	b096      	sub	sp, #88	; 0x58
 80078bc:	4614      	mov	r4, r2
 80078be:	461d      	mov	r5, r3
 80078c0:	da07      	bge.n	80078d2 <__swhatbuf_r+0x22>
 80078c2:	2300      	movs	r3, #0
 80078c4:	602b      	str	r3, [r5, #0]
 80078c6:	89b3      	ldrh	r3, [r6, #12]
 80078c8:	061a      	lsls	r2, r3, #24
 80078ca:	d410      	bmi.n	80078ee <__swhatbuf_r+0x3e>
 80078cc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80078d0:	e00e      	b.n	80078f0 <__swhatbuf_r+0x40>
 80078d2:	466a      	mov	r2, sp
 80078d4:	f000 fc5e 	bl	8008194 <_fstat_r>
 80078d8:	2800      	cmp	r0, #0
 80078da:	dbf2      	blt.n	80078c2 <__swhatbuf_r+0x12>
 80078dc:	9a01      	ldr	r2, [sp, #4]
 80078de:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 80078e2:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 80078e6:	425a      	negs	r2, r3
 80078e8:	415a      	adcs	r2, r3
 80078ea:	602a      	str	r2, [r5, #0]
 80078ec:	e7ee      	b.n	80078cc <__swhatbuf_r+0x1c>
 80078ee:	2340      	movs	r3, #64	; 0x40
 80078f0:	2000      	movs	r0, #0
 80078f2:	6023      	str	r3, [r4, #0]
 80078f4:	b016      	add	sp, #88	; 0x58
 80078f6:	bd70      	pop	{r4, r5, r6, pc}

080078f8 <__smakebuf_r>:
 80078f8:	898b      	ldrh	r3, [r1, #12]
 80078fa:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80078fc:	079d      	lsls	r5, r3, #30
 80078fe:	4606      	mov	r6, r0
 8007900:	460c      	mov	r4, r1
 8007902:	d507      	bpl.n	8007914 <__smakebuf_r+0x1c>
 8007904:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8007908:	6023      	str	r3, [r4, #0]
 800790a:	6123      	str	r3, [r4, #16]
 800790c:	2301      	movs	r3, #1
 800790e:	6163      	str	r3, [r4, #20]
 8007910:	b002      	add	sp, #8
 8007912:	bd70      	pop	{r4, r5, r6, pc}
 8007914:	ab01      	add	r3, sp, #4
 8007916:	466a      	mov	r2, sp
 8007918:	f7ff ffca 	bl	80078b0 <__swhatbuf_r>
 800791c:	9900      	ldr	r1, [sp, #0]
 800791e:	4605      	mov	r5, r0
 8007920:	4630      	mov	r0, r6
 8007922:	f000 f879 	bl	8007a18 <_malloc_r>
 8007926:	b948      	cbnz	r0, 800793c <__smakebuf_r+0x44>
 8007928:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800792c:	059a      	lsls	r2, r3, #22
 800792e:	d4ef      	bmi.n	8007910 <__smakebuf_r+0x18>
 8007930:	f023 0303 	bic.w	r3, r3, #3
 8007934:	f043 0302 	orr.w	r3, r3, #2
 8007938:	81a3      	strh	r3, [r4, #12]
 800793a:	e7e3      	b.n	8007904 <__smakebuf_r+0xc>
 800793c:	4b0d      	ldr	r3, [pc, #52]	; (8007974 <__smakebuf_r+0x7c>)
 800793e:	62b3      	str	r3, [r6, #40]	; 0x28
 8007940:	89a3      	ldrh	r3, [r4, #12]
 8007942:	6020      	str	r0, [r4, #0]
 8007944:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007948:	81a3      	strh	r3, [r4, #12]
 800794a:	9b00      	ldr	r3, [sp, #0]
 800794c:	6163      	str	r3, [r4, #20]
 800794e:	9b01      	ldr	r3, [sp, #4]
 8007950:	6120      	str	r0, [r4, #16]
 8007952:	b15b      	cbz	r3, 800796c <__smakebuf_r+0x74>
 8007954:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007958:	4630      	mov	r0, r6
 800795a:	f000 fc2d 	bl	80081b8 <_isatty_r>
 800795e:	b128      	cbz	r0, 800796c <__smakebuf_r+0x74>
 8007960:	89a3      	ldrh	r3, [r4, #12]
 8007962:	f023 0303 	bic.w	r3, r3, #3
 8007966:	f043 0301 	orr.w	r3, r3, #1
 800796a:	81a3      	strh	r3, [r4, #12]
 800796c:	89a0      	ldrh	r0, [r4, #12]
 800796e:	4305      	orrs	r5, r0
 8007970:	81a5      	strh	r5, [r4, #12]
 8007972:	e7cd      	b.n	8007910 <__smakebuf_r+0x18>
 8007974:	08007709 	.word	0x08007709

08007978 <_free_r>:
 8007978:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800797a:	2900      	cmp	r1, #0
 800797c:	d048      	beq.n	8007a10 <_free_r+0x98>
 800797e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007982:	9001      	str	r0, [sp, #4]
 8007984:	2b00      	cmp	r3, #0
 8007986:	f1a1 0404 	sub.w	r4, r1, #4
 800798a:	bfb8      	it	lt
 800798c:	18e4      	addlt	r4, r4, r3
 800798e:	f000 fc35 	bl	80081fc <__malloc_lock>
 8007992:	4a20      	ldr	r2, [pc, #128]	; (8007a14 <_free_r+0x9c>)
 8007994:	9801      	ldr	r0, [sp, #4]
 8007996:	6813      	ldr	r3, [r2, #0]
 8007998:	4615      	mov	r5, r2
 800799a:	b933      	cbnz	r3, 80079aa <_free_r+0x32>
 800799c:	6063      	str	r3, [r4, #4]
 800799e:	6014      	str	r4, [r2, #0]
 80079a0:	b003      	add	sp, #12
 80079a2:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80079a6:	f000 bc2f 	b.w	8008208 <__malloc_unlock>
 80079aa:	42a3      	cmp	r3, r4
 80079ac:	d90b      	bls.n	80079c6 <_free_r+0x4e>
 80079ae:	6821      	ldr	r1, [r4, #0]
 80079b0:	1862      	adds	r2, r4, r1
 80079b2:	4293      	cmp	r3, r2
 80079b4:	bf04      	itt	eq
 80079b6:	681a      	ldreq	r2, [r3, #0]
 80079b8:	685b      	ldreq	r3, [r3, #4]
 80079ba:	6063      	str	r3, [r4, #4]
 80079bc:	bf04      	itt	eq
 80079be:	1852      	addeq	r2, r2, r1
 80079c0:	6022      	streq	r2, [r4, #0]
 80079c2:	602c      	str	r4, [r5, #0]
 80079c4:	e7ec      	b.n	80079a0 <_free_r+0x28>
 80079c6:	461a      	mov	r2, r3
 80079c8:	685b      	ldr	r3, [r3, #4]
 80079ca:	b10b      	cbz	r3, 80079d0 <_free_r+0x58>
 80079cc:	42a3      	cmp	r3, r4
 80079ce:	d9fa      	bls.n	80079c6 <_free_r+0x4e>
 80079d0:	6811      	ldr	r1, [r2, #0]
 80079d2:	1855      	adds	r5, r2, r1
 80079d4:	42a5      	cmp	r5, r4
 80079d6:	d10b      	bne.n	80079f0 <_free_r+0x78>
 80079d8:	6824      	ldr	r4, [r4, #0]
 80079da:	4421      	add	r1, r4
 80079dc:	1854      	adds	r4, r2, r1
 80079de:	42a3      	cmp	r3, r4
 80079e0:	6011      	str	r1, [r2, #0]
 80079e2:	d1dd      	bne.n	80079a0 <_free_r+0x28>
 80079e4:	681c      	ldr	r4, [r3, #0]
 80079e6:	685b      	ldr	r3, [r3, #4]
 80079e8:	6053      	str	r3, [r2, #4]
 80079ea:	4421      	add	r1, r4
 80079ec:	6011      	str	r1, [r2, #0]
 80079ee:	e7d7      	b.n	80079a0 <_free_r+0x28>
 80079f0:	d902      	bls.n	80079f8 <_free_r+0x80>
 80079f2:	230c      	movs	r3, #12
 80079f4:	6003      	str	r3, [r0, #0]
 80079f6:	e7d3      	b.n	80079a0 <_free_r+0x28>
 80079f8:	6825      	ldr	r5, [r4, #0]
 80079fa:	1961      	adds	r1, r4, r5
 80079fc:	428b      	cmp	r3, r1
 80079fe:	bf04      	itt	eq
 8007a00:	6819      	ldreq	r1, [r3, #0]
 8007a02:	685b      	ldreq	r3, [r3, #4]
 8007a04:	6063      	str	r3, [r4, #4]
 8007a06:	bf04      	itt	eq
 8007a08:	1949      	addeq	r1, r1, r5
 8007a0a:	6021      	streq	r1, [r4, #0]
 8007a0c:	6054      	str	r4, [r2, #4]
 8007a0e:	e7c7      	b.n	80079a0 <_free_r+0x28>
 8007a10:	b003      	add	sp, #12
 8007a12:	bd30      	pop	{r4, r5, pc}
 8007a14:	2000136c 	.word	0x2000136c

08007a18 <_malloc_r>:
 8007a18:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007a1a:	1ccd      	adds	r5, r1, #3
 8007a1c:	f025 0503 	bic.w	r5, r5, #3
 8007a20:	3508      	adds	r5, #8
 8007a22:	2d0c      	cmp	r5, #12
 8007a24:	bf38      	it	cc
 8007a26:	250c      	movcc	r5, #12
 8007a28:	2d00      	cmp	r5, #0
 8007a2a:	4606      	mov	r6, r0
 8007a2c:	db01      	blt.n	8007a32 <_malloc_r+0x1a>
 8007a2e:	42a9      	cmp	r1, r5
 8007a30:	d903      	bls.n	8007a3a <_malloc_r+0x22>
 8007a32:	230c      	movs	r3, #12
 8007a34:	6033      	str	r3, [r6, #0]
 8007a36:	2000      	movs	r0, #0
 8007a38:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007a3a:	f000 fbdf 	bl	80081fc <__malloc_lock>
 8007a3e:	4921      	ldr	r1, [pc, #132]	; (8007ac4 <_malloc_r+0xac>)
 8007a40:	680a      	ldr	r2, [r1, #0]
 8007a42:	4614      	mov	r4, r2
 8007a44:	b99c      	cbnz	r4, 8007a6e <_malloc_r+0x56>
 8007a46:	4f20      	ldr	r7, [pc, #128]	; (8007ac8 <_malloc_r+0xb0>)
 8007a48:	683b      	ldr	r3, [r7, #0]
 8007a4a:	b923      	cbnz	r3, 8007a56 <_malloc_r+0x3e>
 8007a4c:	4621      	mov	r1, r4
 8007a4e:	4630      	mov	r0, r6
 8007a50:	f000 fb2a 	bl	80080a8 <_sbrk_r>
 8007a54:	6038      	str	r0, [r7, #0]
 8007a56:	4629      	mov	r1, r5
 8007a58:	4630      	mov	r0, r6
 8007a5a:	f000 fb25 	bl	80080a8 <_sbrk_r>
 8007a5e:	1c43      	adds	r3, r0, #1
 8007a60:	d123      	bne.n	8007aaa <_malloc_r+0x92>
 8007a62:	230c      	movs	r3, #12
 8007a64:	6033      	str	r3, [r6, #0]
 8007a66:	4630      	mov	r0, r6
 8007a68:	f000 fbce 	bl	8008208 <__malloc_unlock>
 8007a6c:	e7e3      	b.n	8007a36 <_malloc_r+0x1e>
 8007a6e:	6823      	ldr	r3, [r4, #0]
 8007a70:	1b5b      	subs	r3, r3, r5
 8007a72:	d417      	bmi.n	8007aa4 <_malloc_r+0x8c>
 8007a74:	2b0b      	cmp	r3, #11
 8007a76:	d903      	bls.n	8007a80 <_malloc_r+0x68>
 8007a78:	6023      	str	r3, [r4, #0]
 8007a7a:	441c      	add	r4, r3
 8007a7c:	6025      	str	r5, [r4, #0]
 8007a7e:	e004      	b.n	8007a8a <_malloc_r+0x72>
 8007a80:	6863      	ldr	r3, [r4, #4]
 8007a82:	42a2      	cmp	r2, r4
 8007a84:	bf0c      	ite	eq
 8007a86:	600b      	streq	r3, [r1, #0]
 8007a88:	6053      	strne	r3, [r2, #4]
 8007a8a:	4630      	mov	r0, r6
 8007a8c:	f000 fbbc 	bl	8008208 <__malloc_unlock>
 8007a90:	f104 000b 	add.w	r0, r4, #11
 8007a94:	1d23      	adds	r3, r4, #4
 8007a96:	f020 0007 	bic.w	r0, r0, #7
 8007a9a:	1ac2      	subs	r2, r0, r3
 8007a9c:	d0cc      	beq.n	8007a38 <_malloc_r+0x20>
 8007a9e:	1a1b      	subs	r3, r3, r0
 8007aa0:	50a3      	str	r3, [r4, r2]
 8007aa2:	e7c9      	b.n	8007a38 <_malloc_r+0x20>
 8007aa4:	4622      	mov	r2, r4
 8007aa6:	6864      	ldr	r4, [r4, #4]
 8007aa8:	e7cc      	b.n	8007a44 <_malloc_r+0x2c>
 8007aaa:	1cc4      	adds	r4, r0, #3
 8007aac:	f024 0403 	bic.w	r4, r4, #3
 8007ab0:	42a0      	cmp	r0, r4
 8007ab2:	d0e3      	beq.n	8007a7c <_malloc_r+0x64>
 8007ab4:	1a21      	subs	r1, r4, r0
 8007ab6:	4630      	mov	r0, r6
 8007ab8:	f000 faf6 	bl	80080a8 <_sbrk_r>
 8007abc:	3001      	adds	r0, #1
 8007abe:	d1dd      	bne.n	8007a7c <_malloc_r+0x64>
 8007ac0:	e7cf      	b.n	8007a62 <_malloc_r+0x4a>
 8007ac2:	bf00      	nop
 8007ac4:	2000136c 	.word	0x2000136c
 8007ac8:	20001370 	.word	0x20001370

08007acc <__sfputc_r>:
 8007acc:	6893      	ldr	r3, [r2, #8]
 8007ace:	3b01      	subs	r3, #1
 8007ad0:	2b00      	cmp	r3, #0
 8007ad2:	b410      	push	{r4}
 8007ad4:	6093      	str	r3, [r2, #8]
 8007ad6:	da08      	bge.n	8007aea <__sfputc_r+0x1e>
 8007ad8:	6994      	ldr	r4, [r2, #24]
 8007ada:	42a3      	cmp	r3, r4
 8007adc:	db01      	blt.n	8007ae2 <__sfputc_r+0x16>
 8007ade:	290a      	cmp	r1, #10
 8007ae0:	d103      	bne.n	8007aea <__sfputc_r+0x1e>
 8007ae2:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007ae6:	f7ff bc69 	b.w	80073bc <__swbuf_r>
 8007aea:	6813      	ldr	r3, [r2, #0]
 8007aec:	1c58      	adds	r0, r3, #1
 8007aee:	6010      	str	r0, [r2, #0]
 8007af0:	7019      	strb	r1, [r3, #0]
 8007af2:	4608      	mov	r0, r1
 8007af4:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007af8:	4770      	bx	lr

08007afa <__sfputs_r>:
 8007afa:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007afc:	4606      	mov	r6, r0
 8007afe:	460f      	mov	r7, r1
 8007b00:	4614      	mov	r4, r2
 8007b02:	18d5      	adds	r5, r2, r3
 8007b04:	42ac      	cmp	r4, r5
 8007b06:	d101      	bne.n	8007b0c <__sfputs_r+0x12>
 8007b08:	2000      	movs	r0, #0
 8007b0a:	e007      	b.n	8007b1c <__sfputs_r+0x22>
 8007b0c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007b10:	463a      	mov	r2, r7
 8007b12:	4630      	mov	r0, r6
 8007b14:	f7ff ffda 	bl	8007acc <__sfputc_r>
 8007b18:	1c43      	adds	r3, r0, #1
 8007b1a:	d1f3      	bne.n	8007b04 <__sfputs_r+0xa>
 8007b1c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08007b20 <_vfiprintf_r>:
 8007b20:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007b24:	460d      	mov	r5, r1
 8007b26:	b09d      	sub	sp, #116	; 0x74
 8007b28:	4614      	mov	r4, r2
 8007b2a:	4698      	mov	r8, r3
 8007b2c:	4606      	mov	r6, r0
 8007b2e:	b118      	cbz	r0, 8007b38 <_vfiprintf_r+0x18>
 8007b30:	6983      	ldr	r3, [r0, #24]
 8007b32:	b90b      	cbnz	r3, 8007b38 <_vfiprintf_r+0x18>
 8007b34:	f7ff fe1c 	bl	8007770 <__sinit>
 8007b38:	4b89      	ldr	r3, [pc, #548]	; (8007d60 <_vfiprintf_r+0x240>)
 8007b3a:	429d      	cmp	r5, r3
 8007b3c:	d11b      	bne.n	8007b76 <_vfiprintf_r+0x56>
 8007b3e:	6875      	ldr	r5, [r6, #4]
 8007b40:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8007b42:	07d9      	lsls	r1, r3, #31
 8007b44:	d405      	bmi.n	8007b52 <_vfiprintf_r+0x32>
 8007b46:	89ab      	ldrh	r3, [r5, #12]
 8007b48:	059a      	lsls	r2, r3, #22
 8007b4a:	d402      	bmi.n	8007b52 <_vfiprintf_r+0x32>
 8007b4c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8007b4e:	f7ff fead 	bl	80078ac <__retarget_lock_acquire_recursive>
 8007b52:	89ab      	ldrh	r3, [r5, #12]
 8007b54:	071b      	lsls	r3, r3, #28
 8007b56:	d501      	bpl.n	8007b5c <_vfiprintf_r+0x3c>
 8007b58:	692b      	ldr	r3, [r5, #16]
 8007b5a:	b9eb      	cbnz	r3, 8007b98 <_vfiprintf_r+0x78>
 8007b5c:	4629      	mov	r1, r5
 8007b5e:	4630      	mov	r0, r6
 8007b60:	f7ff fc7e 	bl	8007460 <__swsetup_r>
 8007b64:	b1c0      	cbz	r0, 8007b98 <_vfiprintf_r+0x78>
 8007b66:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8007b68:	07dc      	lsls	r4, r3, #31
 8007b6a:	d50e      	bpl.n	8007b8a <_vfiprintf_r+0x6a>
 8007b6c:	f04f 30ff 	mov.w	r0, #4294967295
 8007b70:	b01d      	add	sp, #116	; 0x74
 8007b72:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007b76:	4b7b      	ldr	r3, [pc, #492]	; (8007d64 <_vfiprintf_r+0x244>)
 8007b78:	429d      	cmp	r5, r3
 8007b7a:	d101      	bne.n	8007b80 <_vfiprintf_r+0x60>
 8007b7c:	68b5      	ldr	r5, [r6, #8]
 8007b7e:	e7df      	b.n	8007b40 <_vfiprintf_r+0x20>
 8007b80:	4b79      	ldr	r3, [pc, #484]	; (8007d68 <_vfiprintf_r+0x248>)
 8007b82:	429d      	cmp	r5, r3
 8007b84:	bf08      	it	eq
 8007b86:	68f5      	ldreq	r5, [r6, #12]
 8007b88:	e7da      	b.n	8007b40 <_vfiprintf_r+0x20>
 8007b8a:	89ab      	ldrh	r3, [r5, #12]
 8007b8c:	0598      	lsls	r0, r3, #22
 8007b8e:	d4ed      	bmi.n	8007b6c <_vfiprintf_r+0x4c>
 8007b90:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8007b92:	f7ff fe8c 	bl	80078ae <__retarget_lock_release_recursive>
 8007b96:	e7e9      	b.n	8007b6c <_vfiprintf_r+0x4c>
 8007b98:	2300      	movs	r3, #0
 8007b9a:	9309      	str	r3, [sp, #36]	; 0x24
 8007b9c:	2320      	movs	r3, #32
 8007b9e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8007ba2:	f8cd 800c 	str.w	r8, [sp, #12]
 8007ba6:	2330      	movs	r3, #48	; 0x30
 8007ba8:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8007d6c <_vfiprintf_r+0x24c>
 8007bac:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8007bb0:	f04f 0901 	mov.w	r9, #1
 8007bb4:	4623      	mov	r3, r4
 8007bb6:	469a      	mov	sl, r3
 8007bb8:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007bbc:	b10a      	cbz	r2, 8007bc2 <_vfiprintf_r+0xa2>
 8007bbe:	2a25      	cmp	r2, #37	; 0x25
 8007bc0:	d1f9      	bne.n	8007bb6 <_vfiprintf_r+0x96>
 8007bc2:	ebba 0b04 	subs.w	fp, sl, r4
 8007bc6:	d00b      	beq.n	8007be0 <_vfiprintf_r+0xc0>
 8007bc8:	465b      	mov	r3, fp
 8007bca:	4622      	mov	r2, r4
 8007bcc:	4629      	mov	r1, r5
 8007bce:	4630      	mov	r0, r6
 8007bd0:	f7ff ff93 	bl	8007afa <__sfputs_r>
 8007bd4:	3001      	adds	r0, #1
 8007bd6:	f000 80aa 	beq.w	8007d2e <_vfiprintf_r+0x20e>
 8007bda:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007bdc:	445a      	add	r2, fp
 8007bde:	9209      	str	r2, [sp, #36]	; 0x24
 8007be0:	f89a 3000 	ldrb.w	r3, [sl]
 8007be4:	2b00      	cmp	r3, #0
 8007be6:	f000 80a2 	beq.w	8007d2e <_vfiprintf_r+0x20e>
 8007bea:	2300      	movs	r3, #0
 8007bec:	f04f 32ff 	mov.w	r2, #4294967295
 8007bf0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007bf4:	f10a 0a01 	add.w	sl, sl, #1
 8007bf8:	9304      	str	r3, [sp, #16]
 8007bfa:	9307      	str	r3, [sp, #28]
 8007bfc:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8007c00:	931a      	str	r3, [sp, #104]	; 0x68
 8007c02:	4654      	mov	r4, sl
 8007c04:	2205      	movs	r2, #5
 8007c06:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007c0a:	4858      	ldr	r0, [pc, #352]	; (8007d6c <_vfiprintf_r+0x24c>)
 8007c0c:	f7f8 fab8 	bl	8000180 <memchr>
 8007c10:	9a04      	ldr	r2, [sp, #16]
 8007c12:	b9d8      	cbnz	r0, 8007c4c <_vfiprintf_r+0x12c>
 8007c14:	06d1      	lsls	r1, r2, #27
 8007c16:	bf44      	itt	mi
 8007c18:	2320      	movmi	r3, #32
 8007c1a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007c1e:	0713      	lsls	r3, r2, #28
 8007c20:	bf44      	itt	mi
 8007c22:	232b      	movmi	r3, #43	; 0x2b
 8007c24:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007c28:	f89a 3000 	ldrb.w	r3, [sl]
 8007c2c:	2b2a      	cmp	r3, #42	; 0x2a
 8007c2e:	d015      	beq.n	8007c5c <_vfiprintf_r+0x13c>
 8007c30:	9a07      	ldr	r2, [sp, #28]
 8007c32:	4654      	mov	r4, sl
 8007c34:	2000      	movs	r0, #0
 8007c36:	f04f 0c0a 	mov.w	ip, #10
 8007c3a:	4621      	mov	r1, r4
 8007c3c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007c40:	3b30      	subs	r3, #48	; 0x30
 8007c42:	2b09      	cmp	r3, #9
 8007c44:	d94e      	bls.n	8007ce4 <_vfiprintf_r+0x1c4>
 8007c46:	b1b0      	cbz	r0, 8007c76 <_vfiprintf_r+0x156>
 8007c48:	9207      	str	r2, [sp, #28]
 8007c4a:	e014      	b.n	8007c76 <_vfiprintf_r+0x156>
 8007c4c:	eba0 0308 	sub.w	r3, r0, r8
 8007c50:	fa09 f303 	lsl.w	r3, r9, r3
 8007c54:	4313      	orrs	r3, r2
 8007c56:	9304      	str	r3, [sp, #16]
 8007c58:	46a2      	mov	sl, r4
 8007c5a:	e7d2      	b.n	8007c02 <_vfiprintf_r+0xe2>
 8007c5c:	9b03      	ldr	r3, [sp, #12]
 8007c5e:	1d19      	adds	r1, r3, #4
 8007c60:	681b      	ldr	r3, [r3, #0]
 8007c62:	9103      	str	r1, [sp, #12]
 8007c64:	2b00      	cmp	r3, #0
 8007c66:	bfbb      	ittet	lt
 8007c68:	425b      	neglt	r3, r3
 8007c6a:	f042 0202 	orrlt.w	r2, r2, #2
 8007c6e:	9307      	strge	r3, [sp, #28]
 8007c70:	9307      	strlt	r3, [sp, #28]
 8007c72:	bfb8      	it	lt
 8007c74:	9204      	strlt	r2, [sp, #16]
 8007c76:	7823      	ldrb	r3, [r4, #0]
 8007c78:	2b2e      	cmp	r3, #46	; 0x2e
 8007c7a:	d10c      	bne.n	8007c96 <_vfiprintf_r+0x176>
 8007c7c:	7863      	ldrb	r3, [r4, #1]
 8007c7e:	2b2a      	cmp	r3, #42	; 0x2a
 8007c80:	d135      	bne.n	8007cee <_vfiprintf_r+0x1ce>
 8007c82:	9b03      	ldr	r3, [sp, #12]
 8007c84:	1d1a      	adds	r2, r3, #4
 8007c86:	681b      	ldr	r3, [r3, #0]
 8007c88:	9203      	str	r2, [sp, #12]
 8007c8a:	2b00      	cmp	r3, #0
 8007c8c:	bfb8      	it	lt
 8007c8e:	f04f 33ff 	movlt.w	r3, #4294967295
 8007c92:	3402      	adds	r4, #2
 8007c94:	9305      	str	r3, [sp, #20]
 8007c96:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8007d7c <_vfiprintf_r+0x25c>
 8007c9a:	7821      	ldrb	r1, [r4, #0]
 8007c9c:	2203      	movs	r2, #3
 8007c9e:	4650      	mov	r0, sl
 8007ca0:	f7f8 fa6e 	bl	8000180 <memchr>
 8007ca4:	b140      	cbz	r0, 8007cb8 <_vfiprintf_r+0x198>
 8007ca6:	2340      	movs	r3, #64	; 0x40
 8007ca8:	eba0 000a 	sub.w	r0, r0, sl
 8007cac:	fa03 f000 	lsl.w	r0, r3, r0
 8007cb0:	9b04      	ldr	r3, [sp, #16]
 8007cb2:	4303      	orrs	r3, r0
 8007cb4:	3401      	adds	r4, #1
 8007cb6:	9304      	str	r3, [sp, #16]
 8007cb8:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007cbc:	482c      	ldr	r0, [pc, #176]	; (8007d70 <_vfiprintf_r+0x250>)
 8007cbe:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8007cc2:	2206      	movs	r2, #6
 8007cc4:	f7f8 fa5c 	bl	8000180 <memchr>
 8007cc8:	2800      	cmp	r0, #0
 8007cca:	d03f      	beq.n	8007d4c <_vfiprintf_r+0x22c>
 8007ccc:	4b29      	ldr	r3, [pc, #164]	; (8007d74 <_vfiprintf_r+0x254>)
 8007cce:	bb1b      	cbnz	r3, 8007d18 <_vfiprintf_r+0x1f8>
 8007cd0:	9b03      	ldr	r3, [sp, #12]
 8007cd2:	3307      	adds	r3, #7
 8007cd4:	f023 0307 	bic.w	r3, r3, #7
 8007cd8:	3308      	adds	r3, #8
 8007cda:	9303      	str	r3, [sp, #12]
 8007cdc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007cde:	443b      	add	r3, r7
 8007ce0:	9309      	str	r3, [sp, #36]	; 0x24
 8007ce2:	e767      	b.n	8007bb4 <_vfiprintf_r+0x94>
 8007ce4:	fb0c 3202 	mla	r2, ip, r2, r3
 8007ce8:	460c      	mov	r4, r1
 8007cea:	2001      	movs	r0, #1
 8007cec:	e7a5      	b.n	8007c3a <_vfiprintf_r+0x11a>
 8007cee:	2300      	movs	r3, #0
 8007cf0:	3401      	adds	r4, #1
 8007cf2:	9305      	str	r3, [sp, #20]
 8007cf4:	4619      	mov	r1, r3
 8007cf6:	f04f 0c0a 	mov.w	ip, #10
 8007cfa:	4620      	mov	r0, r4
 8007cfc:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007d00:	3a30      	subs	r2, #48	; 0x30
 8007d02:	2a09      	cmp	r2, #9
 8007d04:	d903      	bls.n	8007d0e <_vfiprintf_r+0x1ee>
 8007d06:	2b00      	cmp	r3, #0
 8007d08:	d0c5      	beq.n	8007c96 <_vfiprintf_r+0x176>
 8007d0a:	9105      	str	r1, [sp, #20]
 8007d0c:	e7c3      	b.n	8007c96 <_vfiprintf_r+0x176>
 8007d0e:	fb0c 2101 	mla	r1, ip, r1, r2
 8007d12:	4604      	mov	r4, r0
 8007d14:	2301      	movs	r3, #1
 8007d16:	e7f0      	b.n	8007cfa <_vfiprintf_r+0x1da>
 8007d18:	ab03      	add	r3, sp, #12
 8007d1a:	9300      	str	r3, [sp, #0]
 8007d1c:	462a      	mov	r2, r5
 8007d1e:	4b16      	ldr	r3, [pc, #88]	; (8007d78 <_vfiprintf_r+0x258>)
 8007d20:	a904      	add	r1, sp, #16
 8007d22:	4630      	mov	r0, r6
 8007d24:	f3af 8000 	nop.w
 8007d28:	4607      	mov	r7, r0
 8007d2a:	1c78      	adds	r0, r7, #1
 8007d2c:	d1d6      	bne.n	8007cdc <_vfiprintf_r+0x1bc>
 8007d2e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8007d30:	07d9      	lsls	r1, r3, #31
 8007d32:	d405      	bmi.n	8007d40 <_vfiprintf_r+0x220>
 8007d34:	89ab      	ldrh	r3, [r5, #12]
 8007d36:	059a      	lsls	r2, r3, #22
 8007d38:	d402      	bmi.n	8007d40 <_vfiprintf_r+0x220>
 8007d3a:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8007d3c:	f7ff fdb7 	bl	80078ae <__retarget_lock_release_recursive>
 8007d40:	89ab      	ldrh	r3, [r5, #12]
 8007d42:	065b      	lsls	r3, r3, #25
 8007d44:	f53f af12 	bmi.w	8007b6c <_vfiprintf_r+0x4c>
 8007d48:	9809      	ldr	r0, [sp, #36]	; 0x24
 8007d4a:	e711      	b.n	8007b70 <_vfiprintf_r+0x50>
 8007d4c:	ab03      	add	r3, sp, #12
 8007d4e:	9300      	str	r3, [sp, #0]
 8007d50:	462a      	mov	r2, r5
 8007d52:	4b09      	ldr	r3, [pc, #36]	; (8007d78 <_vfiprintf_r+0x258>)
 8007d54:	a904      	add	r1, sp, #16
 8007d56:	4630      	mov	r0, r6
 8007d58:	f000 f880 	bl	8007e5c <_printf_i>
 8007d5c:	e7e4      	b.n	8007d28 <_vfiprintf_r+0x208>
 8007d5e:	bf00      	nop
 8007d60:	08008a2c 	.word	0x08008a2c
 8007d64:	08008a4c 	.word	0x08008a4c
 8007d68:	08008a0c 	.word	0x08008a0c
 8007d6c:	08008a6c 	.word	0x08008a6c
 8007d70:	08008a76 	.word	0x08008a76
 8007d74:	00000000 	.word	0x00000000
 8007d78:	08007afb 	.word	0x08007afb
 8007d7c:	08008a72 	.word	0x08008a72

08007d80 <_printf_common>:
 8007d80:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007d84:	4616      	mov	r6, r2
 8007d86:	4699      	mov	r9, r3
 8007d88:	688a      	ldr	r2, [r1, #8]
 8007d8a:	690b      	ldr	r3, [r1, #16]
 8007d8c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8007d90:	4293      	cmp	r3, r2
 8007d92:	bfb8      	it	lt
 8007d94:	4613      	movlt	r3, r2
 8007d96:	6033      	str	r3, [r6, #0]
 8007d98:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8007d9c:	4607      	mov	r7, r0
 8007d9e:	460c      	mov	r4, r1
 8007da0:	b10a      	cbz	r2, 8007da6 <_printf_common+0x26>
 8007da2:	3301      	adds	r3, #1
 8007da4:	6033      	str	r3, [r6, #0]
 8007da6:	6823      	ldr	r3, [r4, #0]
 8007da8:	0699      	lsls	r1, r3, #26
 8007daa:	bf42      	ittt	mi
 8007dac:	6833      	ldrmi	r3, [r6, #0]
 8007dae:	3302      	addmi	r3, #2
 8007db0:	6033      	strmi	r3, [r6, #0]
 8007db2:	6825      	ldr	r5, [r4, #0]
 8007db4:	f015 0506 	ands.w	r5, r5, #6
 8007db8:	d106      	bne.n	8007dc8 <_printf_common+0x48>
 8007dba:	f104 0a19 	add.w	sl, r4, #25
 8007dbe:	68e3      	ldr	r3, [r4, #12]
 8007dc0:	6832      	ldr	r2, [r6, #0]
 8007dc2:	1a9b      	subs	r3, r3, r2
 8007dc4:	42ab      	cmp	r3, r5
 8007dc6:	dc26      	bgt.n	8007e16 <_printf_common+0x96>
 8007dc8:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8007dcc:	1e13      	subs	r3, r2, #0
 8007dce:	6822      	ldr	r2, [r4, #0]
 8007dd0:	bf18      	it	ne
 8007dd2:	2301      	movne	r3, #1
 8007dd4:	0692      	lsls	r2, r2, #26
 8007dd6:	d42b      	bmi.n	8007e30 <_printf_common+0xb0>
 8007dd8:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8007ddc:	4649      	mov	r1, r9
 8007dde:	4638      	mov	r0, r7
 8007de0:	47c0      	blx	r8
 8007de2:	3001      	adds	r0, #1
 8007de4:	d01e      	beq.n	8007e24 <_printf_common+0xa4>
 8007de6:	6823      	ldr	r3, [r4, #0]
 8007de8:	68e5      	ldr	r5, [r4, #12]
 8007dea:	6832      	ldr	r2, [r6, #0]
 8007dec:	f003 0306 	and.w	r3, r3, #6
 8007df0:	2b04      	cmp	r3, #4
 8007df2:	bf08      	it	eq
 8007df4:	1aad      	subeq	r5, r5, r2
 8007df6:	68a3      	ldr	r3, [r4, #8]
 8007df8:	6922      	ldr	r2, [r4, #16]
 8007dfa:	bf0c      	ite	eq
 8007dfc:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8007e00:	2500      	movne	r5, #0
 8007e02:	4293      	cmp	r3, r2
 8007e04:	bfc4      	itt	gt
 8007e06:	1a9b      	subgt	r3, r3, r2
 8007e08:	18ed      	addgt	r5, r5, r3
 8007e0a:	2600      	movs	r6, #0
 8007e0c:	341a      	adds	r4, #26
 8007e0e:	42b5      	cmp	r5, r6
 8007e10:	d11a      	bne.n	8007e48 <_printf_common+0xc8>
 8007e12:	2000      	movs	r0, #0
 8007e14:	e008      	b.n	8007e28 <_printf_common+0xa8>
 8007e16:	2301      	movs	r3, #1
 8007e18:	4652      	mov	r2, sl
 8007e1a:	4649      	mov	r1, r9
 8007e1c:	4638      	mov	r0, r7
 8007e1e:	47c0      	blx	r8
 8007e20:	3001      	adds	r0, #1
 8007e22:	d103      	bne.n	8007e2c <_printf_common+0xac>
 8007e24:	f04f 30ff 	mov.w	r0, #4294967295
 8007e28:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007e2c:	3501      	adds	r5, #1
 8007e2e:	e7c6      	b.n	8007dbe <_printf_common+0x3e>
 8007e30:	18e1      	adds	r1, r4, r3
 8007e32:	1c5a      	adds	r2, r3, #1
 8007e34:	2030      	movs	r0, #48	; 0x30
 8007e36:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8007e3a:	4422      	add	r2, r4
 8007e3c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8007e40:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8007e44:	3302      	adds	r3, #2
 8007e46:	e7c7      	b.n	8007dd8 <_printf_common+0x58>
 8007e48:	2301      	movs	r3, #1
 8007e4a:	4622      	mov	r2, r4
 8007e4c:	4649      	mov	r1, r9
 8007e4e:	4638      	mov	r0, r7
 8007e50:	47c0      	blx	r8
 8007e52:	3001      	adds	r0, #1
 8007e54:	d0e6      	beq.n	8007e24 <_printf_common+0xa4>
 8007e56:	3601      	adds	r6, #1
 8007e58:	e7d9      	b.n	8007e0e <_printf_common+0x8e>
	...

08007e5c <_printf_i>:
 8007e5c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007e60:	460c      	mov	r4, r1
 8007e62:	4691      	mov	r9, r2
 8007e64:	7e27      	ldrb	r7, [r4, #24]
 8007e66:	990c      	ldr	r1, [sp, #48]	; 0x30
 8007e68:	2f78      	cmp	r7, #120	; 0x78
 8007e6a:	4680      	mov	r8, r0
 8007e6c:	469a      	mov	sl, r3
 8007e6e:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8007e72:	d807      	bhi.n	8007e84 <_printf_i+0x28>
 8007e74:	2f62      	cmp	r7, #98	; 0x62
 8007e76:	d80a      	bhi.n	8007e8e <_printf_i+0x32>
 8007e78:	2f00      	cmp	r7, #0
 8007e7a:	f000 80d8 	beq.w	800802e <_printf_i+0x1d2>
 8007e7e:	2f58      	cmp	r7, #88	; 0x58
 8007e80:	f000 80a3 	beq.w	8007fca <_printf_i+0x16e>
 8007e84:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8007e88:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8007e8c:	e03a      	b.n	8007f04 <_printf_i+0xa8>
 8007e8e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8007e92:	2b15      	cmp	r3, #21
 8007e94:	d8f6      	bhi.n	8007e84 <_printf_i+0x28>
 8007e96:	a001      	add	r0, pc, #4	; (adr r0, 8007e9c <_printf_i+0x40>)
 8007e98:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8007e9c:	08007ef5 	.word	0x08007ef5
 8007ea0:	08007f09 	.word	0x08007f09
 8007ea4:	08007e85 	.word	0x08007e85
 8007ea8:	08007e85 	.word	0x08007e85
 8007eac:	08007e85 	.word	0x08007e85
 8007eb0:	08007e85 	.word	0x08007e85
 8007eb4:	08007f09 	.word	0x08007f09
 8007eb8:	08007e85 	.word	0x08007e85
 8007ebc:	08007e85 	.word	0x08007e85
 8007ec0:	08007e85 	.word	0x08007e85
 8007ec4:	08007e85 	.word	0x08007e85
 8007ec8:	08008015 	.word	0x08008015
 8007ecc:	08007f39 	.word	0x08007f39
 8007ed0:	08007ff7 	.word	0x08007ff7
 8007ed4:	08007e85 	.word	0x08007e85
 8007ed8:	08007e85 	.word	0x08007e85
 8007edc:	08008037 	.word	0x08008037
 8007ee0:	08007e85 	.word	0x08007e85
 8007ee4:	08007f39 	.word	0x08007f39
 8007ee8:	08007e85 	.word	0x08007e85
 8007eec:	08007e85 	.word	0x08007e85
 8007ef0:	08007fff 	.word	0x08007fff
 8007ef4:	680b      	ldr	r3, [r1, #0]
 8007ef6:	1d1a      	adds	r2, r3, #4
 8007ef8:	681b      	ldr	r3, [r3, #0]
 8007efa:	600a      	str	r2, [r1, #0]
 8007efc:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8007f00:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8007f04:	2301      	movs	r3, #1
 8007f06:	e0a3      	b.n	8008050 <_printf_i+0x1f4>
 8007f08:	6825      	ldr	r5, [r4, #0]
 8007f0a:	6808      	ldr	r0, [r1, #0]
 8007f0c:	062e      	lsls	r6, r5, #24
 8007f0e:	f100 0304 	add.w	r3, r0, #4
 8007f12:	d50a      	bpl.n	8007f2a <_printf_i+0xce>
 8007f14:	6805      	ldr	r5, [r0, #0]
 8007f16:	600b      	str	r3, [r1, #0]
 8007f18:	2d00      	cmp	r5, #0
 8007f1a:	da03      	bge.n	8007f24 <_printf_i+0xc8>
 8007f1c:	232d      	movs	r3, #45	; 0x2d
 8007f1e:	426d      	negs	r5, r5
 8007f20:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007f24:	485e      	ldr	r0, [pc, #376]	; (80080a0 <_printf_i+0x244>)
 8007f26:	230a      	movs	r3, #10
 8007f28:	e019      	b.n	8007f5e <_printf_i+0x102>
 8007f2a:	f015 0f40 	tst.w	r5, #64	; 0x40
 8007f2e:	6805      	ldr	r5, [r0, #0]
 8007f30:	600b      	str	r3, [r1, #0]
 8007f32:	bf18      	it	ne
 8007f34:	b22d      	sxthne	r5, r5
 8007f36:	e7ef      	b.n	8007f18 <_printf_i+0xbc>
 8007f38:	680b      	ldr	r3, [r1, #0]
 8007f3a:	6825      	ldr	r5, [r4, #0]
 8007f3c:	1d18      	adds	r0, r3, #4
 8007f3e:	6008      	str	r0, [r1, #0]
 8007f40:	0628      	lsls	r0, r5, #24
 8007f42:	d501      	bpl.n	8007f48 <_printf_i+0xec>
 8007f44:	681d      	ldr	r5, [r3, #0]
 8007f46:	e002      	b.n	8007f4e <_printf_i+0xf2>
 8007f48:	0669      	lsls	r1, r5, #25
 8007f4a:	d5fb      	bpl.n	8007f44 <_printf_i+0xe8>
 8007f4c:	881d      	ldrh	r5, [r3, #0]
 8007f4e:	4854      	ldr	r0, [pc, #336]	; (80080a0 <_printf_i+0x244>)
 8007f50:	2f6f      	cmp	r7, #111	; 0x6f
 8007f52:	bf0c      	ite	eq
 8007f54:	2308      	moveq	r3, #8
 8007f56:	230a      	movne	r3, #10
 8007f58:	2100      	movs	r1, #0
 8007f5a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8007f5e:	6866      	ldr	r6, [r4, #4]
 8007f60:	60a6      	str	r6, [r4, #8]
 8007f62:	2e00      	cmp	r6, #0
 8007f64:	bfa2      	ittt	ge
 8007f66:	6821      	ldrge	r1, [r4, #0]
 8007f68:	f021 0104 	bicge.w	r1, r1, #4
 8007f6c:	6021      	strge	r1, [r4, #0]
 8007f6e:	b90d      	cbnz	r5, 8007f74 <_printf_i+0x118>
 8007f70:	2e00      	cmp	r6, #0
 8007f72:	d04d      	beq.n	8008010 <_printf_i+0x1b4>
 8007f74:	4616      	mov	r6, r2
 8007f76:	fbb5 f1f3 	udiv	r1, r5, r3
 8007f7a:	fb03 5711 	mls	r7, r3, r1, r5
 8007f7e:	5dc7      	ldrb	r7, [r0, r7]
 8007f80:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8007f84:	462f      	mov	r7, r5
 8007f86:	42bb      	cmp	r3, r7
 8007f88:	460d      	mov	r5, r1
 8007f8a:	d9f4      	bls.n	8007f76 <_printf_i+0x11a>
 8007f8c:	2b08      	cmp	r3, #8
 8007f8e:	d10b      	bne.n	8007fa8 <_printf_i+0x14c>
 8007f90:	6823      	ldr	r3, [r4, #0]
 8007f92:	07df      	lsls	r7, r3, #31
 8007f94:	d508      	bpl.n	8007fa8 <_printf_i+0x14c>
 8007f96:	6923      	ldr	r3, [r4, #16]
 8007f98:	6861      	ldr	r1, [r4, #4]
 8007f9a:	4299      	cmp	r1, r3
 8007f9c:	bfde      	ittt	le
 8007f9e:	2330      	movle	r3, #48	; 0x30
 8007fa0:	f806 3c01 	strble.w	r3, [r6, #-1]
 8007fa4:	f106 36ff 	addle.w	r6, r6, #4294967295
 8007fa8:	1b92      	subs	r2, r2, r6
 8007faa:	6122      	str	r2, [r4, #16]
 8007fac:	f8cd a000 	str.w	sl, [sp]
 8007fb0:	464b      	mov	r3, r9
 8007fb2:	aa03      	add	r2, sp, #12
 8007fb4:	4621      	mov	r1, r4
 8007fb6:	4640      	mov	r0, r8
 8007fb8:	f7ff fee2 	bl	8007d80 <_printf_common>
 8007fbc:	3001      	adds	r0, #1
 8007fbe:	d14c      	bne.n	800805a <_printf_i+0x1fe>
 8007fc0:	f04f 30ff 	mov.w	r0, #4294967295
 8007fc4:	b004      	add	sp, #16
 8007fc6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007fca:	4835      	ldr	r0, [pc, #212]	; (80080a0 <_printf_i+0x244>)
 8007fcc:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8007fd0:	6823      	ldr	r3, [r4, #0]
 8007fd2:	680e      	ldr	r6, [r1, #0]
 8007fd4:	061f      	lsls	r7, r3, #24
 8007fd6:	f856 5b04 	ldr.w	r5, [r6], #4
 8007fda:	600e      	str	r6, [r1, #0]
 8007fdc:	d514      	bpl.n	8008008 <_printf_i+0x1ac>
 8007fde:	07d9      	lsls	r1, r3, #31
 8007fe0:	bf44      	itt	mi
 8007fe2:	f043 0320 	orrmi.w	r3, r3, #32
 8007fe6:	6023      	strmi	r3, [r4, #0]
 8007fe8:	b91d      	cbnz	r5, 8007ff2 <_printf_i+0x196>
 8007fea:	6823      	ldr	r3, [r4, #0]
 8007fec:	f023 0320 	bic.w	r3, r3, #32
 8007ff0:	6023      	str	r3, [r4, #0]
 8007ff2:	2310      	movs	r3, #16
 8007ff4:	e7b0      	b.n	8007f58 <_printf_i+0xfc>
 8007ff6:	6823      	ldr	r3, [r4, #0]
 8007ff8:	f043 0320 	orr.w	r3, r3, #32
 8007ffc:	6023      	str	r3, [r4, #0]
 8007ffe:	2378      	movs	r3, #120	; 0x78
 8008000:	4828      	ldr	r0, [pc, #160]	; (80080a4 <_printf_i+0x248>)
 8008002:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8008006:	e7e3      	b.n	8007fd0 <_printf_i+0x174>
 8008008:	065e      	lsls	r6, r3, #25
 800800a:	bf48      	it	mi
 800800c:	b2ad      	uxthmi	r5, r5
 800800e:	e7e6      	b.n	8007fde <_printf_i+0x182>
 8008010:	4616      	mov	r6, r2
 8008012:	e7bb      	b.n	8007f8c <_printf_i+0x130>
 8008014:	680b      	ldr	r3, [r1, #0]
 8008016:	6826      	ldr	r6, [r4, #0]
 8008018:	6960      	ldr	r0, [r4, #20]
 800801a:	1d1d      	adds	r5, r3, #4
 800801c:	600d      	str	r5, [r1, #0]
 800801e:	0635      	lsls	r5, r6, #24
 8008020:	681b      	ldr	r3, [r3, #0]
 8008022:	d501      	bpl.n	8008028 <_printf_i+0x1cc>
 8008024:	6018      	str	r0, [r3, #0]
 8008026:	e002      	b.n	800802e <_printf_i+0x1d2>
 8008028:	0671      	lsls	r1, r6, #25
 800802a:	d5fb      	bpl.n	8008024 <_printf_i+0x1c8>
 800802c:	8018      	strh	r0, [r3, #0]
 800802e:	2300      	movs	r3, #0
 8008030:	6123      	str	r3, [r4, #16]
 8008032:	4616      	mov	r6, r2
 8008034:	e7ba      	b.n	8007fac <_printf_i+0x150>
 8008036:	680b      	ldr	r3, [r1, #0]
 8008038:	1d1a      	adds	r2, r3, #4
 800803a:	600a      	str	r2, [r1, #0]
 800803c:	681e      	ldr	r6, [r3, #0]
 800803e:	6862      	ldr	r2, [r4, #4]
 8008040:	2100      	movs	r1, #0
 8008042:	4630      	mov	r0, r6
 8008044:	f7f8 f89c 	bl	8000180 <memchr>
 8008048:	b108      	cbz	r0, 800804e <_printf_i+0x1f2>
 800804a:	1b80      	subs	r0, r0, r6
 800804c:	6060      	str	r0, [r4, #4]
 800804e:	6863      	ldr	r3, [r4, #4]
 8008050:	6123      	str	r3, [r4, #16]
 8008052:	2300      	movs	r3, #0
 8008054:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008058:	e7a8      	b.n	8007fac <_printf_i+0x150>
 800805a:	6923      	ldr	r3, [r4, #16]
 800805c:	4632      	mov	r2, r6
 800805e:	4649      	mov	r1, r9
 8008060:	4640      	mov	r0, r8
 8008062:	47d0      	blx	sl
 8008064:	3001      	adds	r0, #1
 8008066:	d0ab      	beq.n	8007fc0 <_printf_i+0x164>
 8008068:	6823      	ldr	r3, [r4, #0]
 800806a:	079b      	lsls	r3, r3, #30
 800806c:	d413      	bmi.n	8008096 <_printf_i+0x23a>
 800806e:	68e0      	ldr	r0, [r4, #12]
 8008070:	9b03      	ldr	r3, [sp, #12]
 8008072:	4298      	cmp	r0, r3
 8008074:	bfb8      	it	lt
 8008076:	4618      	movlt	r0, r3
 8008078:	e7a4      	b.n	8007fc4 <_printf_i+0x168>
 800807a:	2301      	movs	r3, #1
 800807c:	4632      	mov	r2, r6
 800807e:	4649      	mov	r1, r9
 8008080:	4640      	mov	r0, r8
 8008082:	47d0      	blx	sl
 8008084:	3001      	adds	r0, #1
 8008086:	d09b      	beq.n	8007fc0 <_printf_i+0x164>
 8008088:	3501      	adds	r5, #1
 800808a:	68e3      	ldr	r3, [r4, #12]
 800808c:	9903      	ldr	r1, [sp, #12]
 800808e:	1a5b      	subs	r3, r3, r1
 8008090:	42ab      	cmp	r3, r5
 8008092:	dcf2      	bgt.n	800807a <_printf_i+0x21e>
 8008094:	e7eb      	b.n	800806e <_printf_i+0x212>
 8008096:	2500      	movs	r5, #0
 8008098:	f104 0619 	add.w	r6, r4, #25
 800809c:	e7f5      	b.n	800808a <_printf_i+0x22e>
 800809e:	bf00      	nop
 80080a0:	08008a7d 	.word	0x08008a7d
 80080a4:	08008a8e 	.word	0x08008a8e

080080a8 <_sbrk_r>:
 80080a8:	b538      	push	{r3, r4, r5, lr}
 80080aa:	4d06      	ldr	r5, [pc, #24]	; (80080c4 <_sbrk_r+0x1c>)
 80080ac:	2300      	movs	r3, #0
 80080ae:	4604      	mov	r4, r0
 80080b0:	4608      	mov	r0, r1
 80080b2:	602b      	str	r3, [r5, #0]
 80080b4:	f7f9 fd58 	bl	8001b68 <_sbrk>
 80080b8:	1c43      	adds	r3, r0, #1
 80080ba:	d102      	bne.n	80080c2 <_sbrk_r+0x1a>
 80080bc:	682b      	ldr	r3, [r5, #0]
 80080be:	b103      	cbz	r3, 80080c2 <_sbrk_r+0x1a>
 80080c0:	6023      	str	r3, [r4, #0]
 80080c2:	bd38      	pop	{r3, r4, r5, pc}
 80080c4:	20001630 	.word	0x20001630

080080c8 <__sread>:
 80080c8:	b510      	push	{r4, lr}
 80080ca:	460c      	mov	r4, r1
 80080cc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80080d0:	f000 f8a0 	bl	8008214 <_read_r>
 80080d4:	2800      	cmp	r0, #0
 80080d6:	bfab      	itete	ge
 80080d8:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80080da:	89a3      	ldrhlt	r3, [r4, #12]
 80080dc:	181b      	addge	r3, r3, r0
 80080de:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80080e2:	bfac      	ite	ge
 80080e4:	6563      	strge	r3, [r4, #84]	; 0x54
 80080e6:	81a3      	strhlt	r3, [r4, #12]
 80080e8:	bd10      	pop	{r4, pc}

080080ea <__swrite>:
 80080ea:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80080ee:	461f      	mov	r7, r3
 80080f0:	898b      	ldrh	r3, [r1, #12]
 80080f2:	05db      	lsls	r3, r3, #23
 80080f4:	4605      	mov	r5, r0
 80080f6:	460c      	mov	r4, r1
 80080f8:	4616      	mov	r6, r2
 80080fa:	d505      	bpl.n	8008108 <__swrite+0x1e>
 80080fc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008100:	2302      	movs	r3, #2
 8008102:	2200      	movs	r2, #0
 8008104:	f000 f868 	bl	80081d8 <_lseek_r>
 8008108:	89a3      	ldrh	r3, [r4, #12]
 800810a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800810e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8008112:	81a3      	strh	r3, [r4, #12]
 8008114:	4632      	mov	r2, r6
 8008116:	463b      	mov	r3, r7
 8008118:	4628      	mov	r0, r5
 800811a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800811e:	f000 b817 	b.w	8008150 <_write_r>

08008122 <__sseek>:
 8008122:	b510      	push	{r4, lr}
 8008124:	460c      	mov	r4, r1
 8008126:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800812a:	f000 f855 	bl	80081d8 <_lseek_r>
 800812e:	1c43      	adds	r3, r0, #1
 8008130:	89a3      	ldrh	r3, [r4, #12]
 8008132:	bf15      	itete	ne
 8008134:	6560      	strne	r0, [r4, #84]	; 0x54
 8008136:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800813a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800813e:	81a3      	strheq	r3, [r4, #12]
 8008140:	bf18      	it	ne
 8008142:	81a3      	strhne	r3, [r4, #12]
 8008144:	bd10      	pop	{r4, pc}

08008146 <__sclose>:
 8008146:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800814a:	f000 b813 	b.w	8008174 <_close_r>
	...

08008150 <_write_r>:
 8008150:	b538      	push	{r3, r4, r5, lr}
 8008152:	4d07      	ldr	r5, [pc, #28]	; (8008170 <_write_r+0x20>)
 8008154:	4604      	mov	r4, r0
 8008156:	4608      	mov	r0, r1
 8008158:	4611      	mov	r1, r2
 800815a:	2200      	movs	r2, #0
 800815c:	602a      	str	r2, [r5, #0]
 800815e:	461a      	mov	r2, r3
 8008160:	f7fe f8bc 	bl	80062dc <_write>
 8008164:	1c43      	adds	r3, r0, #1
 8008166:	d102      	bne.n	800816e <_write_r+0x1e>
 8008168:	682b      	ldr	r3, [r5, #0]
 800816a:	b103      	cbz	r3, 800816e <_write_r+0x1e>
 800816c:	6023      	str	r3, [r4, #0]
 800816e:	bd38      	pop	{r3, r4, r5, pc}
 8008170:	20001630 	.word	0x20001630

08008174 <_close_r>:
 8008174:	b538      	push	{r3, r4, r5, lr}
 8008176:	4d06      	ldr	r5, [pc, #24]	; (8008190 <_close_r+0x1c>)
 8008178:	2300      	movs	r3, #0
 800817a:	4604      	mov	r4, r0
 800817c:	4608      	mov	r0, r1
 800817e:	602b      	str	r3, [r5, #0]
 8008180:	f7f9 fce6 	bl	8001b50 <_close>
 8008184:	1c43      	adds	r3, r0, #1
 8008186:	d102      	bne.n	800818e <_close_r+0x1a>
 8008188:	682b      	ldr	r3, [r5, #0]
 800818a:	b103      	cbz	r3, 800818e <_close_r+0x1a>
 800818c:	6023      	str	r3, [r4, #0]
 800818e:	bd38      	pop	{r3, r4, r5, pc}
 8008190:	20001630 	.word	0x20001630

08008194 <_fstat_r>:
 8008194:	b538      	push	{r3, r4, r5, lr}
 8008196:	4d07      	ldr	r5, [pc, #28]	; (80081b4 <_fstat_r+0x20>)
 8008198:	2300      	movs	r3, #0
 800819a:	4604      	mov	r4, r0
 800819c:	4608      	mov	r0, r1
 800819e:	4611      	mov	r1, r2
 80081a0:	602b      	str	r3, [r5, #0]
 80081a2:	f7f9 fcd8 	bl	8001b56 <_fstat>
 80081a6:	1c43      	adds	r3, r0, #1
 80081a8:	d102      	bne.n	80081b0 <_fstat_r+0x1c>
 80081aa:	682b      	ldr	r3, [r5, #0]
 80081ac:	b103      	cbz	r3, 80081b0 <_fstat_r+0x1c>
 80081ae:	6023      	str	r3, [r4, #0]
 80081b0:	bd38      	pop	{r3, r4, r5, pc}
 80081b2:	bf00      	nop
 80081b4:	20001630 	.word	0x20001630

080081b8 <_isatty_r>:
 80081b8:	b538      	push	{r3, r4, r5, lr}
 80081ba:	4d06      	ldr	r5, [pc, #24]	; (80081d4 <_isatty_r+0x1c>)
 80081bc:	2300      	movs	r3, #0
 80081be:	4604      	mov	r4, r0
 80081c0:	4608      	mov	r0, r1
 80081c2:	602b      	str	r3, [r5, #0]
 80081c4:	f7f9 fccc 	bl	8001b60 <_isatty>
 80081c8:	1c43      	adds	r3, r0, #1
 80081ca:	d102      	bne.n	80081d2 <_isatty_r+0x1a>
 80081cc:	682b      	ldr	r3, [r5, #0]
 80081ce:	b103      	cbz	r3, 80081d2 <_isatty_r+0x1a>
 80081d0:	6023      	str	r3, [r4, #0]
 80081d2:	bd38      	pop	{r3, r4, r5, pc}
 80081d4:	20001630 	.word	0x20001630

080081d8 <_lseek_r>:
 80081d8:	b538      	push	{r3, r4, r5, lr}
 80081da:	4d07      	ldr	r5, [pc, #28]	; (80081f8 <_lseek_r+0x20>)
 80081dc:	4604      	mov	r4, r0
 80081de:	4608      	mov	r0, r1
 80081e0:	4611      	mov	r1, r2
 80081e2:	2200      	movs	r2, #0
 80081e4:	602a      	str	r2, [r5, #0]
 80081e6:	461a      	mov	r2, r3
 80081e8:	f7f9 fcbc 	bl	8001b64 <_lseek>
 80081ec:	1c43      	adds	r3, r0, #1
 80081ee:	d102      	bne.n	80081f6 <_lseek_r+0x1e>
 80081f0:	682b      	ldr	r3, [r5, #0]
 80081f2:	b103      	cbz	r3, 80081f6 <_lseek_r+0x1e>
 80081f4:	6023      	str	r3, [r4, #0]
 80081f6:	bd38      	pop	{r3, r4, r5, pc}
 80081f8:	20001630 	.word	0x20001630

080081fc <__malloc_lock>:
 80081fc:	4801      	ldr	r0, [pc, #4]	; (8008204 <__malloc_lock+0x8>)
 80081fe:	f7ff bb55 	b.w	80078ac <__retarget_lock_acquire_recursive>
 8008202:	bf00      	nop
 8008204:	20001628 	.word	0x20001628

08008208 <__malloc_unlock>:
 8008208:	4801      	ldr	r0, [pc, #4]	; (8008210 <__malloc_unlock+0x8>)
 800820a:	f7ff bb50 	b.w	80078ae <__retarget_lock_release_recursive>
 800820e:	bf00      	nop
 8008210:	20001628 	.word	0x20001628

08008214 <_read_r>:
 8008214:	b538      	push	{r3, r4, r5, lr}
 8008216:	4d07      	ldr	r5, [pc, #28]	; (8008234 <_read_r+0x20>)
 8008218:	4604      	mov	r4, r0
 800821a:	4608      	mov	r0, r1
 800821c:	4611      	mov	r1, r2
 800821e:	2200      	movs	r2, #0
 8008220:	602a      	str	r2, [r5, #0]
 8008222:	461a      	mov	r2, r3
 8008224:	f7f9 fc84 	bl	8001b30 <_read>
 8008228:	1c43      	adds	r3, r0, #1
 800822a:	d102      	bne.n	8008232 <_read_r+0x1e>
 800822c:	682b      	ldr	r3, [r5, #0]
 800822e:	b103      	cbz	r3, 8008232 <_read_r+0x1e>
 8008230:	6023      	str	r3, [r4, #0]
 8008232:	bd38      	pop	{r3, r4, r5, pc}
 8008234:	20001630 	.word	0x20001630

08008238 <_init>:
 8008238:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800823a:	bf00      	nop
 800823c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800823e:	bc08      	pop	{r3}
 8008240:	469e      	mov	lr, r3
 8008242:	4770      	bx	lr

08008244 <_fini>:
 8008244:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008246:	bf00      	nop
 8008248:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800824a:	bc08      	pop	{r3}
 800824c:	469e      	mov	lr, r3
 800824e:	4770      	bx	lr
