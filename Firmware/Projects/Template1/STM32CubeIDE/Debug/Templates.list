
Templates.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000013c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000018e4  0800013c  0800013c  0001013c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000ac  08001a20  08001a20  00011a20  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  08001acc  08001acc  00011acc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  08001ad0  08001ad0  00011ad0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         0000000c  20000008  08001ad4  00020008  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          00000020  20000014  08001ae0  00020014  2**2
                  ALLOC
  7 ._user_heap_stack 00000604  20000034  08001ae0  00020034  2**0
                  ALLOC
  8 .ARM.attributes 00000030  00000000  00000000  00020014  2**0
                  CONTENTS, READONLY
  9 .debug_line   000070f1  00000000  00000000  00020044  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 10 .debug_info   00006a9e  00000000  00000000  00027135  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 000012aa  00000000  00000000  0002dbd3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00000a78  00000000  00000000  0002ee80  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_str    000cb925  00000000  00000000  0002f8f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_ranges 000009e0  00000000  00000000  000fb220  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_macro  0001f5bd  00000000  00000000  000fbc00  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .comment      00000053  00000000  00000000  0011b1bd  2**0
                  CONTENTS, READONLY
 17 .debug_frame  00002994  00000000  00000000  0011b210  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800013c <__do_global_dtors_aux>:
 800013c:	b510      	push	{r4, lr}
 800013e:	4c05      	ldr	r4, [pc, #20]	; (8000154 <__do_global_dtors_aux+0x18>)
 8000140:	7823      	ldrb	r3, [r4, #0]
 8000142:	b933      	cbnz	r3, 8000152 <__do_global_dtors_aux+0x16>
 8000144:	4b04      	ldr	r3, [pc, #16]	; (8000158 <__do_global_dtors_aux+0x1c>)
 8000146:	b113      	cbz	r3, 800014e <__do_global_dtors_aux+0x12>
 8000148:	4804      	ldr	r0, [pc, #16]	; (800015c <__do_global_dtors_aux+0x20>)
 800014a:	f3af 8000 	nop.w
 800014e:	2301      	movs	r3, #1
 8000150:	7023      	strb	r3, [r4, #0]
 8000152:	bd10      	pop	{r4, pc}
 8000154:	20000014 	.word	0x20000014
 8000158:	00000000 	.word	0x00000000
 800015c:	08001a08 	.word	0x08001a08

08000160 <frame_dummy>:
 8000160:	b508      	push	{r3, lr}
 8000162:	4b03      	ldr	r3, [pc, #12]	; (8000170 <frame_dummy+0x10>)
 8000164:	b11b      	cbz	r3, 800016e <frame_dummy+0xe>
 8000166:	4903      	ldr	r1, [pc, #12]	; (8000174 <frame_dummy+0x14>)
 8000168:	4803      	ldr	r0, [pc, #12]	; (8000178 <frame_dummy+0x18>)
 800016a:	f3af 8000 	nop.w
 800016e:	bd08      	pop	{r3, pc}
 8000170:	00000000 	.word	0x00000000
 8000174:	20000018 	.word	0x20000018
 8000178:	08001a08 	.word	0x08001a08

0800017c <CopyDataInit>:
  bl LoopCopyDataInit
.endm

.section  .text.data_initializers
CopyDataInit:
  ldr r4, [r2, r3]
 800017c:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800017e:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000180:	3304      	adds	r3, #4

08000182 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000182:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000184:	428c      	cmp	r4, r1
  bcc  CopyDataInit
 8000186:	d3f9      	bcc.n	800017c <CopyDataInit>
  bx lr
 8000188:	4770      	bx	lr

0800018a <FillZerobss>:

FillZerobss:
  str  r3, [r0]
 800018a:	6003      	str	r3, [r0, #0]
  adds r0, r0, #4
 800018c:	3004      	adds	r0, #4

0800018e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r0, r1
 800018e:	4288      	cmp	r0, r1
  bcc FillZerobss
 8000190:	d3fb      	bcc.n	800018a <FillZerobss>
  bx lr
 8000192:	4770      	bx	lr

08000194 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000194:	480c      	ldr	r0, [pc, #48]	; (80001c8 <LoopForever+0x4>)
  mov   sp, r0          /* set stack pointer */
 8000196:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000198:	f000 f8c8 	bl	800032c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  INIT_DATA _sdata, _edata, _sidata
 800019c:	480b      	ldr	r0, [pc, #44]	; (80001cc <LoopForever+0x8>)
 800019e:	490c      	ldr	r1, [pc, #48]	; (80001d0 <LoopForever+0xc>)
 80001a0:	4a0c      	ldr	r2, [pc, #48]	; (80001d4 <LoopForever+0x10>)
 80001a2:	2300      	movs	r3, #0
 80001a4:	f7ff ffed 	bl	8000182 <LoopCopyDataInit>

/* Zero fill the bss segments. */
  INIT_BSS _sbss, _ebss
 80001a8:	480b      	ldr	r0, [pc, #44]	; (80001d8 <LoopForever+0x14>)
 80001aa:	490c      	ldr	r1, [pc, #48]	; (80001dc <LoopForever+0x18>)
 80001ac:	2300      	movs	r3, #0
 80001ae:	f7ff ffee 	bl	800018e <LoopFillZerobss>
  INIT_BSS _sMB_MEM2, _eMB_MEM2
 80001b2:	480b      	ldr	r0, [pc, #44]	; (80001e0 <LoopForever+0x1c>)
 80001b4:	490b      	ldr	r1, [pc, #44]	; (80001e4 <LoopForever+0x20>)
 80001b6:	2300      	movs	r3, #0
 80001b8:	f7ff ffe9 	bl	800018e <LoopFillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80001bc:	f001 fbf8 	bl	80019b0 <__libc_init_array>
/* Call the application s entry point.*/
	bl	main
 80001c0:	f000 f813 	bl	80001ea <main>

080001c4 <LoopForever>:

LoopForever:
  b LoopForever
 80001c4:	e7fe      	b.n	80001c4 <LoopForever>
 80001c6:	0000      	.short	0x0000
  ldr   r0, =_estack
 80001c8:	20030000 	.word	0x20030000
  INIT_DATA _sdata, _edata, _sidata
 80001cc:	20000008 	.word	0x20000008
 80001d0:	20000014 	.word	0x20000014
 80001d4:	08001ad4 	.word	0x08001ad4
  INIT_BSS _sbss, _ebss
 80001d8:	20000014 	.word	0x20000014
 80001dc:	20000034 	.word	0x20000034
  INIT_BSS _sMB_MEM2, _eMB_MEM2
 80001e0:	20030000 	.word	0x20030000
 80001e4:	20030000 	.word	0x20030000

080001e8 <ADC1_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80001e8:	e7fe      	b.n	80001e8 <ADC1_IRQHandler>

080001ea <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80001ea:	b580      	push	{r7, lr}
 80001ec:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80001ee:	f000 f8f3 	bl	80003d8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80001f2:	f000 f801 	bl	80001f8 <SystemClock_Config>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80001f6:	e7fe      	b.n	80001f6 <main+0xc>

080001f8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80001f8:	b580      	push	{r7, lr}
 80001fa:	b09a      	sub	sp, #104	; 0x68
 80001fc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80001fe:	f107 0320 	add.w	r3, r7, #32
 8000202:	2248      	movs	r2, #72	; 0x48
 8000204:	2100      	movs	r1, #0
 8000206:	4618      	mov	r0, r3
 8000208:	f001 fbf6 	bl	80019f8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800020c:	1d3b      	adds	r3, r7, #4
 800020e:	2200      	movs	r2, #0
 8000210:	601a      	str	r2, [r3, #0]
 8000212:	605a      	str	r2, [r3, #4]
 8000214:	609a      	str	r2, [r3, #8]
 8000216:	60da      	str	r2, [r3, #12]
 8000218:	611a      	str	r2, [r3, #16]
 800021a:	615a      	str	r2, [r3, #20]
 800021c:	619a      	str	r2, [r3, #24]

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800021e:	4b26      	ldr	r3, [pc, #152]	; (80002b8 <SystemClock_Config+0xc0>)
 8000220:	681b      	ldr	r3, [r3, #0]
 8000222:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8000226:	4a24      	ldr	r2, [pc, #144]	; (80002b8 <SystemClock_Config+0xc0>)
 8000228:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800022c:	6013      	str	r3, [r2, #0]
 800022e:	4b22      	ldr	r3, [pc, #136]	; (80002b8 <SystemClock_Config+0xc0>)
 8000230:	681b      	ldr	r3, [r3, #0]
 8000232:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8000236:	603b      	str	r3, [r7, #0]
 8000238:	683b      	ldr	r3, [r7, #0]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 800023a:	2320      	movs	r3, #32
 800023c:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 800023e:	2301      	movs	r3, #1
 8000240:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.MSICalibrationValue = RCC_MSICALIBRATION_DEFAULT;
 8000242:	2300      	movs	r3, #0
 8000244:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8000246:	2360      	movs	r3, #96	; 0x60
 8000248:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800024a:	2302      	movs	r3, #2
 800024c:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 800024e:	2301      	movs	r3, #1
 8000250:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV1;
 8000252:	2300      	movs	r3, #0
 8000254:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLN = 32;
 8000256:	2320      	movs	r3, #32
 8000258:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV5;
 800025a:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800025e:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000260:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 8000264:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV4;
 8000266:	f04f 63c0 	mov.w	r3, #100663296	; 0x6000000
 800026a:	663b      	str	r3, [r7, #96]	; 0x60
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800026c:	f107 0320 	add.w	r3, r7, #32
 8000270:	4618      	mov	r0, r3
 8000272:	f000 fd97 	bl	8000da4 <HAL_RCC_OscConfig>
 8000276:	4603      	mov	r3, r0
 8000278:	2b00      	cmp	r3, #0
 800027a:	d001      	beq.n	8000280 <SystemClock_Config+0x88>
  {
    Error_Handler();
 800027c:	f000 f81e 	bl	80002bc <Error_Handler>
  }
  /** Configure the SYSCLKSource, HCLK, PCLK1 and PCLK2 clocks dividers
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK4|RCC_CLOCKTYPE_HCLK2
 8000280:	236f      	movs	r3, #111	; 0x6f
 8000282:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000284:	2303      	movs	r3, #3
 8000286:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000288:	2300      	movs	r3, #0
 800028a:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800028c:	2300      	movs	r3, #0
 800028e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000290:	2300      	movs	r3, #0
 8000292:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.AHBCLK2Divider = RCC_SYSCLK_DIV2;
 8000294:	2380      	movs	r3, #128	; 0x80
 8000296:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLK4Divider = RCC_SYSCLK_DIV1;
 8000298:	2300      	movs	r3, #0
 800029a:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 800029c:	1d3b      	adds	r3, r7, #4
 800029e:	2103      	movs	r1, #3
 80002a0:	4618      	mov	r0, r3
 80002a2:	f001 f90b 	bl	80014bc <HAL_RCC_ClockConfig>
 80002a6:	4603      	mov	r3, r0
 80002a8:	2b00      	cmp	r3, #0
 80002aa:	d001      	beq.n	80002b0 <SystemClock_Config+0xb8>
  {
    Error_Handler();
 80002ac:	f000 f806 	bl	80002bc <Error_Handler>
  }
}
 80002b0:	bf00      	nop
 80002b2:	3768      	adds	r7, #104	; 0x68
 80002b4:	46bd      	mov	sp, r7
 80002b6:	bd80      	pop	{r7, pc}
 80002b8:	58000400 	.word	0x58000400

080002bc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80002bc:	b480      	push	{r7}
 80002be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  while(1) 
 80002c0:	e7fe      	b.n	80002c0 <Error_Handler+0x4>

080002c2 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80002c2:	b480      	push	{r7}
 80002c4:	af00      	add	r7, sp, #0
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80002c6:	bf00      	nop
 80002c8:	46bd      	mov	sp, r7
 80002ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002ce:	4770      	bx	lr

080002d0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80002d0:	b480      	push	{r7}
 80002d2:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 80002d4:	bf00      	nop
 80002d6:	46bd      	mov	sp, r7
 80002d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002dc:	4770      	bx	lr

080002de <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80002de:	b480      	push	{r7}
 80002e0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80002e2:	e7fe      	b.n	80002e2 <HardFault_Handler+0x4>

080002e4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80002e4:	b480      	push	{r7}
 80002e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80002e8:	e7fe      	b.n	80002e8 <MemManage_Handler+0x4>

080002ea <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80002ea:	b480      	push	{r7}
 80002ec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80002ee:	e7fe      	b.n	80002ee <BusFault_Handler+0x4>

080002f0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80002f0:	b480      	push	{r7}
 80002f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80002f4:	e7fe      	b.n	80002f4 <UsageFault_Handler+0x4>

080002f6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80002f6:	b480      	push	{r7}
 80002f8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80002fa:	bf00      	nop
 80002fc:	46bd      	mov	sp, r7
 80002fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000302:	4770      	bx	lr

08000304 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000304:	b480      	push	{r7}
 8000306:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000308:	bf00      	nop
 800030a:	46bd      	mov	sp, r7
 800030c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000310:	4770      	bx	lr

08000312 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000312:	b480      	push	{r7}
 8000314:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000316:	bf00      	nop
 8000318:	46bd      	mov	sp, r7
 800031a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800031e:	4770      	bx	lr

08000320 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000320:	b580      	push	{r7, lr}
 8000322:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000324:	f000 f8b2 	bl	800048c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000328:	bf00      	nop
 800032a:	bd80      	pop	{r7, pc}

0800032c <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800032c:	b480      	push	{r7}
 800032e:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location add offset address ------------------*/
#if defined(VECT_TAB_SRAM) && defined(VECT_TAB_BASE_ADDRESS)  
  /* program in SRAMx */
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;  /* Vector Table Relocation in Internal SRAMx for CPU1 */
#else    /* program in FLASH */
  SCB->VTOR = VECT_TAB_OFFSET;              /* Vector Table Relocation in Internal FLASH */
 8000330:	4b26      	ldr	r3, [pc, #152]	; (80003cc <SystemInit+0xa0>)
 8000332:	2200      	movs	r2, #0
 8000334:	609a      	str	r2, [r3, #8]
#endif

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10UL*2UL))|(3UL << (11UL*2UL)));  /* set CP10 and CP11 Full Access */
 8000336:	4b25      	ldr	r3, [pc, #148]	; (80003cc <SystemInit+0xa0>)
 8000338:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800033c:	4a23      	ldr	r2, [pc, #140]	; (80003cc <SystemInit+0xa0>)
 800033e:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000342:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 8000346:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800034a:	681b      	ldr	r3, [r3, #0]
 800034c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8000350:	f043 0301 	orr.w	r3, r3, #1
 8000354:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00070000U;
 8000356:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800035a:	f44f 22e0 	mov.w	r2, #458752	; 0x70000
 800035e:	609a      	str	r2, [r3, #8]

  /* Reset PLLSAI1ON, PLLON, HSECSSON, HSEON, HSION, and MSIPLLON bits */
  RCC->CR &= (uint32_t)0xFAF6FEFBU;
 8000360:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000364:	681a      	ldr	r2, [r3, #0]
 8000366:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800036a:	4b19      	ldr	r3, [pc, #100]	; (80003d0 <SystemInit+0xa4>)
 800036c:	4013      	ands	r3, r2
 800036e:	600b      	str	r3, [r1, #0]

  /*!< Reset LSI1 and LSI2 bits */
  RCC->CSR &= (uint32_t)0xFFFFFFFAU;
 8000370:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000374:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8000378:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800037c:	f023 0305 	bic.w	r3, r3, #5
 8000380:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
  
  /*!< Reset HSI48ON  bit */
  RCC->CRRCR &= (uint32_t)0xFFFFFFFEU;
 8000384:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000388:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800038c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8000390:	f023 0301 	bic.w	r3, r3, #1
 8000394:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98
    
  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x22041000U;
 8000398:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800039c:	4a0d      	ldr	r2, [pc, #52]	; (80003d4 <SystemInit+0xa8>)
 800039e:	60da      	str	r2, [r3, #12]

  /* Reset PLLSAI1CFGR register */
  RCC->PLLSAI1CFGR = 0x22041000U;
 80003a0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80003a4:	4a0b      	ldr	r2, [pc, #44]	; (80003d4 <SystemInit+0xa8>)
 80003a6:	611a      	str	r2, [r3, #16]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 80003a8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80003ac:	681b      	ldr	r3, [r3, #0]
 80003ae:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80003b2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80003b6:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 80003b8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80003bc:	2200      	movs	r2, #0
 80003be:	619a      	str	r2, [r3, #24]
}
 80003c0:	bf00      	nop
 80003c2:	46bd      	mov	sp, r7
 80003c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003c8:	4770      	bx	lr
 80003ca:	bf00      	nop
 80003cc:	e000ed00 	.word	0xe000ed00
 80003d0:	faf6fefb 	.word	0xfaf6fefb
 80003d4:	22041000 	.word	0x22041000

080003d8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80003d8:	b580      	push	{r7, lr}
 80003da:	b082      	sub	sp, #8
 80003dc:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80003de:	2300      	movs	r3, #0
 80003e0:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0U)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80003e2:	4b0c      	ldr	r3, [pc, #48]	; (8000414 <HAL_Init+0x3c>)
 80003e4:	681b      	ldr	r3, [r3, #0]
 80003e6:	4a0b      	ldr	r2, [pc, #44]	; (8000414 <HAL_Init+0x3c>)
 80003e8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80003ec:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80003ee:	2003      	movs	r0, #3
 80003f0:	f000 f92a 	bl	8000648 <HAL_NVIC_SetPriorityGrouping>
  
  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80003f4:	2000      	movs	r0, #0
 80003f6:	f000 f80f 	bl	8000418 <HAL_InitTick>
 80003fa:	4603      	mov	r3, r0
 80003fc:	2b00      	cmp	r3, #0
 80003fe:	d002      	beq.n	8000406 <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 8000400:	2301      	movs	r3, #1
 8000402:	71fb      	strb	r3, [r7, #7]
 8000404:	e001      	b.n	800040a <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000406:	f7ff ff5c 	bl	80002c2 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 800040a:	79fb      	ldrb	r3, [r7, #7]
}
 800040c:	4618      	mov	r0, r3
 800040e:	3708      	adds	r7, #8
 8000410:	46bd      	mov	sp, r7
 8000412:	bd80      	pop	{r7, pc}
 8000414:	58004000 	.word	0x58004000

08000418 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000418:	b580      	push	{r7, lr}
 800041a:	b084      	sub	sp, #16
 800041c:	af00      	add	r7, sp, #0
 800041e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000420:	2300      	movs	r3, #0
 8000422:	73fb      	strb	r3, [r7, #15]

  if ((uint32_t)uwTickFreq != 0U)
 8000424:	4b17      	ldr	r3, [pc, #92]	; (8000484 <HAL_InitTick+0x6c>)
 8000426:	781b      	ldrb	r3, [r3, #0]
 8000428:	2b00      	cmp	r3, #0
 800042a:	d024      	beq.n	8000476 <HAL_InitTick+0x5e>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq()/ (1000U / (uint32_t)uwTickFreq)) == 0U)
 800042c:	f001 f9f4 	bl	8001818 <HAL_RCC_GetHCLKFreq>
 8000430:	4602      	mov	r2, r0
 8000432:	4b14      	ldr	r3, [pc, #80]	; (8000484 <HAL_InitTick+0x6c>)
 8000434:	781b      	ldrb	r3, [r3, #0]
 8000436:	4619      	mov	r1, r3
 8000438:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800043c:	fbb3 f3f1 	udiv	r3, r3, r1
 8000440:	fbb2 f3f3 	udiv	r3, r2, r3
 8000444:	4618      	mov	r0, r3
 8000446:	f000 f924 	bl	8000692 <HAL_SYSTICK_Config>
 800044a:	4603      	mov	r3, r0
 800044c:	2b00      	cmp	r3, #0
 800044e:	d10f      	bne.n	8000470 <HAL_InitTick+0x58>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000450:	687b      	ldr	r3, [r7, #4]
 8000452:	2b0f      	cmp	r3, #15
 8000454:	d809      	bhi.n	800046a <HAL_InitTick+0x52>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000456:	2200      	movs	r2, #0
 8000458:	6879      	ldr	r1, [r7, #4]
 800045a:	f04f 30ff 	mov.w	r0, #4294967295
 800045e:	f000 f8fe 	bl	800065e <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000462:	4a09      	ldr	r2, [pc, #36]	; (8000488 <HAL_InitTick+0x70>)
 8000464:	687b      	ldr	r3, [r7, #4]
 8000466:	6013      	str	r3, [r2, #0]
 8000468:	e007      	b.n	800047a <HAL_InitTick+0x62>
      }
      else
      {
        status = HAL_ERROR;
 800046a:	2301      	movs	r3, #1
 800046c:	73fb      	strb	r3, [r7, #15]
 800046e:	e004      	b.n	800047a <HAL_InitTick+0x62>
      }
    }
    else
    {  
      status = HAL_ERROR;
 8000470:	2301      	movs	r3, #1
 8000472:	73fb      	strb	r3, [r7, #15]
 8000474:	e001      	b.n	800047a <HAL_InitTick+0x62>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000476:	2301      	movs	r3, #1
 8000478:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 800047a:	7bfb      	ldrb	r3, [r7, #15]
}
 800047c:	4618      	mov	r0, r3
 800047e:	3710      	adds	r7, #16
 8000480:	46bd      	mov	sp, r7
 8000482:	bd80      	pop	{r7, pc}
 8000484:	20000010 	.word	0x20000010
 8000488:	2000000c 	.word	0x2000000c

0800048c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800048c:	b480      	push	{r7}
 800048e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000490:	4b06      	ldr	r3, [pc, #24]	; (80004ac <HAL_IncTick+0x20>)
 8000492:	781b      	ldrb	r3, [r3, #0]
 8000494:	461a      	mov	r2, r3
 8000496:	4b06      	ldr	r3, [pc, #24]	; (80004b0 <HAL_IncTick+0x24>)
 8000498:	681b      	ldr	r3, [r3, #0]
 800049a:	4413      	add	r3, r2
 800049c:	4a04      	ldr	r2, [pc, #16]	; (80004b0 <HAL_IncTick+0x24>)
 800049e:	6013      	str	r3, [r2, #0]
}
 80004a0:	bf00      	nop
 80004a2:	46bd      	mov	sp, r7
 80004a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004a8:	4770      	bx	lr
 80004aa:	bf00      	nop
 80004ac:	20000010 	.word	0x20000010
 80004b0:	20000030 	.word	0x20000030

080004b4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80004b4:	b480      	push	{r7}
 80004b6:	af00      	add	r7, sp, #0
  return uwTick;
 80004b8:	4b03      	ldr	r3, [pc, #12]	; (80004c8 <HAL_GetTick+0x14>)
 80004ba:	681b      	ldr	r3, [r3, #0]
}
 80004bc:	4618      	mov	r0, r3
 80004be:	46bd      	mov	sp, r7
 80004c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004c4:	4770      	bx	lr
 80004c6:	bf00      	nop
 80004c8:	20000030 	.word	0x20000030

080004cc <HAL_GetTickPrio>:
/**
  * @brief This function returns a tick priority.
  * @retval tick priority
  */
uint32_t HAL_GetTickPrio(void)
{
 80004cc:	b480      	push	{r7}
 80004ce:	af00      	add	r7, sp, #0
  return uwTickPrio;
 80004d0:	4b03      	ldr	r3, [pc, #12]	; (80004e0 <HAL_GetTickPrio+0x14>)
 80004d2:	681b      	ldr	r3, [r3, #0]
}
 80004d4:	4618      	mov	r0, r3
 80004d6:	46bd      	mov	sp, r7
 80004d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004dc:	4770      	bx	lr
 80004de:	bf00      	nop
 80004e0:	2000000c 	.word	0x2000000c

080004e4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80004e4:	b480      	push	{r7}
 80004e6:	b085      	sub	sp, #20
 80004e8:	af00      	add	r7, sp, #0
 80004ea:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80004ec:	687b      	ldr	r3, [r7, #4]
 80004ee:	f003 0307 	and.w	r3, r3, #7
 80004f2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80004f4:	4b0c      	ldr	r3, [pc, #48]	; (8000528 <__NVIC_SetPriorityGrouping+0x44>)
 80004f6:	68db      	ldr	r3, [r3, #12]
 80004f8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80004fa:	68ba      	ldr	r2, [r7, #8]
 80004fc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000500:	4013      	ands	r3, r2
 8000502:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000504:	68fb      	ldr	r3, [r7, #12]
 8000506:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000508:	68bb      	ldr	r3, [r7, #8]
 800050a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800050c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000510:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000514:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000516:	4a04      	ldr	r2, [pc, #16]	; (8000528 <__NVIC_SetPriorityGrouping+0x44>)
 8000518:	68bb      	ldr	r3, [r7, #8]
 800051a:	60d3      	str	r3, [r2, #12]
}
 800051c:	bf00      	nop
 800051e:	3714      	adds	r7, #20
 8000520:	46bd      	mov	sp, r7
 8000522:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000526:	4770      	bx	lr
 8000528:	e000ed00 	.word	0xe000ed00

0800052c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800052c:	b480      	push	{r7}
 800052e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000530:	4b04      	ldr	r3, [pc, #16]	; (8000544 <__NVIC_GetPriorityGrouping+0x18>)
 8000532:	68db      	ldr	r3, [r3, #12]
 8000534:	0a1b      	lsrs	r3, r3, #8
 8000536:	f003 0307 	and.w	r3, r3, #7
}
 800053a:	4618      	mov	r0, r3
 800053c:	46bd      	mov	sp, r7
 800053e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000542:	4770      	bx	lr
 8000544:	e000ed00 	.word	0xe000ed00

08000548 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000548:	b480      	push	{r7}
 800054a:	b083      	sub	sp, #12
 800054c:	af00      	add	r7, sp, #0
 800054e:	4603      	mov	r3, r0
 8000550:	6039      	str	r1, [r7, #0]
 8000552:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000554:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000558:	2b00      	cmp	r3, #0
 800055a:	db0a      	blt.n	8000572 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800055c:	683b      	ldr	r3, [r7, #0]
 800055e:	b2da      	uxtb	r2, r3
 8000560:	490c      	ldr	r1, [pc, #48]	; (8000594 <__NVIC_SetPriority+0x4c>)
 8000562:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000566:	0112      	lsls	r2, r2, #4
 8000568:	b2d2      	uxtb	r2, r2
 800056a:	440b      	add	r3, r1
 800056c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000570:	e00a      	b.n	8000588 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000572:	683b      	ldr	r3, [r7, #0]
 8000574:	b2da      	uxtb	r2, r3
 8000576:	4908      	ldr	r1, [pc, #32]	; (8000598 <__NVIC_SetPriority+0x50>)
 8000578:	79fb      	ldrb	r3, [r7, #7]
 800057a:	f003 030f 	and.w	r3, r3, #15
 800057e:	3b04      	subs	r3, #4
 8000580:	0112      	lsls	r2, r2, #4
 8000582:	b2d2      	uxtb	r2, r2
 8000584:	440b      	add	r3, r1
 8000586:	761a      	strb	r2, [r3, #24]
}
 8000588:	bf00      	nop
 800058a:	370c      	adds	r7, #12
 800058c:	46bd      	mov	sp, r7
 800058e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000592:	4770      	bx	lr
 8000594:	e000e100 	.word	0xe000e100
 8000598:	e000ed00 	.word	0xe000ed00

0800059c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800059c:	b480      	push	{r7}
 800059e:	b089      	sub	sp, #36	; 0x24
 80005a0:	af00      	add	r7, sp, #0
 80005a2:	60f8      	str	r0, [r7, #12]
 80005a4:	60b9      	str	r1, [r7, #8]
 80005a6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80005a8:	68fb      	ldr	r3, [r7, #12]
 80005aa:	f003 0307 	and.w	r3, r3, #7
 80005ae:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80005b0:	69fb      	ldr	r3, [r7, #28]
 80005b2:	f1c3 0307 	rsb	r3, r3, #7
 80005b6:	2b04      	cmp	r3, #4
 80005b8:	bf28      	it	cs
 80005ba:	2304      	movcs	r3, #4
 80005bc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80005be:	69fb      	ldr	r3, [r7, #28]
 80005c0:	3304      	adds	r3, #4
 80005c2:	2b06      	cmp	r3, #6
 80005c4:	d902      	bls.n	80005cc <NVIC_EncodePriority+0x30>
 80005c6:	69fb      	ldr	r3, [r7, #28]
 80005c8:	3b03      	subs	r3, #3
 80005ca:	e000      	b.n	80005ce <NVIC_EncodePriority+0x32>
 80005cc:	2300      	movs	r3, #0
 80005ce:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80005d0:	f04f 32ff 	mov.w	r2, #4294967295
 80005d4:	69bb      	ldr	r3, [r7, #24]
 80005d6:	fa02 f303 	lsl.w	r3, r2, r3
 80005da:	43da      	mvns	r2, r3
 80005dc:	68bb      	ldr	r3, [r7, #8]
 80005de:	401a      	ands	r2, r3
 80005e0:	697b      	ldr	r3, [r7, #20]
 80005e2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80005e4:	f04f 31ff 	mov.w	r1, #4294967295
 80005e8:	697b      	ldr	r3, [r7, #20]
 80005ea:	fa01 f303 	lsl.w	r3, r1, r3
 80005ee:	43d9      	mvns	r1, r3
 80005f0:	687b      	ldr	r3, [r7, #4]
 80005f2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80005f4:	4313      	orrs	r3, r2
         );
}
 80005f6:	4618      	mov	r0, r3
 80005f8:	3724      	adds	r7, #36	; 0x24
 80005fa:	46bd      	mov	sp, r7
 80005fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000600:	4770      	bx	lr
	...

08000604 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000604:	b580      	push	{r7, lr}
 8000606:	b082      	sub	sp, #8
 8000608:	af00      	add	r7, sp, #0
 800060a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800060c:	687b      	ldr	r3, [r7, #4]
 800060e:	3b01      	subs	r3, #1
 8000610:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000614:	d301      	bcc.n	800061a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000616:	2301      	movs	r3, #1
 8000618:	e00f      	b.n	800063a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800061a:	4a0a      	ldr	r2, [pc, #40]	; (8000644 <SysTick_Config+0x40>)
 800061c:	687b      	ldr	r3, [r7, #4]
 800061e:	3b01      	subs	r3, #1
 8000620:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000622:	210f      	movs	r1, #15
 8000624:	f04f 30ff 	mov.w	r0, #4294967295
 8000628:	f7ff ff8e 	bl	8000548 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800062c:	4b05      	ldr	r3, [pc, #20]	; (8000644 <SysTick_Config+0x40>)
 800062e:	2200      	movs	r2, #0
 8000630:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000632:	4b04      	ldr	r3, [pc, #16]	; (8000644 <SysTick_Config+0x40>)
 8000634:	2207      	movs	r2, #7
 8000636:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000638:	2300      	movs	r3, #0
}
 800063a:	4618      	mov	r0, r3
 800063c:	3708      	adds	r7, #8
 800063e:	46bd      	mov	sp, r7
 8000640:	bd80      	pop	{r7, pc}
 8000642:	bf00      	nop
 8000644:	e000e010 	.word	0xe000e010

08000648 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000648:	b580      	push	{r7, lr}
 800064a:	b082      	sub	sp, #8
 800064c:	af00      	add	r7, sp, #0
 800064e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000650:	6878      	ldr	r0, [r7, #4]
 8000652:	f7ff ff47 	bl	80004e4 <__NVIC_SetPriorityGrouping>
}
 8000656:	bf00      	nop
 8000658:	3708      	adds	r7, #8
 800065a:	46bd      	mov	sp, r7
 800065c:	bd80      	pop	{r7, pc}

0800065e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800065e:	b580      	push	{r7, lr}
 8000660:	b086      	sub	sp, #24
 8000662:	af00      	add	r7, sp, #0
 8000664:	4603      	mov	r3, r0
 8000666:	60b9      	str	r1, [r7, #8]
 8000668:	607a      	str	r2, [r7, #4]
 800066a:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 800066c:	f7ff ff5e 	bl	800052c <__NVIC_GetPriorityGrouping>
 8000670:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000672:	687a      	ldr	r2, [r7, #4]
 8000674:	68b9      	ldr	r1, [r7, #8]
 8000676:	6978      	ldr	r0, [r7, #20]
 8000678:	f7ff ff90 	bl	800059c <NVIC_EncodePriority>
 800067c:	4602      	mov	r2, r0
 800067e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000682:	4611      	mov	r1, r2
 8000684:	4618      	mov	r0, r3
 8000686:	f7ff ff5f 	bl	8000548 <__NVIC_SetPriority>
}
 800068a:	bf00      	nop
 800068c:	3718      	adds	r7, #24
 800068e:	46bd      	mov	sp, r7
 8000690:	bd80      	pop	{r7, pc}

08000692 <HAL_SYSTICK_Config>:
  * @param TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000692:	b580      	push	{r7, lr}
 8000694:	b082      	sub	sp, #8
 8000696:	af00      	add	r7, sp, #0
 8000698:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 800069a:	6878      	ldr	r0, [r7, #4]
 800069c:	f7ff ffb2 	bl	8000604 <SysTick_Config>
 80006a0:	4603      	mov	r3, r0
}
 80006a2:	4618      	mov	r0, r3
 80006a4:	3708      	adds	r7, #8
 80006a6:	46bd      	mov	sp, r7
 80006a8:	bd80      	pop	{r7, pc}
	...

080006ac <HAL_PWR_EnableBkUpAccess>:
  * @note   LSEON bit that switches on and off the LSE crystal belongs as well to the
  *         back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 80006ac:	b480      	push	{r7}
 80006ae:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80006b0:	4b05      	ldr	r3, [pc, #20]	; (80006c8 <HAL_PWR_EnableBkUpAccess+0x1c>)
 80006b2:	681b      	ldr	r3, [r3, #0]
 80006b4:	4a04      	ldr	r2, [pc, #16]	; (80006c8 <HAL_PWR_EnableBkUpAccess+0x1c>)
 80006b6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80006ba:	6013      	str	r3, [r2, #0]
}
 80006bc:	bf00      	nop
 80006be:	46bd      	mov	sp, r7
 80006c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006c4:	4770      	bx	lr
 80006c6:	bf00      	nop
 80006c8:	58000400 	.word	0x58000400

080006cc <HAL_PWREx_GetVoltageRange>:
/**
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_RANGE1 or PWR_REGULATOR_VOLTAGE_RANGE2)
  */  
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 80006cc:	b480      	push	{r7}
 80006ce:	af00      	add	r7, sp, #0
  return  (PWR->CR1 & PWR_CR1_VOS);
 80006d0:	4b04      	ldr	r3, [pc, #16]	; (80006e4 <HAL_PWREx_GetVoltageRange+0x18>)
 80006d2:	681b      	ldr	r3, [r3, #0]
 80006d4:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
}
 80006d8:	4618      	mov	r0, r3
 80006da:	46bd      	mov	sp, r7
 80006dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006e0:	4770      	bx	lr
 80006e2:	bf00      	nop
 80006e4:	58000400 	.word	0x58000400

080006e8 <LL_RCC_HSE_IsEnabledDiv2>:
  * @brief  Get HSE sysclk and pll prescaler
  * @rmtoll CR           HSEPRE        LL_RCC_HSE_IsEnabledDiv2
  * @retval None
  */
__STATIC_INLINE uint32_t LL_RCC_HSE_IsEnabledDiv2(void)
{
 80006e8:	b480      	push	{r7}
 80006ea:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSEPRE) == (RCC_CR_HSEPRE)) ? 1UL : 0UL);
 80006ec:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80006f0:	681b      	ldr	r3, [r3, #0]
 80006f2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80006f6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80006fa:	d101      	bne.n	8000700 <LL_RCC_HSE_IsEnabledDiv2+0x18>
 80006fc:	2301      	movs	r3, #1
 80006fe:	e000      	b.n	8000702 <LL_RCC_HSE_IsEnabledDiv2+0x1a>
 8000700:	2300      	movs	r3, #0
}
 8000702:	4618      	mov	r0, r3
 8000704:	46bd      	mov	sp, r7
 8000706:	f85d 7b04 	ldr.w	r7, [sp], #4
 800070a:	4770      	bx	lr

0800070c <LL_RCC_HSE_Enable>:
  * @brief  Enable HSE crystal oscillator (HSE ON)
  * @rmtoll CR           HSEON         LL_RCC_HSE_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSE_Enable(void)
{
 800070c:	b480      	push	{r7}
 800070e:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSEON);
 8000710:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000714:	681b      	ldr	r3, [r3, #0]
 8000716:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800071a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800071e:	6013      	str	r3, [r2, #0]
}
 8000720:	bf00      	nop
 8000722:	46bd      	mov	sp, r7
 8000724:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000728:	4770      	bx	lr

0800072a <LL_RCC_HSE_Disable>:
  * @brief  Disable HSE crystal oscillator (HSE ON)
  * @rmtoll CR           HSEON         LL_RCC_HSE_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSE_Disable(void)
{
 800072a:	b480      	push	{r7}
 800072c:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSEON);
 800072e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000732:	681b      	ldr	r3, [r3, #0]
 8000734:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8000738:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800073c:	6013      	str	r3, [r2, #0]
}
 800073e:	bf00      	nop
 8000740:	46bd      	mov	sp, r7
 8000742:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000746:	4770      	bx	lr

08000748 <LL_RCC_HSE_IsReady>:
  * @brief  Check if HSE oscillator Ready
  * @rmtoll CR           HSERDY        LL_RCC_HSE_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_HSE_IsReady(void)
{
 8000748:	b480      	push	{r7}
 800074a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSERDY) == (RCC_CR_HSERDY)) ? 1UL : 0UL);
 800074c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000750:	681b      	ldr	r3, [r3, #0]
 8000752:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000756:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800075a:	d101      	bne.n	8000760 <LL_RCC_HSE_IsReady+0x18>
 800075c:	2301      	movs	r3, #1
 800075e:	e000      	b.n	8000762 <LL_RCC_HSE_IsReady+0x1a>
 8000760:	2300      	movs	r3, #0
}
 8000762:	4618      	mov	r0, r3
 8000764:	46bd      	mov	sp, r7
 8000766:	f85d 7b04 	ldr.w	r7, [sp], #4
 800076a:	4770      	bx	lr

0800076c <LL_RCC_HSI_Enable>:
  * @brief  Enable HSI oscillator
  * @rmtoll CR           HSION         LL_RCC_HSI_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI_Enable(void)
{
 800076c:	b480      	push	{r7}
 800076e:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSION);
 8000770:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000774:	681b      	ldr	r3, [r3, #0]
 8000776:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800077a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800077e:	6013      	str	r3, [r2, #0]
}
 8000780:	bf00      	nop
 8000782:	46bd      	mov	sp, r7
 8000784:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000788:	4770      	bx	lr

0800078a <LL_RCC_HSI_Disable>:
  * @brief  Disable HSI oscillator
  * @rmtoll CR           HSION         LL_RCC_HSI_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI_Disable(void)
{
 800078a:	b480      	push	{r7}
 800078c:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSION);
 800078e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000792:	681b      	ldr	r3, [r3, #0]
 8000794:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8000798:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800079c:	6013      	str	r3, [r2, #0]
}
 800079e:	bf00      	nop
 80007a0:	46bd      	mov	sp, r7
 80007a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007a6:	4770      	bx	lr

080007a8 <LL_RCC_HSI_IsReady>:
  * @brief  Check if HSI clock is ready
  * @rmtoll CR           HSIRDY        LL_RCC_HSI_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_HSI_IsReady(void)
{
 80007a8:	b480      	push	{r7}
 80007aa:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY)) ? 1UL : 0UL);
 80007ac:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80007b0:	681b      	ldr	r3, [r3, #0]
 80007b2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80007b6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80007ba:	d101      	bne.n	80007c0 <LL_RCC_HSI_IsReady+0x18>
 80007bc:	2301      	movs	r3, #1
 80007be:	e000      	b.n	80007c2 <LL_RCC_HSI_IsReady+0x1a>
 80007c0:	2300      	movs	r3, #0
}
 80007c2:	4618      	mov	r0, r3
 80007c4:	46bd      	mov	sp, r7
 80007c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007ca:	4770      	bx	lr

080007cc <LL_RCC_HSI_SetCalibTrimming>:
  * @rmtoll ICSCR        HSITRIM       LL_RCC_HSI_SetCalibTrimming
  * @param  Value Between Min_Data = 0 and Max_Data = 127
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI_SetCalibTrimming(uint32_t Value)
{
 80007cc:	b480      	push	{r7}
 80007ce:	b083      	sub	sp, #12
 80007d0:	af00      	add	r7, sp, #0
 80007d2:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_HSITRIM, Value << RCC_ICSCR_HSITRIM_Pos);
 80007d4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80007d8:	685b      	ldr	r3, [r3, #4]
 80007da:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80007de:	687b      	ldr	r3, [r7, #4]
 80007e0:	061b      	lsls	r3, r3, #24
 80007e2:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80007e6:	4313      	orrs	r3, r2
 80007e8:	604b      	str	r3, [r1, #4]
}
 80007ea:	bf00      	nop
 80007ec:	370c      	adds	r7, #12
 80007ee:	46bd      	mov	sp, r7
 80007f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007f4:	4770      	bx	lr

080007f6 <LL_RCC_HSI48_Enable>:
  * @brief  Enable HSI48
  * @rmtoll CRRCR          HSI48ON       LL_RCC_HSI48_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI48_Enable(void)
{
 80007f6:	b480      	push	{r7}
 80007f8:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CRRCR, RCC_CRRCR_HSI48ON);
 80007fa:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80007fe:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8000802:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8000806:	f043 0301 	orr.w	r3, r3, #1
 800080a:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98
}
 800080e:	bf00      	nop
 8000810:	46bd      	mov	sp, r7
 8000812:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000816:	4770      	bx	lr

08000818 <LL_RCC_HSI48_Disable>:
  * @brief  Disable HSI48
  * @rmtoll CRRCR          HSI48ON       LL_RCC_HSI48_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI48_Disable(void)
{
 8000818:	b480      	push	{r7}
 800081a:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CRRCR, RCC_CRRCR_HSI48ON);
 800081c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000820:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8000824:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8000828:	f023 0301 	bic.w	r3, r3, #1
 800082c:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98
}
 8000830:	bf00      	nop
 8000832:	46bd      	mov	sp, r7
 8000834:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000838:	4770      	bx	lr

0800083a <LL_RCC_HSI48_IsReady>:
  * @brief  Check if HSI48 oscillator Ready
  * @rmtoll CRRCR          HSI48RDY      LL_RCC_HSI48_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_HSI48_IsReady(void)
{
 800083a:	b480      	push	{r7}
 800083c:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == (RCC_CRRCR_HSI48RDY)) ? 1UL : 0UL);
 800083e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000842:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8000846:	f003 0302 	and.w	r3, r3, #2
 800084a:	2b02      	cmp	r3, #2
 800084c:	d101      	bne.n	8000852 <LL_RCC_HSI48_IsReady+0x18>
 800084e:	2301      	movs	r3, #1
 8000850:	e000      	b.n	8000854 <LL_RCC_HSI48_IsReady+0x1a>
 8000852:	2300      	movs	r3, #0
}
 8000854:	4618      	mov	r0, r3
 8000856:	46bd      	mov	sp, r7
 8000858:	f85d 7b04 	ldr.w	r7, [sp], #4
 800085c:	4770      	bx	lr

0800085e <LL_RCC_LSE_Enable>:
  * @brief  Enable  Low Speed External (LSE) crystal.
  * @rmtoll BDCR         LSEON         LL_RCC_LSE_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSE_Enable(void)
{
 800085e:	b480      	push	{r7}
 8000860:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8000862:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000866:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800086a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800086e:	f043 0301 	orr.w	r3, r3, #1
 8000872:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8000876:	bf00      	nop
 8000878:	46bd      	mov	sp, r7
 800087a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800087e:	4770      	bx	lr

08000880 <LL_RCC_LSE_Disable>:
  * @brief  Disable  Low Speed External (LSE) crystal.
  * @rmtoll BDCR         LSEON         LL_RCC_LSE_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSE_Disable(void)
{
 8000880:	b480      	push	{r7}
 8000882:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8000884:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000888:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800088c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8000890:	f023 0301 	bic.w	r3, r3, #1
 8000894:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8000898:	bf00      	nop
 800089a:	46bd      	mov	sp, r7
 800089c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008a0:	4770      	bx	lr

080008a2 <LL_RCC_LSE_EnableBypass>:
  * @brief  Enable external clock source (LSE bypass).
  * @rmtoll BDCR         LSEBYP        LL_RCC_LSE_EnableBypass
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSE_EnableBypass(void)
{
 80008a2:	b480      	push	{r7}
 80008a4:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 80008a6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80008aa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80008ae:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80008b2:	f043 0304 	orr.w	r3, r3, #4
 80008b6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 80008ba:	bf00      	nop
 80008bc:	46bd      	mov	sp, r7
 80008be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008c2:	4770      	bx	lr

080008c4 <LL_RCC_LSE_DisableBypass>:
  * @brief  Disable external clock source (LSE bypass).
  * @rmtoll BDCR         LSEBYP        LL_RCC_LSE_DisableBypass
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSE_DisableBypass(void)
{
 80008c4:	b480      	push	{r7}
 80008c6:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 80008c8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80008cc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80008d0:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80008d4:	f023 0304 	bic.w	r3, r3, #4
 80008d8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 80008dc:	bf00      	nop
 80008de:	46bd      	mov	sp, r7
 80008e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008e4:	4770      	bx	lr

080008e6 <LL_RCC_LSE_IsReady>:
  * @brief  Check if LSE oscillator Ready
  * @rmtoll BDCR         LSERDY        LL_RCC_LSE_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_LSE_IsReady(void)
{
 80008e6:	b480      	push	{r7}
 80008e8:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 80008ea:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80008ee:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80008f2:	f003 0302 	and.w	r3, r3, #2
 80008f6:	2b02      	cmp	r3, #2
 80008f8:	d101      	bne.n	80008fe <LL_RCC_LSE_IsReady+0x18>
 80008fa:	2301      	movs	r3, #1
 80008fc:	e000      	b.n	8000900 <LL_RCC_LSE_IsReady+0x1a>
 80008fe:	2300      	movs	r3, #0
}
 8000900:	4618      	mov	r0, r3
 8000902:	46bd      	mov	sp, r7
 8000904:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000908:	4770      	bx	lr

0800090a <LL_RCC_LSI1_Enable>:
  * @brief  Enable LSI1 Oscillator
  * @rmtoll CSR          LSI1ON         LL_RCC_LSI1_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI1_Enable(void)
{
 800090a:	b480      	push	{r7}
 800090c:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_LSI1ON);
 800090e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000912:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8000916:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800091a:	f043 0301 	orr.w	r3, r3, #1
 800091e:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 8000922:	bf00      	nop
 8000924:	46bd      	mov	sp, r7
 8000926:	f85d 7b04 	ldr.w	r7, [sp], #4
 800092a:	4770      	bx	lr

0800092c <LL_RCC_LSI1_Disable>:
  * @brief  Disable LSI1 Oscillator
  * @rmtoll CSR          LSI1ON         LL_RCC_LSI1_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI1_Disable(void)
{
 800092c:	b480      	push	{r7}
 800092e:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSI1ON);
 8000930:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000934:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8000938:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800093c:	f023 0301 	bic.w	r3, r3, #1
 8000940:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 8000944:	bf00      	nop
 8000946:	46bd      	mov	sp, r7
 8000948:	f85d 7b04 	ldr.w	r7, [sp], #4
 800094c:	4770      	bx	lr

0800094e <LL_RCC_LSI1_IsReady>:
  * @brief  Check if LSI1 is Ready
  * @rmtoll CSR          LSI1RDY        LL_RCC_LSI1_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_LSI1_IsReady(void)
{
 800094e:	b480      	push	{r7}
 8000950:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSI1RDY) == (RCC_CSR_LSI1RDY)) ? 1UL : 0UL);
 8000952:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000956:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800095a:	f003 0302 	and.w	r3, r3, #2
 800095e:	2b02      	cmp	r3, #2
 8000960:	d101      	bne.n	8000966 <LL_RCC_LSI1_IsReady+0x18>
 8000962:	2301      	movs	r3, #1
 8000964:	e000      	b.n	8000968 <LL_RCC_LSI1_IsReady+0x1a>
 8000966:	2300      	movs	r3, #0
}
 8000968:	4618      	mov	r0, r3
 800096a:	46bd      	mov	sp, r7
 800096c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000970:	4770      	bx	lr

08000972 <LL_RCC_LSI2_Enable>:
  * @brief  Enable LSI2 Oscillator
  * @rmtoll CSR          LSI2ON         LL_RCC_LSI2_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI2_Enable(void)
{
 8000972:	b480      	push	{r7}
 8000974:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_LSI2ON);
 8000976:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800097a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800097e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8000982:	f043 0304 	orr.w	r3, r3, #4
 8000986:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 800098a:	bf00      	nop
 800098c:	46bd      	mov	sp, r7
 800098e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000992:	4770      	bx	lr

08000994 <LL_RCC_LSI2_Disable>:
  * @brief  Disable LSI2 Oscillator
  * @rmtoll CSR          LSI2ON         LL_RCC_LSI2_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI2_Disable(void)
{
 8000994:	b480      	push	{r7}
 8000996:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSI2ON);
 8000998:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800099c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80009a0:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80009a4:	f023 0304 	bic.w	r3, r3, #4
 80009a8:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 80009ac:	bf00      	nop
 80009ae:	46bd      	mov	sp, r7
 80009b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009b4:	4770      	bx	lr

080009b6 <LL_RCC_LSI2_IsReady>:
  * @brief  Check if LSI2 is Ready
  * @rmtoll CSR          LSI2RDY        LL_RCC_LSI2_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_LSI2_IsReady(void)
{
 80009b6:	b480      	push	{r7}
 80009b8:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSI2RDY) == (RCC_CSR_LSI2RDY)) ? 1UL : 0UL);
 80009ba:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80009be:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80009c2:	f003 0308 	and.w	r3, r3, #8
 80009c6:	2b08      	cmp	r3, #8
 80009c8:	d101      	bne.n	80009ce <LL_RCC_LSI2_IsReady+0x18>
 80009ca:	2301      	movs	r3, #1
 80009cc:	e000      	b.n	80009d0 <LL_RCC_LSI2_IsReady+0x1a>
 80009ce:	2300      	movs	r3, #0
}
 80009d0:	4618      	mov	r0, r3
 80009d2:	46bd      	mov	sp, r7
 80009d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009d8:	4770      	bx	lr

080009da <LL_RCC_LSI2_SetTrimming>:
  * @rmtoll CSR        LSI2TRIM       LL_RCC_LSI2_SetTrimming
  * @param  Value Between Min_Data = 0 and Max_Data = 15
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI2_SetTrimming(uint32_t Value)
{
 80009da:	b480      	push	{r7}
 80009dc:	b083      	sub	sp, #12
 80009de:	af00      	add	r7, sp, #0
 80009e0:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CSR, RCC_CSR_LSI2TRIM, Value << RCC_CSR_LSI2TRIM_Pos);
 80009e2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80009e6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80009ea:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 80009ee:	687b      	ldr	r3, [r7, #4]
 80009f0:	021b      	lsls	r3, r3, #8
 80009f2:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80009f6:	4313      	orrs	r3, r2
 80009f8:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
}
 80009fc:	bf00      	nop
 80009fe:	370c      	adds	r7, #12
 8000a00:	46bd      	mov	sp, r7
 8000a02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a06:	4770      	bx	lr

08000a08 <LL_RCC_MSI_Enable>:
  * @brief  Enable MSI oscillator
  * @rmtoll CR           MSION         LL_RCC_MSI_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_Enable(void)
{
 8000a08:	b480      	push	{r7}
 8000a0a:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSION);
 8000a0c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000a10:	681b      	ldr	r3, [r3, #0]
 8000a12:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8000a16:	f043 0301 	orr.w	r3, r3, #1
 8000a1a:	6013      	str	r3, [r2, #0]
}
 8000a1c:	bf00      	nop
 8000a1e:	46bd      	mov	sp, r7
 8000a20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a24:	4770      	bx	lr

08000a26 <LL_RCC_MSI_Disable>:
  * @brief  Disable MSI oscillator
  * @rmtoll CR           MSION         LL_RCC_MSI_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_Disable(void)
{
 8000a26:	b480      	push	{r7}
 8000a28:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_MSION);
 8000a2a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000a2e:	681b      	ldr	r3, [r3, #0]
 8000a30:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8000a34:	f023 0301 	bic.w	r3, r3, #1
 8000a38:	6013      	str	r3, [r2, #0]
}
 8000a3a:	bf00      	nop
 8000a3c:	46bd      	mov	sp, r7
 8000a3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a42:	4770      	bx	lr

08000a44 <LL_RCC_MSI_IsReady>:
  * @brief  Check if MSI oscillator Ready
  * @rmtoll CR           MSIRDY        LL_RCC_MSI_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_MSI_IsReady(void)
{
 8000a44:	b480      	push	{r7}
 8000a46:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) == (RCC_CR_MSIRDY)) ? 1UL : 0UL);
 8000a48:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000a4c:	681b      	ldr	r3, [r3, #0]
 8000a4e:	f003 0302 	and.w	r3, r3, #2
 8000a52:	2b02      	cmp	r3, #2
 8000a54:	d101      	bne.n	8000a5a <LL_RCC_MSI_IsReady+0x16>
 8000a56:	2301      	movs	r3, #1
 8000a58:	e000      	b.n	8000a5c <LL_RCC_MSI_IsReady+0x18>
 8000a5a:	2300      	movs	r3, #0
}
 8000a5c:	4618      	mov	r0, r3
 8000a5e:	46bd      	mov	sp, r7
 8000a60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a64:	4770      	bx	lr

08000a66 <LL_RCC_MSI_SetRange>:
  *         @arg @ref LL_RCC_MSIRANGE_10
  *         @arg @ref LL_RCC_MSIRANGE_11
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_SetRange(uint32_t Range)
{
 8000a66:	b480      	push	{r7}
 8000a68:	b083      	sub	sp, #12
 8000a6a:	af00      	add	r7, sp, #0
 8000a6c:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CR, RCC_CR_MSIRANGE, Range);
 8000a6e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000a72:	681b      	ldr	r3, [r3, #0]
 8000a74:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8000a78:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8000a7c:	687b      	ldr	r3, [r7, #4]
 8000a7e:	4313      	orrs	r3, r2
 8000a80:	600b      	str	r3, [r1, #0]
}
 8000a82:	bf00      	nop
 8000a84:	370c      	adds	r7, #12
 8000a86:	46bd      	mov	sp, r7
 8000a88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a8c:	4770      	bx	lr

08000a8e <LL_RCC_MSI_GetRange>:
  *         @arg @ref LL_RCC_MSIRANGE_9
  *         @arg @ref LL_RCC_MSIRANGE_10
  *         @arg @ref LL_RCC_MSIRANGE_11
  */
__STATIC_INLINE uint32_t LL_RCC_MSI_GetRange(void)
{
 8000a8e:	b480      	push	{r7}
 8000a90:	b083      	sub	sp, #12
 8000a92:	af00      	add	r7, sp, #0
  uint32_t msiRange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE);
 8000a94:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000a98:	681b      	ldr	r3, [r3, #0]
 8000a9a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8000a9e:	607b      	str	r3, [r7, #4]
  if (msiRange > LL_RCC_MSIRANGE_11)
 8000aa0:	687b      	ldr	r3, [r7, #4]
 8000aa2:	2bb0      	cmp	r3, #176	; 0xb0
 8000aa4:	d901      	bls.n	8000aaa <LL_RCC_MSI_GetRange+0x1c>
  {
    msiRange = LL_RCC_MSIRANGE_11;
 8000aa6:	23b0      	movs	r3, #176	; 0xb0
 8000aa8:	607b      	str	r3, [r7, #4]
  }
  return msiRange;
 8000aaa:	687b      	ldr	r3, [r7, #4]
}
 8000aac:	4618      	mov	r0, r3
 8000aae:	370c      	adds	r7, #12
 8000ab0:	46bd      	mov	sp, r7
 8000ab2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ab6:	4770      	bx	lr

08000ab8 <LL_RCC_MSI_SetCalibTrimming>:
  * @rmtoll ICSCR        MSITRIM       LL_RCC_MSI_SetCalibTrimming
  * @param  Value Between Min_Data = 0 and Max_Data = 255
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_SetCalibTrimming(uint32_t Value)
{
 8000ab8:	b480      	push	{r7}
 8000aba:	b083      	sub	sp, #12
 8000abc:	af00      	add	r7, sp, #0
 8000abe:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_MSITRIM, Value << RCC_ICSCR_MSITRIM_Pos);
 8000ac0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000ac4:	685b      	ldr	r3, [r3, #4]
 8000ac6:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8000aca:	687b      	ldr	r3, [r7, #4]
 8000acc:	021b      	lsls	r3, r3, #8
 8000ace:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8000ad2:	4313      	orrs	r3, r2
 8000ad4:	604b      	str	r3, [r1, #4]
}
 8000ad6:	bf00      	nop
 8000ad8:	370c      	adds	r7, #12
 8000ada:	46bd      	mov	sp, r7
 8000adc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ae0:	4770      	bx	lr

08000ae2 <LL_RCC_SetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_PLL
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetSysClkSource(uint32_t Source)
{
 8000ae2:	b480      	push	{r7}
 8000ae4:	b083      	sub	sp, #12
 8000ae6:	af00      	add	r7, sp, #0
 8000ae8:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 8000aea:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000aee:	689b      	ldr	r3, [r3, #8]
 8000af0:	f023 0203 	bic.w	r2, r3, #3
 8000af4:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8000af8:	687b      	ldr	r3, [r7, #4]
 8000afa:	4313      	orrs	r3, r2
 8000afc:	608b      	str	r3, [r1, #8]
}
 8000afe:	bf00      	nop
 8000b00:	370c      	adds	r7, #12
 8000b02:	46bd      	mov	sp, r7
 8000b04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b08:	4770      	bx	lr

08000b0a <LL_RCC_GetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSI
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_PLL
  */
__STATIC_INLINE uint32_t LL_RCC_GetSysClkSource(void)
{
 8000b0a:	b480      	push	{r7}
 8000b0c:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8000b0e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000b12:	689b      	ldr	r3, [r3, #8]
 8000b14:	f003 030c 	and.w	r3, r3, #12
}
 8000b18:	4618      	mov	r0, r3
 8000b1a:	46bd      	mov	sp, r7
 8000b1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b20:	4770      	bx	lr

08000b22 <LL_RCC_SetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAHBPrescaler(uint32_t Prescaler)
{
 8000b22:	b480      	push	{r7}
 8000b24:	b083      	sub	sp, #12
 8000b26:	af00      	add	r7, sp, #0
 8000b28:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 8000b2a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000b2e:	689b      	ldr	r3, [r3, #8]
 8000b30:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8000b34:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8000b38:	687b      	ldr	r3, [r7, #4]
 8000b3a:	4313      	orrs	r3, r2
 8000b3c:	608b      	str	r3, [r1, #8]
}
 8000b3e:	bf00      	nop
 8000b40:	370c      	adds	r7, #12
 8000b42:	46bd      	mov	sp, r7
 8000b44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b48:	4770      	bx	lr

08000b4a <LL_C2_RCC_SetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_C2_RCC_SetAHBPrescaler(uint32_t Prescaler)
{
 8000b4a:	b480      	push	{r7}
 8000b4c:	b083      	sub	sp, #12
 8000b4e:	af00      	add	r7, sp, #0
 8000b50:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_C2HPRE, Prescaler);
 8000b52:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000b56:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8000b5a:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8000b5e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8000b62:	687b      	ldr	r3, [r7, #4]
 8000b64:	4313      	orrs	r3, r2
 8000b66:	f8c1 3108 	str.w	r3, [r1, #264]	; 0x108
}
 8000b6a:	bf00      	nop
 8000b6c:	370c      	adds	r7, #12
 8000b6e:	46bd      	mov	sp, r7
 8000b70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b74:	4770      	bx	lr

08000b76 <LL_RCC_SetAHB4Prescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAHB4Prescaler(uint32_t Prescaler)
{
 8000b76:	b480      	push	{r7}
 8000b78:	b083      	sub	sp, #12
 8000b7a:	af00      	add	r7, sp, #0
 8000b7c:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE, Prescaler >> 4);
 8000b7e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000b82:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8000b86:	f023 020f 	bic.w	r2, r3, #15
 8000b8a:	687b      	ldr	r3, [r7, #4]
 8000b8c:	091b      	lsrs	r3, r3, #4
 8000b8e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8000b92:	4313      	orrs	r3, r2
 8000b94:	f8c1 3108 	str.w	r3, [r1, #264]	; 0x108
}
 8000b98:	bf00      	nop
 8000b9a:	370c      	adds	r7, #12
 8000b9c:	46bd      	mov	sp, r7
 8000b9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ba2:	4770      	bx	lr

08000ba4 <LL_RCC_SetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB1Prescaler(uint32_t Prescaler)
{
 8000ba4:	b480      	push	{r7}
 8000ba6:	b083      	sub	sp, #12
 8000ba8:	af00      	add	r7, sp, #0
 8000baa:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 8000bac:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000bb0:	689b      	ldr	r3, [r3, #8]
 8000bb2:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8000bb6:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8000bba:	687b      	ldr	r3, [r7, #4]
 8000bbc:	4313      	orrs	r3, r2
 8000bbe:	608b      	str	r3, [r1, #8]
}
 8000bc0:	bf00      	nop
 8000bc2:	370c      	adds	r7, #12
 8000bc4:	46bd      	mov	sp, r7
 8000bc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bca:	4770      	bx	lr

08000bcc <LL_RCC_SetAPB2Prescaler>:
  *         @arg @ref LL_RCC_APB2_DIV_8
  *         @arg @ref LL_RCC_APB2_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB2Prescaler(uint32_t Prescaler)
{
 8000bcc:	b480      	push	{r7}
 8000bce:	b083      	sub	sp, #12
 8000bd0:	af00      	add	r7, sp, #0
 8000bd2:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 8000bd4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000bd8:	689b      	ldr	r3, [r3, #8]
 8000bda:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8000bde:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8000be2:	687b      	ldr	r3, [r7, #4]
 8000be4:	4313      	orrs	r3, r2
 8000be6:	608b      	str	r3, [r1, #8]
}
 8000be8:	bf00      	nop
 8000bea:	370c      	adds	r7, #12
 8000bec:	46bd      	mov	sp, r7
 8000bee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bf2:	4770      	bx	lr

08000bf4 <LL_RCC_GetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_128
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  */
__STATIC_INLINE uint32_t LL_RCC_GetAHBPrescaler(void)
{
 8000bf4:	b480      	push	{r7}
 8000bf6:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 8000bf8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000bfc:	689b      	ldr	r3, [r3, #8]
 8000bfe:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 8000c02:	4618      	mov	r0, r3
 8000c04:	46bd      	mov	sp, r7
 8000c06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c0a:	4770      	bx	lr

08000c0c <LL_RCC_GetAHB4Prescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_128
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  */
__STATIC_INLINE uint32_t LL_RCC_GetAHB4Prescaler(void)
{
 8000c0c:	b480      	push	{r7}
 8000c0e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE) << 4);
 8000c10:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000c14:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8000c18:	011b      	lsls	r3, r3, #4
 8000c1a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 8000c1e:	4618      	mov	r0, r3
 8000c20:	46bd      	mov	sp, r7
 8000c22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c26:	4770      	bx	lr

08000c28 <LL_RCC_PLL_Enable>:
  * @brief  Enable PLL
  * @rmtoll CR           PLLON         LL_RCC_PLL_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Enable(void)
{
 8000c28:	b480      	push	{r7}
 8000c2a:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLON);
 8000c2c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000c30:	681b      	ldr	r3, [r3, #0]
 8000c32:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8000c36:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8000c3a:	6013      	str	r3, [r2, #0]
}
 8000c3c:	bf00      	nop
 8000c3e:	46bd      	mov	sp, r7
 8000c40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c44:	4770      	bx	lr

08000c46 <LL_RCC_PLL_Disable>:
  * @note Cannot be disabled if the PLL clock is used as the system clock
  * @rmtoll CR           PLLON         LL_RCC_PLL_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Disable(void)
{
 8000c46:	b480      	push	{r7}
 8000c48:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_PLLON);
 8000c4a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000c4e:	681b      	ldr	r3, [r3, #0]
 8000c50:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8000c54:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8000c58:	6013      	str	r3, [r2, #0]
}
 8000c5a:	bf00      	nop
 8000c5c:	46bd      	mov	sp, r7
 8000c5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c62:	4770      	bx	lr

08000c64 <LL_RCC_PLL_IsReady>:
  * @brief  Check if PLL Ready
  * @rmtoll CR           PLLRDY        LL_RCC_PLL_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_IsReady(void)
{
 8000c64:	b480      	push	{r7}
 8000c66:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY)) ? 1UL : 0UL);
 8000c68:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000c6c:	681b      	ldr	r3, [r3, #0]
 8000c6e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000c72:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8000c76:	d101      	bne.n	8000c7c <LL_RCC_PLL_IsReady+0x18>
 8000c78:	2301      	movs	r3, #1
 8000c7a:	e000      	b.n	8000c7e <LL_RCC_PLL_IsReady+0x1a>
 8000c7c:	2300      	movs	r3, #0
}
 8000c7e:	4618      	mov	r0, r3
 8000c80:	46bd      	mov	sp, r7
 8000c82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c86:	4770      	bx	lr

08000c88 <LL_RCC_PLL_GetN>:
  * @brief  Get Main PLL multiplication factor for VCO
  * @rmtoll PLLCFGR      PLLN          LL_RCC_PLL_GetN
  * @retval Between 6 and 127
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetN(void)
{
 8000c88:	b480      	push	{r7}
 8000c8a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >>  RCC_PLLCFGR_PLLN_Pos);
 8000c8c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000c90:	68db      	ldr	r3, [r3, #12]
 8000c92:	0a1b      	lsrs	r3, r3, #8
 8000c94:	f003 037f 	and.w	r3, r3, #127	; 0x7f
}
 8000c98:	4618      	mov	r0, r3
 8000c9a:	46bd      	mov	sp, r7
 8000c9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ca0:	4770      	bx	lr

08000ca2 <LL_RCC_PLL_GetR>:
  *         @arg @ref LL_RCC_PLLR_DIV_6
  *         @arg @ref LL_RCC_PLLR_DIV_7
  *         @arg @ref LL_RCC_PLLR_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetR(void)
{
 8000ca2:	b480      	push	{r7}
 8000ca4:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR));
 8000ca6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000caa:	68db      	ldr	r3, [r3, #12]
 8000cac:	f003 4360 	and.w	r3, r3, #3758096384	; 0xe0000000
}
 8000cb0:	4618      	mov	r0, r3
 8000cb2:	46bd      	mov	sp, r7
 8000cb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cb8:	4770      	bx	lr

08000cba <LL_RCC_PLL_GetDivider>:
  *         @arg @ref LL_RCC_PLLM_DIV_6
  *         @arg @ref LL_RCC_PLLM_DIV_7
  *         @arg @ref LL_RCC_PLLM_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetDivider(void)
{
 8000cba:	b480      	push	{r7}
 8000cbc:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM));
 8000cbe:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000cc2:	68db      	ldr	r3, [r3, #12]
 8000cc4:	f003 0370 	and.w	r3, r3, #112	; 0x70
}
 8000cc8:	4618      	mov	r0, r3
 8000cca:	46bd      	mov	sp, r7
 8000ccc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cd0:	4770      	bx	lr

08000cd2 <LL_RCC_PLL_GetMainSource>:
  *         @arg @ref LL_RCC_PLLSOURCE_MSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSE
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMainSource(void)
{
 8000cd2:	b480      	push	{r7}
 8000cd4:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 8000cd6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000cda:	68db      	ldr	r3, [r3, #12]
 8000cdc:	f003 0303 	and.w	r3, r3, #3
}
 8000ce0:	4618      	mov	r0, r3
 8000ce2:	46bd      	mov	sp, r7
 8000ce4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ce8:	4770      	bx	lr

08000cea <LL_RCC_IsActiveFlag_HPRE>:
  * @brief  Check if HCLK1 prescaler flag value has been applied or not
  * @rmtoll CFGR         HPREF       LL_RCC_IsActiveFlag_HPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_HPRE(void)
{
 8000cea:	b480      	push	{r7}
 8000cec:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_HPREF) == (RCC_CFGR_HPREF)) ? 1UL : 0UL);
 8000cee:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000cf2:	689b      	ldr	r3, [r3, #8]
 8000cf4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000cf8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000cfc:	d101      	bne.n	8000d02 <LL_RCC_IsActiveFlag_HPRE+0x18>
 8000cfe:	2301      	movs	r3, #1
 8000d00:	e000      	b.n	8000d04 <LL_RCC_IsActiveFlag_HPRE+0x1a>
 8000d02:	2300      	movs	r3, #0
}
 8000d04:	4618      	mov	r0, r3
 8000d06:	46bd      	mov	sp, r7
 8000d08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d0c:	4770      	bx	lr

08000d0e <LL_RCC_IsActiveFlag_C2HPRE>:
  * @brief  Check if HCLK2 prescaler flag value has been applied or not
  * @rmtoll EXTCFGR         C2HPREF       LL_RCC_IsActiveFlag_C2HPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_C2HPRE(void)
{
 8000d0e:	b480      	push	{r7}
 8000d10:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_C2HPREF) == (RCC_EXTCFGR_C2HPREF)) ? 1UL : 0UL);
 8000d12:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000d16:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8000d1a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000d1e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8000d22:	d101      	bne.n	8000d28 <LL_RCC_IsActiveFlag_C2HPRE+0x1a>
 8000d24:	2301      	movs	r3, #1
 8000d26:	e000      	b.n	8000d2a <LL_RCC_IsActiveFlag_C2HPRE+0x1c>
 8000d28:	2300      	movs	r3, #0
}
 8000d2a:	4618      	mov	r0, r3
 8000d2c:	46bd      	mov	sp, r7
 8000d2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d32:	4770      	bx	lr

08000d34 <LL_RCC_IsActiveFlag_SHDHPRE>:
  * @brief  Check if HCLK4 prescaler flag value has been applied or not
  * @rmtoll EXTCFGR         SHDHPREF       LL_RCC_IsActiveFlag_SHDHPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_SHDHPRE(void)
{
 8000d34:	b480      	push	{r7}
 8000d36:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPREF) == (RCC_EXTCFGR_SHDHPREF)) ? 1UL : 0UL);
 8000d38:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000d3c:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8000d40:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000d44:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000d48:	d101      	bne.n	8000d4e <LL_RCC_IsActiveFlag_SHDHPRE+0x1a>
 8000d4a:	2301      	movs	r3, #1
 8000d4c:	e000      	b.n	8000d50 <LL_RCC_IsActiveFlag_SHDHPRE+0x1c>
 8000d4e:	2300      	movs	r3, #0
}
 8000d50:	4618      	mov	r0, r3
 8000d52:	46bd      	mov	sp, r7
 8000d54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d58:	4770      	bx	lr

08000d5a <LL_RCC_IsActiveFlag_PPRE1>:
  * @brief  Check if PLCK1 prescaler flag value has been applied or not
  * @rmtoll CFGR         PPRE1F       LL_RCC_IsActiveFlag_PPRE1
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE1(void)
{
 8000d5a:	b480      	push	{r7}
 8000d5c:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1F) == (RCC_CFGR_PPRE1F)) ? 1UL : 0UL);
 8000d5e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000d62:	689b      	ldr	r3, [r3, #8]
 8000d64:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000d68:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8000d6c:	d101      	bne.n	8000d72 <LL_RCC_IsActiveFlag_PPRE1+0x18>
 8000d6e:	2301      	movs	r3, #1
 8000d70:	e000      	b.n	8000d74 <LL_RCC_IsActiveFlag_PPRE1+0x1a>
 8000d72:	2300      	movs	r3, #0
}
 8000d74:	4618      	mov	r0, r3
 8000d76:	46bd      	mov	sp, r7
 8000d78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d7c:	4770      	bx	lr

08000d7e <LL_RCC_IsActiveFlag_PPRE2>:
  * @brief  Check if PLCK2 prescaler flag value has been applied or not
  * @rmtoll CFGR         PPRE2F       LL_RCC_IsActiveFlag_PPRE2
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE2(void)
{
 8000d7e:	b480      	push	{r7}
 8000d80:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2F) == (RCC_CFGR_PPRE2F)) ? 1UL : 0UL);
 8000d82:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000d86:	689b      	ldr	r3, [r3, #8]
 8000d88:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000d8c:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8000d90:	d101      	bne.n	8000d96 <LL_RCC_IsActiveFlag_PPRE2+0x18>
 8000d92:	2301      	movs	r3, #1
 8000d94:	e000      	b.n	8000d98 <LL_RCC_IsActiveFlag_PPRE2+0x1a>
 8000d96:	2300      	movs	r3, #0
}
 8000d98:	4618      	mov	r0, r3
 8000d9a:	46bd      	mov	sp, r7
 8000d9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000da0:	4770      	bx	lr
	...

08000da4 <HAL_RCC_OscConfig>:
  * @note   The PLL is not disabled when used as system clock.
  * @note   The PLL source is not updated when used as PLLSAI1 clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000da4:	b590      	push	{r4, r7, lr}
 8000da6:	b08d      	sub	sp, #52	; 0x34
 8000da8:	af00      	add	r7, sp, #0
 8000daa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8000dac:	687b      	ldr	r3, [r7, #4]
 8000dae:	2b00      	cmp	r3, #0
 8000db0:	d101      	bne.n	8000db6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8000db2:	2301      	movs	r3, #1
 8000db4:	e37e      	b.n	80014b4 <HAL_RCC_OscConfig+0x710>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*----------------------------- MSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8000db6:	687b      	ldr	r3, [r7, #4]
 8000db8:	681b      	ldr	r3, [r3, #0]
 8000dba:	f003 0320 	and.w	r3, r3, #32
 8000dbe:	2b00      	cmp	r3, #0
 8000dc0:	f000 8092 	beq.w	8000ee8 <HAL_RCC_OscConfig+0x144>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* When the MSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8000dc4:	f7ff fea1 	bl	8000b0a <LL_RCC_GetSysClkSource>
 8000dc8:	62f8      	str	r0, [r7, #44]	; 0x2c
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 8000dca:	f7ff ff82 	bl	8000cd2 <LL_RCC_PLL_GetMainSource>
 8000dce:	62b8      	str	r0, [r7, #40]	; 0x28
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 8000dd0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000dd2:	2b00      	cmp	r3, #0
 8000dd4:	d005      	beq.n	8000de2 <HAL_RCC_OscConfig+0x3e>
 8000dd6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000dd8:	2b0c      	cmp	r3, #12
 8000dda:	d14c      	bne.n	8000e76 <HAL_RCC_OscConfig+0xd2>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_MSI)))
 8000ddc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000dde:	2b01      	cmp	r3, #1
 8000de0:	d149      	bne.n	8000e76 <HAL_RCC_OscConfig+0xd2>
    {
      if ((LL_RCC_MSI_IsReady() != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8000de2:	f7ff fe2f 	bl	8000a44 <LL_RCC_MSI_IsReady>
 8000de6:	4603      	mov	r3, r0
 8000de8:	2b00      	cmp	r3, #0
 8000dea:	d005      	beq.n	8000df8 <HAL_RCC_OscConfig+0x54>
 8000dec:	687b      	ldr	r3, [r7, #4]
 8000dee:	69db      	ldr	r3, [r3, #28]
 8000df0:	2b00      	cmp	r3, #0
 8000df2:	d101      	bne.n	8000df8 <HAL_RCC_OscConfig+0x54>
      {
        return HAL_ERROR;
 8000df4:	2301      	movs	r3, #1
 8000df6:	e35d      	b.n	80014b4 <HAL_RCC_OscConfig+0x710>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the AHB4 clock
           and the supply voltage of the device. */
        if (RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8000df8:	687b      	ldr	r3, [r7, #4]
 8000dfa:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 8000dfc:	f7ff fe47 	bl	8000a8e <LL_RCC_MSI_GetRange>
 8000e00:	4603      	mov	r3, r0
 8000e02:	429c      	cmp	r4, r3
 8000e04:	d914      	bls.n	8000e30 <HAL_RCC_OscConfig+0x8c>
        {
          /* First increase number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8000e06:	687b      	ldr	r3, [r7, #4]
 8000e08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000e0a:	4618      	mov	r0, r3
 8000e0c:	f000 fd18 	bl	8001840 <RCC_SetFlashLatencyFromMSIRange>
 8000e10:	4603      	mov	r3, r0
 8000e12:	2b00      	cmp	r3, #0
 8000e14:	d001      	beq.n	8000e1a <HAL_RCC_OscConfig+0x76>
          {
            return HAL_ERROR;
 8000e16:	2301      	movs	r3, #1
 8000e18:	e34c      	b.n	80014b4 <HAL_RCC_OscConfig+0x710>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8000e1a:	687b      	ldr	r3, [r7, #4]
 8000e1c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000e1e:	4618      	mov	r0, r3
 8000e20:	f7ff fe21 	bl	8000a66 <LL_RCC_MSI_SetRange>
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8000e24:	687b      	ldr	r3, [r7, #4]
 8000e26:	6a1b      	ldr	r3, [r3, #32]
 8000e28:	4618      	mov	r0, r3
 8000e2a:	f7ff fe45 	bl	8000ab8 <LL_RCC_MSI_SetCalibTrimming>
 8000e2e:	e013      	b.n	8000e58 <HAL_RCC_OscConfig+0xb4>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8000e30:	687b      	ldr	r3, [r7, #4]
 8000e32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000e34:	4618      	mov	r0, r3
 8000e36:	f7ff fe16 	bl	8000a66 <LL_RCC_MSI_SetRange>
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8000e3a:	687b      	ldr	r3, [r7, #4]
 8000e3c:	6a1b      	ldr	r3, [r3, #32]
 8000e3e:	4618      	mov	r0, r3
 8000e40:	f7ff fe3a 	bl	8000ab8 <LL_RCC_MSI_SetCalibTrimming>

          /* Decrease number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8000e44:	687b      	ldr	r3, [r7, #4]
 8000e46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000e48:	4618      	mov	r0, r3
 8000e4a:	f000 fcf9 	bl	8001840 <RCC_SetFlashLatencyFromMSIRange>
 8000e4e:	4603      	mov	r3, r0
 8000e50:	2b00      	cmp	r3, #0
 8000e52:	d001      	beq.n	8000e58 <HAL_RCC_OscConfig+0xb4>
          {
            return HAL_ERROR;
 8000e54:	2301      	movs	r3, #1
 8000e56:	e32d      	b.n	80014b4 <HAL_RCC_OscConfig+0x710>
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetHCLKFreq();
 8000e58:	f000 fcde 	bl	8001818 <HAL_RCC_GetHCLKFreq>
 8000e5c:	4603      	mov	r3, r0
 8000e5e:	4ab3      	ldr	r2, [pc, #716]	; (800112c <HAL_RCC_OscConfig+0x388>)
 8000e60:	6013      	str	r3, [r2, #0]
        
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8000e62:	4bb3      	ldr	r3, [pc, #716]	; (8001130 <HAL_RCC_OscConfig+0x38c>)
 8000e64:	681b      	ldr	r3, [r3, #0]
 8000e66:	4618      	mov	r0, r3
 8000e68:	f7ff fad6 	bl	8000418 <HAL_InitTick>
 8000e6c:	4603      	mov	r3, r0
 8000e6e:	2b00      	cmp	r3, #0
 8000e70:	d039      	beq.n	8000ee6 <HAL_RCC_OscConfig+0x142>
        {
          return HAL_ERROR;
 8000e72:	2301      	movs	r3, #1
 8000e74:	e31e      	b.n	80014b4 <HAL_RCC_OscConfig+0x710>
      }
    }
    else
    {
      /* Check the MSI State */
      if (RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8000e76:	687b      	ldr	r3, [r7, #4]
 8000e78:	69db      	ldr	r3, [r3, #28]
 8000e7a:	2b00      	cmp	r3, #0
 8000e7c:	d01e      	beq.n	8000ebc <HAL_RCC_OscConfig+0x118>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8000e7e:	f7ff fdc3 	bl	8000a08 <LL_RCC_MSI_Enable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 8000e82:	f7ff fb17 	bl	80004b4 <HAL_GetTick>
 8000e86:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till MSI is ready */
        while (LL_RCC_MSI_IsReady() == 0U)
 8000e88:	e008      	b.n	8000e9c <HAL_RCC_OscConfig+0xf8>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8000e8a:	f7ff fb13 	bl	80004b4 <HAL_GetTick>
 8000e8e:	4602      	mov	r2, r0
 8000e90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000e92:	1ad3      	subs	r3, r2, r3
 8000e94:	2b02      	cmp	r3, #2
 8000e96:	d901      	bls.n	8000e9c <HAL_RCC_OscConfig+0xf8>
          {
            return HAL_TIMEOUT;
 8000e98:	2303      	movs	r3, #3
 8000e9a:	e30b      	b.n	80014b4 <HAL_RCC_OscConfig+0x710>
        while (LL_RCC_MSI_IsReady() == 0U)
 8000e9c:	f7ff fdd2 	bl	8000a44 <LL_RCC_MSI_IsReady>
 8000ea0:	4603      	mov	r3, r0
 8000ea2:	2b00      	cmp	r3, #0
 8000ea4:	d0f1      	beq.n	8000e8a <HAL_RCC_OscConfig+0xe6>
          }
        }

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8000ea6:	687b      	ldr	r3, [r7, #4]
 8000ea8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000eaa:	4618      	mov	r0, r3
 8000eac:	f7ff fddb 	bl	8000a66 <LL_RCC_MSI_SetRange>
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8000eb0:	687b      	ldr	r3, [r7, #4]
 8000eb2:	6a1b      	ldr	r3, [r3, #32]
 8000eb4:	4618      	mov	r0, r3
 8000eb6:	f7ff fdff 	bl	8000ab8 <LL_RCC_MSI_SetCalibTrimming>
 8000eba:	e015      	b.n	8000ee8 <HAL_RCC_OscConfig+0x144>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8000ebc:	f7ff fdb3 	bl	8000a26 <LL_RCC_MSI_Disable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 8000ec0:	f7ff faf8 	bl	80004b4 <HAL_GetTick>
 8000ec4:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till MSI is disabled */
        while (LL_RCC_MSI_IsReady() != 0U)
 8000ec6:	e008      	b.n	8000eda <HAL_RCC_OscConfig+0x136>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8000ec8:	f7ff faf4 	bl	80004b4 <HAL_GetTick>
 8000ecc:	4602      	mov	r2, r0
 8000ece:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000ed0:	1ad3      	subs	r3, r2, r3
 8000ed2:	2b02      	cmp	r3, #2
 8000ed4:	d901      	bls.n	8000eda <HAL_RCC_OscConfig+0x136>
          {
            return HAL_TIMEOUT;
 8000ed6:	2303      	movs	r3, #3
 8000ed8:	e2ec      	b.n	80014b4 <HAL_RCC_OscConfig+0x710>
        while (LL_RCC_MSI_IsReady() != 0U)
 8000eda:	f7ff fdb3 	bl	8000a44 <LL_RCC_MSI_IsReady>
 8000ede:	4603      	mov	r3, r0
 8000ee0:	2b00      	cmp	r3, #0
 8000ee2:	d1f1      	bne.n	8000ec8 <HAL_RCC_OscConfig+0x124>
 8000ee4:	e000      	b.n	8000ee8 <HAL_RCC_OscConfig+0x144>
      if ((LL_RCC_MSI_IsReady() != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8000ee6:	bf00      	nop
      }
    }
  }

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000ee8:	687b      	ldr	r3, [r7, #4]
 8000eea:	681b      	ldr	r3, [r3, #0]
 8000eec:	f003 0301 	and.w	r3, r3, #1
 8000ef0:	2b00      	cmp	r3, #0
 8000ef2:	d04e      	beq.n	8000f92 <HAL_RCC_OscConfig+0x1ee>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8000ef4:	f7ff fe09 	bl	8000b0a <LL_RCC_GetSysClkSource>
 8000ef8:	6238      	str	r0, [r7, #32]
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 8000efa:	f7ff feea 	bl	8000cd2 <LL_RCC_PLL_GetMainSource>
 8000efe:	61f8      	str	r0, [r7, #28]
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 8000f00:	6a3b      	ldr	r3, [r7, #32]
 8000f02:	2b08      	cmp	r3, #8
 8000f04:	d005      	beq.n	8000f12 <HAL_RCC_OscConfig+0x16e>
 8000f06:	6a3b      	ldr	r3, [r7, #32]
 8000f08:	2b0c      	cmp	r3, #12
 8000f0a:	d10d      	bne.n	8000f28 <HAL_RCC_OscConfig+0x184>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_HSE)))
 8000f0c:	69fb      	ldr	r3, [r7, #28]
 8000f0e:	2b03      	cmp	r3, #3
 8000f10:	d10a      	bne.n	8000f28 <HAL_RCC_OscConfig+0x184>
    {
      if ((LL_RCC_HSE_IsReady() != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000f12:	f7ff fc19 	bl	8000748 <LL_RCC_HSE_IsReady>
 8000f16:	4603      	mov	r3, r0
 8000f18:	2b00      	cmp	r3, #0
 8000f1a:	d039      	beq.n	8000f90 <HAL_RCC_OscConfig+0x1ec>
 8000f1c:	687b      	ldr	r3, [r7, #4]
 8000f1e:	685b      	ldr	r3, [r3, #4]
 8000f20:	2b00      	cmp	r3, #0
 8000f22:	d135      	bne.n	8000f90 <HAL_RCC_OscConfig+0x1ec>
      {
        return HAL_ERROR;
 8000f24:	2301      	movs	r3, #1
 8000f26:	e2c5      	b.n	80014b4 <HAL_RCC_OscConfig+0x710>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000f28:	687b      	ldr	r3, [r7, #4]
 8000f2a:	685b      	ldr	r3, [r3, #4]
 8000f2c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000f30:	d102      	bne.n	8000f38 <HAL_RCC_OscConfig+0x194>
 8000f32:	f7ff fbeb 	bl	800070c <LL_RCC_HSE_Enable>
 8000f36:	e001      	b.n	8000f3c <HAL_RCC_OscConfig+0x198>
 8000f38:	f7ff fbf7 	bl	800072a <LL_RCC_HSE_Disable>

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8000f3c:	687b      	ldr	r3, [r7, #4]
 8000f3e:	685b      	ldr	r3, [r3, #4]
 8000f40:	2b00      	cmp	r3, #0
 8000f42:	d012      	beq.n	8000f6a <HAL_RCC_OscConfig+0x1c6>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000f44:	f7ff fab6 	bl	80004b4 <HAL_GetTick>
 8000f48:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while (LL_RCC_HSE_IsReady() == 0U)
 8000f4a:	e008      	b.n	8000f5e <HAL_RCC_OscConfig+0x1ba>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000f4c:	f7ff fab2 	bl	80004b4 <HAL_GetTick>
 8000f50:	4602      	mov	r2, r0
 8000f52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000f54:	1ad3      	subs	r3, r2, r3
 8000f56:	2b64      	cmp	r3, #100	; 0x64
 8000f58:	d901      	bls.n	8000f5e <HAL_RCC_OscConfig+0x1ba>
          {
            return HAL_TIMEOUT;
 8000f5a:	2303      	movs	r3, #3
 8000f5c:	e2aa      	b.n	80014b4 <HAL_RCC_OscConfig+0x710>
        while (LL_RCC_HSE_IsReady() == 0U)
 8000f5e:	f7ff fbf3 	bl	8000748 <LL_RCC_HSE_IsReady>
 8000f62:	4603      	mov	r3, r0
 8000f64:	2b00      	cmp	r3, #0
 8000f66:	d0f1      	beq.n	8000f4c <HAL_RCC_OscConfig+0x1a8>
 8000f68:	e013      	b.n	8000f92 <HAL_RCC_OscConfig+0x1ee>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000f6a:	f7ff faa3 	bl	80004b4 <HAL_GetTick>
 8000f6e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while (LL_RCC_HSE_IsReady() != 0U)
 8000f70:	e008      	b.n	8000f84 <HAL_RCC_OscConfig+0x1e0>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000f72:	f7ff fa9f 	bl	80004b4 <HAL_GetTick>
 8000f76:	4602      	mov	r2, r0
 8000f78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000f7a:	1ad3      	subs	r3, r2, r3
 8000f7c:	2b64      	cmp	r3, #100	; 0x64
 8000f7e:	d901      	bls.n	8000f84 <HAL_RCC_OscConfig+0x1e0>
          {
            return HAL_TIMEOUT;
 8000f80:	2303      	movs	r3, #3
 8000f82:	e297      	b.n	80014b4 <HAL_RCC_OscConfig+0x710>
        while (LL_RCC_HSE_IsReady() != 0U)
 8000f84:	f7ff fbe0 	bl	8000748 <LL_RCC_HSE_IsReady>
 8000f88:	4603      	mov	r3, r0
 8000f8a:	2b00      	cmp	r3, #0
 8000f8c:	d1f1      	bne.n	8000f72 <HAL_RCC_OscConfig+0x1ce>
 8000f8e:	e000      	b.n	8000f92 <HAL_RCC_OscConfig+0x1ee>
      if ((LL_RCC_HSE_IsReady() != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000f90:	bf00      	nop
      }
    }
  }

  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000f92:	687b      	ldr	r3, [r7, #4]
 8000f94:	681b      	ldr	r3, [r3, #0]
 8000f96:	f003 0302 	and.w	r3, r3, #2
 8000f9a:	2b00      	cmp	r3, #0
 8000f9c:	d051      	beq.n	8001042 <HAL_RCC_OscConfig+0x29e>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8000f9e:	f7ff fdb4 	bl	8000b0a <LL_RCC_GetSysClkSource>
 8000fa2:	61b8      	str	r0, [r7, #24]
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 8000fa4:	f7ff fe95 	bl	8000cd2 <LL_RCC_PLL_GetMainSource>
 8000fa8:	6178      	str	r0, [r7, #20]
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 8000faa:	69bb      	ldr	r3, [r7, #24]
 8000fac:	2b04      	cmp	r3, #4
 8000fae:	d005      	beq.n	8000fbc <HAL_RCC_OscConfig+0x218>
 8000fb0:	69bb      	ldr	r3, [r7, #24]
 8000fb2:	2b0c      	cmp	r3, #12
 8000fb4:	d113      	bne.n	8000fde <HAL_RCC_OscConfig+0x23a>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_HSI)))
 8000fb6:	697b      	ldr	r3, [r7, #20]
 8000fb8:	2b02      	cmp	r3, #2
 8000fba:	d110      	bne.n	8000fde <HAL_RCC_OscConfig+0x23a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((LL_RCC_HSI_IsReady() != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8000fbc:	f7ff fbf4 	bl	80007a8 <LL_RCC_HSI_IsReady>
 8000fc0:	4603      	mov	r3, r0
 8000fc2:	2b00      	cmp	r3, #0
 8000fc4:	d005      	beq.n	8000fd2 <HAL_RCC_OscConfig+0x22e>
 8000fc6:	687b      	ldr	r3, [r7, #4]
 8000fc8:	68db      	ldr	r3, [r3, #12]
 8000fca:	2b00      	cmp	r3, #0
 8000fcc:	d101      	bne.n	8000fd2 <HAL_RCC_OscConfig+0x22e>
      {
        return HAL_ERROR;
 8000fce:	2301      	movs	r3, #1
 8000fd0:	e270      	b.n	80014b4 <HAL_RCC_OscConfig+0x710>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000fd2:	687b      	ldr	r3, [r7, #4]
 8000fd4:	691b      	ldr	r3, [r3, #16]
 8000fd6:	4618      	mov	r0, r3
 8000fd8:	f7ff fbf8 	bl	80007cc <LL_RCC_HSI_SetCalibTrimming>
      if ((LL_RCC_HSI_IsReady() != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8000fdc:	e031      	b.n	8001042 <HAL_RCC_OscConfig+0x29e>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8000fde:	687b      	ldr	r3, [r7, #4]
 8000fe0:	68db      	ldr	r3, [r3, #12]
 8000fe2:	2b00      	cmp	r3, #0
 8000fe4:	d019      	beq.n	800101a <HAL_RCC_OscConfig+0x276>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8000fe6:	f7ff fbc1 	bl	800076c <LL_RCC_HSI_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000fea:	f7ff fa63 	bl	80004b4 <HAL_GetTick>
 8000fee:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (LL_RCC_HSI_IsReady() == 0U)
 8000ff0:	e008      	b.n	8001004 <HAL_RCC_OscConfig+0x260>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8000ff2:	f7ff fa5f 	bl	80004b4 <HAL_GetTick>
 8000ff6:	4602      	mov	r2, r0
 8000ff8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000ffa:	1ad3      	subs	r3, r2, r3
 8000ffc:	2b02      	cmp	r3, #2
 8000ffe:	d901      	bls.n	8001004 <HAL_RCC_OscConfig+0x260>
          {
            return HAL_TIMEOUT;
 8001000:	2303      	movs	r3, #3
 8001002:	e257      	b.n	80014b4 <HAL_RCC_OscConfig+0x710>
        while (LL_RCC_HSI_IsReady() == 0U)
 8001004:	f7ff fbd0 	bl	80007a8 <LL_RCC_HSI_IsReady>
 8001008:	4603      	mov	r3, r0
 800100a:	2b00      	cmp	r3, #0
 800100c:	d0f1      	beq.n	8000ff2 <HAL_RCC_OscConfig+0x24e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800100e:	687b      	ldr	r3, [r7, #4]
 8001010:	691b      	ldr	r3, [r3, #16]
 8001012:	4618      	mov	r0, r3
 8001014:	f7ff fbda 	bl	80007cc <LL_RCC_HSI_SetCalibTrimming>
 8001018:	e013      	b.n	8001042 <HAL_RCC_OscConfig+0x29e>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800101a:	f7ff fbb6 	bl	800078a <LL_RCC_HSI_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800101e:	f7ff fa49 	bl	80004b4 <HAL_GetTick>
 8001022:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while (LL_RCC_HSI_IsReady() != 0U)
 8001024:	e008      	b.n	8001038 <HAL_RCC_OscConfig+0x294>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001026:	f7ff fa45 	bl	80004b4 <HAL_GetTick>
 800102a:	4602      	mov	r2, r0
 800102c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800102e:	1ad3      	subs	r3, r2, r3
 8001030:	2b02      	cmp	r3, #2
 8001032:	d901      	bls.n	8001038 <HAL_RCC_OscConfig+0x294>
          {
            return HAL_TIMEOUT;
 8001034:	2303      	movs	r3, #3
 8001036:	e23d      	b.n	80014b4 <HAL_RCC_OscConfig+0x710>
        while (LL_RCC_HSI_IsReady() != 0U)
 8001038:	f7ff fbb6 	bl	80007a8 <LL_RCC_HSI_IsReady>
 800103c:	4603      	mov	r3, r0
 800103e:	2b00      	cmp	r3, #0
 8001040:	d1f1      	bne.n	8001026 <HAL_RCC_OscConfig+0x282>
      }
    }
  }
  /*------------------------------ LSI Configuration (LSI1 or LSI2) -------------------------*/

  if ((((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI1) == RCC_OSCILLATORTYPE_LSI1) || \
 8001042:	687b      	ldr	r3, [r7, #4]
 8001044:	681b      	ldr	r3, [r3, #0]
 8001046:	f003 0308 	and.w	r3, r3, #8
 800104a:	2b00      	cmp	r3, #0
 800104c:	d106      	bne.n	800105c <HAL_RCC_OscConfig+0x2b8>
      (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI2) == RCC_OSCILLATORTYPE_LSI2))
 800104e:	687b      	ldr	r3, [r7, #4]
 8001050:	681b      	ldr	r3, [r3, #0]
 8001052:	f003 0310 	and.w	r3, r3, #16
  if ((((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI1) == RCC_OSCILLATORTYPE_LSI1) || \
 8001056:	2b00      	cmp	r3, #0
 8001058:	f000 80a3 	beq.w	80011a2 <HAL_RCC_OscConfig+0x3fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800105c:	687b      	ldr	r3, [r7, #4]
 800105e:	695b      	ldr	r3, [r3, #20]
 8001060:	2b00      	cmp	r3, #0
 8001062:	d076      	beq.n	8001152 <HAL_RCC_OscConfig+0x3ae>
    {
      /*------------------------------ LSI2 selected by default (when Switch ON) -------------------------*/
      if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI2) == RCC_OSCILLATORTYPE_LSI2)
 8001064:	687b      	ldr	r3, [r7, #4]
 8001066:	681b      	ldr	r3, [r3, #0]
 8001068:	f003 0310 	and.w	r3, r3, #16
 800106c:	2b00      	cmp	r3, #0
 800106e:	d046      	beq.n	80010fe <HAL_RCC_OscConfig+0x35a>
      {
        assert_param(IS_RCC_LSI2_CALIBRATION_VALUE(RCC_OscInitStruct->LSI2CalibrationValue));

        /* 1. Check LSI1 state and enable if required */
        if (LL_RCC_LSI1_IsReady() == 0U)
 8001070:	f7ff fc6d 	bl	800094e <LL_RCC_LSI1_IsReady>
 8001074:	4603      	mov	r3, r0
 8001076:	2b00      	cmp	r3, #0
 8001078:	d113      	bne.n	80010a2 <HAL_RCC_OscConfig+0x2fe>
        {
          /* This is required to enable LSI1 before enabling LSI2 */
          __HAL_RCC_LSI1_ENABLE();
 800107a:	f7ff fc46 	bl	800090a <LL_RCC_LSI1_Enable>

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800107e:	f7ff fa19 	bl	80004b4 <HAL_GetTick>
 8001082:	6278      	str	r0, [r7, #36]	; 0x24

          /* Wait till LSI1 is ready */
          while (LL_RCC_LSI1_IsReady() == 0U)
 8001084:	e008      	b.n	8001098 <HAL_RCC_OscConfig+0x2f4>
          {
            if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 8001086:	f7ff fa15 	bl	80004b4 <HAL_GetTick>
 800108a:	4602      	mov	r2, r0
 800108c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800108e:	1ad3      	subs	r3, r2, r3
 8001090:	2b02      	cmp	r3, #2
 8001092:	d901      	bls.n	8001098 <HAL_RCC_OscConfig+0x2f4>
            {
              return HAL_TIMEOUT;
 8001094:	2303      	movs	r3, #3
 8001096:	e20d      	b.n	80014b4 <HAL_RCC_OscConfig+0x710>
          while (LL_RCC_LSI1_IsReady() == 0U)
 8001098:	f7ff fc59 	bl	800094e <LL_RCC_LSI1_IsReady>
 800109c:	4603      	mov	r3, r0
 800109e:	2b00      	cmp	r3, #0
 80010a0:	d0f1      	beq.n	8001086 <HAL_RCC_OscConfig+0x2e2>
            }
          }
        }

        /* 2. Enable the Internal Low Speed oscillator (LSI2) and set trimming value */
        __HAL_RCC_LSI2_ENABLE();
 80010a2:	f7ff fc66 	bl	8000972 <LL_RCC_LSI2_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80010a6:	f7ff fa05 	bl	80004b4 <HAL_GetTick>
 80010aa:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till LSI2 is ready */
        while (LL_RCC_LSI2_IsReady() == 0U)
 80010ac:	e008      	b.n	80010c0 <HAL_RCC_OscConfig+0x31c>
        {
          if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 80010ae:	f7ff fa01 	bl	80004b4 <HAL_GetTick>
 80010b2:	4602      	mov	r2, r0
 80010b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80010b6:	1ad3      	subs	r3, r2, r3
 80010b8:	2b03      	cmp	r3, #3
 80010ba:	d901      	bls.n	80010c0 <HAL_RCC_OscConfig+0x31c>
          {
            return HAL_TIMEOUT;
 80010bc:	2303      	movs	r3, #3
 80010be:	e1f9      	b.n	80014b4 <HAL_RCC_OscConfig+0x710>
        while (LL_RCC_LSI2_IsReady() == 0U)
 80010c0:	f7ff fc79 	bl	80009b6 <LL_RCC_LSI2_IsReady>
 80010c4:	4603      	mov	r3, r0
 80010c6:	2b00      	cmp	r3, #0
 80010c8:	d0f1      	beq.n	80010ae <HAL_RCC_OscConfig+0x30a>
          }
        }
        /* Adjusts the Internal Low Spee oscillator (LSI2) calibration value */
        __HAL_RCC_LSI2_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->LSI2CalibrationValue);
 80010ca:	687b      	ldr	r3, [r7, #4]
 80010cc:	699b      	ldr	r3, [r3, #24]
 80010ce:	4618      	mov	r0, r3
 80010d0:	f7ff fc83 	bl	80009da <LL_RCC_LSI2_SetTrimming>

        /* 3. Disable LSI1 */

        /* LSI1 was initially not enable, require to disable it */
        __HAL_RCC_LSI1_DISABLE();
 80010d4:	f7ff fc2a 	bl	800092c <LL_RCC_LSI1_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80010d8:	f7ff f9ec 	bl	80004b4 <HAL_GetTick>
 80010dc:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till LSI1 is disabled */
        while (LL_RCC_LSI1_IsReady() != 0U)
 80010de:	e008      	b.n	80010f2 <HAL_RCC_OscConfig+0x34e>
        {
          if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 80010e0:	f7ff f9e8 	bl	80004b4 <HAL_GetTick>
 80010e4:	4602      	mov	r2, r0
 80010e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80010e8:	1ad3      	subs	r3, r2, r3
 80010ea:	2b02      	cmp	r3, #2
 80010ec:	d901      	bls.n	80010f2 <HAL_RCC_OscConfig+0x34e>
          {
            return HAL_TIMEOUT;
 80010ee:	2303      	movs	r3, #3
 80010f0:	e1e0      	b.n	80014b4 <HAL_RCC_OscConfig+0x710>
        while (LL_RCC_LSI1_IsReady() != 0U)
 80010f2:	f7ff fc2c 	bl	800094e <LL_RCC_LSI1_IsReady>
 80010f6:	4603      	mov	r3, r0
 80010f8:	2b00      	cmp	r3, #0
 80010fa:	d1f1      	bne.n	80010e0 <HAL_RCC_OscConfig+0x33c>
 80010fc:	e051      	b.n	80011a2 <HAL_RCC_OscConfig+0x3fe>
      else
      {
        /*------------------------------ LSI1 selected (only if LSI2 OFF)-------------------------*/

        /* 1. Enable the Internal Low Speed oscillator (LSI1). */
        __HAL_RCC_LSI1_ENABLE();
 80010fe:	f7ff fc04 	bl	800090a <LL_RCC_LSI1_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001102:	f7ff f9d7 	bl	80004b4 <HAL_GetTick>
 8001106:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till LSI1 is ready */
        while (LL_RCC_LSI1_IsReady() == 0U)
 8001108:	e008      	b.n	800111c <HAL_RCC_OscConfig+0x378>
        {
          if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 800110a:	f7ff f9d3 	bl	80004b4 <HAL_GetTick>
 800110e:	4602      	mov	r2, r0
 8001110:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001112:	1ad3      	subs	r3, r2, r3
 8001114:	2b02      	cmp	r3, #2
 8001116:	d901      	bls.n	800111c <HAL_RCC_OscConfig+0x378>
          {
            return HAL_TIMEOUT;
 8001118:	2303      	movs	r3, #3
 800111a:	e1cb      	b.n	80014b4 <HAL_RCC_OscConfig+0x710>
        while (LL_RCC_LSI1_IsReady() == 0U)
 800111c:	f7ff fc17 	bl	800094e <LL_RCC_LSI1_IsReady>
 8001120:	4603      	mov	r3, r0
 8001122:	2b00      	cmp	r3, #0
 8001124:	d0f1      	beq.n	800110a <HAL_RCC_OscConfig+0x366>
          }
        }
        /*2. Switch OFF LSI2*/

        /* Disable the Internal Low Speed oscillator (LSI2). */
        __HAL_RCC_LSI2_DISABLE();
 8001126:	f7ff fc35 	bl	8000994 <LL_RCC_LSI2_Disable>

        /* Wait till LSI2 is disabled */
        while (LL_RCC_LSI2_IsReady() != 0U)
 800112a:	e00c      	b.n	8001146 <HAL_RCC_OscConfig+0x3a2>
 800112c:	20000008 	.word	0x20000008
 8001130:	2000000c 	.word	0x2000000c
        {
          if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 8001134:	f7ff f9be 	bl	80004b4 <HAL_GetTick>
 8001138:	4602      	mov	r2, r0
 800113a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800113c:	1ad3      	subs	r3, r2, r3
 800113e:	2b03      	cmp	r3, #3
 8001140:	d901      	bls.n	8001146 <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 8001142:	2303      	movs	r3, #3
 8001144:	e1b6      	b.n	80014b4 <HAL_RCC_OscConfig+0x710>
        while (LL_RCC_LSI2_IsReady() != 0U)
 8001146:	f7ff fc36 	bl	80009b6 <LL_RCC_LSI2_IsReady>
 800114a:	4603      	mov	r3, r0
 800114c:	2b00      	cmp	r3, #0
 800114e:	d1f1      	bne.n	8001134 <HAL_RCC_OscConfig+0x390>
 8001150:	e027      	b.n	80011a2 <HAL_RCC_OscConfig+0x3fe>
    }
    else
    {

      /* Disable the Internal Low Speed oscillator (LSI2). */
      __HAL_RCC_LSI2_DISABLE();
 8001152:	f7ff fc1f 	bl	8000994 <LL_RCC_LSI2_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001156:	f7ff f9ad 	bl	80004b4 <HAL_GetTick>
 800115a:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI2 is disabled */
      while (LL_RCC_LSI2_IsReady() != 0U)
 800115c:	e008      	b.n	8001170 <HAL_RCC_OscConfig+0x3cc>
      {
        if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 800115e:	f7ff f9a9 	bl	80004b4 <HAL_GetTick>
 8001162:	4602      	mov	r2, r0
 8001164:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001166:	1ad3      	subs	r3, r2, r3
 8001168:	2b03      	cmp	r3, #3
 800116a:	d901      	bls.n	8001170 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 800116c:	2303      	movs	r3, #3
 800116e:	e1a1      	b.n	80014b4 <HAL_RCC_OscConfig+0x710>
      while (LL_RCC_LSI2_IsReady() != 0U)
 8001170:	f7ff fc21 	bl	80009b6 <LL_RCC_LSI2_IsReady>
 8001174:	4603      	mov	r3, r0
 8001176:	2b00      	cmp	r3, #0
 8001178:	d1f1      	bne.n	800115e <HAL_RCC_OscConfig+0x3ba>
        }
      }

      /* Disable the Internal Low Speed oscillator (LSI1). */
      __HAL_RCC_LSI1_DISABLE();
 800117a:	f7ff fbd7 	bl	800092c <LL_RCC_LSI1_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800117e:	f7ff f999 	bl	80004b4 <HAL_GetTick>
 8001182:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI1 is disabled */
      while (LL_RCC_LSI1_IsReady() != 0U)
 8001184:	e008      	b.n	8001198 <HAL_RCC_OscConfig+0x3f4>
      {
        if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 8001186:	f7ff f995 	bl	80004b4 <HAL_GetTick>
 800118a:	4602      	mov	r2, r0
 800118c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800118e:	1ad3      	subs	r3, r2, r3
 8001190:	2b02      	cmp	r3, #2
 8001192:	d901      	bls.n	8001198 <HAL_RCC_OscConfig+0x3f4>
        {
          return HAL_TIMEOUT;
 8001194:	2303      	movs	r3, #3
 8001196:	e18d      	b.n	80014b4 <HAL_RCC_OscConfig+0x710>
      while (LL_RCC_LSI1_IsReady() != 0U)
 8001198:	f7ff fbd9 	bl	800094e <LL_RCC_LSI1_IsReady>
 800119c:	4603      	mov	r3, r0
 800119e:	2b00      	cmp	r3, #0
 80011a0:	d1f1      	bne.n	8001186 <HAL_RCC_OscConfig+0x3e2>
      }
    }
  }

  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80011a2:	687b      	ldr	r3, [r7, #4]
 80011a4:	681b      	ldr	r3, [r3, #0]
 80011a6:	f003 0304 	and.w	r3, r3, #4
 80011aa:	2b00      	cmp	r3, #0
 80011ac:	d05b      	beq.n	8001266 <HAL_RCC_OscConfig+0x4c2>
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80011ae:	4bb5      	ldr	r3, [pc, #724]	; (8001484 <HAL_RCC_OscConfig+0x6e0>)
 80011b0:	681b      	ldr	r3, [r3, #0]
 80011b2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80011b6:	2b00      	cmp	r3, #0
 80011b8:	d114      	bne.n	80011e4 <HAL_RCC_OscConfig+0x440>
    {
      /* Enable write access to Backup domain */
      HAL_PWR_EnableBkUpAccess();
 80011ba:	f7ff fa77 	bl	80006ac <HAL_PWR_EnableBkUpAccess>

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80011be:	f7ff f979 	bl	80004b4 <HAL_GetTick>
 80011c2:	6278      	str	r0, [r7, #36]	; 0x24

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80011c4:	e008      	b.n	80011d8 <HAL_RCC_OscConfig+0x434>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80011c6:	f7ff f975 	bl	80004b4 <HAL_GetTick>
 80011ca:	4602      	mov	r2, r0
 80011cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80011ce:	1ad3      	subs	r3, r2, r3
 80011d0:	2b02      	cmp	r3, #2
 80011d2:	d901      	bls.n	80011d8 <HAL_RCC_OscConfig+0x434>
        {
          return HAL_TIMEOUT;
 80011d4:	2303      	movs	r3, #3
 80011d6:	e16d      	b.n	80014b4 <HAL_RCC_OscConfig+0x710>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80011d8:	4baa      	ldr	r3, [pc, #680]	; (8001484 <HAL_RCC_OscConfig+0x6e0>)
 80011da:	681b      	ldr	r3, [r3, #0]
 80011dc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80011e0:	2b00      	cmp	r3, #0
 80011e2:	d0f0      	beq.n	80011c6 <HAL_RCC_OscConfig+0x422>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80011e4:	687b      	ldr	r3, [r7, #4]
 80011e6:	689b      	ldr	r3, [r3, #8]
 80011e8:	2b01      	cmp	r3, #1
 80011ea:	d102      	bne.n	80011f2 <HAL_RCC_OscConfig+0x44e>
 80011ec:	f7ff fb37 	bl	800085e <LL_RCC_LSE_Enable>
 80011f0:	e00c      	b.n	800120c <HAL_RCC_OscConfig+0x468>
 80011f2:	687b      	ldr	r3, [r7, #4]
 80011f4:	689b      	ldr	r3, [r3, #8]
 80011f6:	2b05      	cmp	r3, #5
 80011f8:	d104      	bne.n	8001204 <HAL_RCC_OscConfig+0x460>
 80011fa:	f7ff fb52 	bl	80008a2 <LL_RCC_LSE_EnableBypass>
 80011fe:	f7ff fb2e 	bl	800085e <LL_RCC_LSE_Enable>
 8001202:	e003      	b.n	800120c <HAL_RCC_OscConfig+0x468>
 8001204:	f7ff fb3c 	bl	8000880 <LL_RCC_LSE_Disable>
 8001208:	f7ff fb5c 	bl	80008c4 <LL_RCC_LSE_DisableBypass>

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800120c:	687b      	ldr	r3, [r7, #4]
 800120e:	689b      	ldr	r3, [r3, #8]
 8001210:	2b00      	cmp	r3, #0
 8001212:	d014      	beq.n	800123e <HAL_RCC_OscConfig+0x49a>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001214:	f7ff f94e 	bl	80004b4 <HAL_GetTick>
 8001218:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while (LL_RCC_LSE_IsReady() == 0U)
 800121a:	e00a      	b.n	8001232 <HAL_RCC_OscConfig+0x48e>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800121c:	f7ff f94a 	bl	80004b4 <HAL_GetTick>
 8001220:	4602      	mov	r2, r0
 8001222:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001224:	1ad3      	subs	r3, r2, r3
 8001226:	f241 3288 	movw	r2, #5000	; 0x1388
 800122a:	4293      	cmp	r3, r2
 800122c:	d901      	bls.n	8001232 <HAL_RCC_OscConfig+0x48e>
        {
          return HAL_TIMEOUT;
 800122e:	2303      	movs	r3, #3
 8001230:	e140      	b.n	80014b4 <HAL_RCC_OscConfig+0x710>
      while (LL_RCC_LSE_IsReady() == 0U)
 8001232:	f7ff fb58 	bl	80008e6 <LL_RCC_LSE_IsReady>
 8001236:	4603      	mov	r3, r0
 8001238:	2b00      	cmp	r3, #0
 800123a:	d0ef      	beq.n	800121c <HAL_RCC_OscConfig+0x478>
 800123c:	e013      	b.n	8001266 <HAL_RCC_OscConfig+0x4c2>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800123e:	f7ff f939 	bl	80004b4 <HAL_GetTick>
 8001242:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while (LL_RCC_LSE_IsReady() != 0U)
 8001244:	e00a      	b.n	800125c <HAL_RCC_OscConfig+0x4b8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001246:	f7ff f935 	bl	80004b4 <HAL_GetTick>
 800124a:	4602      	mov	r2, r0
 800124c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800124e:	1ad3      	subs	r3, r2, r3
 8001250:	f241 3288 	movw	r2, #5000	; 0x1388
 8001254:	4293      	cmp	r3, r2
 8001256:	d901      	bls.n	800125c <HAL_RCC_OscConfig+0x4b8>
        {
          return HAL_TIMEOUT;
 8001258:	2303      	movs	r3, #3
 800125a:	e12b      	b.n	80014b4 <HAL_RCC_OscConfig+0x710>
      while (LL_RCC_LSE_IsReady() != 0U)
 800125c:	f7ff fb43 	bl	80008e6 <LL_RCC_LSE_IsReady>
 8001260:	4603      	mov	r3, r0
 8001262:	2b00      	cmp	r3, #0
 8001264:	d1ef      	bne.n	8001246 <HAL_RCC_OscConfig+0x4a2>
    }

  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8001266:	687b      	ldr	r3, [r7, #4]
 8001268:	681b      	ldr	r3, [r3, #0]
 800126a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800126e:	2b00      	cmp	r3, #0
 8001270:	d02c      	beq.n	80012cc <HAL_RCC_OscConfig+0x528>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if (RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8001272:	687b      	ldr	r3, [r7, #4]
 8001274:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001276:	2b00      	cmp	r3, #0
 8001278:	d014      	beq.n	80012a4 <HAL_RCC_OscConfig+0x500>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800127a:	f7ff fabc 	bl	80007f6 <LL_RCC_HSI48_Enable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800127e:	f7ff f919 	bl	80004b4 <HAL_GetTick>
 8001282:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (LL_RCC_HSI48_IsReady() == 0U)
 8001284:	e008      	b.n	8001298 <HAL_RCC_OscConfig+0x4f4>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001286:	f7ff f915 	bl	80004b4 <HAL_GetTick>
 800128a:	4602      	mov	r2, r0
 800128c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800128e:	1ad3      	subs	r3, r2, r3
 8001290:	2b02      	cmp	r3, #2
 8001292:	d901      	bls.n	8001298 <HAL_RCC_OscConfig+0x4f4>
        {
          return HAL_TIMEOUT;
 8001294:	2303      	movs	r3, #3
 8001296:	e10d      	b.n	80014b4 <HAL_RCC_OscConfig+0x710>
      while (LL_RCC_HSI48_IsReady() == 0U)
 8001298:	f7ff facf 	bl	800083a <LL_RCC_HSI48_IsReady>
 800129c:	4603      	mov	r3, r0
 800129e:	2b00      	cmp	r3, #0
 80012a0:	d0f1      	beq.n	8001286 <HAL_RCC_OscConfig+0x4e2>
 80012a2:	e013      	b.n	80012cc <HAL_RCC_OscConfig+0x528>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80012a4:	f7ff fab8 	bl	8000818 <LL_RCC_HSI48_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80012a8:	f7ff f904 	bl	80004b4 <HAL_GetTick>
 80012ac:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is disabled */
      while (LL_RCC_HSI48_IsReady() != 0U)
 80012ae:	e008      	b.n	80012c2 <HAL_RCC_OscConfig+0x51e>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80012b0:	f7ff f900 	bl	80004b4 <HAL_GetTick>
 80012b4:	4602      	mov	r2, r0
 80012b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80012b8:	1ad3      	subs	r3, r2, r3
 80012ba:	2b02      	cmp	r3, #2
 80012bc:	d901      	bls.n	80012c2 <HAL_RCC_OscConfig+0x51e>
        {
          return HAL_TIMEOUT;
 80012be:	2303      	movs	r3, #3
 80012c0:	e0f8      	b.n	80014b4 <HAL_RCC_OscConfig+0x710>
      while (LL_RCC_HSI48_IsReady() != 0U)
 80012c2:	f7ff faba 	bl	800083a <LL_RCC_HSI48_IsReady>
 80012c6:	4603      	mov	r3, r0
 80012c8:	2b00      	cmp	r3, #0
 80012ca:	d1f1      	bne.n	80012b0 <HAL_RCC_OscConfig+0x50c>
#endif
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80012cc:	687b      	ldr	r3, [r7, #4]
 80012ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80012d0:	2b00      	cmp	r3, #0
 80012d2:	f000 80ee 	beq.w	80014b2 <HAL_RCC_OscConfig+0x70e>
  {
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80012d6:	f7ff fc18 	bl	8000b0a <LL_RCC_GetSysClkSource>
 80012da:	6138      	str	r0, [r7, #16]
    const uint32_t temp_pllconfig = RCC->PLLCFGR;
 80012dc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80012e0:	68db      	ldr	r3, [r3, #12]
 80012e2:	60fb      	str	r3, [r7, #12]
    
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80012e4:	687b      	ldr	r3, [r7, #4]
 80012e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80012e8:	2b02      	cmp	r3, #2
 80012ea:	f040 80af 	bne.w	800144c <HAL_RCC_OscConfig+0x6a8>
      assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
      
      /* Do nothing if PLL configuration is unchanged */
      if ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80012ee:	68fb      	ldr	r3, [r7, #12]
 80012f0:	f003 0203 	and.w	r2, r3, #3
 80012f4:	687b      	ldr	r3, [r7, #4]
 80012f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012f8:	429a      	cmp	r2, r3
 80012fa:	d123      	bne.n	8001344 <HAL_RCC_OscConfig+0x5a0>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80012fc:	68fb      	ldr	r3, [r7, #12]
 80012fe:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8001302:	687b      	ldr	r3, [r7, #4]
 8001304:	6b5b      	ldr	r3, [r3, #52]	; 0x34
      if ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001306:	429a      	cmp	r2, r3
 8001308:	d11c      	bne.n	8001344 <HAL_RCC_OscConfig+0x5a0>
          ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) != RCC_OscInitStruct->PLL.PLLN) ||
 800130a:	68fb      	ldr	r3, [r7, #12]
 800130c:	0a1b      	lsrs	r3, r3, #8
 800130e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8001312:	687b      	ldr	r3, [r7, #4]
 8001314:	6b9b      	ldr	r3, [r3, #56]	; 0x38
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8001316:	429a      	cmp	r2, r3
 8001318:	d114      	bne.n	8001344 <HAL_RCC_OscConfig+0x5a0>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 800131a:	68fb      	ldr	r3, [r7, #12]
 800131c:	f403 1278 	and.w	r2, r3, #4063232	; 0x3e0000
 8001320:	687b      	ldr	r3, [r7, #4]
 8001322:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
          ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) != RCC_OscInitStruct->PLL.PLLN) ||
 8001324:	429a      	cmp	r2, r3
 8001326:	d10d      	bne.n	8001344 <HAL_RCC_OscConfig+0x5a0>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8001328:	68fb      	ldr	r3, [r7, #12]
 800132a:	f003 6260 	and.w	r2, r3, #234881024	; 0xe000000
 800132e:	687b      	ldr	r3, [r7, #4]
 8001330:	6c1b      	ldr	r3, [r3, #64]	; 0x40
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8001332:	429a      	cmp	r2, r3
 8001334:	d106      	bne.n	8001344 <HAL_RCC_OscConfig+0x5a0>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 8001336:	68fb      	ldr	r3, [r7, #12]
 8001338:	f003 4260 	and.w	r2, r3, #3758096384	; 0xe0000000
 800133c:	687b      	ldr	r3, [r7, #4]
 800133e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8001340:	429a      	cmp	r2, r3
 8001342:	d05d      	beq.n	8001400 <HAL_RCC_OscConfig+0x65c>
      {
        /* Check if the PLL is used as system clock or not */
        if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001344:	693b      	ldr	r3, [r7, #16]
 8001346:	2b0c      	cmp	r3, #12
 8001348:	d058      	beq.n	80013fc <HAL_RCC_OscConfig+0x658>
        {
#if defined(SAI1)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if (READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 800134a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800134e:	681b      	ldr	r3, [r3, #0]
 8001350:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8001354:	2b00      	cmp	r3, #0
 8001356:	d001      	beq.n	800135c <HAL_RCC_OscConfig+0x5b8>

          {
            return HAL_ERROR;
 8001358:	2301      	movs	r3, #1
 800135a:	e0ab      	b.n	80014b4 <HAL_RCC_OscConfig+0x710>
          }
          else
#endif
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 800135c:	f7ff fc73 	bl	8000c46 <LL_RCC_PLL_Disable>
            
            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8001360:	f7ff f8a8 	bl	80004b4 <HAL_GetTick>
 8001364:	6278      	str	r0, [r7, #36]	; 0x24
            
            /* Wait till PLL is ready */
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001366:	e008      	b.n	800137a <HAL_RCC_OscConfig+0x5d6>
            {
              if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001368:	f7ff f8a4 	bl	80004b4 <HAL_GetTick>
 800136c:	4602      	mov	r2, r0
 800136e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001370:	1ad3      	subs	r3, r2, r3
 8001372:	2b02      	cmp	r3, #2
 8001374:	d901      	bls.n	800137a <HAL_RCC_OscConfig+0x5d6>
              {
                return HAL_TIMEOUT;
 8001376:	2303      	movs	r3, #3
 8001378:	e09c      	b.n	80014b4 <HAL_RCC_OscConfig+0x710>
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800137a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800137e:	681b      	ldr	r3, [r3, #0]
 8001380:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001384:	2b00      	cmp	r3, #0
 8001386:	d1ef      	bne.n	8001368 <HAL_RCC_OscConfig+0x5c4>
              }
            }
            
            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001388:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800138c:	68da      	ldr	r2, [r3, #12]
 800138e:	4b3e      	ldr	r3, [pc, #248]	; (8001488 <HAL_RCC_OscConfig+0x6e4>)
 8001390:	4013      	ands	r3, r2
 8001392:	687a      	ldr	r2, [r7, #4]
 8001394:	6b11      	ldr	r1, [r2, #48]	; 0x30
 8001396:	687a      	ldr	r2, [r7, #4]
 8001398:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800139a:	4311      	orrs	r1, r2
 800139c:	687a      	ldr	r2, [r7, #4]
 800139e:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80013a0:	0212      	lsls	r2, r2, #8
 80013a2:	4311      	orrs	r1, r2
 80013a4:	687a      	ldr	r2, [r7, #4]
 80013a6:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 80013a8:	4311      	orrs	r1, r2
 80013aa:	687a      	ldr	r2, [r7, #4]
 80013ac:	6c12      	ldr	r2, [r2, #64]	; 0x40
 80013ae:	4311      	orrs	r1, r2
 80013b0:	687a      	ldr	r2, [r7, #4]
 80013b2:	6c52      	ldr	r2, [r2, #68]	; 0x44
 80013b4:	430a      	orrs	r2, r1
 80013b6:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80013ba:	4313      	orrs	r3, r2
 80013bc:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLP,
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
            
            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 80013be:	f7ff fc33 	bl	8000c28 <LL_RCC_PLL_Enable>
            
            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80013c2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80013c6:	68db      	ldr	r3, [r3, #12]
 80013c8:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80013cc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80013d0:	60d3      	str	r3, [r2, #12]
            
            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80013d2:	f7ff f86f 	bl	80004b4 <HAL_GetTick>
 80013d6:	6278      	str	r0, [r7, #36]	; 0x24
            
            /* Wait till PLL is ready */
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80013d8:	e008      	b.n	80013ec <HAL_RCC_OscConfig+0x648>
            {
              if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80013da:	f7ff f86b 	bl	80004b4 <HAL_GetTick>
 80013de:	4602      	mov	r2, r0
 80013e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80013e2:	1ad3      	subs	r3, r2, r3
 80013e4:	2b02      	cmp	r3, #2
 80013e6:	d901      	bls.n	80013ec <HAL_RCC_OscConfig+0x648>
              {
                return HAL_TIMEOUT;
 80013e8:	2303      	movs	r3, #3
 80013ea:	e063      	b.n	80014b4 <HAL_RCC_OscConfig+0x710>
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80013ec:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80013f0:	681b      	ldr	r3, [r3, #0]
 80013f2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80013f6:	2b00      	cmp	r3, #0
 80013f8:	d0ef      	beq.n	80013da <HAL_RCC_OscConfig+0x636>
        if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80013fa:	e05a      	b.n	80014b2 <HAL_RCC_OscConfig+0x70e>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 80013fc:	2301      	movs	r3, #1
 80013fe:	e059      	b.n	80014b4 <HAL_RCC_OscConfig+0x710>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001400:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001404:	681b      	ldr	r3, [r3, #0]
 8001406:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800140a:	2b00      	cmp	r3, #0
 800140c:	d151      	bne.n	80014b2 <HAL_RCC_OscConfig+0x70e>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 800140e:	f7ff fc0b 	bl	8000c28 <LL_RCC_PLL_Enable>

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001412:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001416:	68db      	ldr	r3, [r3, #12]
 8001418:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800141c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001420:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8001422:	f7ff f847 	bl	80004b4 <HAL_GetTick>
 8001426:	6278      	str	r0, [r7, #36]	; 0x24

          /* Wait till PLL is ready */
          while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001428:	e008      	b.n	800143c <HAL_RCC_OscConfig+0x698>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800142a:	f7ff f843 	bl	80004b4 <HAL_GetTick>
 800142e:	4602      	mov	r2, r0
 8001430:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001432:	1ad3      	subs	r3, r2, r3
 8001434:	2b02      	cmp	r3, #2
 8001436:	d901      	bls.n	800143c <HAL_RCC_OscConfig+0x698>
            {
              return HAL_TIMEOUT;
 8001438:	2303      	movs	r3, #3
 800143a:	e03b      	b.n	80014b4 <HAL_RCC_OscConfig+0x710>
          while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800143c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001440:	681b      	ldr	r3, [r3, #0]
 8001442:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001446:	2b00      	cmp	r3, #0
 8001448:	d0ef      	beq.n	800142a <HAL_RCC_OscConfig+0x686>
 800144a:	e032      	b.n	80014b2 <HAL_RCC_OscConfig+0x70e>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800144c:	693b      	ldr	r3, [r7, #16]
 800144e:	2b0c      	cmp	r3, #12
 8001450:	d02d      	beq.n	80014ae <HAL_RCC_OscConfig+0x70a>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001452:	f7ff fbf8 	bl	8000c46 <LL_RCC_PLL_Disable>
        

        /* Disable all PLL outputs to save power */
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PLLSOURCE_NONE);
 8001456:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800145a:	68db      	ldr	r3, [r3, #12]
 800145c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001460:	f023 0303 	bic.w	r3, r3, #3
 8001464:	60d3      	str	r3, [r2, #12]

#if defined(SAI1) && defined(USB)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_USBCLK | RCC_PLL_SAI1CLK);
 8001466:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800146a:	68db      	ldr	r3, [r3, #12]
 800146c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001470:	f023 5388 	bic.w	r3, r3, #285212672	; 0x11000000
 8001474:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001478:	60d3      	str	r3, [r2, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK);
#endif

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800147a:	f7ff f81b 	bl	80004b4 <HAL_GetTick>
 800147e:	6278      	str	r0, [r7, #36]	; 0x24
        
        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001480:	e00d      	b.n	800149e <HAL_RCC_OscConfig+0x6fa>
 8001482:	bf00      	nop
 8001484:	58000400 	.word	0x58000400
 8001488:	11c1808c 	.word	0x11c1808c
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800148c:	f7ff f812 	bl	80004b4 <HAL_GetTick>
 8001490:	4602      	mov	r2, r0
 8001492:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001494:	1ad3      	subs	r3, r2, r3
 8001496:	2b02      	cmp	r3, #2
 8001498:	d901      	bls.n	800149e <HAL_RCC_OscConfig+0x6fa>
          {
            return HAL_TIMEOUT;
 800149a:	2303      	movs	r3, #3
 800149c:	e00a      	b.n	80014b4 <HAL_RCC_OscConfig+0x710>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800149e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80014a2:	681b      	ldr	r3, [r3, #0]
 80014a4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80014a8:	2b00      	cmp	r3, #0
 80014aa:	d1ef      	bne.n	800148c <HAL_RCC_OscConfig+0x6e8>
 80014ac:	e001      	b.n	80014b2 <HAL_RCC_OscConfig+0x70e>
        }
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 80014ae:	2301      	movs	r3, #1
 80014b0:	e000      	b.n	80014b4 <HAL_RCC_OscConfig+0x710>
      }
    }
  }
  return HAL_OK;
 80014b2:	2300      	movs	r3, #0
}
 80014b4:	4618      	mov	r0, r3
 80014b6:	3734      	adds	r7, #52	; 0x34
 80014b8:	46bd      	mov	sp, r7
 80014ba:	bd90      	pop	{r4, r7, pc}

080014bc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK1 not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80014bc:	b580      	push	{r7, lr}
 80014be:	b084      	sub	sp, #16
 80014c0:	af00      	add	r7, sp, #0
 80014c2:	6078      	str	r0, [r7, #4]
 80014c4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80014c6:	687b      	ldr	r3, [r7, #4]
 80014c8:	2b00      	cmp	r3, #0
 80014ca:	d101      	bne.n	80014d0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80014cc:	2301      	movs	r3, #1
 80014ce:	e12d      	b.n	800172c <HAL_RCC_ClockConfig+0x270>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK4) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80014d0:	4b98      	ldr	r3, [pc, #608]	; (8001734 <HAL_RCC_ClockConfig+0x278>)
 80014d2:	681b      	ldr	r3, [r3, #0]
 80014d4:	f003 0307 	and.w	r3, r3, #7
 80014d8:	683a      	ldr	r2, [r7, #0]
 80014da:	429a      	cmp	r2, r3
 80014dc:	d91b      	bls.n	8001516 <HAL_RCC_ClockConfig+0x5a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80014de:	4b95      	ldr	r3, [pc, #596]	; (8001734 <HAL_RCC_ClockConfig+0x278>)
 80014e0:	681b      	ldr	r3, [r3, #0]
 80014e2:	f023 0207 	bic.w	r2, r3, #7
 80014e6:	4993      	ldr	r1, [pc, #588]	; (8001734 <HAL_RCC_ClockConfig+0x278>)
 80014e8:	683b      	ldr	r3, [r7, #0]
 80014ea:	4313      	orrs	r3, r2
 80014ec:	600b      	str	r3, [r1, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80014ee:	f7fe ffe1 	bl	80004b4 <HAL_GetTick>
 80014f2:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
       memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80014f4:	e008      	b.n	8001508 <HAL_RCC_ClockConfig+0x4c>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 80014f6:	f7fe ffdd 	bl	80004b4 <HAL_GetTick>
 80014fa:	4602      	mov	r2, r0
 80014fc:	68fb      	ldr	r3, [r7, #12]
 80014fe:	1ad3      	subs	r3, r2, r3
 8001500:	2b02      	cmp	r3, #2
 8001502:	d901      	bls.n	8001508 <HAL_RCC_ClockConfig+0x4c>
      {
        return HAL_TIMEOUT;
 8001504:	2303      	movs	r3, #3
 8001506:	e111      	b.n	800172c <HAL_RCC_ClockConfig+0x270>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001508:	4b8a      	ldr	r3, [pc, #552]	; (8001734 <HAL_RCC_ClockConfig+0x278>)
 800150a:	681b      	ldr	r3, [r3, #0]
 800150c:	f003 0307 	and.w	r3, r3, #7
 8001510:	683a      	ldr	r2, [r7, #0]
 8001512:	429a      	cmp	r2, r3
 8001514:	d1ef      	bne.n	80014f6 <HAL_RCC_ClockConfig+0x3a>
      }
    }
  }

  /*-------------------------- HCLK1 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001516:	687b      	ldr	r3, [r7, #4]
 8001518:	681b      	ldr	r3, [r3, #0]
 800151a:	f003 0302 	and.w	r3, r3, #2
 800151e:	2b00      	cmp	r3, #0
 8001520:	d016      	beq.n	8001550 <HAL_RCC_ClockConfig+0x94>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLKDivider));
    LL_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLKDivider);
 8001522:	687b      	ldr	r3, [r7, #4]
 8001524:	689b      	ldr	r3, [r3, #8]
 8001526:	4618      	mov	r0, r3
 8001528:	f7ff fafb 	bl	8000b22 <LL_RCC_SetAHBPrescaler>

    /* HCLK1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 800152c:	f7fe ffc2 	bl	80004b4 <HAL_GetTick>
 8001530:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 8001532:	e008      	b.n	8001546 <HAL_RCC_ClockConfig+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8001534:	f7fe ffbe 	bl	80004b4 <HAL_GetTick>
 8001538:	4602      	mov	r2, r0
 800153a:	68fb      	ldr	r3, [r7, #12]
 800153c:	1ad3      	subs	r3, r2, r3
 800153e:	2b02      	cmp	r3, #2
 8001540:	d901      	bls.n	8001546 <HAL_RCC_ClockConfig+0x8a>
      {
        return HAL_TIMEOUT;
 8001542:	2303      	movs	r3, #3
 8001544:	e0f2      	b.n	800172c <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 8001546:	f7ff fbd0 	bl	8000cea <LL_RCC_IsActiveFlag_HPRE>
 800154a:	4603      	mov	r3, r0
 800154c:	2b00      	cmp	r3, #0
 800154e:	d0f1      	beq.n	8001534 <HAL_RCC_ClockConfig+0x78>
      }
    }
  }

  /*-------------------------- HCLK2 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK2) == RCC_CLOCKTYPE_HCLK2)
 8001550:	687b      	ldr	r3, [r7, #4]
 8001552:	681b      	ldr	r3, [r3, #0]
 8001554:	f003 0320 	and.w	r3, r3, #32
 8001558:	2b00      	cmp	r3, #0
 800155a:	d016      	beq.n	800158a <HAL_RCC_ClockConfig+0xce>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK2Divider));
    LL_C2_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLK2Divider);
 800155c:	687b      	ldr	r3, [r7, #4]
 800155e:	695b      	ldr	r3, [r3, #20]
 8001560:	4618      	mov	r0, r3
 8001562:	f7ff faf2 	bl	8000b4a <LL_C2_RCC_SetAHBPrescaler>

    /* HCLK2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8001566:	f7fe ffa5 	bl	80004b4 <HAL_GetTick>
 800156a:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_C2HPRE() == 0U)
 800156c:	e008      	b.n	8001580 <HAL_RCC_ClockConfig+0xc4>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 800156e:	f7fe ffa1 	bl	80004b4 <HAL_GetTick>
 8001572:	4602      	mov	r2, r0
 8001574:	68fb      	ldr	r3, [r7, #12]
 8001576:	1ad3      	subs	r3, r2, r3
 8001578:	2b02      	cmp	r3, #2
 800157a:	d901      	bls.n	8001580 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_TIMEOUT;
 800157c:	2303      	movs	r3, #3
 800157e:	e0d5      	b.n	800172c <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_C2HPRE() == 0U)
 8001580:	f7ff fbc5 	bl	8000d0e <LL_RCC_IsActiveFlag_C2HPRE>
 8001584:	4603      	mov	r3, r0
 8001586:	2b00      	cmp	r3, #0
 8001588:	d0f1      	beq.n	800156e <HAL_RCC_ClockConfig+0xb2>
      }
    }
  }
  /*-------------------------- HCLK4 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK4) == RCC_CLOCKTYPE_HCLK4)
 800158a:	687b      	ldr	r3, [r7, #4]
 800158c:	681b      	ldr	r3, [r3, #0]
 800158e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001592:	2b00      	cmp	r3, #0
 8001594:	d016      	beq.n	80015c4 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK4Divider));
    LL_RCC_SetAHB4Prescaler(RCC_ClkInitStruct->AHBCLK4Divider);
 8001596:	687b      	ldr	r3, [r7, #4]
 8001598:	699b      	ldr	r3, [r3, #24]
 800159a:	4618      	mov	r0, r3
 800159c:	f7ff faeb 	bl	8000b76 <LL_RCC_SetAHB4Prescaler>

    /* AHB shared prescaler flag when value applied */
    tickstart = HAL_GetTick();
 80015a0:	f7fe ff88 	bl	80004b4 <HAL_GetTick>
 80015a4:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 80015a6:	e008      	b.n	80015ba <HAL_RCC_ClockConfig+0xfe>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 80015a8:	f7fe ff84 	bl	80004b4 <HAL_GetTick>
 80015ac:	4602      	mov	r2, r0
 80015ae:	68fb      	ldr	r3, [r7, #12]
 80015b0:	1ad3      	subs	r3, r2, r3
 80015b2:	2b02      	cmp	r3, #2
 80015b4:	d901      	bls.n	80015ba <HAL_RCC_ClockConfig+0xfe>
      {
        return HAL_TIMEOUT;
 80015b6:	2303      	movs	r3, #3
 80015b8:	e0b8      	b.n	800172c <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 80015ba:	f7ff fbbb 	bl	8000d34 <LL_RCC_IsActiveFlag_SHDHPRE>
 80015be:	4603      	mov	r3, r0
 80015c0:	2b00      	cmp	r3, #0
 80015c2:	d0f1      	beq.n	80015a8 <HAL_RCC_ClockConfig+0xec>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80015c4:	687b      	ldr	r3, [r7, #4]
 80015c6:	681b      	ldr	r3, [r3, #0]
 80015c8:	f003 0304 	and.w	r3, r3, #4
 80015cc:	2b00      	cmp	r3, #0
 80015ce:	d016      	beq.n	80015fe <HAL_RCC_ClockConfig+0x142>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB1CLKDivider));
    LL_RCC_SetAPB1Prescaler(RCC_ClkInitStruct->APB1CLKDivider);
 80015d0:	687b      	ldr	r3, [r7, #4]
 80015d2:	68db      	ldr	r3, [r3, #12]
 80015d4:	4618      	mov	r0, r3
 80015d6:	f7ff fae5 	bl	8000ba4 <LL_RCC_SetAPB1Prescaler>

    /* APB1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 80015da:	f7fe ff6b 	bl	80004b4 <HAL_GetTick>
 80015de:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 80015e0:	e008      	b.n	80015f4 <HAL_RCC_ClockConfig+0x138>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 80015e2:	f7fe ff67 	bl	80004b4 <HAL_GetTick>
 80015e6:	4602      	mov	r2, r0
 80015e8:	68fb      	ldr	r3, [r7, #12]
 80015ea:	1ad3      	subs	r3, r2, r3
 80015ec:	2b02      	cmp	r3, #2
 80015ee:	d901      	bls.n	80015f4 <HAL_RCC_ClockConfig+0x138>
      {
        return HAL_TIMEOUT;
 80015f0:	2303      	movs	r3, #3
 80015f2:	e09b      	b.n	800172c <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 80015f4:	f7ff fbb1 	bl	8000d5a <LL_RCC_IsActiveFlag_PPRE1>
 80015f8:	4603      	mov	r3, r0
 80015fa:	2b00      	cmp	r3, #0
 80015fc:	d0f1      	beq.n	80015e2 <HAL_RCC_ClockConfig+0x126>
      }
    }
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80015fe:	687b      	ldr	r3, [r7, #4]
 8001600:	681b      	ldr	r3, [r3, #0]
 8001602:	f003 0308 	and.w	r3, r3, #8
 8001606:	2b00      	cmp	r3, #0
 8001608:	d017      	beq.n	800163a <HAL_RCC_ClockConfig+0x17e>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB2CLKDivider));
    LL_RCC_SetAPB2Prescaler((RCC_ClkInitStruct->APB2CLKDivider) << 3U);
 800160a:	687b      	ldr	r3, [r7, #4]
 800160c:	691b      	ldr	r3, [r3, #16]
 800160e:	00db      	lsls	r3, r3, #3
 8001610:	4618      	mov	r0, r3
 8001612:	f7ff fadb 	bl	8000bcc <LL_RCC_SetAPB2Prescaler>

    /* APB2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8001616:	f7fe ff4d 	bl	80004b4 <HAL_GetTick>
 800161a:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 800161c:	e008      	b.n	8001630 <HAL_RCC_ClockConfig+0x174>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 800161e:	f7fe ff49 	bl	80004b4 <HAL_GetTick>
 8001622:	4602      	mov	r2, r0
 8001624:	68fb      	ldr	r3, [r7, #12]
 8001626:	1ad3      	subs	r3, r2, r3
 8001628:	2b02      	cmp	r3, #2
 800162a:	d901      	bls.n	8001630 <HAL_RCC_ClockConfig+0x174>
      {
        return HAL_TIMEOUT;
 800162c:	2303      	movs	r3, #3
 800162e:	e07d      	b.n	800172c <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 8001630:	f7ff fba5 	bl	8000d7e <LL_RCC_IsActiveFlag_PPRE2>
 8001634:	4603      	mov	r3, r0
 8001636:	2b00      	cmp	r3, #0
 8001638:	d0f1      	beq.n	800161e <HAL_RCC_ClockConfig+0x162>
      }
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800163a:	687b      	ldr	r3, [r7, #4]
 800163c:	681b      	ldr	r3, [r3, #0]
 800163e:	f003 0301 	and.w	r3, r3, #1
 8001642:	2b00      	cmp	r3, #0
 8001644:	d043      	beq.n	80016ce <HAL_RCC_ClockConfig+0x212>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001646:	687b      	ldr	r3, [r7, #4]
 8001648:	685b      	ldr	r3, [r3, #4]
 800164a:	2b02      	cmp	r3, #2
 800164c:	d106      	bne.n	800165c <HAL_RCC_ClockConfig+0x1a0>
    {
      /* Check the HSE ready flag */
      if (LL_RCC_HSE_IsReady() == 0U)
 800164e:	f7ff f87b 	bl	8000748 <LL_RCC_HSE_IsReady>
 8001652:	4603      	mov	r3, r0
 8001654:	2b00      	cmp	r3, #0
 8001656:	d11e      	bne.n	8001696 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8001658:	2301      	movs	r3, #1
 800165a:	e067      	b.n	800172c <HAL_RCC_ClockConfig+0x270>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800165c:	687b      	ldr	r3, [r7, #4]
 800165e:	685b      	ldr	r3, [r3, #4]
 8001660:	2b03      	cmp	r3, #3
 8001662:	d106      	bne.n	8001672 <HAL_RCC_ClockConfig+0x1b6>
    {
      /* Check the PLL ready flag */
      if (LL_RCC_PLL_IsReady() == 0U)
 8001664:	f7ff fafe 	bl	8000c64 <LL_RCC_PLL_IsReady>
 8001668:	4603      	mov	r3, r0
 800166a:	2b00      	cmp	r3, #0
 800166c:	d113      	bne.n	8001696 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 800166e:	2301      	movs	r3, #1
 8001670:	e05c      	b.n	800172c <HAL_RCC_ClockConfig+0x270>
      }
    }
    /* MSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8001672:	687b      	ldr	r3, [r7, #4]
 8001674:	685b      	ldr	r3, [r3, #4]
 8001676:	2b00      	cmp	r3, #0
 8001678:	d106      	bne.n	8001688 <HAL_RCC_ClockConfig+0x1cc>
    {
      /* Check the MSI ready flag */
      if (LL_RCC_MSI_IsReady() == 0U)
 800167a:	f7ff f9e3 	bl	8000a44 <LL_RCC_MSI_IsReady>
 800167e:	4603      	mov	r3, r0
 8001680:	2b00      	cmp	r3, #0
 8001682:	d108      	bne.n	8001696 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8001684:	2301      	movs	r3, #1
 8001686:	e051      	b.n	800172c <HAL_RCC_ClockConfig+0x270>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (LL_RCC_HSI_IsReady() == 0U)
 8001688:	f7ff f88e 	bl	80007a8 <LL_RCC_HSI_IsReady>
 800168c:	4603      	mov	r3, r0
 800168e:	2b00      	cmp	r3, #0
 8001690:	d101      	bne.n	8001696 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8001692:	2301      	movs	r3, #1
 8001694:	e04a      	b.n	800172c <HAL_RCC_ClockConfig+0x270>
      }

    }

    /* apply system clock switch */
    LL_RCC_SetSysClkSource(RCC_ClkInitStruct->SYSCLKSource);
 8001696:	687b      	ldr	r3, [r7, #4]
 8001698:	685b      	ldr	r3, [r3, #4]
 800169a:	4618      	mov	r0, r3
 800169c:	f7ff fa21 	bl	8000ae2 <LL_RCC_SetSysClkSource>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80016a0:	f7fe ff08 	bl	80004b4 <HAL_GetTick>
 80016a4:	60f8      	str	r0, [r7, #12]

    /* check system clock source switch status */
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80016a6:	e00a      	b.n	80016be <HAL_RCC_ClockConfig+0x202>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80016a8:	f7fe ff04 	bl	80004b4 <HAL_GetTick>
 80016ac:	4602      	mov	r2, r0
 80016ae:	68fb      	ldr	r3, [r7, #12]
 80016b0:	1ad3      	subs	r3, r2, r3
 80016b2:	f241 3288 	movw	r2, #5000	; 0x1388
 80016b6:	4293      	cmp	r3, r2
 80016b8:	d901      	bls.n	80016be <HAL_RCC_ClockConfig+0x202>
      {
        return HAL_TIMEOUT;
 80016ba:	2303      	movs	r3, #3
 80016bc:	e036      	b.n	800172c <HAL_RCC_ClockConfig+0x270>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80016be:	f7ff fa24 	bl	8000b0a <LL_RCC_GetSysClkSource>
 80016c2:	4602      	mov	r2, r0
 80016c4:	687b      	ldr	r3, [r7, #4]
 80016c6:	685b      	ldr	r3, [r3, #4]
 80016c8:	009b      	lsls	r3, r3, #2
 80016ca:	429a      	cmp	r2, r3
 80016cc:	d1ec      	bne.n	80016a8 <HAL_RCC_ClockConfig+0x1ec>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80016ce:	4b19      	ldr	r3, [pc, #100]	; (8001734 <HAL_RCC_ClockConfig+0x278>)
 80016d0:	681b      	ldr	r3, [r3, #0]
 80016d2:	f003 0307 	and.w	r3, r3, #7
 80016d6:	683a      	ldr	r2, [r7, #0]
 80016d8:	429a      	cmp	r2, r3
 80016da:	d21b      	bcs.n	8001714 <HAL_RCC_ClockConfig+0x258>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80016dc:	4b15      	ldr	r3, [pc, #84]	; (8001734 <HAL_RCC_ClockConfig+0x278>)
 80016de:	681b      	ldr	r3, [r3, #0]
 80016e0:	f023 0207 	bic.w	r2, r3, #7
 80016e4:	4913      	ldr	r1, [pc, #76]	; (8001734 <HAL_RCC_ClockConfig+0x278>)
 80016e6:	683b      	ldr	r3, [r7, #0]
 80016e8:	4313      	orrs	r3, r2
 80016ea:	600b      	str	r3, [r1, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80016ec:	f7fe fee2 	bl	80004b4 <HAL_GetTick>
 80016f0:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80016f2:	e008      	b.n	8001706 <HAL_RCC_ClockConfig+0x24a>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 80016f4:	f7fe fede 	bl	80004b4 <HAL_GetTick>
 80016f8:	4602      	mov	r2, r0
 80016fa:	68fb      	ldr	r3, [r7, #12]
 80016fc:	1ad3      	subs	r3, r2, r3
 80016fe:	2b02      	cmp	r3, #2
 8001700:	d901      	bls.n	8001706 <HAL_RCC_ClockConfig+0x24a>
      {
        return HAL_TIMEOUT;
 8001702:	2303      	movs	r3, #3
 8001704:	e012      	b.n	800172c <HAL_RCC_ClockConfig+0x270>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001706:	4b0b      	ldr	r3, [pc, #44]	; (8001734 <HAL_RCC_ClockConfig+0x278>)
 8001708:	681b      	ldr	r3, [r3, #0]
 800170a:	f003 0307 	and.w	r3, r3, #7
 800170e:	683a      	ldr	r2, [r7, #0]
 8001710:	429a      	cmp	r2, r3
 8001712:	d1ef      	bne.n	80016f4 <HAL_RCC_ClockConfig+0x238>
  }

  /*---------------------------------------------------------------------------*/

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetHCLKFreq();
 8001714:	f000 f880 	bl	8001818 <HAL_RCC_GetHCLKFreq>
 8001718:	4603      	mov	r3, r0
 800171a:	4a07      	ldr	r2, [pc, #28]	; (8001738 <HAL_RCC_ClockConfig+0x27c>)
 800171c:	6013      	str	r3, [r2, #0]
  
  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(HAL_GetTickPrio());
 800171e:	f7fe fed5 	bl	80004cc <HAL_GetTickPrio>
 8001722:	4603      	mov	r3, r0
 8001724:	4618      	mov	r0, r3
 8001726:	f7fe fe77 	bl	8000418 <HAL_InitTick>
 800172a:	4603      	mov	r3, r0
}
 800172c:	4618      	mov	r0, r3
 800172e:	3710      	adds	r7, #16
 8001730:	46bd      	mov	sp, r7
 8001732:	bd80      	pop	{r7, pc}
 8001734:	58004000 	.word	0x58004000
 8001738:	20000008 	.word	0x20000008

0800173c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800173c:	b590      	push	{r4, r7, lr}
 800173e:	b085      	sub	sp, #20
 8001740:	af00      	add	r7, sp, #0
  uint32_t pllsource;
  uint32_t sysclockfreq, pllinputfreq;
  const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001742:	f7ff f9e2 	bl	8000b0a <LL_RCC_GetSysClkSource>
 8001746:	6078      	str	r0, [r7, #4]

  if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_MSI)
 8001748:	687b      	ldr	r3, [r7, #4]
 800174a:	2b00      	cmp	r3, #0
 800174c:	d10a      	bne.n	8001764 <HAL_RCC_GetSysClockFreq+0x28>
  {
    /* Retrieve MSI frequency range in HZ*/
    /* MSI used as system clock source */
    sysclockfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_GetRange());
 800174e:	f7ff f99e 	bl	8000a8e <LL_RCC_MSI_GetRange>
 8001752:	4603      	mov	r3, r0
 8001754:	091b      	lsrs	r3, r3, #4
 8001756:	f003 030f 	and.w	r3, r3, #15
 800175a:	4a2b      	ldr	r2, [pc, #172]	; (8001808 <HAL_RCC_GetSysClockFreq+0xcc>)
 800175c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001760:	60fb      	str	r3, [r7, #12]
 8001762:	e04b      	b.n	80017fc <HAL_RCC_GetSysClockFreq+0xc0>
  }
  else if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001764:	687b      	ldr	r3, [r7, #4]
 8001766:	2b04      	cmp	r3, #4
 8001768:	d102      	bne.n	8001770 <HAL_RCC_GetSysClockFreq+0x34>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 800176a:	4b28      	ldr	r3, [pc, #160]	; (800180c <HAL_RCC_GetSysClockFreq+0xd0>)
 800176c:	60fb      	str	r3, [r7, #12]
 800176e:	e045      	b.n	80017fc <HAL_RCC_GetSysClockFreq+0xc0>
  }
  else if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001770:	687b      	ldr	r3, [r7, #4]
 8001772:	2b08      	cmp	r3, #8
 8001774:	d10a      	bne.n	800178c <HAL_RCC_GetSysClockFreq+0x50>
  {
    /* HSE used as system clock source */
    if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 8001776:	f7fe ffb7 	bl	80006e8 <LL_RCC_HSE_IsEnabledDiv2>
 800177a:	4603      	mov	r3, r0
 800177c:	2b01      	cmp	r3, #1
 800177e:	d102      	bne.n	8001786 <HAL_RCC_GetSysClockFreq+0x4a>
    {
      sysclockfreq = HSE_VALUE / 2U;
 8001780:	4b23      	ldr	r3, [pc, #140]	; (8001810 <HAL_RCC_GetSysClockFreq+0xd4>)
 8001782:	60fb      	str	r3, [r7, #12]
 8001784:	e03a      	b.n	80017fc <HAL_RCC_GetSysClockFreq+0xc0>
    }
    else
    {
      sysclockfreq = HSE_VALUE;
 8001786:	4b23      	ldr	r3, [pc, #140]	; (8001814 <HAL_RCC_GetSysClockFreq+0xd8>)
 8001788:	60fb      	str	r3, [r7, #12]
 800178a:	e037      	b.n	80017fc <HAL_RCC_GetSysClockFreq+0xc0>
    }
  }
  else
  {
    /* PLL used as system clock  source */
    pllsource = LL_RCC_PLL_GetMainSource();
 800178c:	f7ff faa1 	bl	8000cd2 <LL_RCC_PLL_GetMainSource>
 8001790:	6038      	str	r0, [r7, #0]
    switch (pllsource)
 8001792:	683b      	ldr	r3, [r7, #0]
 8001794:	2b02      	cmp	r3, #2
 8001796:	d003      	beq.n	80017a0 <HAL_RCC_GetSysClockFreq+0x64>
 8001798:	683b      	ldr	r3, [r7, #0]
 800179a:	2b03      	cmp	r3, #3
 800179c:	d003      	beq.n	80017a6 <HAL_RCC_GetSysClockFreq+0x6a>
 800179e:	e00d      	b.n	80017bc <HAL_RCC_GetSysClockFreq+0x80>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
        pllinputfreq = HSI_VALUE;
 80017a0:	4b1a      	ldr	r3, [pc, #104]	; (800180c <HAL_RCC_GetSysClockFreq+0xd0>)
 80017a2:	60bb      	str	r3, [r7, #8]
        break;
 80017a4:	e015      	b.n	80017d2 <HAL_RCC_GetSysClockFreq+0x96>
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 80017a6:	f7fe ff9f 	bl	80006e8 <LL_RCC_HSE_IsEnabledDiv2>
 80017aa:	4603      	mov	r3, r0
 80017ac:	2b01      	cmp	r3, #1
 80017ae:	d102      	bne.n	80017b6 <HAL_RCC_GetSysClockFreq+0x7a>
        {
          pllinputfreq = HSE_VALUE / 2U;
 80017b0:	4b17      	ldr	r3, [pc, #92]	; (8001810 <HAL_RCC_GetSysClockFreq+0xd4>)
 80017b2:	60bb      	str	r3, [r7, #8]
        }
        else
        {
          pllinputfreq = HSE_VALUE;
        }
        break;
 80017b4:	e00d      	b.n	80017d2 <HAL_RCC_GetSysClockFreq+0x96>
          pllinputfreq = HSE_VALUE;
 80017b6:	4b17      	ldr	r3, [pc, #92]	; (8001814 <HAL_RCC_GetSysClockFreq+0xd8>)
 80017b8:	60bb      	str	r3, [r7, #8]
        break;
 80017ba:	e00a      	b.n	80017d2 <HAL_RCC_GetSysClockFreq+0x96>
      case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      default:
        pllinputfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_GetRange());
 80017bc:	f7ff f967 	bl	8000a8e <LL_RCC_MSI_GetRange>
 80017c0:	4603      	mov	r3, r0
 80017c2:	091b      	lsrs	r3, r3, #4
 80017c4:	f003 030f 	and.w	r3, r3, #15
 80017c8:	4a0f      	ldr	r2, [pc, #60]	; (8001808 <HAL_RCC_GetSysClockFreq+0xcc>)
 80017ca:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80017ce:	60bb      	str	r3, [r7, #8]
        break;
 80017d0:	bf00      	nop
    }
    sysclockfreq = __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(), LL_RCC_PLL_GetN(), LL_RCC_PLL_GetR());
 80017d2:	f7ff fa59 	bl	8000c88 <LL_RCC_PLL_GetN>
 80017d6:	4602      	mov	r2, r0
 80017d8:	68bb      	ldr	r3, [r7, #8]
 80017da:	fb03 f402 	mul.w	r4, r3, r2
 80017de:	f7ff fa6c 	bl	8000cba <LL_RCC_PLL_GetDivider>
 80017e2:	4603      	mov	r3, r0
 80017e4:	091b      	lsrs	r3, r3, #4
 80017e6:	3301      	adds	r3, #1
 80017e8:	fbb4 f4f3 	udiv	r4, r4, r3
 80017ec:	f7ff fa59 	bl	8000ca2 <LL_RCC_PLL_GetR>
 80017f0:	4603      	mov	r3, r0
 80017f2:	0f5b      	lsrs	r3, r3, #29
 80017f4:	3301      	adds	r3, #1
 80017f6:	fbb4 f3f3 	udiv	r3, r4, r3
 80017fa:	60fb      	str	r3, [r7, #12]
  }

  return sysclockfreq;
 80017fc:	68fb      	ldr	r3, [r7, #12]
}
 80017fe:	4618      	mov	r0, r3
 8001800:	3714      	adds	r7, #20
 8001802:	46bd      	mov	sp, r7
 8001804:	bd90      	pop	{r4, r7, pc}
 8001806:	bf00      	nop
 8001808:	08001a8c 	.word	0x08001a8c
 800180c:	00f42400 	.word	0x00f42400
 8001810:	003d0900 	.word	0x003d0900
 8001814:	007a1200 	.word	0x007a1200

08001818 <HAL_RCC_GetHCLKFreq>:
/**
  * @brief  Return the HCLK frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001818:	b598      	push	{r3, r4, r7, lr}
 800181a:	af00      	add	r7, sp, #0
  /* Get SysClock and Compute HCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_HCLK1_FREQ(HAL_RCC_GetSysClockFreq(), LL_RCC_GetAHBPrescaler())));
 800181c:	f7ff ff8e 	bl	800173c <HAL_RCC_GetSysClockFreq>
 8001820:	4604      	mov	r4, r0
 8001822:	f7ff f9e7 	bl	8000bf4 <LL_RCC_GetAHBPrescaler>
 8001826:	4603      	mov	r3, r0
 8001828:	091b      	lsrs	r3, r3, #4
 800182a:	f003 030f 	and.w	r3, r3, #15
 800182e:	4a03      	ldr	r2, [pc, #12]	; (800183c <HAL_RCC_GetHCLKFreq+0x24>)
 8001830:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001834:	fbb4 f3f3 	udiv	r3, r4, r3
}
 8001838:	4618      	mov	r0, r3
 800183a:	bd98      	pop	{r3, r4, r7, pc}
 800183c:	08001a4c 	.word	0x08001a4c

08001840 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  MSI_Range  MSI range value from @ref RCC_MSIRANGE_0 to @ref RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t MSI_Range)
{
 8001840:	b590      	push	{r4, r7, lr}
 8001842:	b085      	sub	sp, #20
 8001844:	af00      	add	r7, sp, #0
 8001846:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RCC_MSI_CLOCK_RANGE(MSI_Range));

  /* MSI frequency range in Hz */
  if (MSI_Range > RCC_MSIRANGE_11)
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	2bb0      	cmp	r3, #176	; 0xb0
 800184c:	d903      	bls.n	8001856 <RCC_SetFlashLatencyFromMSIRange+0x16>
  {
    msifreq = __LL_RCC_CALC_MSI_FREQ(RCC_MSIRANGE_11);
 800184e:	4b15      	ldr	r3, [pc, #84]	; (80018a4 <RCC_SetFlashLatencyFromMSIRange+0x64>)
 8001850:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001852:	60fb      	str	r3, [r7, #12]
 8001854:	e007      	b.n	8001866 <RCC_SetFlashLatencyFromMSIRange+0x26>
  }
  else
  {
    msifreq = __LL_RCC_CALC_MSI_FREQ(MSI_Range);
 8001856:	687b      	ldr	r3, [r7, #4]
 8001858:	091b      	lsrs	r3, r3, #4
 800185a:	f003 030f 	and.w	r3, r3, #15
 800185e:	4a11      	ldr	r2, [pc, #68]	; (80018a4 <RCC_SetFlashLatencyFromMSIRange+0x64>)
 8001860:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001864:	60fb      	str	r3, [r7, #12]
  }

  flash_clksrcfreq = __LL_RCC_CALC_HCLK4_FREQ(msifreq, LL_RCC_GetAHB4Prescaler());
 8001866:	f7ff f9d1 	bl	8000c0c <LL_RCC_GetAHB4Prescaler>
 800186a:	4603      	mov	r3, r0
 800186c:	091b      	lsrs	r3, r3, #4
 800186e:	f003 030f 	and.w	r3, r3, #15
 8001872:	4a0d      	ldr	r2, [pc, #52]	; (80018a8 <RCC_SetFlashLatencyFromMSIRange+0x68>)
 8001874:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001878:	68fa      	ldr	r2, [r7, #12]
 800187a:	fbb2 f3f3 	udiv	r3, r2, r3
 800187e:	60bb      	str	r3, [r7, #8]

#if defined(PWR_CR1_VOS)
  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), HAL_PWREx_GetVoltageRange());
 8001880:	68bb      	ldr	r3, [r7, #8]
 8001882:	4a0a      	ldr	r2, [pc, #40]	; (80018ac <RCC_SetFlashLatencyFromMSIRange+0x6c>)
 8001884:	fba2 2303 	umull	r2, r3, r2, r3
 8001888:	0c9c      	lsrs	r4, r3, #18
 800188a:	f7fe ff1f 	bl	80006cc <HAL_PWREx_GetVoltageRange>
 800188e:	4603      	mov	r3, r0
 8001890:	4619      	mov	r1, r3
 8001892:	4620      	mov	r0, r4
 8001894:	f000 f80c 	bl	80018b0 <RCC_SetFlashLatency>
 8001898:	4603      	mov	r3, r0
#else
  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), PWR_REGULATOR_VOLTAGE_SCALE1);
#endif
}
 800189a:	4618      	mov	r0, r3
 800189c:	3714      	adds	r7, #20
 800189e:	46bd      	mov	sp, r7
 80018a0:	bd90      	pop	{r4, r7, pc}
 80018a2:	bf00      	nop
 80018a4:	08001a8c 	.word	0x08001a8c
 80018a8:	08001a4c 	.word	0x08001a4c
 80018ac:	431bde83 	.word	0x431bde83

080018b0 <RCC_SetFlashLatency>:
  * @param  Flash_ClkSrcFreq  Flash Clock Source (in MHz)
  * @param  VCORE_Voltage     Current Vcore voltage (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2)
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatency(uint32_t Flash_ClkSrcFreq, uint32_t VCORE_Voltage)
{
 80018b0:	b590      	push	{r4, r7, lr}
 80018b2:	b093      	sub	sp, #76	; 0x4c
 80018b4:	af00      	add	r7, sp, #0
 80018b6:	6078      	str	r0, [r7, #4]
 80018b8:	6039      	str	r1, [r7, #0]
  /* Flash Clock source (HCLK4) range in MHz with a VCORE is range1 */
  const uint32_t FLASH_CLK_SRC_RANGE_VOS1[] = {18UL, 36UL, 54UL, 64UL};
 80018ba:	4b39      	ldr	r3, [pc, #228]	; (80019a0 <RCC_SetFlashLatency+0xf0>)
 80018bc:	f107 0428 	add.w	r4, r7, #40	; 0x28
 80018c0:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80018c2:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(PWR_CR1_VOS)
  /* Flash Clock source (HCLK4) range in MHz with a VCORE is range2 */
  const uint32_t FLASH_CLK_SRC_RANGE_VOS2[] = {6UL, 12UL, 16UL};
 80018c6:	4a37      	ldr	r2, [pc, #220]	; (80019a4 <RCC_SetFlashLatency+0xf4>)
 80018c8:	f107 031c 	add.w	r3, r7, #28
 80018cc:	ca07      	ldmia	r2, {r0, r1, r2}
 80018ce:	e883 0007 	stmia.w	r3, {r0, r1, r2}
#endif
  /* Flash Latency range */
  const uint32_t FLASH_LATENCY_RANGE[] = {FLASH_LATENCY_0, FLASH_LATENCY_1, FLASH_LATENCY_2, FLASH_LATENCY_3};
 80018d2:	4b35      	ldr	r3, [pc, #212]	; (80019a8 <RCC_SetFlashLatency+0xf8>)
 80018d4:	f107 040c 	add.w	r4, r7, #12
 80018d8:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80018da:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  uint32_t latency   = FLASH_LATENCY_0;  /* default value 0WS */
 80018de:	2300      	movs	r3, #0
 80018e0:	647b      	str	r3, [r7, #68]	; 0x44
  uint32_t tickstart;

#if defined(PWR_CR1_VOS)
  if (VCORE_Voltage == PWR_REGULATOR_VOLTAGE_SCALE1)
 80018e2:	683b      	ldr	r3, [r7, #0]
 80018e4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80018e8:	d11c      	bne.n	8001924 <RCC_SetFlashLatency+0x74>
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 80018ea:	2300      	movs	r3, #0
 80018ec:	643b      	str	r3, [r7, #64]	; 0x40
 80018ee:	e015      	b.n	800191c <RCC_SetFlashLatency+0x6c>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS1[index])
 80018f0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80018f2:	009b      	lsls	r3, r3, #2
 80018f4:	f107 0248 	add.w	r2, r7, #72	; 0x48
 80018f8:	4413      	add	r3, r2
 80018fa:	f853 3c20 	ldr.w	r3, [r3, #-32]
 80018fe:	687a      	ldr	r2, [r7, #4]
 8001900:	429a      	cmp	r2, r3
 8001902:	d808      	bhi.n	8001916 <RCC_SetFlashLatency+0x66>
      {
        latency = FLASH_LATENCY_RANGE[index];
 8001904:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001906:	009b      	lsls	r3, r3, #2
 8001908:	f107 0248 	add.w	r2, r7, #72	; 0x48
 800190c:	4413      	add	r3, r2
 800190e:	f853 3c3c 	ldr.w	r3, [r3, #-60]
 8001912:	647b      	str	r3, [r7, #68]	; 0x44
        break;
 8001914:	e022      	b.n	800195c <RCC_SetFlashLatency+0xac>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 8001916:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001918:	3301      	adds	r3, #1
 800191a:	643b      	str	r3, [r7, #64]	; 0x40
 800191c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800191e:	2b03      	cmp	r3, #3
 8001920:	d9e6      	bls.n	80018f0 <RCC_SetFlashLatency+0x40>
 8001922:	e01b      	b.n	800195c <RCC_SetFlashLatency+0xac>
      }
    }
  }
  else  /* PWR_REGULATOR_VOLTAGE_SCALE2 */
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 8001924:	2300      	movs	r3, #0
 8001926:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001928:	e015      	b.n	8001956 <RCC_SetFlashLatency+0xa6>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS2[index])
 800192a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800192c:	009b      	lsls	r3, r3, #2
 800192e:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8001932:	4413      	add	r3, r2
 8001934:	f853 3c2c 	ldr.w	r3, [r3, #-44]
 8001938:	687a      	ldr	r2, [r7, #4]
 800193a:	429a      	cmp	r2, r3
 800193c:	d808      	bhi.n	8001950 <RCC_SetFlashLatency+0xa0>
      {
        latency = FLASH_LATENCY_RANGE[index];
 800193e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001940:	009b      	lsls	r3, r3, #2
 8001942:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8001946:	4413      	add	r3, r2
 8001948:	f853 3c3c 	ldr.w	r3, [r3, #-60]
 800194c:	647b      	str	r3, [r7, #68]	; 0x44
        break;
 800194e:	e005      	b.n	800195c <RCC_SetFlashLatency+0xac>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 8001950:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001952:	3301      	adds	r3, #1
 8001954:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001956:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001958:	2b02      	cmp	r3, #2
 800195a:	d9e6      	bls.n	800192a <RCC_SetFlashLatency+0x7a>
      break;
    }
  }
#endif

  __HAL_FLASH_SET_LATENCY(latency);
 800195c:	4b13      	ldr	r3, [pc, #76]	; (80019ac <RCC_SetFlashLatency+0xfc>)
 800195e:	681b      	ldr	r3, [r3, #0]
 8001960:	f023 0207 	bic.w	r2, r3, #7
 8001964:	4911      	ldr	r1, [pc, #68]	; (80019ac <RCC_SetFlashLatency+0xfc>)
 8001966:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001968:	4313      	orrs	r3, r2
 800196a:	600b      	str	r3, [r1, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 800196c:	f7fe fda2 	bl	80004b4 <HAL_GetTick>
 8001970:	63b8      	str	r0, [r7, #56]	; 0x38

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  while (__HAL_FLASH_GET_LATENCY() != latency)
 8001972:	e008      	b.n	8001986 <RCC_SetFlashLatency+0xd6>
  {
    if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8001974:	f7fe fd9e 	bl	80004b4 <HAL_GetTick>
 8001978:	4602      	mov	r2, r0
 800197a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800197c:	1ad3      	subs	r3, r2, r3
 800197e:	2b02      	cmp	r3, #2
 8001980:	d901      	bls.n	8001986 <RCC_SetFlashLatency+0xd6>
    {
      return HAL_TIMEOUT;
 8001982:	2303      	movs	r3, #3
 8001984:	e007      	b.n	8001996 <RCC_SetFlashLatency+0xe6>
  while (__HAL_FLASH_GET_LATENCY() != latency)
 8001986:	4b09      	ldr	r3, [pc, #36]	; (80019ac <RCC_SetFlashLatency+0xfc>)
 8001988:	681b      	ldr	r3, [r3, #0]
 800198a:	f003 0307 	and.w	r3, r3, #7
 800198e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8001990:	429a      	cmp	r2, r3
 8001992:	d1ef      	bne.n	8001974 <RCC_SetFlashLatency+0xc4>
    }
  }
  return HAL_OK;
 8001994:	2300      	movs	r3, #0
}
 8001996:	4618      	mov	r0, r3
 8001998:	374c      	adds	r7, #76	; 0x4c
 800199a:	46bd      	mov	sp, r7
 800199c:	bd90      	pop	{r4, r7, pc}
 800199e:	bf00      	nop
 80019a0:	08001a20 	.word	0x08001a20
 80019a4:	08001a30 	.word	0x08001a30
 80019a8:	08001a3c 	.word	0x08001a3c
 80019ac:	58004000 	.word	0x58004000

080019b0 <__libc_init_array>:
 80019b0:	b570      	push	{r4, r5, r6, lr}
 80019b2:	4d0d      	ldr	r5, [pc, #52]	; (80019e8 <__libc_init_array+0x38>)
 80019b4:	4c0d      	ldr	r4, [pc, #52]	; (80019ec <__libc_init_array+0x3c>)
 80019b6:	1b64      	subs	r4, r4, r5
 80019b8:	10a4      	asrs	r4, r4, #2
 80019ba:	2600      	movs	r6, #0
 80019bc:	42a6      	cmp	r6, r4
 80019be:	d109      	bne.n	80019d4 <__libc_init_array+0x24>
 80019c0:	4d0b      	ldr	r5, [pc, #44]	; (80019f0 <__libc_init_array+0x40>)
 80019c2:	4c0c      	ldr	r4, [pc, #48]	; (80019f4 <__libc_init_array+0x44>)
 80019c4:	f000 f820 	bl	8001a08 <_init>
 80019c8:	1b64      	subs	r4, r4, r5
 80019ca:	10a4      	asrs	r4, r4, #2
 80019cc:	2600      	movs	r6, #0
 80019ce:	42a6      	cmp	r6, r4
 80019d0:	d105      	bne.n	80019de <__libc_init_array+0x2e>
 80019d2:	bd70      	pop	{r4, r5, r6, pc}
 80019d4:	f855 3b04 	ldr.w	r3, [r5], #4
 80019d8:	4798      	blx	r3
 80019da:	3601      	adds	r6, #1
 80019dc:	e7ee      	b.n	80019bc <__libc_init_array+0xc>
 80019de:	f855 3b04 	ldr.w	r3, [r5], #4
 80019e2:	4798      	blx	r3
 80019e4:	3601      	adds	r6, #1
 80019e6:	e7f2      	b.n	80019ce <__libc_init_array+0x1e>
 80019e8:	08001acc 	.word	0x08001acc
 80019ec:	08001acc 	.word	0x08001acc
 80019f0:	08001acc 	.word	0x08001acc
 80019f4:	08001ad0 	.word	0x08001ad0

080019f8 <memset>:
 80019f8:	4402      	add	r2, r0
 80019fa:	4603      	mov	r3, r0
 80019fc:	4293      	cmp	r3, r2
 80019fe:	d100      	bne.n	8001a02 <memset+0xa>
 8001a00:	4770      	bx	lr
 8001a02:	f803 1b01 	strb.w	r1, [r3], #1
 8001a06:	e7f9      	b.n	80019fc <memset+0x4>

08001a08 <_init>:
 8001a08:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001a0a:	bf00      	nop
 8001a0c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001a0e:	bc08      	pop	{r3}
 8001a10:	469e      	mov	lr, r3
 8001a12:	4770      	bx	lr

08001a14 <_fini>:
 8001a14:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001a16:	bf00      	nop
 8001a18:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001a1a:	bc08      	pop	{r3}
 8001a1c:	469e      	mov	lr, r3
 8001a1e:	4770      	bx	lr
