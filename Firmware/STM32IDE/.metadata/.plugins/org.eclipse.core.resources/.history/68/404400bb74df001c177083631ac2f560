/*
 * myApp.c
 *
 *  Created on: May 29, 2022
 *      Author: jacks
 */

#include "main.h"
#include "myApp.h"
#include <time.h>

extern RTC_HandleTypeDef hrtc;  //Get the handle from main

//Variable
volatile int16_t superCapmV;
volatile int16_t solarmV;
volatile int16_t tempC;

//functions
uint32_t getUnix() {
	RTC_TimeTypeDef sTime;
	RTC_DateTypeDef sDate;
	struct tm tim;
	HAL_RTC_GetTime(&hrtc, &sTime, RTC_FORMAT_BIN);
	HAL_RTC_GetDate(&hrtc, &sDate, RTC_FORMAT_BIN);
	tim.tm_year = sDate.Year + 100; //years since 1900
	tim.tm_mon = sDate.Month - 1;
	tim.tm_mday = sDate.Date;
	tim.tm_hour = sTime.Hours;
	tim.tm_min = sTime.Minutes;
	tim.tm_sec = sTime.Seconds;
	return mktime(&tim);
}

void startADC() {
	HAL_ADCEx_Calibration_Start(&hadc, ADC_SINGLE_ENDED);
	HAL_ADCEx_EnableVREFINT();
	HAL_ADCEx_EnableVREFINTTempSensor();
	HAL_ADC_Start_DMA(&hadc, &ADC_raw, adc_Channels);
	ADC_state = ADC_RUNNING;
}

enum ADC_State_enum getADCState() {
	return ADC_state;
}

void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc) {
	//SCAN Forward from CHSEL0 to CHSEL18
	//solarmV = ADC_raw[0];

	superCapmV = VREF_CAL_mV * (*VREFINT_CAL_ADDR) / ADC_raw[0];

	tempC = (((TS_CAL2_TEMP - TS_CAL1_TEMP ) * (ADC_raw[1] - *TS_CAL1_CAL_ADDR)) / (*TS_CAL2_CAL_ADDR - *TS_CAL1_CAL_ADDR)) + TS_CAL1_TEMP;

	HAL_ADCEx_DisableVREFINT();
	HAL_ADCEx_DisableVREFINTTempSensor();
	ADC_state = ADC_IDLE;
}

bool vBATOK() {
	return HAL_GPIO_ReadPin(VBAT_OK_PIN_GPIO_Port, VBAT_OK_PIN_Pin);
}
